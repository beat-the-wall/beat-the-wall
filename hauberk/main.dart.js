// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.2.0-edge.bd6e14281d3337c8109c8ebf6e725562bf44a4b6.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo = reflectionInfo + typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
    H = {JS_CONST: function JS_CONST(t0) {
      this.code = t0;
    },
      SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        if (_endOrLength != null) {
          if (_endOrLength < 0)
            H.throwExpression(P.RangeError$range(_endOrLength, 0, null, "end", null));
          if (_start > _endOrLength)
            H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
        }
        return new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
      },
      MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
        H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
        if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
          return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
        return new H.MappedIterable(iterable, $function, [$S, $T]);
      },
      TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
        H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
        if (takeCount < 0)
          H.throwExpression(P.RangeError$range(takeCount, 0, null, "takeCount", null));
        if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
          return new H.EfficientLengthTakeIterable(iterable, takeCount, [$E]);
        return new H.TakeIterable(iterable, takeCount, [$E]);
      },
      SkipIterable_SkipIterable: function(iterable, count, $E) {
        H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
        if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable) {
          if (count < 0)
            H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
          return new H.EfficientLengthSkipIterable(iterable, count, [$E]);
        }
        if (count < 0)
          H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
        return new H.SkipIterable(iterable, count, [$E]);
      },
      IterableElementError_noElement: function() {
        return new P.StateError("No element");
      },
      IterableElementError_tooMany: function() {
        return new P.StateError("Too many elements");
      },
      IterableElementError_tooFew: function() {
        return new P.StateError("Too few elements");
      },
      Sort_sort: function(a, compare, $E) {
        var t1;
        H.assertSubtype(a, "$isList", [$E], "$asList");
        H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
        t1 = J.get$length$asx(a);
        if (typeof t1 !== "number")
          return t1.$sub();
        H.Sort__doSort(a, 0, t1 - 1, compare, $E);
      },
      Sort__doSort: function(a, left, right, compare, $E) {
        H.assertSubtype(a, "$isList", [$E], "$asList");
        H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
        if (right - left <= 32)
          H.Sort__insertionSort(a, left, right, compare, $E);
        else
          H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
      },
      Sort__insertionSort: function(a, left, right, compare, $E) {
        var i, t1, el, j, j0;
        H.assertSubtype(a, "$isList", [$E], "$asList");
        H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
        for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
          el = t1.$index(a, i);
          j = i;
          while (true) {
            if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
              break;
            j0 = j - 1;
            t1.$indexSet(a, j, t1.$index(a, j0));
            j = j0;
          }
          t1.$indexSet(a, j, el);
        }
      },
      Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
        var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2, t2;
        H.assertSubtype(a, "$isList", [$E], "$asList");
        H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
        sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
        index1 = left + sixth;
        index5 = right - sixth;
        index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
        index2 = index3 - sixth;
        index4 = index3 + sixth;
        t1 = J.getInterceptor$asx(a);
        el1 = t1.$index(a, index1);
        el2 = t1.$index(a, index2);
        el3 = t1.$index(a, index3);
        el4 = t1.$index(a, index4);
        el5 = t1.$index(a, index5);
        if (J.$gt$n(compare.call$2(el1, el2), 0)) {
          t0 = el2;
          el2 = el1;
          el1 = t0;
        }
        if (J.$gt$n(compare.call$2(el4, el5), 0)) {
          t0 = el5;
          el5 = el4;
          el4 = t0;
        }
        if (J.$gt$n(compare.call$2(el1, el3), 0)) {
          t0 = el3;
          el3 = el1;
          el1 = t0;
        }
        if (J.$gt$n(compare.call$2(el2, el3), 0)) {
          t0 = el3;
          el3 = el2;
          el2 = t0;
        }
        if (J.$gt$n(compare.call$2(el1, el4), 0)) {
          t0 = el4;
          el4 = el1;
          el1 = t0;
        }
        if (J.$gt$n(compare.call$2(el3, el4), 0)) {
          t0 = el4;
          el4 = el3;
          el3 = t0;
        }
        if (J.$gt$n(compare.call$2(el2, el5), 0)) {
          t0 = el5;
          el5 = el2;
          el2 = t0;
        }
        if (J.$gt$n(compare.call$2(el2, el3), 0)) {
          t0 = el3;
          el3 = el2;
          el2 = t0;
        }
        if (J.$gt$n(compare.call$2(el4, el5), 0)) {
          t0 = el5;
          el5 = el4;
          el4 = t0;
        }
        t1.$indexSet(a, index1, el1);
        t1.$indexSet(a, index3, el3);
        t1.$indexSet(a, index5, el5);
        t1.$indexSet(a, index2, t1.$index(a, left));
        t1.$indexSet(a, index4, t1.$index(a, right));
        less = left + 1;
        great = right - 1;
        if (J.$eq$(compare.call$2(el2, el4), 0)) {
          for (k = less; k <= great; ++k) {
            ak = t1.$index(a, k);
            comp = compare.call$2(ak, el2);
            if (comp === 0)
              continue;
            if (typeof comp !== "number")
              return comp.$lt();
            if (comp < 0) {
              if (k !== less) {
                t1.$indexSet(a, k, t1.$index(a, less));
                t1.$indexSet(a, less, ak);
              }
              ++less;
            } else
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  continue;
                } else {
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    great = great0;
                    less = less0;
                    break;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    great = great0;
                    break;
                  }
                }
              }
          }
          pivots_are_equal = true;
        } else {
          for (k = less; k <= great; ++k) {
            ak = t1.$index(a, k);
            comp_pivot1 = compare.call$2(ak, el2);
            if (typeof comp_pivot1 !== "number")
              return comp_pivot1.$lt();
            if (comp_pivot1 < 0) {
              if (k !== less) {
                t1.$indexSet(a, k, t1.$index(a, less));
                t1.$indexSet(a, less, ak);
              }
              ++less;
            } else {
              comp_pivot2 = compare.call$2(ak, el4);
              if (typeof comp_pivot2 !== "number")
                return comp_pivot2.$gt();
              if (comp_pivot2 > 0)
                for (; true;) {
                  comp = compare.call$2(t1.$index(a, great), el4);
                  if (typeof comp !== "number")
                    return comp.$gt();
                  if (comp > 0) {
                    --great;
                    if (great < k)
                      break;
                    continue;
                  } else {
                    comp = compare.call$2(t1.$index(a, great), el2);
                    if (typeof comp !== "number")
                      return comp.$lt();
                    great0 = great - 1;
                    if (comp < 0) {
                      t1.$indexSet(a, k, t1.$index(a, less));
                      less0 = less + 1;
                      t1.$indexSet(a, less, t1.$index(a, great));
                      t1.$indexSet(a, great, ak);
                      less = less0;
                    } else {
                      t1.$indexSet(a, k, t1.$index(a, great));
                      t1.$indexSet(a, great, ak);
                    }
                    great = great0;
                    break;
                  }
                }
            }
          }
          pivots_are_equal = false;
        }
        t2 = less - 1;
        t1.$indexSet(a, left, t1.$index(a, t2));
        t1.$indexSet(a, t2, el2);
        t2 = great + 1;
        t1.$indexSet(a, right, t1.$index(a, t2));
        t1.$indexSet(a, t2, el4);
        H.Sort__doSort(a, left, less - 2, compare, $E);
        H.Sort__doSort(a, great + 2, right, compare, $E);
        if (pivots_are_equal)
          return;
        if (less < index1 && great > index5) {
          for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
            ++less;
          for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
            --great;
          for (k = less; k <= great; ++k) {
            ak = t1.$index(a, k);
            if (compare.call$2(ak, el2) === 0) {
              if (k !== less) {
                t1.$indexSet(a, k, t1.$index(a, less));
                t1.$indexSet(a, less, ak);
              }
              ++less;
            } else if (compare.call$2(ak, el4) === 0)
              for (; true;)
                if (compare.call$2(t1.$index(a, great), el4) === 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
          }
          H.Sort__doSort(a, less, great, compare, $E);
        } else
          H.Sort__doSort(a, less, great, compare, $E);
      },
      CodeUnits: function CodeUnits(t0) {
        this._string = t0;
      },
      EfficientLengthIterable: function EfficientLengthIterable() {
      },
      ListIterable: function ListIterable() {
      },
      SubListIterable: function SubListIterable(t0, t1, t2, t3) {
        var _ = this;
        _._iterable = t0;
        _.__internal$_start = t1;
        _._endOrLength = t2;
        _.$ti = t3;
      },
      ListIterator: function ListIterator(t0, t1, t2, t3) {
        var _ = this;
        _._iterable = t0;
        _.__internal$_length = t1;
        _._index = t2;
        _._current = null;
        _.$ti = t3;
      },
      MappedIterable: function MappedIterable(t0, t1, t2) {
        this._iterable = t0;
        this._f = t1;
        this.$ti = t2;
      },
      EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
        this._iterable = t0;
        this._f = t1;
        this.$ti = t2;
      },
      MappedIterator: function MappedIterator(t0, t1, t2) {
        var _ = this;
        _._current = null;
        _._iterator = t0;
        _._f = t1;
        _.$ti = t2;
      },
      MappedListIterable: function MappedListIterable(t0, t1, t2) {
        this._source = t0;
        this._f = t1;
        this.$ti = t2;
      },
      WhereIterable: function WhereIterable(t0, t1, t2) {
        this._iterable = t0;
        this._f = t1;
        this.$ti = t2;
      },
      WhereIterator: function WhereIterator(t0, t1, t2) {
        this._iterator = t0;
        this._f = t1;
        this.$ti = t2;
      },
      TakeIterable: function TakeIterable(t0, t1, t2) {
        this._iterable = t0;
        this._takeCount = t1;
        this.$ti = t2;
      },
      EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
        this._iterable = t0;
        this._takeCount = t1;
        this.$ti = t2;
      },
      TakeIterator: function TakeIterator(t0, t1, t2) {
        this._iterator = t0;
        this._remaining = t1;
        this.$ti = t2;
      },
      TakeWhileIterable: function TakeWhileIterable(t0, t1, t2) {
        this._iterable = t0;
        this._f = t1;
        this.$ti = t2;
      },
      TakeWhileIterator: function TakeWhileIterator(t0, t1, t2) {
        var _ = this;
        _._iterator = t0;
        _._f = t1;
        _._isFinished = false;
        _.$ti = t2;
      },
      SkipIterable: function SkipIterable(t0, t1, t2) {
        this._iterable = t0;
        this._skipCount = t1;
        this.$ti = t2;
      },
      EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
        this._iterable = t0;
        this._skipCount = t1;
        this.$ti = t2;
      },
      SkipIterator: function SkipIterator(t0, t1, t2) {
        this._iterator = t0;
        this._skipCount = t1;
        this.$ti = t2;
      },
      FixedLengthListMixin: function FixedLengthListMixin() {
      },
      UnmodifiableListMixin: function UnmodifiableListMixin() {
      },
      UnmodifiableListBase: function UnmodifiableListBase() {
      },
      ReversedListIterable: function ReversedListIterable(t0, t1) {
        this._source = t0;
        this.$ti = t1;
      },
      Symbol: function Symbol(t0) {
        this.__internal$_name = t0;
      },
      ConstantMap__throwUnmodifiable: function() {
        throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
      },
      unminifyOrTag: function(rawClassName) {
        var preserved = H.stringTypeCheck(init.mangledGlobalNames[rawClassName]);
        if (typeof preserved === "string")
          return preserved;
        return rawClassName;
      },
      getType: function(index) {
        return init.types[H.intTypeCheck(index)];
      },
      isJsIndexable: function(object, record) {
        var result;
        if (record != null) {
          result = record.x;
          if (result != null)
            return result;
        }
        return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
      },
      S: function(value) {
        var res;
        if (typeof value === "string")
          return value;
        if (typeof value === "number") {
          if (value !== 0)
            return "" + value;
        } else if (true === value)
          return "true";
        else if (false === value)
          return "false";
        else if (value == null)
          return "null";
        res = J.toString$0$(value);
        if (typeof res !== "string")
          throw H.wrapException(H.argumentErrorValue(value));
        return res;
      },
      ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data = J.JSArray_markFixedList(data);
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 2) === 2, requiredParametersInfo >> 2, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2]);
      },
      Primitives_objectHashCode: function(object) {
        var hash = object.$identityHash;
        if (hash == null) {
          hash = Math.random() * 0x3fffffff | 0;
          object.$identityHash = hash;
        }
        return hash;
      },
      Primitives_objectTypeName: function(object) {
        return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
      },
      Primitives__objectClassName: function(object) {
        var interceptor, interceptorConstructor, interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName;
        interceptor = J.getInterceptor$(object);
        interceptorConstructor = interceptor.constructor;
        if (typeof interceptorConstructor == "function") {
          interceptorConstructorName = interceptorConstructor.name;
          $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
        } else
          $name = null;
        t1 = $name == null;
        if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
          dispatchName = C.JS_CONST_u2C(object);
          if (t1)
            $name = dispatchName;
          if (dispatchName === "Object") {
            objectConstructor = object.constructor;
            if (typeof objectConstructor == "function") {
              match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
              decompiledName = match == null ? null : match[1];
              if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
                $name = decompiledName;
            }
          }
          return $name;
        }
        $name = $name;
        return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
      },
      Primitives_dateNow: function() {
        return Date.now();
      },
      Primitives_initTicker: function() {
        var $window, performance;
        if ($.Primitives_timerFrequency != null)
          return;
        $.Primitives_timerFrequency = 1000;
        $.Primitives_timerTicks = H._js_helper_Primitives_dateNow$closure();
        if (typeof window == "undefined")
          return;
        $window = window;
        if ($window == null)
          return;
        performance = $window.performance;
        if (performance == null)
          return;
        if (typeof performance.now != "function")
          return;
        $.Primitives_timerFrequency = 1000000;
        $.Primitives_timerTicks = new H.Primitives_initTicker_closure(performance);
      },
      Primitives__fromCharCodeApply: function(array) {
        var end, result, i, i0, chunkEnd;
        end = array.length;
        if (end <= 500)
          return String.fromCharCode.apply(null, array);
        for (result = "", i = 0; i < end; i = i0) {
          i0 = i + 500;
          chunkEnd = i0 < end ? i0 : end;
          result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
        }
        return result;
      },
      Primitives_stringFromCodePoints: function(codePoints) {
        var a, t1, _i, i;
        a = H.setRuntimeTypeInfo([], [P.int]);
        for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
          i = codePoints[_i];
          if (typeof i !== "number" || Math.floor(i) !== i)
            throw H.wrapException(H.argumentErrorValue(i));
          if (i <= 65535)
            C.JSArray_methods.add$1(a, i);
          else if (i <= 1114111) {
            C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
            C.JSArray_methods.add$1(a, 56320 + (i & 1023));
          } else
            throw H.wrapException(H.argumentErrorValue(i));
        }
        return H.Primitives__fromCharCodeApply(a);
      },
      Primitives_stringFromCharCodes: function(charCodes) {
        var t1, _i, i;
        for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
          i = charCodes[_i];
          if (typeof i !== "number" || Math.floor(i) !== i)
            throw H.wrapException(H.argumentErrorValue(i));
          if (i < 0)
            throw H.wrapException(H.argumentErrorValue(i));
          if (i > 65535)
            return H.Primitives_stringFromCodePoints(charCodes);
        }
        return H.Primitives__fromCharCodeApply(charCodes);
      },
      Primitives_stringFromCharCode: function(charCode) {
        var bits;
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
        throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
      },
      Primitives_lazyAsJsDate: function(receiver) {
        if (receiver.date === void 0)
          receiver.date = new Date(receiver._core$_value);
        return receiver.date;
      },
      Primitives_getYear: function(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
        return t1;
      },
      Primitives_getMonth: function(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
        return t1;
      },
      Primitives_getDay: function(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
        return t1;
      },
      Primitives_getHours: function(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
        return t1;
      },
      Primitives_getMinutes: function(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
        return t1;
      },
      Primitives_getSeconds: function(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
        return t1;
      },
      Primitives_getMilliseconds: function(receiver) {
        var t1 = H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
        return t1;
      },
      Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
        var t1, $arguments, namedArgumentList;
        t1 = {};
        H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
        t1.argumentCount = 0;
        $arguments = [];
        namedArgumentList = [];
        t1.argumentCount = positionalArguments.length;
        C.JSArray_methods.addAll$1($arguments, positionalArguments);
        t1.names = "";
        if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
          namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
        return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, "call" + "$" + t1.argumentCount + t1.names, 0, $arguments, namedArgumentList, 0));
      },
      Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
        var t1, $arguments, argumentCount, jsStub;
        H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
        if (positionalArguments instanceof Array)
          t1 = namedArguments == null || namedArguments.get$isEmpty(namedArguments);
        else
          t1 = false;
        if (t1) {
          $arguments = positionalArguments;
          argumentCount = $arguments.length;
          if (argumentCount === 0) {
            if (!!$function.call$0)
              return $function.call$0();
          } else if (argumentCount === 1) {
            if (!!$function.call$1)
              return $function.call$1($arguments[0]);
          } else if (argumentCount === 2) {
            if (!!$function.call$2)
              return $function.call$2($arguments[0], $arguments[1]);
          } else if (argumentCount === 3) {
            if (!!$function.call$3)
              return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
          } else if (argumentCount === 4) {
            if (!!$function.call$4)
              return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
          } else if (argumentCount === 5)
            if (!!$function.call$5)
              return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
          jsStub = $function["call" + "$" + argumentCount];
          if (jsStub != null)
            return jsStub.apply($function, $arguments);
        }
        return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
      },
      Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
        var $arguments, argumentCount, requiredParameterCount, defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, keys, _i, used, t2;
        H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
        $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
        argumentCount = $arguments.length;
        requiredParameterCount = $function.$requiredArgCount;
        if (argumentCount < requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        defaultValuesClosure = $function.$defaultValues;
        t1 = defaultValuesClosure == null;
        defaultValues = !t1 ? defaultValuesClosure() : null;
        interceptor = J.getInterceptor$($function);
        jsFunction = interceptor["call*"];
        if (typeof jsFunction === "string")
          jsFunction = interceptor[jsFunction];
        if (t1) {
          if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
          if (argumentCount === requiredParameterCount)
            return jsFunction.apply($function, $arguments);
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        if (defaultValues instanceof Array) {
          if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
          if (argumentCount > requiredParameterCount + defaultValues.length)
            return H.Primitives_functionNoSuchMethod($function, $arguments, null);
          C.JSArray_methods.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
          return jsFunction.apply($function, $arguments);
        } else {
          if (argumentCount > requiredParameterCount)
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
          keys = Object.keys(defaultValues);
          if (namedArguments == null)
            for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i)
              C.JSArray_methods.add$1($arguments, defaultValues[H.stringTypeCheck(keys[_i])]);
          else {
            for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
              t2 = H.stringTypeCheck(keys[_i]);
              if (namedArguments.containsKey$1(0, t2)) {
                ++used;
                C.JSArray_methods.add$1($arguments, namedArguments.$index(0, t2));
              } else
                C.JSArray_methods.add$1($arguments, defaultValues[t2]);
            }
            if (used !== namedArguments.get$length(namedArguments))
              return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
          }
          return jsFunction.apply($function, $arguments);
        }
      },
      iae: function(argument) {
        throw H.wrapException(H.argumentErrorValue(argument));
      },
      ioore: function(receiver, index) {
        if (receiver == null)
          J.get$length$asx(receiver);
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      },
      diagnoseIndexError: function(indexable, index) {
        var $length, t1;
        if (typeof index !== "number" || Math.floor(index) !== index)
          return new P.ArgumentError(true, index, "index", null);
        $length = H.intTypeCheck(J.get$length$asx(indexable));
        if (!(index < 0)) {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = index >= $length;
        } else
          t1 = true;
        if (t1)
          return P.IndexError$(index, indexable, "index", null, $length);
        return P.RangeError$value(index, "index", null);
      },
      argumentErrorValue: function(object) {
        return new P.ArgumentError(true, object, null, null);
      },
      checkNum: function(value) {
        if (typeof value !== "number")
          throw H.wrapException(H.argumentErrorValue(value));
        return value;
      },
      checkBool: function(value) {
        return value;
      },
      wrapException: function(ex) {
        var wrapper;
        if (ex == null)
          ex = new P.NullThrownError();
        wrapper = new Error();
        wrapper.dartException = ex;
        if ("defineProperty" in Object) {
          Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
          wrapper.name = "";
        } else
          wrapper.toString = H.toStringWrapper;
        return wrapper;
      },
      toStringWrapper: function() {
        return J.toString$0$(this.dartException);
      },
      throwExpression: function(ex) {
        throw H.wrapException(ex);
      },
      throwConcurrentModificationError: function(collection) {
        throw H.wrapException(P.ConcurrentModificationError$(collection));
      },
      TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = H.setRuntimeTypeInfo([], [P.String]);
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      },
      TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }
        }(expression);
      },
      TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }
        }(expression);
      },
      NullError$: function(_message, match) {
        return new H.NullError(_message, match == null ? null : match.method);
      },
      JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
      },
      unwrapException: function(ex) {
        var t1, message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2;
        t1 = new H.unwrapException_saveStackTrace(ex);
        if (ex == null)
          return;
        if (ex instanceof H.ExceptionAndStackTrace)
          return t1.call$1(ex.dartException);
        if (typeof ex !== "object")
          return ex;
        if ("dartException" in ex)
          return t1.call$1(ex.dartException);
        else if (!("message" in ex))
          return ex;
        message = ex.message;
        if ("number" in ex && typeof ex.number == "number") {
          number = ex.number;
          ieErrorCode = number & 65535;
          if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
            switch (ieErrorCode) {
              case 438:
                return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
              case 445:
              case 5007:
                return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            }
        }
        if (ex instanceof TypeError) {
          nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
          notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
          nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
          nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
          undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
          undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
          nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
          $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
          undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
          undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
          match = nsme.matchTypeError$1(message);
          if (match != null)
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          else {
            match = notClosure.matchTypeError$1(message);
            if (match != null) {
              match.method = "call";
              return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
            } else {
              match = nullCall.matchTypeError$1(message);
              if (match == null) {
                match = nullLiteralCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefCall.matchTypeError$1(message);
                  if (match == null) {
                    match = undefLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = nullProperty.matchTypeError$1(message);
                      if (match == null) {
                        match = nullLiteralCall.matchTypeError$1(message);
                        if (match == null) {
                          match = undefProperty.matchTypeError$1(message);
                          if (match == null) {
                            match = undefLiteralProperty.matchTypeError$1(message);
                            t2 = match != null;
                          } else
                            t2 = true;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
              if (t2)
                return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
            }
          }
          return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
        }
        if (ex instanceof RangeError) {
          if (typeof message === "string" && message.indexOf("call stack") !== -1)
            return new P.StackOverflowError();
          message = function(ex) {
            try {
              return String(ex);
            } catch (e) {
            }
            return null;
          }(ex);
          return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
        }
        if (typeof InternalError == "function" && ex instanceof InternalError)
          if (typeof message === "string" && message === "too much recursion")
            return new P.StackOverflowError();
        return ex;
      },
      getTraceFromException: function(exception) {
        var trace;
        if (exception instanceof H.ExceptionAndStackTrace)
          return exception.stackTrace;
        if (exception == null)
          return new H._StackTrace(exception);
        trace = exception.$cachedTrace;
        if (trace != null)
          return trace;
        return exception.$cachedTrace = new H._StackTrace(exception);
      },
      fillLiteralMap: function(keyValuePairs, result) {
        var $length, index, index0, index1;
        $length = keyValuePairs.length;
        for (index = 0; index < $length; index = index1) {
          index0 = index + 1;
          index1 = index0 + 1;
          result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
        }
        return result;
      },
      invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
        H.interceptedTypeCheck(closure, "$isFunction");
        switch (H.intTypeCheck(numberOfArguments)) {
          case 0:
            return closure.call$0();
          case 1:
            return closure.call$1(arg1);
          case 2:
            return closure.call$2(arg1, arg2);
          case 3:
            return closure.call$3(arg1, arg2, arg3);
          case 4:
            return closure.call$4(arg1, arg2, arg3, arg4);
        }
        throw H.wrapException(new P._Exception("Unsupported number of arguments for wrapped closure"));
      },
      convertDartClosureToJS: function(closure, arity) {
        var $function;
        H.intTypeCheck(arity);
        if (closure == null)
          return;
        $function = closure.$identity;
        if (!!$function)
          return $function;
        $function = function(closure, arity, invoke) {
          return function(a1, a2, a3, a4) {
            return invoke(closure, arity, a1, a2, a3, a4);
          };
        }(closure, arity, H.invokeClosure);
        closure.$identity = $function;
        return $function;
      },
      Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
        var $function, callName, functionType, $prototype, $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName;
        $function = functions[0];
        callName = $function.$callName;
        if (!!J.getInterceptor$(reflectionInfo).$isList) {
          $function.$reflectionInfo = reflectionInfo;
          functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
        } else
          functionType = reflectionInfo;
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
        $prototype.$initialize = $prototype.constructor;
        if (isStatic)
          $constructor = function static_tear_off() {
            this.$initialize();
          };
        else {
          t1 = $.Closure_functionCounter;
          if (typeof t1 !== "number")
            return t1.$add();
          $.Closure_functionCounter = t1 + 1;
          t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
          $constructor = t1;
        }
        $prototype.constructor = $constructor;
        $constructor.prototype = $prototype;
        if (!isStatic) {
          trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
          trampoline.$reflectionInfo = reflectionInfo;
        } else {
          $prototype.$static_name = propertyName;
          trampoline = $function;
        }
        if (typeof functionType == "number")
          signatureFunction = function(getType, t) {
            return function() {
              return getType(t);
            };
          }(H.getType, functionType);
        else if (typeof functionType == "function")
          if (isStatic)
            signatureFunction = functionType;
          else {
            getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
            signatureFunction = function(f, r) {
              return function() {
                return f.apply({$receiver: r(this)}, arguments);
              };
            }(functionType, getReceiver);
          }
        else
          throw H.wrapException("Error in reflectionInfo.");
        $prototype.$signature = signatureFunction;
        $prototype[callName] = trampoline;
        for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
          stub = functions[i];
          stubCallName = stub.$callName;
          if (stubCallName != null) {
            stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
            $prototype[stubCallName] = stub;
          }
          if (i === applyTrampolineIndex) {
            stub.$reflectionInfo = reflectionInfo;
            applyTrampoline = stub;
          }
        }
        $prototype["call*"] = applyTrampoline;
        $prototype.$requiredArgCount = $function.$requiredArgCount;
        $prototype.$defaultValues = $function.$defaultValues;
        return $constructor;
      },
      Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
        var getSelf = H.BoundClosure_selfOf;
        switch (isSuperCall ? -1 : arity) {
          case 0:
            return function(n, S) {
              return function() {
                return S(this)[n]();
              };
            }(stubName, getSelf);
          case 1:
            return function(n, S) {
              return function(a) {
                return S(this)[n](a);
              };
            }(stubName, getSelf);
          case 2:
            return function(n, S) {
              return function(a, b) {
                return S(this)[n](a, b);
              };
            }(stubName, getSelf);
          case 3:
            return function(n, S) {
              return function(a, b, c) {
                return S(this)[n](a, b, c);
              };
            }(stubName, getSelf);
          case 4:
            return function(n, S) {
              return function(a, b, c, d) {
                return S(this)[n](a, b, c, d);
              };
            }(stubName, getSelf);
          case 5:
            return function(n, S) {
              return function(a, b, c, d, e) {
                return S(this)[n](a, b, c, d, e);
              };
            }(stubName, getSelf);
          default:
            return function(f, s) {
              return function() {
                return f.apply(s(this), arguments);
              };
            }($function, getSelf);
        }
      },
      Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
        var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
        if (isIntercepted)
          return H.Closure_forwardInterceptedCallTo(receiver, $function);
        stubName = $function.$stubName;
        arity = $function.length;
        lookedUpFunction = receiver[stubName];
        t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
        t2 = !t1 || arity >= 27;
        if (t2)
          return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
        if (arity === 0) {
          t1 = $.Closure_functionCounter;
          if (typeof t1 !== "number")
            return t1.$add();
          $.Closure_functionCounter = t1 + 1;
          selfName = "self" + t1;
          t1 = "return function(){var " + selfName + " = this.";
          t2 = $.BoundClosure_selfFieldNameCache;
          if (t2 == null) {
            t2 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t2;
          }
          return new Function(t1 + H.S(t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
        }
        $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        $arguments += t1;
        t1 = "return function(" + $arguments + "){return this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        if (t2 == null) {
          t2 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t2;
        }
        return new Function(t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
      },
      Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
        var getSelf, getReceiver;
        getSelf = H.BoundClosure_selfOf;
        getReceiver = H.BoundClosure_receiverOf;
        switch (isSuperCall ? -1 : arity) {
          case 0:
            throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
          case 1:
            return function(n, s, r) {
              return function() {
                return s(this)[n](r(this));
              };
            }($name, getSelf, getReceiver);
          case 2:
            return function(n, s, r) {
              return function(a) {
                return s(this)[n](r(this), a);
              };
            }($name, getSelf, getReceiver);
          case 3:
            return function(n, s, r) {
              return function(a, b) {
                return s(this)[n](r(this), a, b);
              };
            }($name, getSelf, getReceiver);
          case 4:
            return function(n, s, r) {
              return function(a, b, c) {
                return s(this)[n](r(this), a, b, c);
              };
            }($name, getSelf, getReceiver);
          case 5:
            return function(n, s, r) {
              return function(a, b, c, d) {
                return s(this)[n](r(this), a, b, c, d);
              };
            }($name, getSelf, getReceiver);
          case 6:
            return function(n, s, r) {
              return function(a, b, c, d, e) {
                return s(this)[n](r(this), a, b, c, d, e);
              };
            }($name, getSelf, getReceiver);
          default:
            return function(f, s, r, a) {
              return function() {
                a = [r(this)];
                Array.prototype.push.apply(a, arguments);
                return f.apply(s(this), a);
              };
            }($function, getSelf, getReceiver);
        }
      },
      Closure_forwardInterceptedCallTo: function(receiver, $function) {
        var t1, t2, stubName, arity, lookedUpFunction, t3, t4, $arguments;
        t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        t2 = $.BoundClosure_receiverFieldNameCache;
        if (t2 == null) {
          t2 = H.BoundClosure_computeFieldNamed("receiver");
          $.BoundClosure_receiverFieldNameCache = t2;
        }
        stubName = $function.$stubName;
        arity = $function.length;
        lookedUpFunction = receiver[stubName];
        t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
        t4 = !t3 || arity >= 28;
        if (t4)
          return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
        if (arity === 1) {
          t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
          t2 = $.Closure_functionCounter;
          if (typeof t2 !== "number")
            return t2.$add();
          $.Closure_functionCounter = t2 + 1;
          return new Function(t1 + t2 + "}")();
        }
        $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
        t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      },
      closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
        return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
      },
      BoundClosure_selfOf: function(closure) {
        return closure._self;
      },
      BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      },
      BoundClosure_computeFieldNamed: function(fieldName) {
        var template, names, t1, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      },
      stringTypeCheck: function(value) {
        if (value == null)
          return value;
        if (typeof value === "string")
          return value;
        throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
      },
      stringTypeCast: function(value) {
        if (typeof value === "string" || value == null)
          return value;
        throw H.wrapException(H.CastErrorImplementation$(value, "String"));
      },
      doubleTypeCheck: function(value) {
        if (value == null)
          return value;
        if (typeof value === "number")
          return value;
        throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
      },
      numTypeCheck: function(value) {
        if (value == null)
          return value;
        if (typeof value === "number")
          return value;
        throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
      },
      boolTypeCheck: function(value) {
        if (value == null)
          return value;
        if (typeof value === "boolean")
          return value;
        throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
      },
      intTypeCheck: function(value) {
        if (value == null)
          return value;
        if (typeof value === "number" && Math.floor(value) === value)
          return value;
        throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
      },
      intTypeCast: function(value) {
        if (typeof value === "number" && Math.floor(value) === value || value == null)
          return value;
        throw H.wrapException(H.CastErrorImplementation$(value, "int"));
      },
      propertyTypeError: function(value, property) {
        throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
      },
      propertyTypeCastError: function(value, property) {
        throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
      },
      interceptedTypeCheck: function(value, property) {
        if (value == null)
          return value;
        if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
          return value;
        H.propertyTypeError(value, property);
      },
      interceptedTypeCast: function(value, property) {
        var t1;
        if (value != null)
          t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
        else
          t1 = true;
        if (t1)
          return value;
        H.propertyTypeCastError(value, property);
      },
      numberOrStringSuperNativeTypeCheck: function(value, property) {
        if (value == null)
          return value;
        if (typeof value === "string")
          return value;
        if (typeof value === "number")
          return value;
        if (J.getInterceptor$(value)[property])
          return value;
        H.propertyTypeError(value, property);
      },
      stringSuperNativeTypeCheck: function(value, property) {
        if (value == null)
          return value;
        if (typeof value === "string")
          return value;
        if (J.getInterceptor$(value)[property])
          return value;
        H.propertyTypeError(value, property);
      },
      listTypeCheck: function(value) {
        if (value == null)
          return value;
        if (!!J.getInterceptor$(value).$isList)
          return value;
        throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
      },
      listSuperNativeTypeCheck: function(value, property) {
        var t1;
        if (value == null)
          return value;
        t1 = J.getInterceptor$(value);
        if (!!t1.$isList)
          return value;
        if (t1[property])
          return value;
        H.propertyTypeError(value, property);
      },
      extractFunctionTypeObjectFromInternal: function(o) {
        var signature;
        if ("$signature" in o) {
          signature = o.$signature;
          if (typeof signature == "number")
            return init.types[H.intTypeCheck(signature)];
          else
            return o.$signature();
        }
        return;
      },
      functionTypeTest: function(value, functionTypeRti) {
        var functionTypeObject;
        if (value == null)
          return false;
        if (typeof value == "function")
          return true;
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
        if (functionTypeObject == null)
          return false;
        return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
      },
      functionTypeCheck: function(value, functionTypeRti) {
        var $self, t1;
        if (value == null)
          return value;
        if ($._inTypeAssertion)
          return value;
        $._inTypeAssertion = true;
        try {
          if (H.functionTypeTest(value, functionTypeRti))
            return value;
          $self = H.runtimeTypeToString(functionTypeRti);
          t1 = H.TypeErrorImplementation$(value, $self);
          throw H.wrapException(t1);
        } finally {
          $._inTypeAssertion = false;
        }
      },
      futureOrCheck: function(o, futureOrRti) {
        if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
          H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
        return o;
      },
      TypeErrorImplementation$: function(value, type) {
        return new H.TypeErrorImplementation("TypeError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
      },
      CastErrorImplementation$: function(value, type) {
        return new H.CastErrorImplementation("CastError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
      },
      _typeDescription: function(value) {
        var t1, functionTypeObject;
        t1 = J.getInterceptor$(value);
        if (!!t1.$isClosure) {
          functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
          if (functionTypeObject != null)
            return H.runtimeTypeToString(functionTypeObject);
          return "Closure";
        }
        return H.Primitives_objectTypeName(value);
      },
      throwCyclicInit: function(staticName) {
        throw H.wrapException(new P.CyclicInitializationError(H.stringTypeCheck(staticName)));
      },
      RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      },
      getIsolateAffinityTag: function($name) {
        return init.getIsolateTag($name);
      },
      setRuntimeTypeInfo: function(target, rti) {
        target.$ti = rti;
        return target;
      },
      getRuntimeTypeInfo: function(target) {
        if (target == null)
          return;
        return target.$ti;
      },
      getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
        return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
      },
      getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
        var $arguments;
        H.stringTypeCheck(substitutionName);
        H.intTypeCheck(index);
        $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
        return $arguments == null ? null : $arguments[index];
      },
      getRuntimeTypeArgument: function(target, substitutionName, index) {
        var $arguments;
        H.stringTypeCheck(substitutionName);
        H.intTypeCheck(index);
        $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
        return $arguments == null ? null : $arguments[index];
      },
      getTypeArgumentByIndex: function(target, index) {
        var rti;
        H.intTypeCheck(index);
        rti = H.getRuntimeTypeInfo(target);
        return rti == null ? null : rti[index];
      },
      runtimeTypeToString: function(rti) {
        return H._runtimeTypeToString(rti, null);
      },
      _runtimeTypeToString: function(rti, genericContext) {
        var t1, t2;
        H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
        if (rti == null)
          return "dynamic";
        if (rti === -1)
          return "void";
        if (typeof rti === "object" && rti !== null && rti.constructor === Array)
          return H.unminifyOrTag(rti[0].name) + H._joinArguments(rti, 1, genericContext);
        if (typeof rti == "function")
          return H.unminifyOrTag(rti.name);
        if (rti === -2)
          return "dynamic";
        if (typeof rti === "number") {
          H.intTypeCheck(rti);
          if (genericContext == null || rti < 0 || rti >= genericContext.length)
            return "unexpected-generic-index:" + rti;
          t1 = genericContext.length;
          t2 = t1 - rti - 1;
          if (t2 < 0 || t2 >= t1)
            return H.ioore(genericContext, t2);
          return H.S(genericContext[t2]);
        }
        if ('func' in rti)
          return H._functionRtiToString(rti, genericContext);
        if ('futureOr' in rti)
          return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
        return "unknown-reified-type";
      },
      _functionRtiToString: function(rti, genericContext) {
        var t1, boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3;
        t1 = [P.String];
        H.assertSubtype(genericContext, "$isList", t1, "$asList");
        if ("bounds" in rti) {
          boundsRti = rti.bounds;
          if (genericContext == null) {
            genericContext = H.setRuntimeTypeInfo([], t1);
            outerContextLength = null;
          } else
            outerContextLength = genericContext.length;
          offset = genericContext.length;
          for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
            C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
          for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = ", ") {
            typeParameters += typeSep;
            t1 = genericContext.length;
            t2 = t1 - i0 - 1;
            if (t2 < 0)
              return H.ioore(genericContext, t2);
            typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
            boundRti = boundsRti[i0];
            if (boundRti != null && boundRti !== P.Object)
              typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
          }
          typeParameters += ">";
        } else {
          typeParameters = "";
          outerContextLength = null;
        }
        returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
        if ("args" in rti) {
          $arguments = rti.args;
          for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
            argument = $arguments[_i];
            argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
          }
        } else {
          argumentsText = "";
          sep = "";
        }
        if ("opt" in rti) {
          optionalArguments = rti.opt;
          argumentsText += sep + "[";
          for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
            argument = optionalArguments[_i];
            argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
          }
          argumentsText += "]";
        }
        if ("named" in rti) {
          namedArguments = rti.named;
          argumentsText += sep + "{";
          for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = ", ") {
            t3 = H.stringTypeCheck(t1[_i]);
            argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
          }
          argumentsText += "}";
        }
        if (outerContextLength != null)
          genericContext.length = outerContextLength;
        return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
      },
      _joinArguments: function(types, startIndex, genericContext) {
        var buffer, index, separator, allDynamic, t1, argument;
        H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
        if (types == null)
          return "";
        buffer = new P.StringBuffer("");
        for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
          buffer._contents = t1 + separator;
          argument = types[index];
          if (argument != null)
            allDynamic = false;
          t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
        }
        return "<" + buffer.toString$0(0) + ">";
      },
      substitute: function(substitution, $arguments) {
        if (substitution == null)
          return $arguments;
        substitution = substitution.apply(null, $arguments);
        if (substitution == null)
          return;
        if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
          return substitution;
        if (typeof substitution == "function")
          return substitution.apply(null, $arguments);
        return $arguments;
      },
      checkSubtype: function(object, isField, checks, asField) {
        var $arguments, interceptor;
        H.stringTypeCheck(isField);
        H.listTypeCheck(checks);
        H.stringTypeCheck(asField);
        if (object == null)
          return false;
        $arguments = H.getRuntimeTypeInfo(object);
        interceptor = J.getInterceptor$(object);
        if (interceptor[isField] == null)
          return false;
        return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
      },
      subtypeCast: function(object, isField, checks, asField) {
        H.stringTypeCheck(isField);
        H.listTypeCheck(checks);
        H.stringTypeCheck(asField);
        if (object == null)
          return object;
        if (H.checkSubtype(object, isField, checks, asField))
          return object;
        throw H.wrapException(H.CastErrorImplementation$(object, function(str, names) {
          return str.replace(/[^<,> ]+/g, function(m) {
            return names[m] || m;
          });
        }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
      },
      assertSubtype: function(object, isField, checks, asField) {
        H.stringTypeCheck(isField);
        H.listTypeCheck(checks);
        H.stringTypeCheck(asField);
        if (object == null)
          return object;
        if (H.checkSubtype(object, isField, checks, asField))
          return object;
        throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
          return str.replace(/[^<,> ]+/g, function(m) {
            return names[m] || m;
          });
        }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
      },
      areSubtypes: function(s, sEnv, t, tEnv) {
        var len, i;
        if (t == null)
          return true;
        if (s == null) {
          len = t.length;
          for (i = 0; i < len; ++i)
            if (!H._isSubtype(null, null, t[i], tEnv))
              return false;
          return true;
        }
        len = s.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
            return false;
        return true;
      },
      computeSignature: function(signature, context, contextName) {
        return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
      },
      isSupertypeOfNullRecursive: function(type) {
        var typeArgument;
        if (typeof type === "number")
          return false;
        if ('futureOr' in type) {
          typeArgument = "type" in type ? type.type : null;
          return type == null || type.name === "Object" || type.name === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
        }
        return false;
      },
      checkSubtypeOfRuntimeType: function(o, t) {
        var type, rti;
        if (o == null)
          return t == null || t.name === "Object" || t.name === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
        if (t == null || t === -1 || t.name === "Object" || t === -2)
          return true;
        if (typeof t == "object") {
          if ('futureOr' in t)
            if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
              return true;
          if ('func' in t)
            return H.functionTypeTest(o, t);
        }
        type = J.getInterceptor$(o).constructor;
        rti = H.getRuntimeTypeInfo(o);
        if (rti != null) {
          rti = rti.slice();
          rti.splice(0, 0, type);
          type = rti;
        }
        return H._isSubtype(type, null, t, null);
      },
      assertSubtypeOfRuntimeType: function(object, type) {
        if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
          throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
        return object;
      },
      _isSubtype: function(s, sEnv, t, tEnv) {
        var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution;
        if (s === t)
          return true;
        if (t == null || t === -1 || t.name === "Object" || t === -2)
          return true;
        if (s === -2)
          return true;
        if (s == null || s === -1 || s.name === "Object" || s === -2) {
          if (typeof t === "number")
            return false;
          if ('futureOr' in t)
            return H._isSubtype(s, sEnv, "type" in t ? t.type : null, tEnv);
          return false;
        }
        if (typeof s === "number")
          return false;
        if (typeof t === "number")
          return false;
        if (s.name === "Null")
          return true;
        if ('func' in t)
          return H._isFunctionSubtype(s, sEnv, t, tEnv);
        if ('func' in s)
          return t.name === "Function";
        t1 = typeof s === "object" && s !== null && s.constructor === Array;
        typeOfS = t1 ? s[0] : s;
        if ('futureOr' in t) {
          tTypeArgument = "type" in t ? t.type : null;
          if ('futureOr' in s)
            return H._isSubtype("type" in s ? s.type : null, sEnv, tTypeArgument, tEnv);
          else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
            return true;
          else {
            if (!('$is' + "Future" in typeOfS.prototype))
              return false;
            futureSubstitution = typeOfS.prototype["$as" + "Future"];
            futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : null);
            return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : null, sEnv, tTypeArgument, tEnv);
          }
        }
        t2 = typeof t === "object" && t !== null && t.constructor === Array;
        typeOfT = t2 ? t[0] : t;
        if (typeOfT !== typeOfS) {
          typeOfTString = typeOfT.name;
          if (!('$is' + typeOfTString in typeOfS.prototype))
            return false;
          substitution = typeOfS.prototype["$as" + typeOfTString];
        } else
          substitution = null;
        if (!t2)
          return true;
        t1 = t1 ? s.slice(1) : null;
        t2 = t.slice(1);
        return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
      },
      _isFunctionSubtype: function(s, sEnv, t, tEnv) {
        var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
        if (!('func' in s))
          return false;
        if ("bounds" in s) {
          if (!("bounds" in t))
            return false;
          sBounds = s.bounds;
          tBounds = t.bounds;
          if (sBounds.length !== tBounds.length)
            return false;
        } else if ("bounds" in t)
          return false;
        if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
          return false;
        sParameterTypes = s.args;
        tParameterTypes = t.args;
        sOptionalParameterTypes = s.opt;
        tOptionalParameterTypes = t.opt;
        sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
        tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
        sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
        tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
        if (sParametersLen > tParametersLen)
          return false;
        if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
          return false;
        for (pos = 0; pos < sParametersLen; ++pos)
          if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
            return false;
        for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
          if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
            return false;
        for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
          if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
            return false;
        sNamedParameters = s.named;
        tNamedParameters = t.named;
        if (tNamedParameters == null)
          return true;
        if (sNamedParameters == null)
          return false;
        return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
      },
      namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
        var names, t1, i, $name;
        names = Object.getOwnPropertyNames(t);
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (!Object.hasOwnProperty.call(s, $name))
            return false;
          if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
            return false;
        }
        return true;
      },
      defineProperty: function(obj, property, value) {
        Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
      },
      lookupAndCacheInterceptor: function(obj) {
        var tag, record, interceptor, interceptorClass, mark, t1;
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj));
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
        if (interceptorClass == null) {
          tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
          if (tag != null) {
            record = $.dispatchRecordsForInstanceTags[tag];
            if (record != null) {
              Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              return record.i;
            }
            interceptor = $.interceptorsForUncacheableTags[tag];
            if (interceptor != null)
              return interceptor;
            interceptorClass = init.interceptorsByTag[tag];
          }
        }
        if (interceptorClass == null)
          return;
        interceptor = interceptorClass.prototype;
        mark = tag[0];
        if (mark === "!") {
          record = H.makeLeafDispatchRecord(interceptor);
          $.dispatchRecordsForInstanceTags[tag] = record;
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        if (mark === "~") {
          $.interceptorsForUncacheableTags[tag] = interceptor;
          return interceptor;
        }
        if (mark === "-") {
          t1 = H.makeLeafDispatchRecord(interceptor);
          Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
          return t1.i;
        }
        if (mark === "+")
          return H.patchInteriorProto(obj, interceptor);
        if (mark === "*")
          throw H.wrapException(P.UnimplementedError$(tag));
        if (init.leafTags[tag] === true) {
          t1 = H.makeLeafDispatchRecord(interceptor);
          Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
          return t1.i;
        } else
          return H.patchInteriorProto(obj, interceptor);
      },
      patchInteriorProto: function(obj, interceptor) {
        var proto = Object.getPrototypeOf(obj);
        Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
        return interceptor;
      },
      makeLeafDispatchRecord: function(interceptor) {
        return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
      },
      makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
        var interceptor = interceptorClass.prototype;
        if (init.leafTags[tag] === true)
          return H.makeLeafDispatchRecord(interceptor);
        else
          return J.makeDispatchRecord(interceptor, proto, null, null);
      },
      initNativeDispatch: function() {
        if (true === $.initNativeDispatchFlag)
          return;
        $.initNativeDispatchFlag = true;
        H.initNativeDispatchContinue();
      },
      initNativeDispatchContinue: function() {
        var map, tags, fun, i, tag, proto, record, interceptorClass;
        $.dispatchRecordsForInstanceTags = Object.create(null);
        $.interceptorsForUncacheableTags = Object.create(null);
        H.initHooks();
        map = init.interceptorsByTag;
        tags = Object.getOwnPropertyNames(map);
        if (typeof window != "undefined") {
          window;
          fun = function() {
          };
          for (i = 0; i < tags.length; ++i) {
            tag = tags[i];
            proto = $.prototypeForTagFunction.call$1(tag);
            if (proto != null) {
              record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
              if (record != null) {
                Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
                fun.prototype = proto;
              }
            }
          }
        }
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          if (/^[A-Za-z_]/.test(tag)) {
            interceptorClass = map[tag];
            map["!" + tag] = interceptorClass;
            map["~" + tag] = interceptorClass;
            map["-" + tag] = interceptorClass;
            map["+" + tag] = interceptorClass;
            map["*" + tag] = interceptorClass;
          }
        }
      },
      initHooks: function() {
        var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
        hooks = C.JS_CONST_bDt();
        hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_u2C), hooks)))))));
        if (typeof dartNativeDispatchHooksTransformer != "undefined") {
          transformers = dartNativeDispatchHooksTransformer;
          if (typeof transformers == "function")
            transformers = [transformers];
          if (transformers.constructor == Array)
            for (i = 0; i < transformers.length; ++i) {
              transformer = transformers[i];
              if (typeof transformer == "function")
                hooks = transformer(hooks) || hooks;
            }
        }
        getTag = hooks.getTag;
        getUnknownTag = hooks.getUnknownTag;
        prototypeForTag = hooks.prototypeForTag;
        $.getTagFunction = new H.initHooks_closure(getTag);
        $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
        $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
      },
      applyHooksTransformer: function(transformer, hooks) {
        return transformer(hooks) || hooks;
      },
      JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
        var m, i, g, regexp;
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + g);
        if (regexp instanceof RegExp)
          return regexp;
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
      },
      stringContainsUnchecked: function(receiver, other, startIndex) {
        var t1 = receiver.indexOf(other, startIndex);
        return t1 >= 0;
      },
      stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
        var $length, t1, i, nativeRegexp;
        if (typeof pattern === "string")
          if (pattern === "")
            if (receiver === "")
              return replacement;
            else {
              $length = receiver.length;
              for (t1 = replacement, i = 0; i < $length; ++i)
                t1 = t1 + receiver[i] + replacement;
              return t1.charCodeAt(0) == 0 ? t1 : t1;
            }
          else
            return receiver.replace(new RegExp(pattern.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&"), 'g'), replacement.replace(/\$/g, "$$$$"));
        else if (pattern instanceof H.JSSyntaxRegExp) {
          nativeRegexp = pattern.get$_nativeGlobalVersion();
          nativeRegexp.lastIndex = 0;
          return receiver.replace(nativeRegexp, replacement.replace(/\$/g, "$$$$"));
        } else {
          if (pattern == null)
            H.throwExpression(H.argumentErrorValue(pattern));
          throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
        }
      },
      ConstantMapView: function ConstantMapView(t0, t1) {
        this._collection$_map = t0;
        this.$ti = t1;
      },
      ConstantMap: function ConstantMap() {
      },
      ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
        var _ = this;
        _._length = t0;
        _._jsObject = t1;
        _._keys = t2;
        _.$ti = t3;
      },
      _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
        this._map = t0;
        this.$ti = t1;
      },
      GeneralConstantMap: function GeneralConstantMap(t0, t1) {
        this._jsData = t0;
        this.$ti = t1;
      },
      JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _._memberName = t0;
        _._internalName = t1;
        _._kind = t2;
        _._arguments = t3;
        _._namedArgumentNames = t4;
        _._typeArgumentCount = t5;
      },
      ReflectionInfo: function ReflectionInfo(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _.jsFunction = t0;
        _.data = t1;
        _.isAccessor = t2;
        _.requiredParameterCount = t3;
        _.optionalParameterCount = t4;
        _.areOptionalParametersNamed = t5;
        _.functionType = t6;
        _.cachedSortedIndices = null;
      },
      Primitives_initTicker_closure: function Primitives_initTicker_closure(t0) {
        this.performance = t0;
      },
      Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
        this._box_0 = t0;
        this.namedArgumentList = t1;
        this.$arguments = t2;
      },
      TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _._pattern = t0;
        _._arguments = t1;
        _._argumentsExpr = t2;
        _._expr = t3;
        _._method = t4;
        _._receiver = t5;
      },
      NullError: function NullError(t0, t1) {
        this._message = t0;
        this._method = t1;
      },
      JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
        this._message = t0;
        this._method = t1;
        this._receiver = t2;
      },
      UnknownJsTypeError: function UnknownJsTypeError(t0) {
        this._message = t0;
      },
      ExceptionAndStackTrace: function ExceptionAndStackTrace() {
      },
      unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
        this.ex = t0;
      },
      _StackTrace: function _StackTrace(t0) {
        this._exception = t0;
        this._trace = null;
      },
      Closure: function Closure() {
      },
      TearOffClosure: function TearOffClosure() {
      },
      StaticClosure: function StaticClosure() {
      },
      BoundClosure: function BoundClosure(t0, t1, t2, t3) {
        var _ = this;
        _._self = t0;
        _.__js_helper$_target = t1;
        _._receiver = t2;
        _.__js_helper$_name = t3;
      },
      TypeErrorImplementation: function TypeErrorImplementation(t0) {
        this.message = t0;
      },
      CastErrorImplementation: function CastErrorImplementation(t0) {
        this.message = t0;
      },
      RuntimeError: function RuntimeError(t0) {
        this.message = t0;
      },
      JsLinkedHashMap: function JsLinkedHashMap(t0) {
        var _ = this;
        _._length = 0;
        _._last = _._first = _._rest = _._nums = _._strings = null;
        _._modifications = 0;
        _.$ti = t0;
      },
      JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
        this.$this = t0;
      },
      JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
        this.$this = t0;
      },
      LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
        var _ = this;
        _.hashMapCellKey = t0;
        _.hashMapCellValue = t1;
        _._previous = _._next = null;
      },
      LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
        this._map = t0;
        this.$ti = t1;
      },
      LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
        var _ = this;
        _._map = t0;
        _._modifications = t1;
        _.__js_helper$_current = _._cell = null;
        _.$ti = t2;
      },
      initHooks_closure: function initHooks_closure(t0) {
        this.getTag = t0;
      },
      initHooks_closure0: function initHooks_closure0(t0) {
        this.getUnknownTag = t0;
      },
      initHooks_closure1: function initHooks_closure1(t0) {
        this.prototypeForTag = t0;
      },
      JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
        var _ = this;
        _.pattern = t0;
        _._nativeRegExp = t1;
        _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
      },
      _MatchImplementation: function _MatchImplementation(t0, t1) {
        this.pattern = t0;
        this._match = t1;
      },
      StringMatch: function StringMatch(t0, t1, t2) {
        this.start = t0;
        this.input = t1;
        this.pattern = t2;
      },
      _checkValidIndex: function(index, list, $length) {
        if (index >>> 0 !== index || index >= $length)
          throw H.wrapException(H.diagnoseIndexError(list, index));
      },
      NativeTypedData: function NativeTypedData() {
      },
      NativeTypedArray: function NativeTypedArray() {
      },
      NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
      },
      NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
      },
      NativeInt16List: function NativeInt16List() {
      },
      NativeInt32List: function NativeInt32List() {
      },
      NativeInt8List: function NativeInt8List() {
      },
      NativeUint16List: function NativeUint16List() {
      },
      NativeUint32List: function NativeUint32List() {
      },
      NativeUint8ClampedList: function NativeUint8ClampedList() {
      },
      NativeUint8List: function NativeUint8List() {
      },
      _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
      },
      _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
      },
      _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
      },
      _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
      },
      isBrowserObject: function(o) {
        var t1 = J.getInterceptor$(o);
        return !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isWindow || !!t1.$isWorkerGlobalScope;
      },
      extractKeys: function(victim) {
        return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
      },
      printString: function(string) {
        if (typeof dartPrint == "function") {
          dartPrint(string);
          return;
        }
        if (typeof console == "object" && typeof console.log != "undefined") {
          console.log(string);
          return;
        }
        if (typeof window == "object")
          return;
        if (typeof print == "function") {
          print(string);
          return;
        }
        throw "Unable to print message: " + String(string);
      }
    },
    J = {
      makeDispatchRecord: function(interceptor, proto, extension, indexability) {
        return {i: interceptor, p: proto, e: extension, x: indexability};
      },
      getNativeInterceptor: function(object) {
        var record, proto, objectProto, $constructor, interceptor;
        record = object[init.dispatchPropertyName];
        if (record == null)
          if ($.initNativeDispatchFlag == null) {
            H.initNativeDispatch();
            record = object[init.dispatchPropertyName];
          }
        if (record != null) {
          proto = record.p;
          if (false === proto)
            return record.i;
          if (true === proto)
            return object;
          objectProto = Object.getPrototypeOf(object);
          if (proto === objectProto)
            return record.i;
          if (record.e === objectProto)
            throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
        }
        $constructor = object.constructor;
        interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
        if (interceptor != null)
          return interceptor;
        interceptor = H.lookupAndCacheInterceptor(object);
        if (interceptor != null)
          return interceptor;
        if (typeof object == "function")
          return C.JavaScriptFunction_methods;
        proto = Object.getPrototypeOf(object);
        if (proto == null)
          return C.PlainJavaScriptObject_methods;
        if (proto === Object.prototype)
          return C.PlainJavaScriptObject_methods;
        if (typeof $constructor == "function") {
          Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
          return C.UnknownJavaScriptObject_methods;
        }
        return C.UnknownJavaScriptObject_methods;
      },
      JSArray_JSArray$fixed: function($length, $E) {
        if (typeof $length !== "number" || Math.floor($length) !== $length)
          throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
        if ($length < 0 || $length > 4294967295)
          throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
        return J.JSArray_JSArray$markFixed(new Array($length), $E);
      },
      JSArray_JSArray$markFixed: function(allocation, $E) {
        return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
      },
      JSArray_markFixedList: function(list) {
        H.listTypeCheck(list);
        list.fixed$length = Array;
        return list;
      },
      JSArray__compareAny: function(a, b) {
        return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
      },
      JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      },
      JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      },
      JSString__skipTrailingWhitespace: function(string, index) {
        var index0, codeUnit;
        for (; index > 0; index = index0) {
          index0 = index - 1;
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      },
      getInterceptor$: function(receiver) {
        if (typeof receiver == "number") {
          if (Math.floor(receiver) == receiver)
            return J.JSInt.prototype;
          return J.JSDouble.prototype;
        }
        if (typeof receiver == "string")
          return J.JSString.prototype;
        if (receiver == null)
          return J.JSNull.prototype;
        if (typeof receiver == "boolean")
          return J.JSBool.prototype;
        if (receiver.constructor == Array)
          return J.JSArray.prototype;
        if (typeof receiver != "object") {
          if (typeof receiver == "function")
            return J.JavaScriptFunction.prototype;
          return receiver;
        }
        if (receiver instanceof P.Object)
          return receiver;
        return J.getNativeInterceptor(receiver);
      },
      getInterceptor$ansx: function(receiver) {
        if (typeof receiver == "number")
          return J.JSNumber.prototype;
        if (typeof receiver == "string")
          return J.JSString.prototype;
        if (receiver == null)
          return receiver;
        if (receiver.constructor == Array)
          return J.JSArray.prototype;
        if (typeof receiver != "object") {
          if (typeof receiver == "function")
            return J.JavaScriptFunction.prototype;
          return receiver;
        }
        if (receiver instanceof P.Object)
          return receiver;
        return J.getNativeInterceptor(receiver);
      },
      getInterceptor$asx: function(receiver) {
        if (typeof receiver == "string")
          return J.JSString.prototype;
        if (receiver == null)
          return receiver;
        if (receiver.constructor == Array)
          return J.JSArray.prototype;
        if (typeof receiver != "object") {
          if (typeof receiver == "function")
            return J.JavaScriptFunction.prototype;
          return receiver;
        }
        if (receiver instanceof P.Object)
          return receiver;
        return J.getNativeInterceptor(receiver);
      },
      getInterceptor$ax: function(receiver) {
        if (receiver == null)
          return receiver;
        if (receiver.constructor == Array)
          return J.JSArray.prototype;
        if (typeof receiver != "object") {
          if (typeof receiver == "function")
            return J.JavaScriptFunction.prototype;
          return receiver;
        }
        if (receiver instanceof P.Object)
          return receiver;
        return J.getNativeInterceptor(receiver);
      },
      getInterceptor$bn: function(receiver) {
        if (typeof receiver == "number")
          return J.JSNumber.prototype;
        if (receiver == null)
          return receiver;
        if (typeof receiver == "boolean")
          return J.JSBool.prototype;
        if (!(receiver instanceof P.Object))
          return J.UnknownJavaScriptObject.prototype;
        return receiver;
      },
      getInterceptor$n: function(receiver) {
        if (typeof receiver == "number")
          return J.JSNumber.prototype;
        if (receiver == null)
          return receiver;
        if (!(receiver instanceof P.Object))
          return J.UnknownJavaScriptObject.prototype;
        return receiver;
      },
      getInterceptor$ns: function(receiver) {
        if (typeof receiver == "number")
          return J.JSNumber.prototype;
        if (typeof receiver == "string")
          return J.JSString.prototype;
        if (receiver == null)
          return receiver;
        if (!(receiver instanceof P.Object))
          return J.UnknownJavaScriptObject.prototype;
        return receiver;
      },
      getInterceptor$s: function(receiver) {
        if (typeof receiver == "string")
          return J.JSString.prototype;
        if (receiver == null)
          return receiver;
        if (!(receiver instanceof P.Object))
          return J.UnknownJavaScriptObject.prototype;
        return receiver;
      },
      getInterceptor$x: function(receiver) {
        if (receiver == null)
          return receiver;
        if (typeof receiver != "object") {
          if (typeof receiver == "function")
            return J.JavaScriptFunction.prototype;
          return receiver;
        }
        if (receiver instanceof P.Object)
          return receiver;
        return J.getNativeInterceptor(receiver);
      },
      get$attributes$x: function(receiver) {
        return J.getInterceptor$x(receiver).get$attributes(receiver);
      },
      get$children$x: function(receiver) {
        return J.getInterceptor$x(receiver).get$children(receiver);
      },
      get$hashCode$: function(receiver) {
        return J.getInterceptor$(receiver).get$hashCode(receiver);
      },
      get$isEmpty$asx: function(receiver) {
        return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
      },
      get$iterator$ax: function(receiver) {
        return J.getInterceptor$ax(receiver).get$iterator(receiver);
      },
      get$keys$x: function(receiver) {
        return J.getInterceptor$x(receiver).get$keys(receiver);
      },
      get$length$asx: function(receiver) {
        return J.getInterceptor$asx(receiver).get$length(receiver);
      },
      get$name$x: function(receiver) {
        return J.getInterceptor$x(receiver).get$name(receiver);
      },
      $add$ansx: function(receiver, a0) {
        if (typeof receiver == "number" && typeof a0 == "number")
          return receiver + a0;
        return J.getInterceptor$ansx(receiver).$add(receiver, a0);
      },
      $and$bn: function(receiver, a0) {
        if (typeof receiver == "number" && typeof a0 == "number")
          return (receiver & a0) >>> 0;
        return J.getInterceptor$bn(receiver).$and(receiver, a0);
      },
      $eq$: function(receiver, a0) {
        if (receiver == null)
          return a0 == null;
        if (typeof receiver != "object")
          return a0 != null && receiver === a0;
        return J.getInterceptor$(receiver).$eq(receiver, a0);
      },
      $ge$n: function(receiver, a0) {
        if (typeof receiver == "number" && typeof a0 == "number")
          return receiver >= a0;
        return J.getInterceptor$n(receiver).$ge(receiver, a0);
      },
      $gt$n: function(receiver, a0) {
        if (typeof receiver == "number" && typeof a0 == "number")
          return receiver > a0;
        return J.getInterceptor$n(receiver).$gt(receiver, a0);
      },
      $index$asx: function(receiver, a0) {
        if (typeof a0 === "number")
          if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
            if (a0 >>> 0 === a0 && a0 < receiver.length)
              return receiver[a0];
        return J.getInterceptor$asx(receiver).$index(receiver, a0);
      },
      $indexSet$ax: function(receiver, a0, a1) {
        return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
      },
      $lt$n: function(receiver, a0) {
        if (typeof receiver == "number" && typeof a0 == "number")
          return receiver < a0;
        return J.getInterceptor$n(receiver).$lt(receiver, a0);
      },
      _addEventListener$3$x: function(receiver, a0, a1, a2) {
        return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
      },
      _codeUnitAt$1$s: function(receiver, a0) {
        return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
      },
      _replaceChild$2$x: function(receiver, a0, a1) {
        return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
      },
      add$1$ax: function(receiver, a0) {
        return J.getInterceptor$ax(receiver).add$1(receiver, a0);
      },
      ceil$0$n: function(receiver) {
        return J.getInterceptor$n(receiver).ceil$0(receiver);
      },
      clamp$2$n: function(receiver, a0, a1) {
        return J.getInterceptor$n(receiver).clamp$2(receiver, a0, a1);
      },
      compareTo$1$ns: function(receiver, a0) {
        return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
      },
      contains$1$asx: function(receiver, a0) {
        return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
      },
      contains$2$asx: function(receiver, a0, a1) {
        return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
      },
      containsKey$1$x: function(receiver, a0) {
        return J.getInterceptor$x(receiver).containsKey$1(receiver, a0);
      },
      elementAt$1$ax: function(receiver, a0) {
        return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
      },
      forEach$1$ax: function(receiver, a0) {
        return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
      },
      map$1$1$ax: function(receiver, a0, $T1) {
        return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
      },
      noSuchMethod$1$: function(receiver, a0) {
        return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
      },
      remove$0$ax: function(receiver) {
        return J.getInterceptor$ax(receiver).remove$0(receiver);
      },
      replaceWith$1$x: function(receiver, a0) {
        return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
      },
      split$1$s: function(receiver, a0) {
        return J.getInterceptor$s(receiver).split$1(receiver, a0);
      },
      substring$2$s: function(receiver, a0, a1) {
        return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
      },
      toInt$0$n: function(receiver) {
        return J.getInterceptor$n(receiver).toInt$0(receiver);
      },
      toList$0$ax: function(receiver) {
        return J.getInterceptor$ax(receiver).toList$0(receiver);
      },
      toLowerCase$0$s: function(receiver) {
        return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
      },
      toString$0$: function(receiver) {
        return J.getInterceptor$(receiver).toString$0(receiver);
      },
      trim$0$s: function(receiver) {
        return J.getInterceptor$s(receiver).trim$0(receiver);
      },
      where$1$ax: function(receiver, a0) {
        return J.getInterceptor$ax(receiver).where$1(receiver, a0);
      },
      Interceptor: function Interceptor() {
      },
      JSBool: function JSBool() {
      },
      JSNull: function JSNull() {
      },
      JavaScriptObject: function JavaScriptObject() {
      },
      PlainJavaScriptObject: function PlainJavaScriptObject() {
      },
      UnknownJavaScriptObject: function UnknownJavaScriptObject() {
      },
      JavaScriptFunction: function JavaScriptFunction() {
      },
      JSArray: function JSArray(t0) {
        this.$ti = t0;
      },
      JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
        this.$ti = t0;
      },
      ArrayIterator: function ArrayIterator(t0, t1, t2, t3) {
        var _ = this;
        _.__interceptors$_iterable = t0;
        _.__interceptors$_length = t1;
        _.__interceptors$_index = t2;
        _.__interceptors$_current = null;
        _.$ti = t3;
      },
      JSNumber: function JSNumber() {
      },
      JSInt: function JSInt() {
      },
      JSDouble: function JSDouble() {
      },
      JSString: function JSString() {
      }
    },
    P = {
      _AsyncRun__initializeScheduleImmediate: function() {
        var t1, div, span;
        t1 = {};
        if (self.scheduleImmediate != null)
          return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
        if (self.MutationObserver != null && self.document != null) {
          div = self.document.createElement("div");
          span = self.document.createElement("span");
          t1.storedCallback = null;
          new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
          return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
        } else if (self.setImmediate != null)
          return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
        return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
      },
      _AsyncRun__scheduleImmediateJsOverride: function(callback) {
        self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
      },
      _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
        self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
      },
      _AsyncRun__scheduleImmediateWithTimer: function(callback) {
        H.functionTypeCheck(callback, {func: 1, ret: -1});
        P._TimerImpl$(0, callback);
      },
      _TimerImpl$: function(milliseconds, callback) {
        var t1 = new P._TimerImpl(true);
        t1._TimerImpl$2(milliseconds, callback);
        return t1;
      },
      _IterationMarker_yieldStar: function(values) {
        return new P._IterationMarker(values, 1);
      },
      _IterationMarker_endOfIteration: function() {
        return C._IterationMarker_null_2;
      },
      _IterationMarker_uncaughtError: function(error) {
        return new P._IterationMarker(error, 3);
      },
      _makeSyncStarIterable: function(body, $T) {
        return new P._SyncStarIterable(body, [$T]);
      },
      _Future__chainForeignFuture: function(source, target) {
        var e, s, exception;
        target._state = 1;
        try {
          source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
        }
      },
      _Future__chainCoreFuture: function(source, target) {
        var t1, listeners;
        for (; t1 = source._state, t1 === 2;)
          source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
        if (t1 >= 4) {
          listeners = target._removeListeners$0();
          target._state = source._state;
          target._resultOrListeners = source._resultOrListeners;
          P._Future__propagateToListeners(target, listeners);
        } else {
          listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
          target._state = 2;
          target._resultOrListeners = source;
          source._prependListeners$1(listeners);
        }
      },
      _Future__propagateToListeners: function(source, listeners) {
        var _box_1, t1, _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, t4, oldZone, current, result;
        _box_1 = {};
        _box_1.source = source;
        for (t1 = source; true;) {
          _box_0 = {};
          hasError = t1._state === 8;
          if (listeners == null) {
            if (hasError) {
              asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
              t1 = t1._zone;
              t2 = asyncError.error;
              t3 = asyncError.stackTrace;
              t1.toString;
              P._rootHandleUncaughtError(null, null, t1, t2, t3);
            }
            return;
          }
          for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
            listeners._nextListener = null;
            P._Future__propagateToListeners(_box_1.source, listeners);
          }
          t1 = _box_1.source;
          sourceResult = t1._resultOrListeners;
          _box_0.listenerHasError = hasError;
          _box_0.listenerValueOrError = sourceResult;
          t2 = !hasError;
          if (t2) {
            t3 = listeners.state;
            t3 = (t3 & 1) !== 0 || t3 === 8;
          } else
            t3 = true;
          if (t3) {
            t3 = listeners.result;
            zone = t3._zone;
            if (hasError) {
              t4 = t1._zone;
              t4.toString;
              t4 = t4 == zone;
              if (!t4)
                zone.toString;
              else
                t4 = true;
              t4 = !t4;
            } else
              t4 = false;
            if (t4) {
              H.interceptedTypeCheck(sourceResult, "$isAsyncError");
              t1 = t1._zone;
              t2 = sourceResult.error;
              t3 = sourceResult.stackTrace;
              t1.toString;
              P._rootHandleUncaughtError(null, null, t1, t2, t3);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone != zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            t1 = listeners.state;
            if (t1 === 8)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
            else if (t2) {
              if ((t1 & 1) !== 0)
                new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
            } else if ((t1 & 2) !== 0)
              new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            t1 = _box_0.listenerValueOrError;
            if (!!J.getInterceptor$(t1).$isFuture) {
              if (t1._state >= 4) {
                current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
                t3._resultOrListeners = null;
                listeners = t3._reverseListeners$1(current);
                t3._state = t1._state;
                t3._resultOrListeners = t1._resultOrListeners;
                _box_1.source = t1;
                continue;
              } else
                P._Future__chainCoreFuture(t1, t3);
              return;
            }
          }
          result = listeners.result;
          current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
          result._resultOrListeners = null;
          listeners = result._reverseListeners$1(current);
          t1 = _box_0.listenerHasError;
          t2 = _box_0.listenerValueOrError;
          if (!t1) {
            H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
            result._state = 4;
            result._resultOrListeners = t2;
          } else {
            H.interceptedTypeCheck(t2, "$isAsyncError");
            result._state = 8;
            result._resultOrListeners = t2;
          }
          _box_1.source = result;
          t1 = result;
        }
      },
      _registerErrorHandler: function(errorHandler, zone) {
        if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
          return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
        if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]})) {
          zone.toString;
          return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
        }
        throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
      },
      _microtaskLoop: function() {
        var t1, t2;
        for (; t1 = $._nextCallback, t1 != null;) {
          $._lastPriorityCallback = null;
          t2 = t1.next;
          $._nextCallback = t2;
          if (t2 == null)
            $._lastCallback = null;
          t1.callback.call$0();
        }
      },
      _startMicrotaskLoop: function() {
        $._isInCallbackLoop = true;
        try {
          P._microtaskLoop();
        } finally {
          $._lastPriorityCallback = null;
          $._isInCallbackLoop = false;
          if ($._nextCallback != null)
            $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
        }
      },
      _scheduleAsyncCallback: function(callback) {
        var newEntry = new P._AsyncCallbackEntry(H.functionTypeCheck(callback, {func: 1, ret: -1}));
        if ($._nextCallback == null) {
          $._lastCallback = newEntry;
          $._nextCallback = newEntry;
          if (!$._isInCallbackLoop)
            $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
        } else {
          $._lastCallback.next = newEntry;
          $._lastCallback = newEntry;
        }
      },
      _schedulePriorityAsyncCallback: function(callback) {
        var t1, entry, t2;
        H.functionTypeCheck(callback, {func: 1, ret: -1});
        t1 = $._nextCallback;
        if (t1 == null) {
          P._scheduleAsyncCallback(callback);
          $._lastPriorityCallback = $._lastCallback;
          return;
        }
        entry = new P._AsyncCallbackEntry(callback);
        t2 = $._lastPriorityCallback;
        if (t2 == null) {
          entry.next = t1;
          $._lastPriorityCallback = entry;
          $._nextCallback = entry;
        } else {
          entry.next = t2.next;
          t2.next = entry;
          $._lastPriorityCallback = entry;
          if (entry.next == null)
            $._lastCallback = entry;
        }
      },
      scheduleMicrotask: function(callback) {
        var t1, currentZone;
        t1 = {func: 1, ret: -1};
        H.functionTypeCheck(callback, t1);
        currentZone = $.Zone__current;
        if (C.C__RootZone === currentZone) {
          P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
          return;
        }
        currentZone.toString;
        P._rootScheduleMicrotask(null, null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), t1));
      },
      _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
        var t1 = {};
        t1.error = error;
        P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
      },
      _rootRun: function($self, $parent, zone, f, $R) {
        var old, t1;
        H.functionTypeCheck(f, {func: 1, ret: $R});
        t1 = $.Zone__current;
        if (t1 === zone)
          return f.call$0();
        $.Zone__current = zone;
        old = t1;
        try {
          t1 = f.call$0();
          return t1;
        } finally {
          $.Zone__current = old;
        }
      },
      _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
        var old, t1;
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        t1 = $.Zone__current;
        if (t1 === zone)
          return f.call$1(arg);
        $.Zone__current = zone;
        old = t1;
        try {
          t1 = f.call$1(arg);
          return t1;
        } finally {
          $.Zone__current = old;
        }
      },
      _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
        var old, t1;
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
        H.assertSubtypeOfRuntimeType(arg1, T1);
        H.assertSubtypeOfRuntimeType(arg2, T2);
        t1 = $.Zone__current;
        if (t1 === zone)
          return f.call$2(arg1, arg2);
        $.Zone__current = zone;
        old = t1;
        try {
          t1 = f.call$2(arg1, arg2);
          return t1;
        } finally {
          $.Zone__current = old;
        }
      },
      _rootScheduleMicrotask: function($self, $parent, zone, f) {
        var t1;
        H.functionTypeCheck(f, {func: 1, ret: -1});
        t1 = C.C__RootZone !== zone;
        if (t1) {
          if (t1) {
            zone.toString;
            t1 = false;
          } else
            t1 = true;
          f = !t1 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
        }
        P._scheduleAsyncCallback(f);
      },
      _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
        this._box_0 = t0;
      },
      _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
        this._box_0 = t0;
        this.div = t1;
        this.span = t2;
      },
      _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
        this.callback = t0;
      },
      _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
        this.callback = t0;
      },
      _TimerImpl: function _TimerImpl(t0) {
        this._once = t0;
        this._handle = null;
        this._tick = 0;
      },
      _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
        this.$this = t0;
        this.callback = t1;
      },
      _IterationMarker: function _IterationMarker(t0, t1) {
        this.value = t0;
        this.state = t1;
      },
      _SyncStarIterator: function _SyncStarIterator(t0, t1) {
        var _ = this;
        _._body = t0;
        _._suspendedBodies = _._nestedIterator = _._async$_current = null;
        _.$ti = t1;
      },
      _SyncStarIterable: function _SyncStarIterable(t0, t1) {
        this._outerHelper = t0;
        this.$ti = t1;
      },
      _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
        var _ = this;
        _._nextListener = null;
        _.result = t0;
        _.state = t1;
        _.callback = t2;
        _.errorCallback = t3;
        _.$ti = t4;
      },
      _Future: function _Future(t0, t1, t2) {
        var _ = this;
        _._state = t0;
        _._zone = t1;
        _._resultOrListeners = null;
        _.$ti = t2;
      },
      _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
        this.$this = t0;
        this.listener = t1;
      },
      _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
        this._box_0 = t0;
        this.$this = t1;
      },
      _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
        this.target = t0;
      },
      _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
        this.target = t0;
      },
      _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
        this.target = t0;
        this.e = t1;
        this.s = t2;
      },
      _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
        var _ = this;
        _._box_1 = t0;
        _._box_0 = t1;
        _.listener = t2;
        _.hasError = t3;
      },
      _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
        this.originalSource = t0;
      },
      _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
        this._box_0 = t0;
        this.listener = t1;
        this.sourceResult = t2;
      },
      _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
        this._box_1 = t0;
        this._box_0 = t1;
        this.listener = t2;
      },
      _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
        this.callback = t0;
        this.next = null;
      },
      Stream: function Stream() {
      },
      Stream_length_closure: function Stream_length_closure(t0, t1) {
        this._box_0 = t0;
        this.$this = t1;
      },
      Stream_length_closure0: function Stream_length_closure0(t0, t1) {
        this._box_0 = t0;
        this.future = t1;
      },
      StreamSubscription: function StreamSubscription() {
      },
      StreamTransformerBase: function StreamTransformerBase() {
      },
      AsyncError: function AsyncError(t0, t1) {
        this.error = t0;
        this.stackTrace = t1;
      },
      _Zone: function _Zone() {
      },
      _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
        this._box_0 = t0;
        this.stackTrace = t1;
      },
      _RootZone: function _RootZone() {
      },
      _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
        this.$this = t0;
        this.f = t1;
        this.R = t2;
      },
      _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
        this.$this = t0;
        this.f = t1;
      },
      _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
        this.$this = t0;
        this.f = t1;
        this.T = t2;
      },
      LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
        return new H.JsLinkedHashMap([$K, $V]);
      },
      LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
        H.listTypeCheck(keyValuePairs);
        return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
      },
      LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
        return new H.JsLinkedHashMap([$K, $V]);
      },
      LinkedHashMap__makeEmpty: function() {
        return new H.JsLinkedHashMap([null, null]);
      },
      LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
        return new P._LinkedHashSet([$E]);
      },
      _LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      },
      _LinkedHashSetIterator$: function(_set, _modifications, $E) {
        var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
        t1._collection$_cell = _set._collection$_first;
        return t1;
      },
      IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
        var parts, t1;
        if (P._isToStringVisiting(iterable)) {
          if (leftDelimiter === "(" && rightDelimiter === ")")
            return "(...)";
          return leftDelimiter + "..." + rightDelimiter;
        }
        parts = H.setRuntimeTypeInfo([], [P.String]);
        t1 = $.$get$_toStringVisiting();
        C.JSArray_methods.add$1(t1, iterable);
        try {
          P._iterablePartsToStrings(iterable, parts);
        } finally {
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        }
        t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
        var buffer, t1, t2;
        if (P._isToStringVisiting(iterable))
          return leftDelimiter + "..." + rightDelimiter;
        buffer = new P.StringBuffer(leftDelimiter);
        t1 = $.$get$_toStringVisiting();
        C.JSArray_methods.add$1(t1, iterable);
        try {
          t2 = buffer;
          t2._contents = P.StringBuffer__writeAll(t2._contents, iterable, ", ");
        } finally {
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        }
        buffer._contents += rightDelimiter;
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _isToStringVisiting: function(o) {
        var i, t1;
        for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
          if (o === t1[i])
            return true;
        return false;
      },
      _iterablePartsToStrings: function(iterable, parts) {
        var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
        H.assertSubtype(parts, "$isList", [P.String], "$asList");
        it = J.get$iterator$ax(iterable);
        $length = 0;
        count = 0;
        while (true) {
          if (!($length < 80 || count < 3))
            break;
          if (!it.moveNext$0())
            return;
          next = H.S(it.get$current());
          C.JSArray_methods.add$1(parts, next);
          $length += next.length + 2;
          ++count;
        }
        if (!it.moveNext$0()) {
          if (count <= 5)
            return;
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          ultimateString = parts.pop();
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
        } else {
          penultimate = it.get$current();
          ++count;
          if (!it.moveNext$0()) {
            if (count <= 4) {
              C.JSArray_methods.add$1(parts, H.S(penultimate));
              return;
            }
            ultimateString = H.S(penultimate);
            if (0 >= parts.length)
              return H.ioore(parts, -1);
            penultimateString = parts.pop();
            $length += ultimateString.length + 2;
          } else {
            ultimate = it.get$current();
            ++count;
            for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
              ultimate0 = it.get$current();
              ++count;
              if (count > 100) {
                while (true) {
                  if (!($length > 75 && count > 3))
                    break;
                  if (0 >= parts.length)
                    return H.ioore(parts, -1);
                  $length -= parts.pop().length + 2;
                  --count;
                }
                C.JSArray_methods.add$1(parts, "...");
                return;
              }
            }
            penultimateString = H.S(penultimate);
            ultimateString = H.S(ultimate);
            $length += ultimateString.length + penultimateString.length + 4;
          }
        }
        if (count > parts.length + 2) {
          $length += 5;
          elision = "...";
        } else
          elision = null;
        while (true) {
          if (!($length > 80 && parts.length > 3))
            break;
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          $length -= parts.pop().length + 2;
          if (elision == null) {
            $length += 5;
            elision = "...";
          }
        }
        if (elision != null)
          C.JSArray_methods.add$1(parts, elision);
        C.JSArray_methods.add$1(parts, penultimateString);
        C.JSArray_methods.add$1(parts, ultimateString);
      },
      LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
        var result = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
        other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
        return result;
      },
      LinkedHashMap_LinkedHashMap$of: function(other, $K, $V) {
        var t1;
        H.assertSubtype(other, "$isMap", [$K, $V], "$asMap");
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
        t1.addAll$1(0, other);
        return t1;
      },
      LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
        var result, t1;
        result = P.LinkedHashSet_LinkedHashSet(null, null, null, $E);
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          result.add$1(0, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
        return result;
      },
      MapBase_mapToString: function(m) {
        var t1, result;
        t1 = {};
        if (P._isToStringVisiting(m))
          return "{...}";
        result = new P.StringBuffer("");
        try {
          C.JSArray_methods.add$1($.$get$_toStringVisiting(), m);
          result._contents += "{";
          t1.first = true;
          J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
          result._contents += "}";
        } finally {
          t1 = $.$get$_toStringVisiting();
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        }
        t1 = result._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      MapBase__id: function(x) {
        return x;
      },
      MapBase__fillMapWithMappedIterable: function(map, iterable, key, value) {
        var t1, _i, element;
        H.functionTypeCheck(key, {func: 1, args: [,]});
        for (t1 = iterable.length, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i) {
          element = iterable[_i];
          map.$indexSet(0, key.call$1(element), P.collection_MapBase__id$closure().call$1(element));
        }
      },
      ListQueue$: function(initialCapacity, $E) {
        var t1, t2;
        t1 = new P.ListQueue(0, 0, [$E]);
        t2 = new Array(8);
        t2.fixed$length = Array;
        t1.set$_table(H.setRuntimeTypeInfo(t2, [$E]));
        return t1;
      },
      _LinkedHashSet: function _LinkedHashSet(t0) {
        var _ = this;
        _._collection$_length = 0;
        _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
        _._collection$_modifications = 0;
        _.$ti = t0;
      },
      _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
        this._element = t0;
        this._collection$_previous = this._collection$_next = null;
      },
      _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
        var _ = this;
        _._set = t0;
        _._collection$_modifications = t1;
        _._collection$_current = _._collection$_cell = null;
        _.$ti = t2;
      },
      IterableMixin: function IterableMixin() {
      },
      IterableBase: function IterableBase() {
      },
      LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
        this.result = t0;
        this.K = t1;
        this.V = t2;
      },
      ListBase: function ListBase() {
      },
      ListMixin: function ListMixin() {
      },
      MapBase: function MapBase() {
      },
      MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
        this._box_0 = t0;
        this.result = t1;
      },
      MapMixin: function MapMixin() {
      },
      MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
        this.$this = t0;
      },
      _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
      },
      MapView: function MapView() {
      },
      UnmodifiableMapView: function UnmodifiableMapView() {
      },
      Queue: function Queue() {
      },
      ListQueue: function ListQueue(t0, t1, t2) {
        var _ = this;
        _._table = null;
        _._head = t0;
        _._tail = t1;
        _._modificationCount = 0;
        _.$ti = t2;
      },
      _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
        var _ = this;
        _._collection$_queue = t0;
        _._collection$_end = t1;
        _._modificationCount = t2;
        _._collection$_position = t3;
        _._collection$_current = null;
        _.$ti = t4;
      },
      _SetBase: function _SetBase() {
      },
      _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
      },
      _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
      },
      _parseJson: function(source, reviver) {
        var parsed, e, exception, t1;
        parsed = null;
        try {
          parsed = JSON.parse(source);
        } catch (exception) {
          e = H.unwrapException(exception);
          t1 = P.FormatException$(String(e), null, null);
          throw H.wrapException(t1);
        }
        t1 = P._convertJsonToDartLazy(parsed);
        return t1;
      },
      _convertJsonToDartLazy: function(object) {
        var i;
        if (object == null)
          return;
        if (typeof object != "object")
          return object;
        if (Object.getPrototypeOf(object) !== Array.prototype)
          return new P._JsonMap(object, Object.create(null));
        for (i = 0; i < object.length; ++i)
          object[i] = P._convertJsonToDartLazy(object[i]);
        return object;
      },
      JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
        return new P.JsonUnsupportedObjectError(unsupportedObject, cause, partialResult);
      },
      _defaultToEncodable: function(object) {
        return object.toJson$0();
      },
      _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
        var output, stringifier, t1;
        output = new P.StringBuffer("");
        stringifier = new P._JsonStringStringifier(output, [], P.convert___defaultToEncodable$closure());
        stringifier.writeObject$1(object);
        t1 = output._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      _JsonMap: function _JsonMap(t0, t1) {
        this._original = t0;
        this._processed = t1;
        this._data = null;
      },
      _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
        this._convert$_parent = t0;
      },
      Codec: function Codec() {
      },
      Converter: function Converter() {
      },
      JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1, t2) {
        this.unsupportedObject = t0;
        this.cause = t1;
        this.partialResult = t2;
      },
      JsonCyclicError: function JsonCyclicError(t0, t1, t2) {
        this.unsupportedObject = t0;
        this.cause = t1;
        this.partialResult = t2;
      },
      JsonCodec: function JsonCodec(t0, t1) {
        this._reviver = t0;
        this._toEncodable = t1;
      },
      JsonEncoder: function JsonEncoder(t0, t1) {
        this.indent = t0;
        this._toEncodable = t1;
      },
      JsonDecoder: function JsonDecoder(t0) {
        this._reviver = t0;
      },
      _JsonStringifier: function _JsonStringifier() {
      },
      _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
        this._box_0 = t0;
        this.keyValueList = t1;
      },
      _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
        this._sink = t0;
        this._seen = t1;
        this._toEncodable = t2;
      },
      Error__objectToString: function(object) {
        if (object instanceof H.Closure)
          return object.toString$0(0);
        return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
      },
      List_List$filled: function($length, fill, growable, $E) {
        var result, i;
        H.assertSubtypeOfRuntimeType(fill, $E);
        result = J.JSArray_JSArray$fixed($length, $E);
        if ($length !== 0 && fill != null)
          for (i = 0; i < result.length; ++i)
            C.JSArray_methods.$indexSet(result, i, fill);
        return H.assertSubtype(result, "$isList", [$E], "$asList");
      },
      List_List$from: function(elements, growable, $E) {
        var t1, list, t2;
        t1 = [$E];
        list = H.setRuntimeTypeInfo([], t1);
        for (t2 = J.get$iterator$ax(elements); t2.moveNext$0();)
          C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t2.get$current(), $E));
        if (growable)
          return list;
        return H.assertSubtype(J.JSArray_markFixedList(list), "$isList", t1, "$asList");
      },
      String_String$fromCharCodes: function(charCodes, start, end) {
        var t1, len;
        t1 = P.int;
        H.assertSubtype(charCodes, "$isIterable", [t1], "$asIterable");
        if (charCodes.constructor === Array) {
          H.assertSubtype(charCodes, "$isJSArray", [t1], "$asJSArray");
          len = charCodes.length;
          end = P.RangeError_checkValidRange(start, end, len, null, null, null);
          if (start <= 0) {
            if (typeof end !== "number")
              return end.$lt();
            t1 = end < len;
          } else
            t1 = true;
          return H.Primitives_stringFromCharCodes(t1 ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
        }
        return P.String__stringFromIterable(charCodes, start, end);
      },
      String__stringFromIterable: function(charCodes, start, end) {
        var it, i, list;
        H.assertSubtype(charCodes, "$isIterable", [P.int], "$asIterable");
        it = J.get$iterator$ax(charCodes);
        for (i = 0; i < start; ++i)
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
        list = [];
        for (; it.moveNext$0();)
          list.push(it.get$current());
        return H.Primitives_stringFromCharCodes(list);
      },
      RegExp_RegExp: function(source, caseSensitive, multiLine) {
        return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false));
      },
      StringBuffer__writeAll: function(string, objects, separator) {
        var iterator = J.get$iterator$ax(objects);
        if (!iterator.moveNext$0())
          return string;
        if (separator.length === 0) {
          do
            string += H.S(iterator.get$current());
          while (iterator.moveNext$0());
        } else {
          string += H.S(iterator.get$current());
          for (; iterator.moveNext$0();)
            string = string + separator + H.S(iterator.get$current());
        }
        return string;
      },
      NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      },
      DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + absN;
        if (absN >= 10)
          return sign + "00" + absN;
        return sign + "000" + absN;
      },
      DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      },
      DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      },
      Error_safeToString: function(object) {
        if (typeof object === "number" || typeof object === "boolean" || null == object)
          return J.toString$0$(object);
        if (typeof object === "string")
          return JSON.stringify(object);
        return P.Error__objectToString(object);
      },
      ArgumentError$: function(message) {
        return new P.ArgumentError(false, null, null, message);
      },
      ArgumentError$value: function(value, $name, message) {
        return new P.ArgumentError(true, value, $name, message);
      },
      ArgumentError$notNull: function($name) {
        return new P.ArgumentError(false, null, $name, "Must not be null");
      },
      RangeError$: function(message) {
        return new P.RangeError(null, null, false, null, null, message);
      },
      RangeError$value: function(value, $name, message) {
        return new P.RangeError(null, null, true, value, $name, "Value not in range");
      },
      RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
        return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
      },
      RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
        var t1;
        if (typeof start !== "number")
          return H.iae(start);
        if (0 <= start) {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = start > $length;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
        if (end != null) {
          if (!(start > end)) {
            if (typeof $length !== "number")
              return H.iae($length);
            t1 = end > $length;
          } else
            t1 = true;
          if (t1)
            throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
          return end;
        }
        return $length;
      },
      IndexError$: function(invalidValue, indexable, $name, message, $length) {
        var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length);
        return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
      },
      UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      },
      UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      },
      StateError$: function(message) {
        return new P.StateError(message);
      },
      ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      },
      FormatException$: function(message, source, offset) {
        return new P.FormatException(message, source, offset);
      },
      List_List$generate: function($length, generator, growable, $E) {
        var result, i;
        H.functionTypeCheck(generator, {func: 1, ret: $E, args: [P.int]});
        result = H.setRuntimeTypeInfo([], [$E]);
        C.JSArray_methods.set$length(result, $length);
        for (i = 0; i < $length; ++i)
          C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
        return result;
      },
      print: function(object) {
        H.printString(object);
      },
      NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
        this._box_0 = t0;
        this.sb = t1;
      },
      bool: function bool() {
      },
      DateTime: function DateTime(t0, t1) {
        this._core$_value = t0;
        this.isUtc = t1;
      },
      double: function double() {
      },
      Error: function Error() {
      },
      NullThrownError: function NullThrownError() {
      },
      ArgumentError: function ArgumentError(t0, t1, t2, t3) {
        var _ = this;
        _._hasValue = t0;
        _.invalidValue = t1;
        _.name = t2;
        _.message = t3;
      },
      RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.start = t0;
        _.end = t1;
        _._hasValue = t2;
        _.invalidValue = t3;
        _.name = t4;
        _.message = t5;
      },
      IndexError: function IndexError(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.indexable = t0;
        _.length = t1;
        _._hasValue = t2;
        _.invalidValue = t3;
        _.name = t4;
        _.message = t5;
      },
      NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3, t4) {
        var _ = this;
        _._core$_receiver = t0;
        _._core$_memberName = t1;
        _._core$_arguments = t2;
        _._namedArguments = t3;
        _._existingArgumentNames = t4;
      },
      UnsupportedError: function UnsupportedError(t0) {
        this.message = t0;
      },
      UnimplementedError: function UnimplementedError(t0) {
        this.message = t0;
      },
      StateError: function StateError(t0) {
        this.message = t0;
      },
      ConcurrentModificationError: function ConcurrentModificationError(t0) {
        this.modifiedObject = t0;
      },
      OutOfMemoryError: function OutOfMemoryError() {
      },
      StackOverflowError: function StackOverflowError() {
      },
      CyclicInitializationError: function CyclicInitializationError(t0) {
        this.variableName = t0;
      },
      _Exception: function _Exception(t0) {
        this.message = t0;
      },
      FormatException: function FormatException(t0, t1, t2) {
        this.message = t0;
        this.source = t1;
        this.offset = t2;
      },
      Function: function Function() {
      },
      int: function int() {
      },
      Iterable: function Iterable() {
      },
      Iterator: function Iterator() {
      },
      List: function List() {
      },
      Map: function Map() {
      },
      MapEntry: function MapEntry(t0, t1, t2) {
        this.key = t0;
        this.value = t1;
        this.$ti = t2;
      },
      Null: function Null() {
      },
      num: function num() {
      },
      Object: function Object() {
      },
      StackTrace: function StackTrace() {
      },
      Stopwatch: function Stopwatch() {
        this._stop = this._core$_start = 0;
      },
      String: function String() {
      },
      StringBuffer: function StringBuffer(t0) {
        this._contents = t0;
      },
      Symbol0: function Symbol0() {
      },
      Device_isOpera: function() {
        var t1 = $.Device__isOpera;
        if (t1 == null) {
          t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
          $.Device__isOpera = t1;
        }
        return t1;
      },
      Device_isWebKit: function() {
        var t1 = $.Device__isWebKit;
        if (t1 == null) {
          t1 = !P.Device_isOpera() && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
          $.Device__isWebKit = t1;
        }
        return t1;
      },
      FilteredElementList: function FilteredElementList(t0, t1) {
        this._node = t0;
        this._childNodes = t1;
      },
      FilteredElementList__iterable_closure: function FilteredElementList__iterable_closure() {
      },
      FilteredElementList__iterable_closure0: function FilteredElementList__iterable_closure0() {
      },
      FilteredElementList_removeRange_closure: function FilteredElementList_removeRange_closure() {
      },
      KeyRange: function KeyRange() {
      },
      _callDartFunction: function(callback, captureThis, $self, $arguments) {
        var arguments0, dartArgs;
        H.boolTypeCheck(captureThis);
        H.listTypeCheck($arguments);
        if (captureThis) {
          arguments0 = [$self];
          C.JSArray_methods.addAll$1(arguments0, $arguments);
          $arguments = arguments0;
        }
        dartArgs = P.List_List$from(J.map$1$1$ax($arguments, P.js___convertToDart$closure(), null), true, null);
        H.interceptedTypeCheck(callback, "$isFunction");
        return P._convertToJS(H.Primitives_applyFunction(callback, dartArgs, null));
      },
      _defineProperty: function(o, $name, value) {
        var exception;
        try {
          if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
            Object.defineProperty(o, $name, {value: value});
            return true;
          }
        } catch (exception) {
          H.unwrapException(exception);
        }
        return false;
      },
      _getOwnProperty: function(o, $name) {
        if (Object.prototype.hasOwnProperty.call(o, $name))
          return o[$name];
        return;
      },
      _convertToJS: function(o) {
        var t1;
        if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
          return o;
        t1 = J.getInterceptor$(o);
        if (!!t1.$isJsObject)
          return o._js$_jsObject;
        if (H.isBrowserObject(o))
          return o;
        if (!!t1.$isTypedData)
          return o;
        if (!!t1.$isDateTime)
          return H.Primitives_lazyAsJsDate(o);
        if (!!t1.$isFunction)
          return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
        return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
      },
      _getJsProxy: function(o, propertyName, createProxy) {
        var jsProxy;
        H.functionTypeCheck(createProxy, {func: 1, args: [,]});
        jsProxy = P._getOwnProperty(o, propertyName);
        if (jsProxy == null) {
          jsProxy = createProxy.call$1(o);
          P._defineProperty(o, propertyName, jsProxy);
        }
        return jsProxy;
      },
      _convertToDart: function(o) {
        var ms, t1;
        if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
          return o;
        else if (o instanceof Object && H.isBrowserObject(o))
          return o;
        else if (o instanceof Object && !!J.getInterceptor$(o).$isTypedData)
          return o;
        else if (o instanceof Date) {
          ms = H.intTypeCheck(o.getTime());
          if (Math.abs(ms) <= 864e13)
            t1 = false;
          else
            t1 = true;
          if (t1)
            H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + ms));
          return new P.DateTime(ms, false);
        } else if (o.constructor === $.$get$_dartProxyCtor())
          return o.o;
        else
          return P._wrapToDart(o);
      },
      _wrapToDart: function(o) {
        if (typeof o == "function")
          return P._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
        if (o instanceof Array)
          return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
      },
      _getDartProxy: function(o, propertyName, createProxy) {
        var dartProxy;
        H.functionTypeCheck(createProxy, {func: 1, args: [,]});
        dartProxy = P._getOwnProperty(o, propertyName);
        if (dartProxy == null || !(o instanceof Object)) {
          dartProxy = createProxy.call$1(o);
          P._defineProperty(o, propertyName, dartProxy);
        }
        return dartProxy;
      },
      JsObject: function JsObject(t0) {
        this._js$_jsObject = t0;
      },
      JsFunction: function JsFunction(t0) {
        this._js$_jsObject = t0;
      },
      JsArray: function JsArray(t0, t1) {
        this._js$_jsObject = t0;
        this.$ti = t1;
      },
      _convertToJS_closure: function _convertToJS_closure() {
      },
      _convertToJS_closure0: function _convertToJS_closure0(t0) {
        this.ctor = t0;
      },
      _wrapToDart_closure: function _wrapToDart_closure() {
      },
      _wrapToDart_closure0: function _wrapToDart_closure0() {
      },
      _wrapToDart_closure1: function _wrapToDart_closure1() {
      },
      _JsArray_JsObject_ListMixin: function _JsArray_JsObject_ListMixin() {
      },
      _Random$: function(seed) {
        var t1 = new P._Random();
        t1._Random$1(seed);
        return t1;
      },
      _JSRandom: function _JSRandom() {
      },
      _Random: function _Random() {
        this._hi = this._lo = 0;
      },
      ScriptElement: function ScriptElement() {
      },
      SvgElement: function SvgElement() {
      }
    },
    W = {
      CanvasElement_CanvasElement: function(height, width) {
        var e = document.createElement("canvas");
        if (width != null)
          e.width = width;
        if (height != null)
          e.height = height;
        return e;
      },
      Element_Element$html: function(html, treeSanitizer, validator) {
        var t1, fragment;
        t1 = document.body;
        fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
        fragment.toString;
        t1 = W.Node;
        t1 = new H.WhereIterable(new W._ChildNodeListLazy(fragment), H.functionTypeCheck(new W.Element_Element$html_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]);
        return H.interceptedTypeCheck(t1.get$single(t1), "$isElement0");
      },
      Element__safeTagName: function(element) {
        var result, t1, t2, exception;
        result = "element tag unavailable";
        try {
          t1 = J.getInterceptor$x(element);
          t2 = t1.get$tagName(element);
          if (typeof t2 === "string")
            result = t1.get$tagName(element);
        } catch (exception) {
          H.unwrapException(exception);
        }
        return result;
      },
      _JenkinsSmiHash_combine: function(hash, value) {
        hash = 536870911 & hash + value;
        hash = 536870911 & hash + ((524287 & hash) << 10);
        return hash ^ hash >>> 6;
      },
      _JenkinsSmiHash_hash4: function(a, b, c, d) {
        var t1, hash;
        t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d);
        hash = 536870911 & t1 + ((67108863 & t1) << 3);
        hash ^= hash >>> 11;
        return 536870911 & hash + ((16383 & hash) << 15);
      },
      _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
        var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
        t1 = new W._EventStreamSubscription(_target, _eventType, t1, false, [$T]);
        t1._tryResume$0();
        return t1;
      },
      _Html5NodeValidator$: function(uriPolicy) {
        var e, t1;
        e = document.createElement("a");
        t1 = new W._SameOriginUriPolicy(e, window.location);
        t1 = new W._Html5NodeValidator(t1);
        t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
        return t1;
      },
      _Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
        H.interceptedTypeCheck(element, "$isElement0");
        H.stringTypeCheck(attributeName);
        H.stringTypeCheck(value);
        H.interceptedTypeCheck(context, "$is_Html5NodeValidator");
        return true;
      },
      _Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
        var t1, t2, t3;
        H.interceptedTypeCheck(element, "$isElement0");
        H.stringTypeCheck(attributeName);
        H.stringTypeCheck(value);
        t1 = H.interceptedTypeCheck(context, "$is_Html5NodeValidator").uriPolicy;
        t2 = t1._hiddenAnchor;
        t2.href = value;
        t3 = t2.hostname;
        t1 = t1._loc;
        if (!(t3 == t1.hostname && t2.port == t1.port && t2.protocol == t1.protocol))
          if (t3 === "")
            if (t2.port === "") {
              t1 = t2.protocol;
              t1 = t1 === ":" || t1 === "";
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = true;
        return t1;
      },
      _TemplatingNodeValidator$: function() {
        var t1, t2, t3, t4, t5;
        t1 = P.String;
        t2 = P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, t1);
        t3 = H.getTypeArgumentByIndex(C.List_wSV, 0);
        t4 = H.functionTypeCheck(new W._TemplatingNodeValidator_closure(), {func: 1, ret: t1, args: [t3]});
        t5 = H.setRuntimeTypeInfo(["TEMPLATE"], [t1]);
        t2 = new W._TemplatingNodeValidator(t2, P.LinkedHashSet_LinkedHashSet(null, null, null, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), null);
        t2._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new H.MappedListIterable(C.List_wSV, t4, [t3, t1]), t5, null);
        return t2;
      },
      _wrapZone: function(callback, $T) {
        var t1;
        H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
        t1 = $.Zone__current;
        if (t1 === C.C__RootZone)
          return callback;
        return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
      },
      HtmlElement: function HtmlElement() {
      },
      AnchorElement: function AnchorElement() {
      },
      AreaElement: function AreaElement() {
      },
      BaseElement: function BaseElement() {
      },
      Blob: function Blob() {
      },
      BodyElement: function BodyElement() {
      },
      ButtonElement: function ButtonElement() {
      },
      CanvasElement: function CanvasElement() {
      },
      CanvasRenderingContext2D: function CanvasRenderingContext2D() {
      },
      CharacterData: function CharacterData() {
      },
      CssStyleDeclaration: function CssStyleDeclaration() {
      },
      CssStyleDeclarationBase: function CssStyleDeclarationBase() {
      },
      DomError: function DomError() {
      },
      DomException: function DomException() {
      },
      DomRectReadOnly: function DomRectReadOnly() {
      },
      _ChildrenElementList: function _ChildrenElementList(t0, t1) {
        this._html$_element = t0;
        this._childElements = t1;
      },
      Element0: function Element0() {
      },
      Element_Element$html_closure: function Element_Element$html_closure() {
      },
      EmbedElement: function EmbedElement() {
      },
      Event: function Event() {
      },
      EventTarget: function EventTarget() {
      },
      FieldSetElement: function FieldSetElement() {
      },
      File: function File() {
      },
      FormElement: function FormElement() {
      },
      HtmlCollection: function HtmlCollection() {
      },
      IFrameElement: function IFrameElement() {
      },
      ImageData: function ImageData() {
      },
      ImageElement: function ImageElement() {
      },
      InputElement: function InputElement() {
      },
      KeyboardEvent: function KeyboardEvent() {
      },
      Location: function Location() {
      },
      MapElement: function MapElement() {
      },
      MetaElement: function MetaElement() {
      },
      MouseEvent: function MouseEvent() {
      },
      NavigatorUserMediaError: function NavigatorUserMediaError() {
      },
      _ChildNodeListLazy: function _ChildNodeListLazy(t0) {
        this._this = t0;
      },
      Node: function Node() {
      },
      NodeList: function NodeList() {
      },
      ObjectElement: function ObjectElement() {
      },
      OutputElement: function OutputElement() {
      },
      OverconstrainedError: function OverconstrainedError() {
      },
      ParamElement: function ParamElement() {
      },
      SelectElement: function SelectElement() {
      },
      SharedWorkerGlobalScope: function SharedWorkerGlobalScope() {
      },
      SlotElement: function SlotElement() {
      },
      SpeechSynthesisEvent: function SpeechSynthesisEvent() {
      },
      Storage0: function Storage0() {
      },
      Storage_keys_closure: function Storage_keys_closure(t0) {
        this.keys = t0;
      },
      TableElement: function TableElement() {
      },
      TableRowElement: function TableRowElement() {
      },
      TableSectionElement: function TableSectionElement() {
      },
      TemplateElement: function TemplateElement() {
      },
      TextAreaElement: function TextAreaElement() {
      },
      UIEvent: function UIEvent() {
      },
      Window: function Window() {
      },
      WorkerGlobalScope: function WorkerGlobalScope() {
      },
      _Attr: function _Attr() {
      },
      _DomRect: function _DomRect() {
      },
      _NamedNodeMap: function _NamedNodeMap() {
      },
      _AttributeMap: function _AttributeMap() {
      },
      _ElementAttributeMap: function _ElementAttributeMap(t0) {
        this._html$_element = t0;
      },
      _EventStream: function _EventStream(t0, t1, t2, t3) {
        var _ = this;
        _._target = t0;
        _._eventType = t1;
        _._useCapture = t2;
        _.$ti = t3;
      },
      _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
        var _ = this;
        _._target = t0;
        _._eventType = t1;
        _._useCapture = t2;
        _.$ti = t3;
      },
      _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
        var _ = this;
        _._pauseCount = 0;
        _._target = t0;
        _._eventType = t1;
        _._onData = t2;
        _._useCapture = t3;
        _.$ti = t4;
      },
      _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
        this.onData = t0;
      },
      _Html5NodeValidator: function _Html5NodeValidator(t0) {
        this.uriPolicy = t0;
      },
      ImmutableListMixin: function ImmutableListMixin() {
      },
      NodeValidatorBuilder: function NodeValidatorBuilder(t0) {
        this._validators = t0;
      },
      NodeValidatorBuilder_allowsElement_closure: function NodeValidatorBuilder_allowsElement_closure(t0) {
        this.element = t0;
      },
      NodeValidatorBuilder_allowsAttribute_closure: function NodeValidatorBuilder_allowsAttribute_closure(t0, t1, t2) {
        this.element = t0;
        this.attributeName = t1;
        this.value = t2;
      },
      _SimpleNodeValidator: function _SimpleNodeValidator() {
      },
      _SimpleNodeValidator_closure: function _SimpleNodeValidator_closure() {
      },
      _SimpleNodeValidator_closure0: function _SimpleNodeValidator_closure0() {
      },
      _TemplatingNodeValidator: function _TemplatingNodeValidator(t0, t1, t2, t3, t4) {
        var _ = this;
        _._templateAttrs = t0;
        _.allowedElements = t1;
        _.allowedAttributes = t2;
        _.allowedUriAttributes = t3;
        _.uriPolicy = t4;
      },
      _TemplatingNodeValidator_closure: function _TemplatingNodeValidator_closure() {
      },
      _SvgNodeValidator: function _SvgNodeValidator() {
      },
      FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2, t3) {
        var _ = this;
        _._array = t0;
        _._html$_length = t1;
        _._position = t2;
        _._html$_current = null;
        _.$ti = t3;
      },
      NodeValidator: function NodeValidator() {
      },
      _SameOriginUriPolicy: function _SameOriginUriPolicy(t0, t1) {
        this._hiddenAnchor = t0;
        this._loc = t1;
      },
      _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer(t0) {
        this.validator = t0;
      },
      _ValidatingTreeSanitizer_sanitizeTree_walk: function _ValidatingTreeSanitizer_sanitizeTree_walk(t0) {
        this.$this = t0;
      },
      _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
      },
      _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
      },
      _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
      },
      _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
      },
      _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
      },
      _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
      },
      __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
      },
      __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
      }
    },
    T = {GameContent: function GameContent() {
    }, GameContent_createHero_closure: function GameContent_createHero_closure(t0) {
      this.hero = t0;
    }, GameContent__tryToIgniteTile_neighbor: function GameContent__tryToIgniteTile_neighbor(t0, t1, t2) {
      this._box_0 = t0;
      this.stage = t1;
      this.pos = t2;
    }, GameContent__spreadPoison_neighbor: function GameContent__spreadPoison_neighbor(t0, t1, t2) {
      this._box_0 = t0;
      this.stage = t1;
      this.pos = t2;
    }, DetectType: function DetectType(t0, t1) {
      this.index = t0;
      this._detection$_name = t1;
    }, DetectAction: function DetectAction(t0, t1) {
      var _ = this;
      _._detection$_types = t0;
      _._detection$_maxDistance = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = _._tilesByDistance = null;
    }, DetectAction__findTiles_addTile: function DetectAction__findTiles_addTile(t0, t1) {
      this.$this = t0;
      this.distanceMap = t1;
    }, DetectAction__findTiles_addTile_closure: function DetectAction__findTiles_addTile_closure() {
    }, DetectAction__findTiles_closure: function DetectAction__findTiles_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.addTile = t2;
    }, DetectAction__findTiles_closure0: function DetectAction__findTiles_closure0() {
    }, DetectAction__findTiles_closure1: function DetectAction__findTiles_closure1(t0) {
      this.distanceMap = t0;
    },
      furnishing: function(frequency, symmetry, template) {
        var t1, t2, t3, lines, mirrorLines, i, t4, rotateLines, x, line, y;
        $._furnishingFrequency = frequency;
        if (symmetry == null)
          symmetry = C.Symmetry_0;
        t1 = P.String;
        t2 = H.setRuntimeTypeInfo(template.split("\n"), [t1]);
        t3 = H.getTypeArgumentByIndex(t2, 0);
        lines = new H.MappedListIterable(t2, H.functionTypeCheck(new T.furnishing_closure(), {func: 1, ret: t1, args: [t3]}), [t3, t1]).toList$0(0);
        T._singleFurnishing(lines);
        if (symmetry === C.Symmetry_1 || symmetry === C.Symmetry_3) {
          mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
          for (t2 = [P.int], i = 0; i < lines.length; ++i) {
            t3 = lines[i];
            t3.toString;
            C.JSArray_methods.$indexSet(mirrorLines, i, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(new H.CodeUnits(t3), t2), 0, null), T.furnishing_builder___mirrorCharHorizontal$closure()));
          }
          T._singleFurnishing(mirrorLines);
        }
        if (symmetry === C.Symmetry_2 || symmetry === C.Symmetry_3) {
          mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
          for (i = 0; t2 = lines.length, i < t2; ++i)
            C.JSArray_methods.$indexSet(mirrorLines, t2 - i - 1, T._mapString(lines[i], T.furnishing_builder___mirrorCharVertical$closure()));
          T._singleFurnishing(mirrorLines);
        }
        if (symmetry === C.Symmetry_3 || symmetry === C.Symmetry_5 || symmetry === C.Symmetry_4) {
          mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
          for (t2 = [P.int], i = 0; t3 = lines.length, i < t3; ++i) {
            t4 = lines[i];
            t4.toString;
            C.JSArray_methods.$indexSet(mirrorLines, t3 - i - 1, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(new H.CodeUnits(t4), t2), 0, null), T.furnishing_builder___mirrorCharBoth$closure()));
          }
          T._singleFurnishing(mirrorLines);
        }
        if (symmetry === C.Symmetry_4) {
          rotateLines = H.setRuntimeTypeInfo([], [t1]);
          x = 0;
          while (true) {
            if (0 >= lines.length)
              return H.ioore(lines, 0);
            t1 = J.get$length$asx(lines[0]);
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(x < t1))
              break;
            for (line = "", y = 0; y < lines.length; ++y)
              line += T._rotateChar90(J.$index$asx(lines[y], x));
            C.JSArray_methods.add$1(rotateLines, line);
            ++x;
          }
          T._singleFurnishing(rotateLines);
          mirrorLines = H.setRuntimeTypeInfo(rotateLines.slice(0), [H.getTypeArgumentByIndex(rotateLines, 0)]);
          for (t1 = [P.int], i = 0; t2 = rotateLines.length, i < t2; ++i)
            C.JSArray_methods.$indexSet(mirrorLines, t2 - i - 1, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(new H.CodeUnits(rotateLines[i]), t1), 0, null), T.furnishing_builder___mirrorCharBoth$closure()));
          T._singleFurnishing(mirrorLines);
        }
      },
      _mapString: function(input, map) {
        var t1, i, t2;
        H.functionTypeCheck(map, {func: 1, ret: P.String, args: [P.String]});
        for (t1 = input.length, i = 0, t2 = ""; i < t1; ++i)
          t2 += H.S(map.call$1(input[i]));
        return t2.charCodeAt(0) == 0 ? t2 : t2;
      },
      _mirrorCharBoth: function(input) {
        return T._mirrorCharHorizontal(T._mirrorCharVertical(input));
      },
      _mirrorCharHorizontal: function(input) {
        var t1, _i, mirror, index;
        H.stringTypeCheck(input);
        for (t1 = $.$get$_mirrorHorizontal(), _i = 0; _i < 3; ++_i) {
          mirror = t1[_i];
          index = C.JSString_methods.indexOf$1(mirror, input);
          if (index !== -1) {
            t1 = 1 - index;
            if (t1 < 0 || t1 >= mirror.length)
              return H.ioore(mirror, t1);
            return mirror[t1];
          }
        }
        return input;
      },
      _mirrorCharVertical: function(input) {
        var t1, _i, mirror, index;
        H.stringTypeCheck(input);
        for (t1 = $.$get$_mirrorVertical(), _i = 0; _i < 3; ++_i) {
          mirror = t1[_i];
          index = C.JSString_methods.indexOf$1(mirror, input);
          if (index !== -1) {
            t1 = 1 - index;
            if (t1 < 0 || t1 >= mirror.length)
              return H.ioore(mirror, t1);
            return mirror[t1];
          }
        }
        return input;
      },
      _rotateChar90: function(input) {
        var t1, _i, rotate, index;
        for (t1 = $.$get$_rotate(), _i = 0; _i < 2; ++_i) {
          rotate = t1[_i];
          index = C.JSString_methods.indexOf$1(rotate, input);
          if (index !== -1) {
            t1 = C.JSInt_methods.$mod(index + 1, 4);
            if (t1 >= rotate.length)
              return H.ioore(rotate, t1);
            return rotate[t1];
          }
        }
        return input;
      },
      _singleFurnishing: function(lines) {
        var cells, t1, t2, t3, y, t4, x, t5, char, cell;
        H.assertSubtype(lines, "$isList", [P.String], "$asList");
        cells = M.Array2D$(J.get$length$asx(C.JSArray_methods.get$first(lines)), lines.length, null, S.Cell);
        for (t1 = H.getTypeArgumentByIndex(cells, 0), t2 = cells._elements, t3 = cells.bounds.size.x, y = 0; y < lines.length; ++y) {
          t4 = y * t3;
          x = 0;
          while (true) {
            t5 = J.get$length$asx(C.JSArray_methods.get$first(lines));
            if (typeof t5 !== "number")
              return H.iae(t5);
            if (!(x < t5))
              break;
            if (y >= lines.length)
              return H.ioore(lines, y);
            char = J.$index$asx(lines[y], x);
            t5 = $._categoryCells;
            if (t5 != null && t5.containsKey$1(0, char))
              cell = $._categoryCells.$index(0, char);
            else {
              t5 = $.$get$_applyCells();
              cell = t5.containsKey$1(0, char) ? t5.$index(0, char) : $.$get$_requireCells().$index(0, char);
            }
            C.JSArray_methods.$indexSet(t2, t4 + x, H.assertSubtypeOfRuntimeType(cell, t1));
            ++x;
          }
        }
        t1 = $.$get$Decor_all();
        t2 = $._categoryFrequency;
        if (t2 == null)
          t2 = $._furnishingFrequency;
        if (t2 == null)
          t2 = 1;
        t3 = $._themes;
        t1.toString;
        t1._resource$_add$7(H.assertSubtypeOfRuntimeType(new S.Furnishing(cells), H.getTypeArgumentByIndex(t1, 0)), null, null, null, t2, t2, t3);
      },
      Symmetry: function Symmetry(t0, t1) {
        this.index = t0;
        this._name = t1;
      },
      furnishing_closure: function furnishing_closure() {
      },
      HeroClass: function HeroClass(t0, t1, t2, t3) {
        var _ = this;
        _.name = t0;
        _.description = t1;
        _._proficiency = t2;
        _.startingItems = t3;
      },
      DirectionDialog: function DirectionDialog() {
      },
      DirectionDialog_render_draw: function DirectionDialog_render_draw(t0, t1) {
        this.$this = t0;
        this.terminal = t1;
      },
      SkillDirectionDialog: function SkillDirectionDialog(t0, t1) {
        var _ = this;
        _._onSelect = t0;
        _._gameScreen = t1;
        _._animateOffset = 0;
        _._ui = null;
      },
      CloseDialog: function CloseDialog(t0) {
        this._gameScreen = t0;
        this._animateOffset = 0;
        this._ui = null;
      },
      OpenDialog: function OpenDialog(t0) {
        this._gameScreen = t0;
        this._animateOffset = 0;
        this._ui = null;
      },
      ForfeitPopup: function ForfeitPopup(t0) {
        this._isTown = t0;
        this._ui = null;
      },
      StagePanel: function StagePanel(t0, t1, t2) {
        var _ = this;
        _._stage_panel$_gameScreen = t0;
        _._effects = t1;
        _.visibleMonsters = t2;
        _._hasAnimatedTile = false;
        _._stage_panel$_frame = 0;
        _.bounds = _._renderOffset = _._cameraBounds = null;
      },
      StagePanel_update_closure: function StagePanel_update_closure(t0) {
        this.$this = t0;
      },
      StagePanel_renderPanel_closure: function StagePanel_renderPanel_closure(t0, t1) {
        this.$this = t0;
        this.terminal = t1;
      }
    },
    R = {BarrierAction: function BarrierAction(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._center = t0;
      _._h = t1;
      _._v = t2;
      _._hit = t3;
      _._hitTiles = t4;
      _._distance = t5;
      _._goingNegative = _._goingPositive = true;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, BarrierAction_onPerform_tryDirection: function BarrierAction_onPerform_tryDirection(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    }, BarrierAction_onPerform_tryDirection_tryOffset: function BarrierAction_onPerform_tryDirection_tryOffset(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.sign = t2;
    }, _BarrierAction_Action_ElementActionMixin: function _BarrierAction_Action_ElementActionMixin() {
    }, Missive: function Missive(t0, t1) {
      this.index = t0;
      this._missive$_name = t1;
    }, MissiveAction: function MissiveAction(t0, t1) {
      var _ = this;
      _.target = t0;
      _.missive = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    },
      category: function(glyph, stack, verb) {
        var t1;
        R.finishItem();
        t1 = new R._CategoryBuilder(H.setRuntimeTypeInfo([], [M.Skill]), P.LinkedHashMap_LinkedHashMap$_empty(G.Element, P.int));
        $._category = t1;
        t1._builder$_glyph = glyph;
        t1._builder$_verb = verb;
        t1._maxStack = stack;
        return t1;
      },
      item: function($name, color, frequency, price) {
        var t1;
        R.finishItem();
        t1 = new R._ItemBuilder(H.setRuntimeTypeInfo([], [M.Skill]), P.LinkedHashMap_LinkedHashMap$_empty(G.Element, P.int));
        $._item = t1;
        t1._builder$_name = $name;
        t1._color = color;
        t1._frequency = frequency == null ? 1 : frequency;
        t1._price = price == null ? 0 : price;
        return t1;
      },
      affix: function($name, frequency) {
        var isPrefix, t1;
        R.finishAffix();
        if (C.JSString_methods.endsWith$1($name, " _")) {
          $name = C.JSString_methods.substring$2($name, 0, $name.length - 2);
          isPrefix = true;
        } else {
          if (C.JSString_methods.startsWith$1($name, "_ "))
            $name = C.JSString_methods.substring$1($name, 2);
          else
            throw H.wrapException('Affix "' + $name + '" must start or end with "_".');
          isPrefix = false;
        }
        t1 = P.int;
        t1 = new R._AffixBuilder($name, isPrefix, frequency, P.LinkedHashMap_LinkedHashMap$_empty(G.Element, t1), P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, t1));
        $._affix = t1;
        return t1;
      },
      finishItem: function() {
        var t1, t2, appearance, tossDamage, verb, range, t3, element, use, t4, breakage, toss, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25;
        t1 = $._item;
        if (t1 == null)
          return;
        t2 = $._category;
        appearance = L.Glyph$fromCharCode(t2._builder$_glyph, t1._color, null);
        tossDamage = t1._tossDamage;
        if (tossDamage == null)
          tossDamage = t2._tossDamage;
        if (tossDamage != null) {
          t1 = "the " + t1._builder$_name.toLowerCase();
          t2 = t2._builder$_verb;
          verb = t2 != null ? O.Log_conjugate(t2, C.Pronoun_it_it_its) : "hits";
          t2 = $._item;
          range = t2._tossRange;
          if (range == null)
            range = $._category._tossRange;
          t3 = t2._tossElement;
          element = t3 == null ? $._category._tossElement : t3;
          if (element == null)
            element = $.$get$Element_none();
          use = t2._tossUse;
          if (use == null)
            use = $._category._tossUse;
          t3 = $._category;
          t4 = t3._breakage;
          breakage = t4 == null ? t2._breakage : t4;
          if (breakage == null)
            breakage = 0;
          toss = new L.Toss(breakage, U.Attack$(new O.Noun(t1), verb, tossDamage, range, element), use);
          t1 = t2;
          t2 = t3;
        } else
          toss = null;
        t3 = t1._builder$_name;
        t4 = t1._minDepth;
        t5 = $._sortIndex;
        $._sortIndex = t5 + 1;
        t6 = t2._equipSlot;
        t7 = t2._weaponType;
        t8 = t1._use;
        t9 = t1._builder$_attack;
        t10 = t1._defense;
        t11 = t1._armor;
        if (t11 == null)
          t11 = 0;
        t12 = t1._price;
        t13 = t1._maxStack;
        if (t13 == null)
          t13 = t2._maxStack;
        if (t13 == null)
          t13 = 1;
        t14 = t1._weight;
        if (t14 == null)
          t14 = 0;
        t15 = t1._heft;
        if (t15 == null)
          t15 = 0;
        t16 = t1._builder$_emanation;
        if (t16 == null)
          t16 = t2._builder$_emanation;
        t1 = t1._fuel;
        if (t1 == null)
          t1 = t2._fuel;
        t17 = t2._isTreasure;
        t2 = t2._isTwoHanded;
        t18 = P.LinkedHashMap_LinkedHashMap$_empty(G.Element, P.int);
        t19 = H.setRuntimeTypeInfo([], [M.Skill]);
        if (t16 == null)
          t16 = 0;
        if (t1 == null)
          t1 = 0;
        t18.addAll$1(0, $._category._destroyChance);
        t18.addAll$1(0, $._item._destroyChance);
        C.JSArray_methods.addAll$1(t19, $._category._skills);
        C.JSArray_methods.addAll$1(t19, $._item._skills);
        t20 = $.$get$Items_types();
        t21 = O.Log__categorize(t3, false, true);
        t22 = $._item;
        t23 = t22._minDepth;
        t24 = t22._maxDepth;
        t22 = t22._frequency;
        t25 = $._category._builder$_tag;
        t20.toString;
        t20._resource$_add$7(H.assertSubtypeOfRuntimeType(new L.ItemType(t3, appearance, t4, t5, t6, t2, t7, t8, t9, toss, t10, t11, t12, t14, t15, t16, t17, t13, t18, t1, t19), H.getTypeArgumentByIndex(t20, 0)), t21, t23, t24, t22, null, t25);
        $._item = null;
      },
      finishAffix: function() {
        var t1, affixes, displayName, fullName, index, t2, t3, t4, t5, t6, t7, t8, t9, t10, affix;
        t1 = $._affix;
        if (t1 == null)
          return;
        affixes = t1._isPrefix ? $.$get$Affixes_prefixes() : $.$get$Affixes_suffixes();
        displayName = t1._builder$_name;
        fullName = displayName + " (" + H.S($._affixTag) + ")";
        for (index = 1; affixes.tryFind$1(fullName) != null;) {
          ++index;
          fullName = displayName + " (" + H.S($._affixTag) + " " + index + ")";
        }
        t1 = $._affix;
        t2 = t1._heftScale;
        t3 = t1._weightBonus;
        t4 = t1._builder$_damageScale;
        t5 = t1._builder$_damageBonus;
        t6 = t1._builder$_brand;
        t7 = t1._armor;
        t8 = t1._priceBonus;
        t9 = t1._priceScale;
        t10 = P.int;
        if (t2 == null)
          t2 = 1;
        if (t3 == null)
          t3 = 0;
        if (t4 == null)
          t4 = 1;
        if (t5 == null)
          t5 = 1;
        if (t6 == null)
          t6 = $.$get$Element_none();
        if (t7 == null)
          t7 = 0;
        if (t8 == null)
          t8 = 0;
        if (t9 == null)
          t9 = 1;
        affix = new L.Affix(fullName, displayName, t2, t3, 0, t4, t5, t6, t7, P.LinkedHashMap_LinkedHashMap$_empty(G.Element, t10), P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, t10), t8, t9);
        t1._builder$_resists.forEach$1(0, affix.get$resist());
        $._affix._builder$_statBonuses.forEach$1(0, affix.get$setStatBonus());
        t1 = $._affix;
        t9 = t1._minDepth;
        t8 = t1._maxDepth;
        t1 = t1._frequency;
        t10 = $._affixTag;
        affixes._resource$_add$7(H.assertSubtypeOfRuntimeType(affix, H.getTypeArgumentByIndex(affixes, 0)), fullName, t9, t8, t1, t1, t10);
        $._affix = null;
      },
      _BaseBuilder: function _BaseBuilder() {
      },
      _CategoryBuilder: function _CategoryBuilder(t0, t1) {
        var _ = this;
        _._builder$_verb = _._builder$_tag = _._weaponType = _._equipSlot = _._builder$_glyph = null;
        _._isTwoHanded = _._isTreasure = false;
        _._skills = t0;
        _._destroyChance = t1;
        _._breakage = _._fuel = _._builder$_emanation = _._tossUse = _._tossRange = _._tossDamage = _._tossElement = _._maxStack = null;
      },
      _ItemBuilder: function _ItemBuilder(t0, t1) {
        var _ = this;
        _._maxDepth = _._minDepth = _._builder$_name = _._armor = _._heft = _._weight = _._defense = _._builder$_attack = _._use = _._price = _._frequency = _._color = null;
        _._skills = t0;
        _._destroyChance = t1;
        _._breakage = _._fuel = _._builder$_emanation = _._tossUse = _._tossRange = _._tossDamage = _._tossElement = _._maxStack = null;
      },
      _ItemBuilder_food_closure: function _ItemBuilder_food_closure(t0) {
        this.amount = t0;
      },
      _ItemBuilder_detection_closure: function _ItemBuilder_detection_closure(t0, t1) {
        this.types = t0;
        this.range = t1;
      },
      _ItemBuilder_resistSalve_closure: function _ItemBuilder_resistSalve_closure(t0) {
        this.element = t0;
      },
      _ItemBuilder_mapping_closure: function _ItemBuilder_mapping_closure(t0, t1) {
        this._box_0 = t0;
        this.distance = t1;
      },
      _ItemBuilder_haste_closure: function _ItemBuilder_haste_closure(t0, t1) {
        this.amount = t0;
        this.duration = t1;
      },
      _ItemBuilder_teleport_closure: function _ItemBuilder_teleport_closure(t0) {
        this.distance = t0;
      },
      _ItemBuilder_heal_closure: function _ItemBuilder_heal_closure(t0, t1) {
        this.amount = t0;
        this.curePoison = t1;
      },
      _ItemBuilder_ball_closure: function _ItemBuilder_ball_closure(t0) {
        this.attack = t0;
      },
      _ItemBuilder_ball_closure0: function _ItemBuilder_ball_closure0(t0) {
        this.attack = t0;
      },
      _ItemBuilder_flow_closure: function _ItemBuilder_flow_closure(t0, t1) {
        this._box_0 = t0;
        this.attack = t1;
      },
      _ItemBuilder_flow_closure0: function _ItemBuilder_flow_closure0(t0, t1) {
        this._box_0 = t0;
        this.attack = t1;
      },
      _ItemBuilder_lightSource_closure: function _ItemBuilder_lightSource_closure(t0, t1) {
        this.range = t0;
        this.level = t1;
      },
      _AffixBuilder: function _AffixBuilder(t0, t1, t2, t3, t4) {
        var _ = this;
        _._builder$_name = t0;
        _._isPrefix = t1;
        _._maxDepth = _._minDepth = null;
        _._frequency = t2;
        _._priceScale = _._priceBonus = _._armor = _._builder$_brand = _._builder$_damageBonus = _._builder$_damageScale = _._builder$_strikeBonus = _._weightBonus = _._heftScale = null;
        _._builder$_resists = t3;
        _._builder$_statBonuses = t4;
      },
      shop: function($name, itemTypes) {
        var t1, drops;
        t1 = P.double;
        drops = P.LinkedHashMap_LinkedHashMap$_empty(L.Drop, t1);
        H.assertSubtype(itemTypes, "$isMap", [P.String, t1], "$asMap").forEach$1(0, new R.shop_closure(drops));
        $.$get$Shops_all().$indexSet(0, $name, new O.Shop(X._OneOfDrop$(drops), $name));
      },
      shop_closure: function shop_closure(t0) {
        this.drops = t0;
      },
      family: function(character, dodge, flags, frequency, meander, speed, tracking) {
        var t1;
        R.finishBreed();
        t1 = new R._FamilyBuilder(character, frequency, $.$get$Motility_walk(), H.setRuntimeTypeInfo([], [U.Defense]), H.setRuntimeTypeInfo([], [P.String]));
        $._family = t1;
        t1._meander = meander;
        t1._builder0$_speed = speed;
        t1._dodge = dodge;
        t1._tracking = tracking;
        t1._flags = flags;
        return t1;
      },
      finishBreed: function() {
        var t1, t2, tags, t3, flags, t4, dodge, minions, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, names, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36;
        if ($._builder == null)
          return;
        t1 = P.String;
        t2 = [t1];
        tags = H.setRuntimeTypeInfo([], t2);
        C.JSArray_methods.addAll$1(tags, $._family._groups);
        C.JSArray_methods.addAll$1(tags, $._builder._groups);
        if (tags.length === 0)
          C.JSArray_methods.add$1(tags, "monster");
        t3 = $._builder;
        t3.toString;
        flags = P.LinkedHashSet_LinkedHashSet(null, null, null, t1);
        t4 = $._family._flags;
        if (t4 != null)
          flags.addAll$1(0, H.setRuntimeTypeInfo(t4.split(" "), [t1]));
        t4 = t3._flags;
        if (t4 != null)
          flags.addAll$1(0, H.setRuntimeTypeInfo(t4.split(" "), [t1]));
        dodge = t3._dodge;
        if (dodge == null)
          dodge = $._family._dodge;
        if (flags.contains$1(0, "immobile"))
          dodge = 0;
        t1 = t3._minions;
        t4 = t1.length;
        if (t4 === 1) {
          if (0 >= t4)
            return H.ioore(t1, 0);
          minions = t1[0];
        } else
          minions = t4 > 1 ? new B._AllOfSpawn(t1) : null;
        t1 = t3._builder0$_name;
        t4 = t3._pronoun;
        if (t4 == null)
          t4 = C.Pronoun_it_it_its;
        t5 = t3._appearance;
        t6 = t3._attacks;
        t7 = t3._moves;
        t8 = t3._builder0$_drops;
        t9 = t3._builder0$_location;
        if (t9 == null)
          t9 = $._family._builder0$_location;
        if (t9 == null)
          t9 = C.SpawnLocation_0;
        t10 = $._family;
        t11 = t10._builder0$_motility;
        t12 = t3._builder0$_motility;
        t11 = t11._bitMask;
        t12 = t12._bitMask;
        t13 = t3._builder0$_depth;
        t14 = t3._builder0$_health;
        t15 = t3._tracking;
        if (t15 == null)
          t15 = 0;
        t16 = t10._tracking;
        if (t16 == null)
          t16 = 10;
        t17 = t3._vision;
        if (t17 == null)
          t17 = t10._vision;
        t18 = t3._hearing;
        if (t18 == null)
          t18 = t10._hearing;
        t19 = t3._meander;
        if (t19 == null)
          t19 = t10._meander;
        if (t19 == null)
          t19 = 0;
        t20 = t3._builder0$_speed;
        if (t20 == null)
          t20 = 0;
        t21 = t10._builder0$_speed;
        if (t21 == null)
          t21 = 0;
        t22 = t10._emanationLevel;
        if (t22 == null)
          t22 = t3._emanationLevel;
        t23 = t3._countMin;
        if (t23 == null)
          t23 = t10._countMin;
        if (t23 == null)
          t23 = 1;
        t24 = t3._countMax;
        if (t24 == null)
          t24 = t10._countMax;
        if (t24 == null)
          t24 = 1;
        t25 = t3._stain;
        t10 = t25 == null ? t10._stain : t25;
        names = flags._newSet$0();
        names.addAll$1(0, flags);
        t25 = names.remove$1(0, "berzerk");
        t26 = names.remove$1(0, "cowardly");
        t27 = names.remove$1(0, "fearless");
        t28 = names.remove$1(0, "immobile");
        t29 = names.remove$1(0, "protective");
        t30 = names.remove$1(0, "unique");
        if (names._collection$_length !== 0)
          H.throwExpression(P.ArgumentError$('Unknown flags "' + names.join$1(0, ", ") + '"'));
        t31 = t3._description;
        t32 = H.setRuntimeTypeInfo([], [U.Defense]);
        t2 = H.setRuntimeTypeInfo([], t2);
        if (t17 == null)
          t17 = 8;
        if (t18 == null)
          t18 = 10;
        t33 = dodge == null ? 20 : dodge;
        if (t22 == null)
          t22 = 0;
        C.JSArray_methods.addAll$1(t32, $._family._defenses);
        C.JSArray_methods.addAll$1(t32, t3._defenses);
        C.JSArray_methods.addAll$1(t2, $._family._groups);
        C.JSArray_methods.addAll$1(t2, t3._groups);
        t3 = $.$get$Monsters_breeds();
        t34 = O.Log__categorize(t1, false, true);
        t35 = $._builder._builder0$_frequency;
        if (t35 == null)
          t35 = $._family._builder0$_frequency;
        t36 = C.JSArray_methods.join$1(tags, " ");
        t3.toString;
        t3._resource$_add$7(H.assertSubtypeOfRuntimeType(new B.Breed(t4, t5, t13, t6, t7, t14, t15 + t16, t17, t18, t19, t20 + t21, new X._AllOfDrop(t8), t9, new Q.Motility(t11 | t12), new B.BreedFlags(t25, t26, t27, t28, t29, t30), t33, t22, t32, t23, t24, minions, t1, t10, t2, t31), H.getTypeArgumentByIndex(t3, 0)), t34, t13, t13, t35, t35, t36);
        $._builder = null;
      },
      breed: function($name, depth, color, health, dodge, frequency, meander, speed) {
        var t1;
        R.finishBreed();
        t1 = new R._BreedBuilder($name, depth, L.Glyph$($._family._character, color, null), health, H.setRuntimeTypeInfo([], [U.Attack]), H.setRuntimeTypeInfo([], [O.Move]), H.setRuntimeTypeInfo([], [L.Drop]), H.setRuntimeTypeInfo([], [B.Spawn]), frequency, $.$get$Motility_walk(), H.setRuntimeTypeInfo([], [U.Defense]), H.setRuntimeTypeInfo([], [P.String]));
        $._builder = t1;
        t1._builder0$_speed = speed;
        t1._meander = meander;
        return t1;
      },
      _BaseBuilder0: function _BaseBuilder0() {
      },
      _FamilyBuilder: function _FamilyBuilder(t0, t1, t2, t3, t4) {
        var _ = this;
        _._character = t0;
        _._builder0$_frequency = t1;
        _._tracking = null;
        _._builder0$_motility = t2;
        _._dodge = _._meander = _._builder0$_speed = _._builder0$_location = null;
        _._defenses = t3;
        _._groups = t4;
        _._hearing = _._vision = _._emanationLevel = _._stain = _._countMax = _._countMin = _._flags = null;
      },
      _BreedBuilder: function _BreedBuilder(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
        var _ = this;
        _._builder0$_name = t0;
        _._builder0$_depth = t1;
        _._appearance = t2;
        _._builder0$_health = t3;
        _._attacks = t4;
        _._moves = t5;
        _._builder0$_drops = t6;
        _._minions = t7;
        _._description = _._pronoun = null;
        _._builder0$_frequency = t8;
        _._tracking = null;
        _._builder0$_motility = t9;
        _._dodge = _._meander = _._builder0$_speed = _._builder0$_location = null;
        _._defenses = t10;
        _._groups = t11;
        _._hearing = _._vision = _._emanationLevel = _._stain = _._countMax = _._countMin = _._flags = null;
      },
      MissiveMove: function MissiveMove(t0, t1) {
        this._missive = t0;
        this.rate = t1;
      },
      Room_create: function(depth) {
        var t1, size;
        t1 = $.$get$rng();
        switch (t1.inclusive$1(10)) {
          case 0:
            size = t1.inclusive$2(5, 17);
            return R.Room__angledCorners(size, C.JSInt_methods._tdivFast$1(size - 1, 2), depth);
          case 1:
            size = t1.inclusive$2(6, 13);
            return R.Room__angledCorners(size, t1.inclusive$2(2, C.JSInt_methods._tdivFast$1(size, 2) - 1), depth);
          case 2:
          case 3:
            return R.Room__angled(depth);
          default:
            return R.Room__rectangle(depth);
        }
      },
      Room__rectangle: function(depth) {
        var t1, short, long, horizontal, width, height, tiles, t2, t3, y, t4, x, lights, i, t5;
        t1 = $.$get$rng();
        short = t1.inclusive$2(3, 10);
        long = t1.inclusive$2(short, Math.min(16, short + 4));
        horizontal = t1.range$1(2) === 0;
        width = horizontal ? long : short;
        height = horizontal ? short : long;
        tiles = M.Array2D$(width + 2, height + 2, $.$get$RoomTile_unused(), R.RoomTile);
        for (t1 = H.getTypeArgumentByIndex(tiles, 0), t2 = tiles._elements, t3 = tiles.bounds.size.x, y = 0; y < height;)
          for (++y, t4 = y * t3, x = 0; x < width;) {
            ++x;
            C.JSArray_methods.$indexSet(t2, t4 + x, H.assertSubtypeOfRuntimeType($.$get$RoomTile_floor(), t1));
          }
        lights = H.setRuntimeTypeInfo([], [[P.List, L.Vec]]);
        if (short <= 9 && (width & 1) === 1 && (height & 1) === 1)
          C.JSArray_methods.add$1(lights, H.setRuntimeTypeInfo([new L.Vec(C.JSInt_methods._tdivFast$1(width, 2) + 1, C.JSInt_methods._tdivFast$1(height, 2) + 1)], [L.Vec]));
        if (long >= 5)
          for (t1 = C.JSInt_methods._tdivFast$1(short - 1, 2), t2 = [L.Vec], i = 0; i < t1; ++i) {
            t3 = 1 + i;
            t4 = width - i;
            t5 = height - i;
            C.JSArray_methods.add$1(lights, H.setRuntimeTypeInfo([new L.Vec(t3, t3), new L.Vec(t4, t3), new L.Vec(t3, t5), new L.Vec(t4, t5)], t2));
          }
        R.Room__addLights(depth, tiles, lights);
        R.Room__calculateEdges(tiles);
        return tiles;
      },
      Room__angled: function(depth) {
        var t1, short, long, horizontal, width, height, cutWidth, cutHeight, isTop, isLeft, tiles, t2, t3, y, t4, x, xMin, xMax, yMin, yMax, lights, t5, t6, t7, t8, i, cornerLights, t9, t10;
        t1 = $.$get$rng();
        short = t1.inclusive$2(5, 10);
        long = t1.inclusive$2(short, Math.min(16, short + 4));
        horizontal = t1.range$1(2) === 0;
        width = horizontal ? long : short;
        height = horizontal ? short : long;
        cutWidth = t1.inclusive$2(2, width - 3);
        cutHeight = t1.inclusive$2(2, height - 3);
        isTop = t1.range$1(2) === 0;
        isLeft = t1.range$1(2) === 0;
        tiles = M.Array2D$(width + 2, height + 2, $.$get$RoomTile_unused(), R.RoomTile);
        for (t1 = H.getTypeArgumentByIndex(tiles, 0), t2 = tiles._elements, t3 = tiles.bounds.size.x, y = 0; y < height;)
          for (++y, t4 = y * t3, x = 0; x < width;) {
            ++x;
            C.JSArray_methods.$indexSet(t2, t4 + x, H.assertSubtypeOfRuntimeType($.$get$RoomTile_floor(), t1));
          }
        xMin = isLeft ? 0 : width - cutWidth;
        xMax = isLeft ? cutWidth : width;
        yMin = isTop ? 0 : height - cutHeight;
        yMax = isTop ? cutHeight : height;
        for (y = yMin; y < yMax;)
          for (++y, t4 = y * t3, x = xMin; x < xMax;) {
            ++x;
            C.JSArray_methods.$indexSet(t2, t4 + x, H.assertSubtypeOfRuntimeType($.$get$RoomTile_unused(), t1));
          }
        lights = H.setRuntimeTypeInfo([], [[P.List, L.Vec]]);
        t1 = width - cutWidth;
        t2 = height - cutHeight;
        for (t3 = C.JSInt_methods._tdivFast$1(Math.min(t1, t2) - 1, 2), t4 = !isTop, t5 = [L.Vec], t6 = !isLeft, t7 = cutWidth + 1, t8 = cutHeight + 1, i = 0; i < t3; ++i) {
          cornerLights = H.setRuntimeTypeInfo([], t5);
          C.JSArray_methods.add$1(lights, cornerLights);
          if (!isTop || t6) {
            t9 = 1 + i;
            C.JSArray_methods.add$1(cornerLights, new L.Vec(t9, t9));
          }
          if (!isTop || isLeft)
            C.JSArray_methods.add$1(cornerLights, new L.Vec(width - i, 1 + i));
          if (!t4 || t6)
            C.JSArray_methods.add$1(cornerLights, new L.Vec(1 + i, height - i));
          if (!t4 || isLeft)
            C.JSArray_methods.add$1(cornerLights, new L.Vec(width - i, height - i));
          if (isTop) {
            t9 = 1 + i;
            t10 = t8 + i;
            if (isLeft) {
              C.JSArray_methods.add$1(cornerLights, new L.Vec(t7 + i, t9));
              C.JSArray_methods.add$1(cornerLights, new L.Vec(t9, t10));
            } else {
              C.JSArray_methods.add$1(cornerLights, new L.Vec(t1 - i, t9));
              C.JSArray_methods.add$1(cornerLights, new L.Vec(width - i, t10));
            }
          } else {
            t9 = height - i;
            t10 = t2 - i;
            if (isLeft) {
              C.JSArray_methods.add$1(cornerLights, new L.Vec(t7 + i, t9));
              C.JSArray_methods.add$1(cornerLights, new L.Vec(1 + i, t10));
            } else {
              C.JSArray_methods.add$1(cornerLights, new L.Vec(width - i, t10));
              C.JSArray_methods.add$1(cornerLights, new L.Vec(t1 - i, t9));
            }
          }
        }
        R.Room__addLights(depth, tiles, lights);
        R.Room__calculateEdges(tiles);
        return tiles;
      },
      Room__angledCorners: function(size, corner, depth) {
        var t1, tiles, t2, t3, y, y0, t4, x, t5, lights, i, t6, maxSquare;
        t1 = size + 2;
        tiles = M.Array2D$(t1, t1, $.$get$RoomTile_unused(), R.RoomTile);
        for (t1 = H.getTypeArgumentByIndex(tiles, 0), t2 = tiles._elements, t3 = tiles.bounds.size.x, y = 0; y < size; y = y0)
          for (y0 = y + 1, t4 = y0 * t3, x = 0; x < size; ++x) {
            if (x + y < corner)
              continue;
            t5 = size - x - 1;
            if (t5 + y < corner)
              continue;
            if (x + size - y - 1 < corner)
              continue;
            if (t5 + size - y - 1 < corner)
              continue;
            C.JSArray_methods.$indexSet(t2, t4 + (x + 1), H.assertSubtypeOfRuntimeType($.$get$RoomTile_floor(), t1));
          }
        lights = H.setRuntimeTypeInfo([], [[P.List, L.Vec]]);
        if (size <= 9 && (size & 1) === 1) {
          t1 = C.JSInt_methods._tdivFast$1(size, 2) + 1;
          C.JSArray_methods.add$1(lights, H.setRuntimeTypeInfo([new L.Vec(t1, t1)], [L.Vec]));
        }
        if ((size & 1) === 1)
          for (t1 = C.JSInt_methods._tdivFast$1(size, 2), t2 = t1 - 1, t3 = [L.Vec], i = 2; i < t2; ++i) {
            t4 = t1 + 1;
            t5 = t4 - i;
            t6 = t4 + i;
            C.JSArray_methods.add$1(lights, H.setRuntimeTypeInfo([new L.Vec(t4, t5), new L.Vec(t6, t4), new L.Vec(t4, t6), new L.Vec(t5, t4)], t3));
          }
        maxSquare = C.JSInt_methods._tdivFast$1(size + 1, 2) - C.JSInt_methods._tdivFast$1(corner + 1, 2) - 3;
        for (t1 = size - 1, t2 = size + 4, t3 = [L.Vec], i = 0; i <= maxSquare; ++i) {
          t4 = C.JSInt_methods._tdivFast$1(t1, 2) - i;
          t5 = C.JSInt_methods._tdivFast$1(t2, 2) + i;
          C.JSArray_methods.add$1(lights, H.setRuntimeTypeInfo([new L.Vec(t4, t4), new L.Vec(t5, t4), new L.Vec(t4, t5), new L.Vec(t5, t5)], t3));
        }
        R.Room__addLights(depth, tiles, lights);
        R.Room__calculateEdges(tiles);
        return tiles;
      },
      Room__calculateEdges: function(room) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, cardinalFloors, hasCornerFloor;
        H.assertSubtype(room, "$isArray2D", [R.RoomTile], "$asArray2D");
        for (t1 = room.bounds, t2 = X.RectIterator$(t1), t3 = H.getTypeArgumentByIndex(C.List_aAW, 0), t4 = {func: 1, ret: P.bool, args: [t3]}, t5 = [t3], t6 = room._elements, t1 = t1.size.x, t7 = t6.length, t8 = H.getTypeArgumentByIndex(room, 0); t2.moveNext$0();) {
          t9 = t2._x;
          t10 = t2._y;
          t11 = t10 * t1 + t9;
          if (t11 < 0 || t11 >= t7)
            return H.ioore(t6, t11);
          t12 = t6[t11];
          if (!(t12.tile == null && t12.direction === C.Direction_0_0))
            continue;
          t9 = new R.Room__calculateEdges_isFloor(new L.Vec(t9, t10), room);
          cardinalFloors = P.List_List$from(new H.WhereIterable(C.List_aAW, H.functionTypeCheck(t9, t4), t5), true, t3);
          hasCornerFloor = C.JSArray_methods.any$1(C.List_izR, t9);
          t9 = cardinalFloors.length;
          if (t9 === 1)
            C.JSArray_methods.$indexSet(t6, t11, H.assertSubtypeOfRuntimeType(new R.RoomTile(null, C.JSArray_methods.get$single(cardinalFloors).get$rotate180()), t8));
          else if (t9 <= 1)
            if (hasCornerFloor)
              C.JSArray_methods.$indexSet(t6, t11, H.assertSubtypeOfRuntimeType($.$get$RoomTile_wall(), t8));
        }
      },
      Room__addLights: function(depth, room, lights) {
        var t1, t2, t3, t4, t5, t6, t7, t8, max, t9;
        H.assertSubtype(room, "$isArray2D", [R.RoomTile], "$asArray2D");
        t1 = [[P.List, L.Vec]];
        H.assertSubtype(lights, "$isList", t1, "$asList");
        if (lights.length === 0)
          return;
        t2 = $.$get$rng();
        t3 = C.JSNumber_methods.round$0(K.lerpDouble(depth, 1, 100, 90, 20));
        if (t2.range$1(100) >= t3)
          return;
        H.assertSubtype(lights, "$isList", t1, "$asList");
        t1 = t2.range$1(lights.length);
        if (t1 < 0 || t1 >= lights.length)
          return H.ioore(lights, t1);
        t1 = C.JSArray_methods.get$iterator(lights[t1]);
        t3 = H.getTypeArgumentByIndex(room, 0);
        t4 = room._elements;
        t5 = room.bounds.size.x;
        t6 = [Q.TileType];
        for (; t1.moveNext$0();) {
          t7 = t1.get$current();
          t8 = H.assertSubtype($.$get$Tiles_braziers(), "$isList", t6, "$asList");
          max = t8.length;
          t9 = t2._random.nextInt$1(max - 0);
          if (t9 < 0 || t9 >= t8.length)
            return H.ioore(t8, t9);
          t9 = H.assertSubtypeOfRuntimeType(new R.RoomTile(t8[t9], C.Direction_0_0), t3);
          C.JSArray_methods.$indexSet(t4, t7.y * t5 + t7.x, t9);
        }
      },
      RoomTile$junction: function(direction) {
        return new R.RoomTile(null, direction);
      },
      RoomTile$tile: function(tile) {
        return new R.RoomTile(tile, C.Direction_0_0);
      },
      Room__calculateEdges_isFloor: function Room__calculateEdges_isFloor(t0, t1) {
        this.pos = t0;
        this.room = t1;
      },
      RoomTile: function RoomTile(t0, t1) {
        this.tile = t0;
        this.direction = t1;
      },
      ItemAction: function ItemAction() {
      },
      PickUpAction: function PickUpAction(t0) {
        var _ = this;
        _.item = t0;
        _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
      },
      DropAction: function DropAction(t0, t1, t2) {
        var _ = this;
        _._item$_count = t0;
        _.location = t1;
        _.item = t2;
        _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
      },
      EquipAction: function EquipAction(t0, t1) {
        var _ = this;
        _.location = t0;
        _.item = t1;
        _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
      },
      UnequipAction: function UnequipAction(t0, t1) {
        var _ = this;
        _.location = t0;
        _.item = t1;
        _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
      },
      UseAction: function UseAction(t0, t1) {
        var _ = this;
        _.location = t0;
        _.item = t1;
        _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
      },
      DestroyActionMixin: function DestroyActionMixin() {
      },
      DestroyActionMixin_destroyFloorItems_closure: function DestroyActionMixin_destroyFloorItems_closure(t0, t1) {
        this.$this = t0;
        this.pos = t1;
      },
      DestroyActionMixin_destroyHeldItems_closure: function DestroyActionMixin_destroyHeldItems_closure(t0) {
        this.$this = t0;
      },
      DestroyActionMixin_destroyHeldItems_closure0: function DestroyActionMixin_destroyHeldItems_closure0(t0, t1) {
        this._box_0 = t0;
        this.$this = t1;
      },
      Item: function Item(t0, t1, t2, t3) {
        var _ = this;
        _.type = t0;
        _.prefix = t1;
        _.suffix = t2;
        _._count = t3;
      },
      Draw_helpKeys: function(terminal, helpKeys, query) {
        var t1, t2, t3, t4, x, t5;
        t1 = {};
        t2 = P.String;
        H.assertSubtype(helpKeys, "$isMap", [t2, t2], "$asMap");
        t1.helpTextLength = 0;
        helpKeys.forEach$1(0, new R.Draw_helpKeys_closure(t1));
        t2 = terminal._display._glyphs.bounds.size;
        t3 = t2.x;
        t4 = t1.helpTextLength;
        x = C.JSInt_methods._tdivFast$1(t3 - t4, 2);
        t1.x = x;
        t2 = t2.y;
        t5 = x - 2;
        t4 += 4;
        if (query != null) {
          R.Draw__box(terminal, t5, t2 - 4, t4, 5, C.Color_132_126_135, "\u250c", "\u2500", "\u2510", "\u2502", "\u2514", "\u2500", "\u2518");
          terminal.writeAt$4(C.JSInt_methods._tdivFast$1(t3 - query.length, 2), t2 - 3, query, C.Color_226_223_240);
        } else
          R.Draw__box(terminal, t5, t2 - 2, t4, 3, C.Color_132_126_135, "\u250c", "\u2500", "\u2510", "\u2502", "\u2514", "\u2500", "\u2518");
        t1.first = true;
        helpKeys.forEach$1(0, new R.Draw_helpKeys_closure0(t1, terminal));
      },
      Draw__box: function(terminal, x, y, width, height, color, topLeft, $top, topRight, vertical, bottomLeft, bottom, bottomRight) {
        var t1, bar, row, t2, topRow, bottomRow;
        if (color == null)
          color = C.Color_38_38_56;
        t1 = width - 2;
        bar = vertical + C.JSString_methods.$mul(" ", t1) + vertical;
        for (row = y + 1, t2 = y + height - 1; row < t2; ++row)
          terminal.writeAt$4(x, row, bar, color);
        topRow = topLeft + C.JSString_methods.$mul($top, t1) + topRight;
        bottomRow = bottomLeft + C.JSString_methods.$mul(bottom, t1) + bottomRight;
        terminal.writeAt$4(x, y, topRow, color);
        terminal.writeAt$4(x, t2, bottomRow, color);
      },
      Draw_meter: function(terminal, x, y, width, value, max, fore, $back) {
        var t1, barWidth, i, char;
        t1 = width * 2;
        if (typeof value !== "number")
          return H.iae(value);
        barWidth = C.JSDouble_methods.round$0(t1 * value / max);
        if (barWidth === 0 && value > 0)
          barWidth = 1;
        if (barWidth === t1 && value < max)
          barWidth = t1 - 1;
        for (t1 = barWidth + 1, i = 0; i < width; ++i) {
          if (i < C.JSInt_methods._tdivFast$1(barWidth, 2))
            char = 9608;
          else
            char = i < C.JSInt_methods._tdivFast$1(t1, 2) ? 9612 : 32;
          terminal.drawGlyph$3(x + i, y, new L.Glyph(char, fore, $back));
        }
      },
      Draw_thinMeter: function(terminal, x, y, width, value, max, fore, $back) {
        var barWidth, i, color;
        barWidth = C.JSDouble_methods.round$0(width * value / max);
        if (barWidth === 0 && value > 0)
          barWidth = 1;
        if (barWidth === width && value < max)
          barWidth = width - 1;
        for (i = 0; i < width; ++i) {
          color = i < barWidth ? fore : $back;
          terminal.drawGlyph$3(x + i, y, new L.Glyph(9604, color, C.Color_0_0_0));
        }
      },
      Draw_helpKeys_closure: function Draw_helpKeys_closure(t0) {
        this._box_0 = t0;
      },
      Draw_helpKeys_closure0: function Draw_helpKeys_closure0(t0, t1) {
        this._box_0 = t0;
        this.terminal = t1;
      },
      GameScreen$: function(_storage, game, _storageSave) {
        var t1 = new R.GameScreen(game, _storageSave, _storage, new A.LogPanel(game.log), new B.ItemPanel(game));
        t1._sidebarPanel = new U.SidebarPanel(t1);
        t1._stagePanel = new T.StagePanel(t1, H.setRuntimeTypeInfo([], [K.Effect]), H.setRuntimeTypeInfo([], [B.Monster]));
        $.Debug__gameScreen = t1;
        $.$get$Debug__monsters().clear$0(0);
        return t1;
      },
      GameScreen_GameScreen$town: function(storage, $content, save) {
        var game, t1;
        game = D.Game$($content, save, 0, 34, 60);
        for (t1 = game.generate$0(), t1 = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          t1.get$current();
        return R.GameScreen$(storage, game, null);
      },
      GameScreen: function GameScreen(t0, t1, t2, t3, t4) {
        var _ = this;
        _.game = t0;
        _._storageSave = t1;
        _._storage = t2;
        _._logPanel = t3;
        _.itemPanel = t4;
        _._stagePanel = _._sidebarPanel = null;
        _._pause = 0;
        _._ui = _._game_screen$_portal = _._lastSkill = _._game_screen$_target = _._targetActor = null;
      },
      GameScreen_activate_closure: function GameScreen_activate_closure() {
      },
      GameScreen_activate_closure0: function GameScreen_activate_closure0(t0, t1) {
        this.$this = t0;
        this.result = t1;
      },
      GameScreen__openTargetDialog_closure: function GameScreen__openTargetDialog_closure(t0, t1) {
        this.$this = t0;
        this.skill = t1;
      },
      NewHeroScreen: function NewHeroScreen(t0, t1, t2, t3) {
        var _ = this;
        _.content = t0;
        _.storage = t1;
        _._field = t2;
        _._new_hero_screen$_name = "";
        _._defaultName = t3;
        _._ui = _._class = _._new_hero_screen$_race = null;
      },
      NewHeroScreen__renderMenu_closure: function NewHeroScreen__renderMenu_closure() {
      },
      NewHeroScreen__renderMenu_closure0: function NewHeroScreen__renderMenu_closure0() {
      },
      SkillDialog_SkillDialog: function(hero) {
        var t1, t2, t3, screens, i, i0;
        t1 = M.Discipline;
        t2 = new R.DisciplineDialog(hero, H.setRuntimeTypeInfo([], [t1]));
        t2.SkillTypeDialog$1(hero, t1);
        t1 = M.Spell;
        t3 = new R.SpellDialog(hero, H.setRuntimeTypeInfo([], [t1]));
        t3.SkillTypeDialog$1(hero, t1);
        screens = [t2, t3];
        for (i = 0; i < 2; i = i0) {
          i0 = i + 1;
          screens[i]._nextScreen = screens[i0 % 2];
        }
        return C.JSArray_methods.get$first(screens);
      },
      SkillDialog: function SkillDialog() {
      },
      SkillTypeDialog: function SkillTypeDialog() {
      },
      DisciplineDialog: function DisciplineDialog(t0, t1) {
        var _ = this;
        _._skill_dialog$_hero = t0;
        _._skill_dialog$_skills = t1;
        _._selectedSkill = 0;
        _._ui = _._nextScreen = null;
      },
      SpellDialog: function SpellDialog(t0, t1) {
        var _ = this;
        _._skill_dialog$_hero = t0;
        _._skill_dialog$_skills = t1;
        _._selectedSkill = 0;
        _._ui = _._nextScreen = null;
      }
    },
    O = {BoltAction: function BoltAction(t0, t1, t2, t3) {
      var _ = this;
      _._bolt$_hit = t0;
      _._canMiss = t1;
      _._range = t2;
      _._los$_target = t3;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = _._los = _._lastPos = null;
    }, HealAction: function HealAction(t0, t1) {
      var _ = this;
      _.amount = t0;
      _.curePoison = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, BoltMove: function BoltMove(t0, t1) {
      this.attack = t0;
      this.rate = t1;
    }, HealMove: function HealMove(t0, t1) {
      this._amount = t0;
      this.rate = t1;
    }, WhipMastery: function WhipMastery(t0) {
      this._sortOrder = t0;
    }, _WhipMastery_MasteryDiscipline_TargetSkill: function _WhipMastery_MasteryDiscipline_TargetSkill() {
    },
      Log_conjugate: function(text, pronoun) {
        return O.Log__categorize(text, false, pronoun === C.Pronoun_you_you_your || pronoun === C.Pronoun_they_them_their);
      },
      Log_wordWrap: function(width, text) {
        var lines, t1, start, wordBreak, i;
        lines = H.setRuntimeTypeInfo([], [P.String]);
        for (t1 = text.length, start = 0, wordBreak = null, i = 0; i < t1; ++i) {
          if (text[i] === " ")
            wordBreak = i + 1;
          if (i - start >= width) {
            if (wordBreak == null)
              wordBreak = i;
            C.JSArray_methods.add$1(lines, C.JSString_methods.trim$0(C.JSString_methods.substring$2(text, start, wordBreak)));
            start = wordBreak;
            while (true) {
              if (!(start < t1 && text[start] === " "))
                break;
              ++start;
            }
          }
        }
        C.JSArray_methods.add$1(lines, C.JSString_methods.trim$0(C.JSString_methods.substring$2(text, start, t1)));
        return lines;
      },
      Log__categorize: function(text, force, isFirst) {
        var optionalSuffix, irregular, match, t1, t2, before, after;
        optionalSuffix = P.RegExp_RegExp("\\[(\\w+?)\\]", true, false);
        irregular = P.RegExp_RegExp("\\[([^|]+)\\|([^\\]]+)\\]", true, false);
        if (force && !isFirst && !J.contains$1$asx(text, "["))
          return H.S(text) + "s";
        for (; true;) {
          match = optionalSuffix.firstMatch$1(text);
          if (match == null)
            break;
          t1 = match._match;
          t2 = t1.index;
          before = J.substring$2$s(text, 0, t2);
          after = C.JSString_methods.substring$1(text, t2 + t1[0].length);
          if (isFirst)
            text = before + after;
          else {
            if (1 >= t1.length)
              return H.ioore(t1, 1);
            text = before + H.S(t1[1]) + after;
          }
        }
        for (; true;) {
          match = irregular.firstMatch$1(text);
          if (match == null)
            break;
          t1 = match._match;
          t2 = t1.index;
          before = J.substring$2$s(text, 0, t2);
          after = C.JSString_methods.substring$1(text, t2 + t1[0].length);
          t2 = t1.length;
          if (isFirst) {
            if (1 >= t2)
              return H.ioore(t1, 1);
            text = before + H.S(t1[1]) + after;
          } else {
            if (2 >= t2)
              return H.ioore(t1, 2);
            text = before + H.S(t1[2]) + after;
          }
        }
        return text;
      },
      Log: function Log(t0) {
        this.messages = t0;
      },
      Noun: function Noun(t0) {
        this.nounText = t0;
      },
      Pronoun: function Pronoun(t0, t1, t2) {
        this.subjective = t0;
        this.objective = t1;
        this.possessive = t2;
      },
      LogType: function LogType(t0) {
        this._log$_name = t0;
      },
      Message: function Message(t0, t1) {
        this.type = t0;
        this.text = t1;
        this.count = 1;
      },
      Inventory$: function($location, _capacity, items) {
        var t1 = H.setRuntimeTypeInfo([], [R.Item]);
        if (items != null)
          C.JSArray_methods.addAll$1(t1, items);
        return new O.Inventory($location, t1, _capacity);
      },
      ItemLocation: function ItemLocation(t0, t1) {
        this.name = t0;
        this.emptyDescription = t1;
      },
      ItemCollection: function ItemCollection() {
      },
      Inventory: function Inventory(t0, t1, t2) {
        var _ = this;
        _.location = t0;
        _._items = t1;
        _._capacity = t2;
        _._lastUnequipped = null;
      },
      Inventory_clone_closure: function Inventory_clone_closure() {
      },
      AddItemResult: function AddItemResult(t0, t1) {
        this.added = t0;
        this.remaining = t1;
      },
      _Inventory_IterableMixin_ItemCollection: function _Inventory_IterableMixin_ItemCollection() {
      },
      Shop: function Shop(t0, t1) {
        this._shop$_drop = t0;
        this.name = t1;
      },
      Move: function Move() {
      },
      RangedMove: function RangedMove() {
      }
    },
    E = {HasteAction: function HasteAction(t0, t1) {
      var _ = this;
      _._condition0$_speed = t0;
      _._condition0$_duration = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, FreezeActorAction: function FreezeActorAction(t0) {
      var _ = this;
      _._condition0$_damage = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, PoisonAction: function PoisonAction(t0) {
      var _ = this;
      _._condition0$_damage = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, BlindAction: function BlindAction(t0) {
      var _ = this;
      _._condition0$_damage = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, DazzleAction: function DazzleAction(t0) {
      var _ = this;
      _._condition0$_damage = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, ResistAction: function ResistAction(t0, t1) {
      var _ = this;
      _._condition0$_duration = t0;
      _._condition0$_element = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, _FreezeActorAction_ConditionAction_DestroyActionMixin: function _FreezeActorAction_ConditionAction_DestroyActionMixin() {
    },
      Debug_monsterLog: function(monster, message) {
        return;
      },
      Debug_monsterStat: function(monster, stat, value, reason) {
        return;
      },
      Debug_monsterReason: function(monster, stat, reason) {
        return;
      },
      _MonsterLog: function _MonsterLog() {
      },
      ConditionAction: function ConditionAction() {
      },
      Condition: function Condition() {
      },
      HasteCondition: function HasteCondition() {
        this._condition$_actor = null;
        this._intensity = this._turnsRemaining = 0;
      },
      ColdCondition: function ColdCondition() {
        this._condition$_actor = null;
        this._intensity = this._turnsRemaining = 0;
      },
      PoisonCondition: function PoisonCondition() {
        this._condition$_actor = null;
        this._intensity = this._turnsRemaining = 0;
      },
      BlindnessCondition: function BlindnessCondition() {
        this._condition$_actor = null;
        this._intensity = this._turnsRemaining = 0;
      },
      ResistCondition: function ResistCondition(t0) {
        var _ = this;
        _._condition$_element = t0;
        _._condition$_actor = null;
        _._intensity = _._turnsRemaining = 0;
      },
      Equipment$: function() {
        var t1 = new Array(9);
        t1.fixed$length = Array;
        return new E.Equipment(C.List_RDW, H.setRuntimeTypeInfo(t1, [R.Item]));
      },
      Equipment: function Equipment(t0, t1) {
        this.slotTypes = t0;
        this.slots = t1;
      },
      Equipment_weapons_closure: function Equipment_weapons_closure() {
      },
      Equipment_length_closure: function Equipment_length_closure() {
      },
      Equipment_canEquip_closure: function Equipment_canEquip_closure(t0) {
        this.item = t0;
      },
      Equipment_iterator_closure: function Equipment_iterator_closure() {
      },
      _Equipment_IterableBase_ItemCollection: function _Equipment_IterableBase_ItemCollection() {
      },
      GameOverScreen: function GameOverScreen(t0) {
        this.log = t0;
        this._ui = null;
      },
      Popup: function Popup() {
      },
      Popup_render_closure: function Popup_render_closure() {
      },
      Popup_render_closure0: function Popup_render_closure0() {
      }
    },
    X = {EatAction: function EatAction(t0) {
      var _ = this;
      _._eat$_amount = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    },
      parseDrop: function($name, affixChance, depth) {
        var itemType;
        if (depth == null)
          depth = 1;
        itemType = $.$get$Items_types().tryFind$1($name);
        if (itemType != null)
          return new X._ItemDrop(itemType, depth, affixChance);
        return new X._TagDrop($name, depth, affixChance);
      },
      _OneOfDrop$: function(drops) {
        var t1 = P.String;
        t1 = new X._OneOfDrop(new Y.ResourceSet(P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Tag, L.Drop]), P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Resource, L.Drop]), P.LinkedHashMap_LinkedHashMap$_empty(Y._QueryKey, [Y._ResourceQuery, L.Drop]), [L.Drop]));
        t1._OneOfDrop$1(drops);
        return t1;
      },
      _ItemDrop: function _ItemDrop(t0, t1, t2) {
        this._type = t0;
        this._drops$_depth = t1;
        this._affixChance = t2;
      },
      _TagDrop: function _TagDrop(t0, t1, t2) {
        this._tag = t0;
        this._drops$_depth = t1;
        this._affixChance = t2;
      },
      _PercentDrop: function _PercentDrop(t0, t1) {
        this._chance = t0;
        this._drop = t1;
      },
      _AllOfDrop: function _AllOfDrop(t0) {
        this._drops = t0;
      },
      _OneOfDrop: function _OneOfDrop(t0) {
        this._drop = t0;
      },
      _OneOfDrop_closure: function _OneOfDrop_closure(t0) {
        this.$this = t0;
      },
      _RepeatDrop: function _RepeatDrop(t0, t1) {
        this._drops$_count = t0;
        this._drop = t1;
      },
      HasteMove: function HasteMove(t0, t1, t2) {
        this._duration = t0;
        this._speed = t1;
        this.rate = t2;
      },
      Archery: function Archery(t0) {
        this._sortOrder = t0;
      },
      Archery__hasBow_closure: function Archery__hasBow_closure() {
      },
      ArrowAction: function ArrowAction(t0, t1, t2, t3, t4) {
        var _ = this;
        _._skill = t0;
        _._bolt$_hit = t1;
        _._canMiss = t2;
        _._range = t3;
        _._los$_target = t4;
        _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = _._los = _._lastPos = null;
      },
      _Archery_Discipline_TargetSkill: function _Archery_Discipline_TargetSkill() {
      },
      Region: function Region(t0) {
        this.name = t0;
      },
      Architect: function Architect(t0, t1, t2, t3) {
        var _ = this;
        _.lore = t0;
        _.stage = t1;
        _.depth = t2;
        _._owners = t3;
        _._carvedTiles = 0;
      },
      _Path: function _Path(t0, t1) {
        this.pos = t0;
        this.dir = t1;
      },
      Architecture: function Architecture() {
      },
      _LengthPathfinder: function _LengthPathfinder(t0, t1, t2, t3) {
        var _ = this;
        _._maxLength = t0;
        _.stage = t1;
        _.start = t2;
        _.end = t3;
      },
      Behavior: function Behavior() {
      },
      ActionBehavior: function ActionBehavior(t0) {
        this.action = t0;
      },
      RestBehavior: function RestBehavior() {
      },
      RunBehavior: function RunBehavior(t0) {
        var _ = this;
        _.firstStep = true;
        _.openRight = _.openLeft = null;
        _.direction = t0;
      },
      RunBehavior_canPerform_closure: function RunBehavior_canPerform_closure(t0, t1) {
        this.$this = t0;
        this.hero = t1;
      },
      RunBehavior__runInPassage_closure: function RunBehavior__runInPassage_closure(t0, t1) {
        this.$this = t0;
        this.hero = t1;
      },
      RunBehavior__shouldKeepRunning_actorAt: function RunBehavior__shouldKeepRunning_actorAt(t0) {
        this.stage = t0;
      },
      TargetDialog$: function(_gameScreen, _range, _onSelect) {
        var t1 = new X.TargetDialog(_gameScreen, _range, _onSelect, H.setRuntimeTypeInfo([], [B.Monster]));
        t1.TargetDialog$3(_gameScreen, _range, _onSelect);
        return t1;
      },
      _findLowest: function(collection, callback, $T) {
        var t1, bestItem, bestScore, _i, item, score, t2;
        H.assertSubtype(collection, "$isIterable", [$T], "$asIterable");
        H.functionTypeCheck(callback, {func: 1, ret: P.num, args: [$T]});
        for (t1 = collection.length, bestItem = null, bestScore = null, _i = 0; _i < collection.length; collection.length === t1 || (0, H.throwConcurrentModificationError)(collection), ++_i) {
          item = collection[_i];
          score = callback.call$1(item);
          if (bestScore != null) {
            if (typeof score !== "number")
              return score.$lt();
            t2 = score < bestScore;
          } else
            t2 = true;
          if (t2) {
            bestScore = score;
            bestItem = item;
          }
        }
        return bestItem;
      },
      _findHighest: function(collection, callback, $T) {
        var t1, bestItem, bestScore, _i, item, score, t2;
        H.assertSubtype(collection, "$isIterable", [$T], "$asIterable");
        H.functionTypeCheck(callback, {func: 1, ret: P.num, args: [$T]});
        for (t1 = collection.length, bestItem = null, bestScore = null, _i = 0; _i < collection.length; collection.length === t1 || (0, H.throwConcurrentModificationError)(collection), ++_i) {
          item = collection[_i];
          score = callback.call$1(item);
          if (bestScore != null) {
            if (typeof score !== "number")
              return score.$gt();
            t2 = score > bestScore;
          } else
            t2 = true;
          if (t2) {
            bestScore = score;
            bestItem = item;
          }
        }
        return bestItem;
      },
      TargetDialog: function TargetDialog(t0, t1, t2, t3) {
        var _ = this;
        _._target_dialog$_gameScreen = t0;
        _._target_dialog$_range = t1;
        _._target_dialog$_onSelect = t2;
        _._monsters = t3;
        _._targetingFloor = false;
        _._target_dialog$_animateOffset = 0;
        _._ui = null;
      },
      TargetDialog__changeMonsterTarget_closure: function TargetDialog__changeMonsterTarget_closure(t0) {
        this.$this = t0;
      },
      TargetDialog__changeMonsterTarget_closure0: function TargetDialog__changeMonsterTarget_closure0(t0) {
        this.$this = t0;
      },
      Rect_intersect: function(a, b) {
        var left, right, $top, bottom;
        left = Math.max(a.get$left(a), b.get$left(b));
        right = Math.min(a.get$right(a), b.get$right(b));
        $top = Math.max(a.get$top(a), b.get$top(b));
        bottom = Math.min(a.get$bottom(a), b.get$bottom(b));
        return new X.Rect(new L.Vec(left, $top), new L.Vec(Math.max(0, right - left), Math.max(0, bottom - $top)));
      },
      Rect$leftTopRightBottom: function(left, $top, right, bottom) {
        return new X.Rect(new L.Vec(left, $top), new L.Vec(right - left, bottom - $top));
      },
      RectIterator$: function(_rect) {
        var t1, t2;
        t1 = new X.RectIterator(_rect);
        t2 = _rect.pos;
        t1._x = t2.x - 1;
        t1._y = t2.y;
        return t1;
      },
      Rect: function Rect(t0, t1) {
        this.pos = t0;
        this.size = t1;
      },
      RectIterator: function RectIterator(t0) {
        this._rect = t0;
        this._y = this._x = null;
      }
    },
    G = {ElementActionMixin: function ElementActionMixin() {
    }, BurnActorAction: function BurnActorAction() {
      var _ = this;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, BurnFloorAction: function BurnFloorAction(t0, t1, t2) {
      var _ = this;
      _._element$_pos = t0;
      _._element$_damage = t1;
      _._element$_fuel = t2;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, BurningFloorAction: function BurningFloorAction(t0) {
      var _ = this;
      _._element$_pos = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, FreezeFloorAction: function FreezeFloorAction(t0) {
      var _ = this;
      _._element$_pos = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, PoisonFloorAction: function PoisonFloorAction(t0, t1) {
      var _ = this;
      _._element$_pos = t0;
      _._element$_damage = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, PoisonedFloorAction: function PoisonedFloorAction(t0) {
      var _ = this;
      _._element$_pos = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, WindAction: function WindAction() {
      var _ = this;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, WindAction_onPerform_closure: function WindAction_onPerform_closure(t0) {
      this.$this = t0;
    }, LightFloorAction: function LightFloorAction(t0) {
      var _ = this;
      _._element$_pos = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = _._element$_emanation = null;
    }, _BurnActorAction_Action_DestroyActionMixin: function _BurnActorAction_Action_DestroyActionMixin() {
    }, _BurnFloorAction_Action_DestroyActionMixin: function _BurnFloorAction_Action_DestroyActionMixin() {
    }, _BurningFloorAction_Action_DestroyActionMixin: function _BurningFloorAction_Action_DestroyActionMixin() {
    }, _FreezeFloorAction_Action_DestroyActionMixin: function _FreezeFloorAction_Action_DestroyActionMixin() {
    }, _PoisonFloorAction_Action_DestroyActionMixin: function _PoisonFloorAction_Action_DestroyActionMixin() {
    }, _PoisonedFloorAction_Action_DestroyActionMixin: function _PoisonedFloorAction_Action_DestroyActionMixin() {
    }, RayActionBase: function RayActionBase() {
    }, RayActionBase_onPerform_closure: function RayActionBase_onPerform_closure(t0) {
      this.$this = t0;
    }, RayAction: function RayAction(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._ray$_hit = t0;
      _._from = t1;
      _._to = t2;
      _._ray$_hitTiles = t3;
      _._radius = t4;
      _._rays = t5;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, RingSelfAction: function RingSelfAction(t0) {
      var _ = this;
      _._ray$_attack = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, RingFromAction: function RingFromAction(t0, t1) {
      var _ = this;
      _._ray$_attack = t0;
      _._ray$_pos = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, _RayAction_RayActionBase_ElementActionMixin: function _RayAction_RayActionBase_ElementActionMixin() {
    }, Swordfighting: function Swordfighting(t0) {
      this._sortOrder = t0;
    }, Swordfighting_getDefense_closure: function Swordfighting_getDefense_closure() {
    },
      _RiverPoint$: function(x, y, radius) {
        return new G._RiverPoint(x, y, radius == null ? $.$get$rng().float$2(0, 1, 3) : radius);
      },
      River: function River() {
        this._region = this._style = this._architect = null;
      },
      _RiverPoint: function _RiverPoint(t0, t1, t2) {
        this.x = t0;
        this.y = t1;
        this.radius = t2;
      },
      Element$: function($name, abbreviation, experience, attack, destroyMessage, emanates, floor) {
        var t1, t2, t3;
        t1 = destroyMessage == null ? "" : destroyMessage;
        t2 = attack == null ? new G.Element_closure() : attack;
        t3 = floor == null ? new G.Element_closure0() : floor;
        return new G.Element($name, abbreviation, t1, emanates === true, experience, t2, t3);
      },
      Element: function Element(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _.name = t0;
        _.abbreviation = t1;
        _.destroyMessage = t2;
        _.emanates = t3;
        _.experience = t4;
        _.attackAction = t5;
        _.floorAction = t6;
      },
      Element_closure: function Element_closure() {
      },
      Element_closure0: function Element_closure0() {
      },
      Hero$: function(game, pos, save) {
        var t1, t2, t3, t4;
        t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, B.Monster);
        t2 = [P.double];
        t2 = H.setRuntimeTypeInfo([new D.Property(t2), new D.Property(t2)], [[D.Property, P.double]]);
        t3 = pos.x;
        t4 = pos.y;
        t2 = new G.Hero(save, t1, t2, 200, 0, new D.Property([P.int]), game, new Y.Energy(), new E.HasteCondition(), new E.ColdCondition(), new E.PoisonCondition(), new E.BlindnessCondition(), new E.BlindnessCondition(), P.LinkedHashMap_LinkedHashMap$_empty(G.Element, E.ResistCondition), new L.Vec(t3, t4));
        t2.Actor$3(game, t3, t4);
        t2.Hero$3(game, pos, save);
        return t2;
      },
      experienceLevel: function(experience) {
        var level, t1;
        for (level = 1; level <= 50; ++level) {
          t1 = G.experienceLevelCost(level);
          if (typeof experience !== "number")
            return experience.$lt();
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (experience < t1)
            return level - 1;
        }
        return 50;
      },
      experienceLevelCost: function(level) {
        if (typeof level !== "number")
          return level.$gt();
        if (level > 50)
          return;
        return C.JSNumber_methods.toInt$0(Math.pow(level - 1, 3)) * 1000;
      },
      Hero: function Hero(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
        var _ = this;
        _.save = t0;
        _._seenMonsters = t1;
        _._behavior = null;
        _._heftScales = t2;
        _._stomach = t3;
        _._focus = 400;
        _._lastNoise = t4;
        _._level = t5;
        _.game = t6;
        _.energy = t7;
        _.haste = t8;
        _.cold = t9;
        _.poison = t10;
        _.blindness = t11;
        _.dazzle = t12;
        _.resistances = t13;
        _._pos = t14;
        _._health = null;
      },
      Hero_createRangedHit_closure: function Hero_createRangedHit_closure() {
      },
      Hero_refreshProperties_closure: function Hero_refreshProperties_closure(t0, t1) {
        this.$this = t0;
        this.level = t1;
      },
      Hero_refreshProperties_closure0: function Hero_refreshProperties_closure0(t0, t1, t2) {
        this.$this = t0;
        this.heftScale = t1;
        this.weapon = t2;
      },
      SelectDepthPopup: function SelectDepthPopup(t0, t1) {
        var _ = this;
        _.content = t0;
        _.save = t1;
        _._depth = 1;
        _._ui = null;
      },
      PortTerminal: function PortTerminal(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.size = t0;
        _._port_terminal$_x = t1;
        _._port_terminal$_y = t2;
        _._root = t3;
        _.foreColor = t4;
        _.backColor = t5;
      },
      _LineIterator$: function(_start, _end) {
        var t1, delta, t2, t3, t4, t5;
        t1 = new G._LineIterator(_start, _end);
        delta = _end.$sub(0, _start);
        t2 = delta.x;
        t3 = new L.Vec(C.JSInt_methods.get$sign(t2), 0);
        t1._primaryStep = t3;
        t4 = delta.y;
        t5 = new L.Vec(0, C.JSInt_methods.get$sign(t4));
        t1._secondaryStep = t5;
        t2 = Math.abs(t2);
        t4 = Math.abs(t4);
        t1._primary = t2;
        t1._secondary = t4;
        if (t4 > t2) {
          t1._primary = t4;
          t1._secondary = t2;
          t1._primaryStep = t5;
          t1._secondaryStep = t3;
        }
        t1._line$_current = _start;
        t1._error = 0;
        return t1;
      },
      _LineIterator: function _LineIterator(t0, t1) {
        var _ = this;
        _._start = t0;
        _._end = t1;
        _._secondaryStep = _._primaryStep = _._secondary = _._primary = _._error = _._line$_current = null;
      }
    },
    N = {
      FlowAction$: function(_from, _hit, _motility, slowness) {
        return new N.FlowAction(_from, _hit, _motility, slowness == null ? 1 : slowness);
      },
      FlowAction: function FlowAction(t0, t1, t2, t3) {
        var _ = this;
        _._flow0$_from = t0;
        _._flow0$_hit = t1;
        _._tiles = _._flow = null;
        _._flow0$_motility = t2;
        _._slowness = t3;
        _._flow0$_frame = 0;
        _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
      },
      FlowAction_onPerform_closure: function FlowAction_onPerform_closure(t0) {
        this.$this = t0;
      },
      FlowSelfAction: function FlowSelfAction(t0, t1) {
        var _ = this;
        _._flow0$_attack = t0;
        _._flow0$_motility = t1;
        _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
      },
      FlowFromAction: function FlowFromAction(t0, t1, t2) {
        var _ = this;
        _._flow0$_attack = t0;
        _._flow0$_pos = t1;
        _._flow0$_motility = t2;
        _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
      },
      _FlowAction_Action_ElementActionMixin: function _FlowAction_Action_ElementActionMixin() {
      },
      RaceStats$: function(_race, _max, seed) {
        var t1 = new N.RaceStats(_race, _max, seed, H.setRuntimeTypeInfo([], [[P.Map, D.Stat, P.int]]));
        t1.RaceStats$3(_race, _max, seed);
        return t1;
      },
      Race: function Race(t0, t1, t2) {
        this.name = t0;
        this.description = t1;
        this.stats = t2;
      },
      RaceStats: function RaceStats(t0, t1, t2, t3) {
        var _ = this;
        _._race = t0;
        _._max = t1;
        _.seed = t2;
        _._stats = t3;
      },
      RaceStats_lerp: function RaceStats_lerp(t0) {
        this.level = t0;
      },
      MotilityFlow$: function(stage, start, _motility, avoidActors, avoidSubstances, maxDistance) {
        var t1 = L.Vec;
        t1 = new N.MotilityFlow(_motility, avoidActors !== false, avoidSubstances === true, stage, start, maxDistance, new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]), [t1]), H.setRuntimeTypeInfo([], [t1]));
        t1.Flow$3$maxDistance(stage, start, maxDistance);
        return t1;
      },
      Flow: function Flow() {
      },
      Flow__directionsTo_walkBack: function Flow__directionsTo_walkBack(t0, t1, t2) {
        this.$this = t0;
        this.walked = t1;
        this.directions = t2;
      },
      Flow__processNext_processNeighbor: function Flow__processNext_processNeighbor(t0, t1, t2) {
        this.$this = t0;
        this.start = t1;
        this.parentCost = t2;
      },
      MotilityFlow: function MotilityFlow(t0, t1, t2, t3, t4, t5, t6, t7) {
        var _ = this;
        _._flow$_motility = t0;
        _._avoidActors = t1;
        _._avoidSubstances = t2;
        _.stage = t3;
        _._flow$_start = t4;
        _._maxDistance = t5;
        _._offset = _._costs = null;
        _._open = t6;
        _._found = t7;
      },
      ConfirmPopup: function ConfirmPopup(t0, t1) {
        this._confirm_popup$_message = t0;
        this._result = t1;
        this._ui = null;
      },
      Rng$: function(seed) {
        var t1, t2;
        t1 = new N.Rng();
        t2 = P._Random$(seed);
        t1._random = t2;
        return t1;
      },
      Rng: function Rng() {
        this._random = null;
      }
    },
    U = {HowlAction: function HowlAction(t0, t1) {
      var _ = this;
      _._howl0$_range = t0;
      _._howl0$_verb = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, HowlMove: function HowlMove(t0, t1, t2) {
      this._howl$_range = t0;
      this._howl$_verb = t1;
      this.rate = t2;
    },
      getArmorMultiplier: function(armor) {
        return 1 / (1 + Math.max(0, armor) / 40);
      },
      Attack$: function(noun, verb, damage, range, element) {
        var t1 = range == null ? 0 : range;
        return new U.Attack(noun, verb, damage, t1, element == null ? $.$get$Element_none() : element);
      },
      Attack: function Attack(t0, t1, t2, t3, t4) {
        var _ = this;
        _.noun = t0;
        _.verb = t1;
        _.damage = t2;
        _.range = t3;
        _.element = t4;
      },
      HitType: function HitType(t0, t1) {
        this.index = t0;
        this._combat$_name = t1;
      },
      Hit: function Hit(t0, t1, t2, t3, t4) {
        var _ = this;
        _._attack = t0;
        _._strikeBonus = 0;
        _._strikeScale = t1;
        _._damageScale = t2;
        _._damageBonus = 0;
        _._brand = t3;
        _._rangeScale = t4;
      },
      Defense: function Defense(t0, t1) {
        this.amount = t0;
        this.message = t1;
      },
      VecSet: function VecSet(t0, t1, t2, t3, t4) {
        var _ = this;
        _._values = t0;
        _._sentinel = 0;
        _._xMin = t1;
        _._xMax = t2;
        _._yMin = t3;
        _._yMax = t4;
      },
      SidebarPanel: function SidebarPanel(t0) {
        this._sidebar_panel$_gameScreen = t0;
        this.bounds = null;
      },
      SidebarPanel_renderPanel_closure: function SidebarPanel_renderPanel_closure(t0) {
        this.hero = t0;
      },
      SidebarPanel__drawStats_drawStat: function SidebarPanel__drawStats_drawStat(t0, t1, t2) {
        this._box_0 = t0;
        this.terminal = t1;
        this.y = t2;
      },
      SidebarPanel__drawHealthBar_drawCondition: function SidebarPanel__drawHealthBar_drawCondition(t0, t1, t2) {
        this._box_0 = t0;
        this.terminal = t1;
        this.y = t2;
      }
    },
    F = {IlluminateAction: function IlluminateAction(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.range = t0;
      _._illuminate$_emanationLevel = t1;
      _._from = t2;
      _._to = t3;
      _._ray$_hitTiles = t4;
      _._radius = t5;
      _._rays = t6;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, IlluminateSelfAction: function IlluminateSelfAction(t0, t1) {
      var _ = this;
      _._illuminate$_range = t0;
      _._illuminate$_emanationLevel = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    },
      floorDrop: function(drop, endFrequency, $location, startFrequency) {
        var t1;
        if ($location == null)
          $location = C.SpawnLocation_0;
        t1 = $.$get$_floorDrops();
        t1.toString;
        t1._resource$_add$7(H.assertSubtypeOfRuntimeType(new F.FloorDrop($location, drop), H.getTypeArgumentByIndex(t1, 0)), null, 1, 100, startFrequency, endFrequency, null);
      },
      FloorDrop: function FloorDrop(t0, t1) {
        this.location = t0;
        this.drop = t1;
      },
      ArchitecturalStyle_pick: function(depth) {
        var t1, t2, result, count, hasFillable, style;
        t1 = $.$get$ArchitecturalStyle__styles();
        t2 = t1._resources;
        if (t2.get$isEmpty(t2))
          F.ArchitecturalStyle__initialize();
        result = H.setRuntimeTypeInfo([], [F.ArchitecturalStyle]);
        count = Math.min($.$get$rng().taper$2(1, 10), 5);
        hasFillable = false;
        while (true) {
          if (!(!hasFillable || result.length < count))
            break;
          style = t1.tryChoose$1(depth);
          if (style.canFill)
            hasFillable = true;
          if (!C.JSArray_methods.contains$1(result, style))
            C.JSArray_methods.add$1(result, style);
        }
        return result;
      },
      ArchitecturalStyle__initialize: function() {
        var t1, t2;
        t1 = new F.ArchitecturalStyle__initialize_addStyle();
        t1.call$5$create$decor$decorDensity$startFrequency("dungeon", new F.ArchitecturalStyle__initialize_closure(), "dungeon", 0.09, 10);
        t1.call$7$create$decor$decorDensity$endFrequency$monsters$startFrequency("catacomb", new F.ArchitecturalStyle__initialize_closure0(), "catacomb", 0.02, 2, "bat bug humanoid natural", 1);
        t1.call$7$create$decor$decorDensity$endFrequency$monsters$startFrequency("cavern", new F.ArchitecturalStyle__initialize_closure1(), "glowing-moss", 0.3, 1, "animal bat bug natural", 0.2);
        t1.call$7$canFill$create$decor$decorDensity$monsterDensity$monsters("lake", false, new F.ArchitecturalStyle__initialize_closure2(), "water", 0.01, 0, "animal herp");
        t1.call$7$canFill$create$decor$decorDensity$monsterDensity$monsters("river", false, new F.ArchitecturalStyle__initialize_closure3(), "water", 0.01, 0, "animal herp");
        t2 = new F.ArchitecturalStyle__initialize_pit(t1);
        t2.call$3$end$start("bug", 40, 1);
        t2.call$3$end$start("jelly", 50, 5);
        t2.call$3$end$start("bat", 40, 10);
        t2.call$3$end$start("rodent", 50, 1);
        t2.call$3$end$start("snake", 60, 8);
        t2.call$3$end$start("plant", 40, 15);
        t2.call$3$end$start("eye", 100, 20);
        t2.call$3$end$start("dragon", 100, 60);
        t1 = new F.ArchitecturalStyle__initialize_keep(t1);
        t1.call$3$end$start("kobold", 16, 2);
        t1.call$3$end$start("goblin", 23, 5);
        t1.call$3$end$start("saurian", 30, 10);
        t1.call$3$end$start("orc", 40, 28);
      },
      ArchitecturalStyle: function ArchitecturalStyle(t0, t1, t2, t3, t4, t5, t6, t7) {
        var _ = this;
        _.name = t0;
        _.decorTheme = t1;
        _.decorDensity = t2;
        _.monsterGroups = t3;
        _.monsterDensity = t4;
        _.itemDensity = t5;
        _._factory = t6;
        _.canFill = t7;
      },
      ArchitecturalStyle__initialize_addStyle: function ArchitecturalStyle__initialize_addStyle() {
      },
      ArchitecturalStyle__initialize_closure: function ArchitecturalStyle__initialize_closure() {
      },
      ArchitecturalStyle__initialize_closure0: function ArchitecturalStyle__initialize_closure0() {
      },
      ArchitecturalStyle__initialize_closure1: function ArchitecturalStyle__initialize_closure1() {
      },
      ArchitecturalStyle__initialize_closure2: function ArchitecturalStyle__initialize_closure2() {
      },
      ArchitecturalStyle__initialize_closure3: function ArchitecturalStyle__initialize_closure3() {
      },
      ArchitecturalStyle__initialize_pit: function ArchitecturalStyle__initialize_pit(t0) {
        this.addStyle = t0;
      },
      ArchitecturalStyle__initialize_pit_closure: function ArchitecturalStyle__initialize_pit_closure(t0) {
        this.monsterGroup = t0;
      },
      ArchitecturalStyle__initialize_keep: function ArchitecturalStyle__initialize_keep(t0) {
        this.addStyle = t0;
      },
      ArchitecturalStyle__initialize_keep_closure: function ArchitecturalStyle__initialize_keep_closure() {
      },
      Lake: function Lake() {
        this._region = this._style = this._architect = null;
      },
      LosAction: function LosAction() {
      },
      Lighting_emanationForLevel: function(level) {
        switch (level) {
          case 1:
            return 40;
          case 2:
            return 56;
          case 3:
            return 72;
          case 4:
            return 96;
          case 5:
            return 120;
          case 6:
            return 160;
          case 7:
            return 200;
          case 8:
            return 240;
          default:
            if (level <= 0)
              return 0;
            return 255;
        }
      },
      Lighting: function Lighting(t0, t1, t2, t3, t4) {
        var _ = this;
        _._lighting$_stage = t0;
        _._floorLight = t1;
        _._actorLight = t2;
        _._fov = t3;
        _._queue = t4;
        _._visibilityDirty = _._actorLightDirty = _._floorLightDirty = true;
      },
      Lighting__lightWalls_checkNeighbor: function Lighting__lightWalls_checkNeighbor(t0, t1, t2, t3) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.x = t2;
        _.y = t3;
      },
      Lighting__process_checkNeighbor: function Lighting__process_checkNeighbor(t0, t1, t2, t3, t4) {
        var _ = this;
        _.$this = t0;
        _.pos = t1;
        _.parentLight = t2;
        _.tiles = t3;
        _.attenuate = t4;
      },
      ExitPopup$: function(_save, _game) {
        var t1 = new F.ExitPopup(_save, _game, H.setRuntimeTypeInfo([], [F._AnimatedValue]));
        t1.ExitPopup$2(_save, _game);
        return t1;
      },
      ExitPopup: function ExitPopup(t0, t1, t2) {
        var _ = this;
        _._exit_popup$_save = t0;
        _._exit_popup$_game = t1;
        _._exit_popup$_values = t2;
        _._ui = null;
      },
      ExitPopup_closure: function ExitPopup_closure() {
      },
      _AnimatedValue: function _AnimatedValue(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.y = t0;
        _.name = t1;
        _.value = t2;
        _.color = t3;
        _.total = t4;
        _.current = t5;
      },
      ItemScreen: function ItemScreen() {
      },
      _TownItemView: function _TownItemView(t0) {
        this._screen = t0;
      },
      _HomeViewScreen: function _HomeViewScreen(t0) {
        var _ = this;
        _._item_screen$_gameScreen = t0;
        _._shiftDown = false;
        _._isActive = true;
        _._ui = _._item_screen$_error = _._inspected = null;
      },
      _HomeGetScreen: function _HomeGetScreen(t0) {
        var _ = this;
        _._item_screen$_gameScreen = t0;
        _._shiftDown = false;
        _._isActive = true;
        _._ui = _._item_screen$_error = _._inspected = null;
      },
      _ShopViewScreen: function _ShopViewScreen(t0, t1) {
        var _ = this;
        _._shop = t0;
        _._item_screen$_gameScreen = t1;
        _._shiftDown = false;
        _._isActive = true;
        _._ui = _._item_screen$_error = _._inspected = null;
      },
      _ShopBuyScreen: function _ShopBuyScreen(t0, t1) {
        var _ = this;
        _._shop = t0;
        _._item_screen$_gameScreen = t1;
        _._shiftDown = false;
        _._isActive = true;
        _._ui = _._item_screen$_error = _._inspected = null;
      },
      _CountScreen: function _CountScreen(t0, t1, t2) {
        var _ = this;
        _._parent = t0;
        _._item_screen$_item = t1;
        _._item_screen$_count = null;
        _._item_screen$_gameScreen = t2;
        _._shiftDown = false;
        _._isActive = true;
        _._ui = _._item_screen$_error = _._inspected = null;
      },
      LoadingDialog: function LoadingDialog(t0) {
        var _ = this;
        _._game = t0;
        _._steps = null;
        _._frame = 0;
        _._ui = null;
      },
      main: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, tableCells, $content, fontName, _i, thisFont;
        $.$get$Items_types().defineTags$1("item");
        t1 = R.category(199, 10, null);
        t1.tag$1(0, "item");
        t2 = $.$get$Elements_earth();
        t1.toss$4$breakage$damage$element$range(10, 3, t2, 7);
        R.item("Rock", C.Color_142_82_55, 0.1, null).depth$1(1);
        t1 = R.category(252, 4, null);
        t1.tag$1(0, "item");
        t1.toss$3$breakage$damage$range(30, 2, 5);
        R.item("Skull", C.Color_132_126_135, 0.1, null).depth$1(1);
        t1 = R.category(162, null, null);
        t1.tag$1(0, "treasure/coin");
        t1._isTreasure = true;
        R.item("Copper Coins", C.Color_122_44_24, null, 4).depth$2$to(1, 11);
        R.item("Bronze Coins", C.Color_142_82_55, null, 8).depth$2$to(7, 20);
        R.item("Silver Coins", C.Color_129_231_235, null, 20).depth$2$to(11, 30);
        R.item("Electrum Coins", C.Color_255_238_168, null, 50).depth$2$to(20, 40);
        R.item("Gold Coins", C.Color_222_156_33, null, 100).depth$2$to(30, 50);
        R.item("Platinum Coins", C.Color_132_126_135, null, 300).depth$2$to(40, 70);
        t1 = R.category(36, null, null);
        t1.tag$1(0, "treasure/bar");
        t1._isTreasure = true;
        R.item("Copper Bar", C.Color_122_44_24, null, 150).depth$2$to(35, 60);
        R.item("Bronze Bar", C.Color_142_82_55, null, 500).depth$2$to(50, 70);
        R.item("Silver Bar", C.Color_129_231_235, null, 800).depth$2$to(60, 80);
        R.item("Electrum Bar", C.Color_255_238_168, null, 1200).depth$2$to(70, 90);
        R.item("Gold Bar", C.Color_222_156_33, null, 2000).depth$1(80);
        R.item("Platinum Bar", C.Color_132_126_135, null, 3000).depth$1(90);
        t1 = R.category(161, null, null);
        t1.tag$1(0, "item/food");
        t3 = $.$get$Elements_fire();
        t1._destroyChance.$indexSet(0, t3, 20);
        t1._fuel = 3;
        t1 = R.item("Stale Biscuit", C.Color_189_144_108, 1, null);
        t1.depth$2$to(1, 10);
        t1._maxStack = 6;
        t1.food$1(100);
        t1 = R.item("Loa[f|ves] of Bread", C.Color_142_82_55, 1, 4);
        t1.depth$2$to(3, 40);
        t1._maxStack = 6;
        t1.food$1(200);
        t1 = R.category(188, null, null);
        t1.tag$1(0, "item/food");
        t1._destroyChance.$indexSet(0, t3, 15);
        t1._fuel = 2;
        t1 = R.item("Chunk[s] of Meat", C.Color_64_31_36, 1, 10);
        t1.depth$1(8);
        t1._maxStack = 4;
        t1.food$1(400);
        t1 = R.item("Piece[s] of Jerky", C.Color_142_82_55, 1, 20);
        t1.depth$1(10);
        t1._maxStack = 12;
        t1.food$1(600);
        t1 = R.category(172, null, "hit[s]");
        t1.tag$1(0, "equipment/light");
        t1.toss$1$breakage(70);
        t1 = R.item("Tallow Candle", C.Color_189_144_108, 1, 6);
        t1.depth$2$to(1, 12);
        t1._maxStack = 10;
        t1.toss$3$damage$element$range(2, t3, 8);
        t1.lightSource$2$level$range(2, 8);
        t1._destroyChance.$indexSet(0, t3, 40);
        t1._fuel = 20;
        t1 = R.item("Wax Candle", C.Color_226_223_240, 1, 8);
        t1.depth$2$to(4, 20);
        t1._maxStack = 10;
        t1.toss$3$damage$element$range(3, t3, 8);
        t1.lightSource$2$level$range(3, 10);
        t1._destroyChance.$indexSet(0, t3, 40);
        t1._fuel = 25;
        t1 = R.item("Oil Lamp", C.Color_64_31_36, 1, 18);
        t1.depth$2$to(8, 30);
        t1._maxStack = 4;
        t1.toss$3$damage$element$range(10, t3, 8);
        t1.lightSource$2$level$range(4, 13);
        t1._destroyChance.$indexSet(0, t3, 50);
        t1._fuel = 40;
        t1 = R.item("Torch[es]", C.Color_142_82_55, 1, 16);
        t1.depth$2$to(11, 45);
        t1._maxStack = 4;
        t1.toss$3$damage$element$range(6, t3, 10);
        t1.lightSource$2$level$range(5, 18);
        t1._destroyChance.$indexSet(0, t3, 60);
        t1._fuel = 60;
        t1 = R.item("Lantern", C.Color_222_156_33, 0.3, 78);
        t1.depth$1(18);
        t1.toss$3$damage$element$range(5, t3, 5);
        t1.lightSource$2$level$range(6, 24);
        t1 = R.category(231, 10, null);
        t1.tag$1(0, "magic/potion/healing");
        t1.toss$3$breakage$damage$range(100, 1, 6);
        t4 = $.$get$Elements_cold();
        t1._destroyChance.$indexSet(0, t4, 20);
        t1._fuel = null;
        t1 = R.item("Soothing Balm", C.Color_255_122_105, 1, 10);
        t1.depth$2$to(2, 30);
        t1.heal$1(48);
        t1 = R.item("Mending Salve", C.Color_204_35_57, 1, 30);
        t1.depth$2$to(20, 40);
        t1.heal$1(100);
        t1 = R.item("Healing Poultice", C.Color_84_0_39, 1, 80);
        t1.depth$1(30);
        t1.heal$2$curePoison(200, true);
        t1 = R.item("Potion[s] of Amelioration", C.Color_56_16_125, 1, 220);
        t1.depth$1(60);
        t1.heal$2$curePoison(400, true);
        t1 = R.item("Potion[s] of Rejuvenation", C.Color_86_30_138, 0.5, 1000);
        t1.depth$1(80);
        t1.heal$2$curePoison(1000, true);
        t1 = R.item("Antidote", C.Color_22_117_38, 1, 20);
        t1.depth$1(2);
        t1.heal$2$curePoison(0, true);
        t1 = R.category(234, 10, null);
        t1.tag$1(0, "magic/potion/resistance");
        t1.toss$3$breakage$damage$range(100, 1, 6);
        t1._destroyChance.$indexSet(0, t4, 20);
        t1._fuel = null;
        t1 = R.item("Salve[s] of Heat Resistance", C.Color_179_74_4, 0.5, 50);
        t1.depth$1(5);
        t1.resistSalve$1(t3);
        t1 = R.item("Salve[s] of Cold Resistance", C.Color_64_163_229, 0.5, 55);
        t1.depth$1(6);
        t1.resistSalve$1(t4);
        t1 = R.item("Salve[s] of Light Resistance", C.Color_255_238_168, 0.5, 60);
        t1.depth$1(7);
        t5 = $.$get$Elements_light();
        t1.resistSalve$1(t5);
        t1 = R.item("Salve[s] of Wind Resistance", C.Color_129_231_235, 0.5, 65);
        t1.depth$1(8);
        t6 = $.$get$Elements_air();
        t1.resistSalve$1(t6);
        t1 = R.item("Salve[s] of Lightning Resistance", C.Color_189_106_235, 0.5, 70);
        t1.depth$1(9);
        t7 = $.$get$Elements_lightning();
        t1.resistSalve$1(t7);
        t1 = R.item("Salve[s] of Darkness Resistance", C.Color_63_64_114, 0.5, 75);
        t1.depth$1(10);
        t8 = $.$get$Elements_dark();
        t1.resistSalve$1(t8);
        t1 = R.item("Salve[s] of Earth Resistance", C.Color_142_82_55, 0.5, 80);
        t1.depth$1(13);
        t1.resistSalve$1(t2);
        t1 = R.item("Salve[s] of Water Resistance", C.Color_26_46_150, 0.5, 85);
        t1.depth$1(16);
        t9 = $.$get$Elements_water();
        t1.resistSalve$1(t9);
        t1 = R.item("Salve[s] of Acid Resistance", C.Color_189_144_108, 0.5, 90);
        t1.depth$1(19);
        t10 = $.$get$Elements_acid();
        t1.resistSalve$1(t10);
        t1 = R.item("Salve[s] of Poison Resistance", C.Color_131_158_13, 0.5, 95);
        t1.depth$1(23);
        t11 = $.$get$Elements_poison();
        t1.resistSalve$1(t11);
        t1 = R.item("Salve[s] of Death Resistance", C.Color_86_30_138, 0.5, 100);
        t1.depth$1(30);
        t12 = $.$get$Elements_spirit();
        t1.resistSalve$1(t12);
        t1 = R.category(235, 10, null);
        t1.tag$1(0, "magic/potion/speed");
        t1.toss$3$breakage$damage$range(100, 1, 6);
        t1._destroyChance.$indexSet(0, t4, 20);
        t1._fuel = null;
        t1 = R.item("Potion[s] of Quickness", C.Color_131_158_13, 0.3, 25);
        t1.depth$2$to(3, 30);
        t1.haste$2(1, 40);
        t1 = R.item("Potion[s] of Alacrity", C.Color_22_117_38, 0.3, 60);
        t1.depth$2$to(18, 50);
        t1.haste$2(2, 60);
        t1 = R.item("Potion[s] of Speed", C.Color_0_64_39, 0.25, 150);
        t1.depth$1(34);
        t1.haste$2(3, 100);
        t1 = R.category(232, 10, null);
        t1.tag$1(0, "magic/potion/bottled");
        t1.toss$3$breakage$damage$range(100, 1, 8);
        t1._destroyChance.$indexSet(0, t4, 15);
        t1._fuel = null;
        t1 = R.item("Bottled Wind", C.Color_64_163_229, 0.5, 100);
        t1.depth$1(4);
        t1.flow$5$fly(t6, "the wind", "blasts", 20, true);
        t6 = R.item("Bottled Ice", C.Color_21_87_194, 0.5, 120);
        t6.depth$1(7);
        t6.ball$4(t4, "the cold", "freezes", 30);
        t4 = R.item("Bottled Fire", C.Color_204_35_57, 0.5, 140);
        t4.depth$1(11);
        t4.flow$5$fly(t3, "the fire", "burns", 44, true);
        t4 = R.item("Bottled Ocean", C.Color_26_46_150, 0.5, 160);
        t4.depth$1(12);
        t4.flow$4(t9, "the water", "drowns", 52);
        t9 = R.item("Bottled Earth", C.Color_142_82_55, 0.5, 180);
        t9.depth$1(13);
        t9.ball$4(t2, "the dirt", "crushes", 58);
        t2 = R.item("Bottled Lightning", C.Color_189_106_235, 0.5, 200);
        t2.depth$1(16);
        t2.ball$4(t7, "the lightning", "shocks", 68);
        t7 = R.item("Bottled Acid", C.Color_131_158_13, 0.5, 220);
        t7.depth$1(18);
        t7.flow$4(t10, "the acid", "corrodes", 72);
        t10 = R.item("Bottled Poison", C.Color_0_64_39, 0.5, 240);
        t10.depth$1(22);
        t10.flow$5$fly(t11, "the poison", "infects", 90, true);
        t11 = R.item("Bottled Shadow", C.Color_38_38_56, 0.5, 260);
        t11.depth$1(28);
        t11.ball$4(t8, "the darkness", "torments", 120);
        t8 = R.item("Bottled Radiance", C.Color_255_238_168, 0.5, 280);
        t8.depth$1(34);
        t8.ball$4(t5, "light", "sears", 140);
        t5 = R.item("Bottled Spirit", C.Color_63_64_114, 0.5, 300);
        t5.depth$1(40);
        t5.flow$5$fly(t12, "the spirit", "haunts", 160, true);
        t12 = R.category(226, 20, null);
        t12.tag$1(0, "magic/scroll/teleportation");
        t12.toss$3$breakage$damage$range(75, 1, 3);
        t12._destroyChance.$indexSet(0, t3, 20);
        t12._fuel = 5;
        t12 = R.item("Scroll[s] of Sidestepping", C.Color_189_106_235, 0.5, 16);
        t12.depth$1(2);
        t12.teleport$1(8);
        t12 = R.item("Scroll[s] of Phasing", C.Color_86_30_138, 0.3, 28);
        t12.depth$1(6);
        t12.teleport$1(14);
        t12 = R.item("Scroll[s] of Teleportation", C.Color_56_16_125, 0.3, 52);
        t12.depth$1(15);
        t12.teleport$1(28);
        t12 = R.item("Scroll[s] of Disappearing", C.Color_26_46_150, 0.3, 74);
        t12.depth$1(26);
        t12.teleport$1(54);
        t12 = R.category(228, 20, null);
        t12.tag$1(0, "magic/scroll/detection");
        t12.toss$3$breakage$damage$range(75, 1, 3);
        t12._destroyChance.$indexSet(0, t3, 20);
        t12._fuel = 5;
        t12 = R.item("Scroll[s] of Find Nearby Escape", C.Color_255_238_168, 0.5, 12);
        t12.depth$2$to(1, 10);
        t5 = [T.DetectType];
        t12.detection$2$range(H.setRuntimeTypeInfo([C.DetectType_0], t5), 20);
        t12 = R.item("Scroll[s] of Find Nearby Items", C.Color_222_156_33, 0.5, 24);
        t12.depth$2$to(2, 16);
        t12.detection$2$range(H.setRuntimeTypeInfo([C.DetectType_1], t5), 20);
        t12 = R.item("Scroll[s] of Detect Nearby", C.Color_131_158_13, 0.25, 36);
        t12.depth$2$to(3, 24);
        t12.detection$2$range(H.setRuntimeTypeInfo([C.DetectType_0, C.DetectType_1], t5), 20);
        t12 = R.item("Scroll[s] of Locate Escape", C.Color_189_144_108, 1, 28);
        t12.depth$1(6);
        t12.detection$1(H.setRuntimeTypeInfo([C.DetectType_0], t5));
        t12 = R.item("Scroll[s] of Item Detection", C.Color_179_74_4, 0.5, 64);
        t12.depth$1(12);
        t12.detection$1(H.setRuntimeTypeInfo([C.DetectType_1], t5));
        t12 = R.item("Scroll[s] of Detection", C.Color_122_44_24, 0.25, 124);
        t12.depth$1(18);
        t12.detection$1(H.setRuntimeTypeInfo([C.DetectType_0, C.DetectType_1], t5));
        t5 = R.category(224, 20, null);
        t5.tag$1(0, "magic/scroll/mapping");
        t5.toss$3$breakage$damage$range(75, 1, 3);
        t5._destroyChance.$indexSet(0, t3, 15);
        t5._fuel = 5;
        t5 = R.item("Adventurer's Map", C.Color_0_64_39, 0.25, 70);
        t5.depth$2$to(10, 50);
        t5.mapping$1(16);
        t5 = R.item("Explorer's Map", C.Color_22_117_38, 0.25, 160);
        t5.depth$2$to(30, 70);
        t5.mapping$1(32);
        t5 = R.item("Cartographer's Map", C.Color_129_217_117, 0.25, 240);
        t5.depth$2$to(50, 90);
        t5.mapping$1(64);
        t5 = R.item("Wizard's Map", C.Color_9_95_112, 0.25, 360);
        t5.depth$1(70);
        t5.mapping$2$illuminate(200, true);
        t5 = R.category(189, 3, null);
        t5.tag$1(0, "magic/book/sorcery");
        t5.toss$3$breakage$damage$range(25, 1, 3);
        t5._destroyChance.$indexSet(0, t3, 5);
        t5._fuel = 10;
        t5 = R.item('Spellbook "Elemental Primer"', C.Color_84_0_39, 0.05, 100);
        t5.depth$1(1);
        t12 = P.String;
        t8 = [t12];
        t8 = H.assertSubtype(H.setRuntimeTypeInfo(["Sense Items", "Flee", "Escape", "Disappear", "Icicle", "Brilliant Beam", "Windstorm", "Fire Barrier", "Tidal Wave"], t8), "$isList", t8, "$asList");
        t11 = M.Skill;
        t10 = H.getTypeArgumentByIndex(t8, 0);
        C.JSArray_methods.addAll$1(t5._skills, new H.MappedListIterable(t8, H.functionTypeCheck(Q.skills_Skills_find$closure(), {func: 1, ret: t11, args: [t10]}), [t10, t11]));
        t11 = R.category(225, null, "hit[s]");
        t11.tag$1(0, "equipment/weapon/club");
        C.JSArray_methods.add$1(t11._skills, Q.Skills_find("Club Mastery"));
        t11.toss$2$breakage$range(25, 5);
        t11 = R.item("Stick", C.Color_142_82_55, 0.5, null);
        t11.depth$2$to(1, 20);
        t11.weapon$2$heft(7, 6);
        t11.toss$1$damage(3);
        t11._destroyChance.$indexSet(0, t3, 10);
        t11._fuel = 10;
        t11 = R.item("Cudgel", C.Color_132_126_135, 0.5, 20);
        t11.depth$2$to(6, 60);
        t11.weapon$2$heft(9, 8);
        t11.toss$1$damage(4);
        t11._destroyChance.$indexSet(0, t3, 5);
        t11._fuel = 10;
        t11 = R.item("Club", C.Color_64_31_36, 0.5, 40);
        t11.depth$1(14);
        t11.weapon$2$heft(12, 11);
        t11.toss$1$damage(5);
        t11._destroyChance.$indexSet(0, t3, 2);
        t11._fuel = 10;
        t11 = R.category(237, null, "hit[s]");
        t11.tag$1(0, "equipment/weapon/staff");
        t11._isTwoHanded = true;
        t11.toss$2$breakage$range(35, 4);
        t11 = R.item("Walking Stick", C.Color_142_82_55, 0.5, 10);
        t11.depth$2$to(2, 40);
        t11.weapon$2$heft(10, 9);
        t11.toss$1$damage(3);
        t11._destroyChance.$indexSet(0, t3, 5);
        t11._fuel = 15;
        t11 = R.item("Sta[ff|aves]", C.Color_64_31_36, 0.5, 50);
        t11.depth$1(7);
        t11.weapon$2$heft(14, 11);
        t11.toss$1$damage(5);
        t11._destroyChance.$indexSet(0, t3, 2);
        t11._fuel = 15;
        t11 = R.item("Quartersta[ff|aves]", C.Color_132_126_135, 0.5, 80);
        t11.depth$1(24);
        t11.weapon$2$heft(20, 13);
        t11.toss$1$damage(8);
        t11._destroyChance.$indexSet(0, t3, 2);
        t11._fuel = 15;
        t11 = R.category(243, null, "bash[es]");
        t11.tag$1(0, "equipment/weapon/hammer");
        t11.toss$2$breakage$range(15, 5);
        t11 = R.item("Hammer", C.Color_142_82_55, 0.5, 120);
        t11.depth$1(40);
        t11.weapon$2$heft(32, 22);
        t11.toss$1$damage(12);
        t11 = R.item("Mattock", C.Color_64_31_36, 0.5, 240);
        t11.depth$1(46);
        t11.weapon$2$heft(40, 26);
        t11.toss$1$damage(16);
        t11 = R.item("War Hammer", C.Color_132_126_135, 0.5, 400);
        t11.depth$1(52);
        t11.weapon$2$heft(48, 30);
        t11.toss$1$damage(20);
        t11 = R.category(250, null, "bash[es]");
        t11.tag$1(0, "equipment/weapon/mace");
        t11.toss$2$breakage$range(15, 4);
        t11 = R.item("Morningstar", C.Color_132_126_135, 0.5, 130);
        t11.depth$1(24);
        t11.weapon$2$heft(26, 17);
        t11.toss$1$damage(11);
        t11 = R.item("Mace", C.Color_63_64_114, 0.5, 310);
        t11.depth$1(33);
        t11.weapon$2$heft(36, 23);
        t11.toss$1$damage(16);
        t11 = R.category(241, null, "whip[s]");
        t11.tag$1(0, "equipment/weapon/whip");
        t11.toss$2$breakage$range(25, 4);
        C.JSArray_methods.add$1(t11._skills, Q.Skills_find("Whip Mastery"));
        t11 = R.item("Whip", C.Color_142_82_55, 0.5, 40);
        t11.depth$1(4);
        t11.weapon$2$heft(10, 7);
        t11.toss$1$damage(1);
        t11._destroyChance.$indexSet(0, t3, 10);
        t11._fuel = 5;
        t11 = R.item("Chain Whip", C.Color_132_126_135, 0.5, 230);
        t11.depth$1(15);
        t11.weapon$2$heft(18, 15);
        t11.toss$1$damage(2);
        t11 = R.item("Flail", C.Color_63_64_114, 0.5, 350);
        t11.depth$1(27);
        t11.weapon$2$heft(28, 24);
        t11.toss$1$damage(4);
        t11 = R.category(209, null, "stab[s]");
        t11.tag$1(0, "equipment/weapon/dagger");
        t11.toss$2$breakage$range(2, 8);
        t11 = R.item("Kni[fe|ves]", C.Color_38_38_56, 0.5, 20);
        t11.depth$2$to(3, 20);
        t11.weapon$2$heft(8, 5);
        t11.toss$1$damage(8);
        t11 = R.item("Dirk", C.Color_132_126_135, 0.5, 30);
        t11.depth$2$to(4, 40);
        t11.weapon$2$heft(10, 6);
        t11.toss$1$damage(10);
        t11 = R.item("Dagger", C.Color_64_163_229, 0.5, 50);
        t11.depth$2$to(6, 70);
        t11.weapon$2$heft(12, 7);
        t11.toss$1$damage(12);
        t11 = R.item("Stiletto[es]", C.Color_63_64_114, 0.5, 80);
        t11.depth$1(10);
        t11.weapon$2$heft(14, 6);
        t11.toss$1$damage(14);
        t11 = R.item("Rondel", C.Color_129_231_235, 0.5, 130);
        t11.depth$1(20);
        t11.weapon$2$heft(16, 9);
        t11.toss$1$damage(16);
        t11 = R.item("Baselard", C.Color_222_156_33, 0.5, 200);
        t11.depth$1(30);
        t11.weapon$2$heft(18, 11);
        t11.toss$1$damage(18);
        t11 = R.category(170, null, "slash[es]");
        t11.tag$1(0, "equipment/weapon/sword");
        t11.toss$2$breakage$range(20, 5);
        C.JSArray_methods.add$1(t11._skills, Q.Skills_find("Swordfighting"));
        t11 = R.item("Rapier", C.Color_38_38_56, 0.5, 140);
        t11.depth$1(13);
        t11.weapon$2$heft(13, 12);
        t11.toss$1$damage(4);
        t11 = R.item("Shortsword", C.Color_63_64_114, 0.5, 230);
        t11.depth$1(17);
        t11.weapon$2$heft(15, 13);
        t11.toss$1$damage(6);
        t11 = R.item("Scimitar", C.Color_132_126_135, 0.5, 370);
        t11.depth$1(18);
        t11.weapon$2$heft(24, 16);
        t11.toss$1$damage(9);
        t11 = R.item("Cutlass[es]", C.Color_255_238_168, 0.5, 520);
        t11.depth$1(20);
        t11.weapon$2$heft(26, 17);
        t11.toss$1$damage(11);
        t11 = R.item("Falchion", C.Color_129_231_235, 0.5, 750);
        t11.depth$1(34);
        t11.weapon$2$heft(28, 18);
        t11.toss$1$damage(15);
        t11 = R.category(186, null, "stab[s]");
        t11.tag$1(0, "equipment/weapon/spear");
        t11.toss$1$range(9);
        C.JSArray_methods.add$1(t11._skills, Q.Skills_find("Spear Mastery"));
        t11 = R.item("Pointed Stick", C.Color_64_31_36, 0.5, 10);
        t11.depth$2$to(2, 30);
        t11.weapon$2$heft(10, 9);
        t11.toss$1$damage(9);
        t11._destroyChance.$indexSet(0, t3, 7);
        t11._fuel = 12;
        t11 = R.item("Spear", C.Color_142_82_55, 0.5, 160);
        t11.depth$2$to(13, 60);
        t11.weapon$2$heft(16, 13);
        t11.toss$1$damage(15);
        t11 = R.item("Angon", C.Color_132_126_135, 0.5, 340);
        t11.depth$1(21);
        t11.weapon$2$heft(20, 19);
        t11.toss$1$damage(20);
        t11 = R.category(186, null, "stab[s]");
        t11.tag$1(0, "equipment/weapon/polearm");
        t11._isTwoHanded = true;
        t11.toss$1$range(4);
        C.JSArray_methods.add$1(t11._skills, Q.Skills_find("Spear Mastery"));
        t11 = R.item("Lance", C.Color_64_163_229, 0.5, 550);
        t11.depth$1(28);
        t11.weapon$2$heft(22, 23);
        t11.toss$1$damage(20);
        t11 = R.item("Partisan", C.Color_63_64_114, 0.5, 850);
        t11.depth$1(35);
        t11.weapon$2$heft(26, 25);
        t11.toss$1$damage(26);
        t11 = R.category(191, null, "chop[s]");
        t11.tag$1(0, "equipment/weapon/axe");
        C.JSArray_methods.add$1(t11._skills, Q.Skills_find("Axe Mastery"));
        t11 = R.item("Hatchet", C.Color_63_64_114, 0.5, 90);
        t11.depth$2$to(6, 50);
        t11.weapon$2$heft(12, 10);
        t11.toss$2$damage$range(20, 8);
        t11 = R.item("Axe", C.Color_142_82_55, 0.5, 210);
        t11.depth$2$to(12, 70);
        t11.weapon$2$heft(15, 14);
        t11.toss$2$damage$range(24, 7);
        t11 = R.item("Valaska", C.Color_132_126_135, 0.5, 330);
        t11.depth$1(24);
        t11.weapon$2$heft(19, 19);
        t11.toss$2$damage$range(26, 5);
        t11 = R.item("Battleaxe", C.Color_38_38_56, 0.5, 550);
        t11.depth$1(40);
        t11.weapon$2$heft(25, 30);
        t11.toss$2$damage$range(28, 4);
        t11 = R.category(8976, null, "hit[s]");
        t11.tag$1(0, "equipment/weapon/bow");
        t11._isTwoHanded = true;
        t11.toss$2$breakage$range(50, 5);
        C.JSArray_methods.add$1(t11._skills, Q.Skills_find("Archery"));
        t11 = R.item("Short Bow", C.Color_142_82_55, 0.3, 120);
        t11.depth$2$to(6, 60);
        t11.ranged$4$damage$heft$range("the arrow", 5, 12, 8);
        t11.toss$1$damage(2);
        t11._destroyChance.$indexSet(0, t3, 15);
        t11._fuel = 10;
        t11 = R.item("Longbow", C.Color_64_31_36, 0.3, 250);
        t11.depth$1(13);
        t11.ranged$4$damage$heft$range("the arrow", 9, 18, 12);
        t11.toss$1$damage(3);
        t11._destroyChance.$indexSet(0, t3, 7);
        t11._fuel = 13;
        t11 = R.item("Crossbow", C.Color_132_126_135, 0.3, 600);
        t11.depth$1(28);
        t11.ranged$4$damage$heft$range("the bolt", 14, 24, 16);
        t11.toss$1$damage(4);
        t11._destroyChance.$indexSet(0, t3, 4);
        t11._fuel = 14;
        t11 = R.category(201, null, null);
        t11.tag$1(0, "equipment/armor/helm");
        t11.toss$3$breakage$damage$range(10, 3, 5);
        t11 = R.item("Leather Cap", C.Color_142_82_55, 0.5, 50);
        t11.depth$2$to(4, 40);
        t11._armor = 2;
        t11._weight = 2;
        t11._destroyChance.$indexSet(0, t3, 12);
        t11._fuel = 2;
        t11 = R.item("Chainmail Coif", C.Color_38_38_56, 0.5, 160);
        t11.depth$2$to(10, 60);
        t11._armor = 3;
        t11._weight = 3;
        t11 = R.item("Steel Cap", C.Color_63_64_114, 0.5, 200);
        t11.depth$2$to(25, 80);
        t11._armor = 4;
        t11._weight = 3;
        t11 = R.item("Visored Helm", C.Color_132_126_135, 0.5, 350);
        t11.depth$1(40);
        t11._armor = 5;
        t11._weight = 6;
        t11 = R.item("Great Helm", C.Color_226_223_240, 0.5, 550);
        t11.depth$1(50);
        t11._armor = 6;
        t11._weight = 8;
        R.category(244, null, null).tag$1(0, "equipment/armor/body/robe");
        t11 = R.item("Robe", C.Color_21_87_194, 0.5, 20);
        t11.depth$2$to(2, 40);
        t11._armor = 4;
        t11._weight = null;
        t11._destroyChance.$indexSet(0, t3, 15);
        t11._fuel = 8;
        t11 = R.item("Fur-lined Robe", C.Color_0_64_39, 0.25, 110);
        t11.depth$1(6);
        t11._armor = 6;
        t11._weight = null;
        t11._destroyChance.$indexSet(0, t3, 12);
        t11._fuel = 8;
        R.category(246, null, null).tag$1(0, "equipment/armor/body");
        t11 = R.item("Cloth Shirt", C.Color_226_223_240, 0.5, 40);
        t11.depth$2$to(2, 30);
        t11._armor = 3;
        t11._weight = null;
        t11._destroyChance.$indexSet(0, t3, 15);
        t11._fuel = 4;
        t11 = R.item("Leather Shirt", C.Color_142_82_55, 0.5, 90);
        t11.depth$2$to(5, 50);
        t11._armor = 6;
        t11._weight = 1;
        t11._destroyChance.$indexSet(0, t3, 12);
        t11._fuel = 4;
        t11 = R.item("Jerkin", C.Color_132_126_135, 0.5, 130);
        t11.depth$2$to(8, 70);
        t11._armor = 8;
        t11._weight = 1;
        t11 = R.item("Leather Armor", C.Color_64_31_36, 0.5, 240);
        t11.depth$2$to(12, 90);
        t11._armor = 11;
        t11._weight = 2;
        t11._destroyChance.$indexSet(0, t3, 10);
        t11._fuel = 4;
        t11 = R.item("Padded Armor", C.Color_38_38_56, 0.5, 320);
        t11.depth$1(16);
        t11._armor = 15;
        t11._weight = 3;
        t11._destroyChance.$indexSet(0, t3, 8);
        t11._fuel = 4;
        t11 = R.item("Studded Armor", C.Color_63_64_114, 0.5, 400);
        t11.depth$1(20);
        t11._armor = 22;
        t11._weight = 4;
        t11._destroyChance.$indexSet(0, t3, 6);
        t11._fuel = 4;
        R.category(242, null, null).tag$1(0, "equipment/armor/body");
        t11 = R.item("Mail Hauberk", C.Color_38_38_56, 0.5, 500);
        t11.depth$1(25);
        t11._armor = 28;
        t11._weight = 5;
        t11 = R.item("Scale Mail", C.Color_132_126_135, 0.5, 700);
        t11.depth$1(35);
        t11._armor = 36;
        t11._weight = 7;
        R.category(198, null, null).tag$1(0, "equipment/armor/cloak");
        t11 = R.item("Cloak", C.Color_26_46_150, 0.5, 70);
        t11.depth$2$to(10, 40);
        t11._armor = 2;
        t11._weight = 1;
        t11._destroyChance.$indexSet(0, t3, 20);
        t11._fuel = 5;
        t11 = R.item("Fur Cloak", C.Color_64_31_36, 0.2, 140);
        t11.depth$2$to(20, 60);
        t11._armor = 4;
        t11._weight = 2;
        t11._destroyChance.$indexSet(0, t3, 16);
        t11._fuel = 5;
        t11 = R.item("Spidersilk Cloak", C.Color_38_38_56, 0.2, 460);
        t11.depth$1(40);
        t11._armor = 6;
        t11._weight = null;
        t11._destroyChance.$indexSet(0, t3, 25);
        t11._fuel = 3;
        t11 = R.category(197, null, null);
        t11.tag$1(0, "equipment/armor/gloves");
        t11.toss$3$breakage$damage$range(20, 5, 4);
        t11 = R.item("Pair[s] of Gloves", C.Color_189_144_108, 0.5, 170);
        t11.depth$1(8);
        t11._armor = 1;
        t11._weight = null;
        t11._destroyChance.$indexSet(0, t3, 7);
        t11._fuel = 2;
        t11 = R.item("Set[s] of Bracers", C.Color_64_31_36, 0.5, 480);
        t11.depth$1(17);
        t11._armor = 2;
        t11._weight = 1;
        t11 = R.item("Pair[s] of Gauntlets", C.Color_38_38_56, 0.5, 800);
        t11.depth$1(34);
        t11._armor = 4;
        t11._weight = 2;
        t11 = R.category(230, null, null);
        t11.tag$1(0, "equipment/armor/shield");
        t11.toss$3$breakage$damage$range(10, 5, 8);
        t11 = R.item("Small Leather Shield", C.Color_64_31_36, 0.5, 170);
        t11.depth$2$to(12, 50);
        t11._armor = 0;
        t11._weight = 2;
        t11._defense = new U.Defense(4, "The shield blocks {2}.");
        t11._destroyChance.$indexSet(0, t3, 7);
        t11._fuel = 14;
        t11 = R.item("Wooden Targe", C.Color_189_144_108, 0.5, 250);
        t11.depth$1(25);
        t11._armor = 0;
        t11._weight = 4;
        t11._defense = new U.Defense(6, "The targe blocks {2}.");
        t11._destroyChance.$indexSet(0, t3, 14);
        t11._fuel = 20;
        t11 = R.item("Large Leather Shield", C.Color_142_82_55, 0.5, 320);
        t11.depth$1(35);
        t11._armor = 0;
        t11._weight = 5;
        t11._defense = new U.Defense(8, "The shield blocks {2}.");
        t11._destroyChance.$indexSet(0, t3, 7);
        t11._fuel = 17;
        t11 = R.item("Steel Buckler", C.Color_38_38_56, 0.5, 450);
        t11.depth$1(50);
        t11._armor = 0;
        t11._weight = 4;
        t11._defense = new U.Defense(10, "The buckler blocks {2}.");
        t11 = R.item("Kite Shield", C.Color_132_126_135, 0.5, 650);
        t11.depth$1(65);
        t11._armor = 0;
        t11._weight = 7;
        t11._defense = new U.Defense(12, "The shield blocks {2}.");
        R.category(236, null, null).tag$1(0, "equipment/armor/boots");
        t11 = R.item("Pair[s] of Sandals", C.Color_142_82_55, 0.24, 10);
        t11.depth$2$to(2, 20);
        t11._armor = 1;
        t11._weight = null;
        t11._destroyChance.$indexSet(0, t3, 20);
        t11._fuel = 3;
        t11 = R.item("Pair[s] of Shoes", C.Color_64_31_36, 0.3, 30);
        t11.depth$2$to(8, 40);
        t11._armor = 2;
        t11._weight = null;
        t11._destroyChance.$indexSet(0, t3, 14);
        t11._fuel = 3;
        R.category(196, null, null).tag$1(0, "equipment/armor/boots");
        t11 = R.item("Pair[s] of Boots", C.Color_142_82_55, 0.3, 70);
        t11.depth$1(14);
        t11._armor = 6;
        t11._weight = 1;
        t11 = R.item("Pair[s] of Plated Boots", C.Color_63_64_114, 0.3, 250);
        t11.depth$1(22);
        t11._armor = 8;
        t11._weight = 2;
        t11 = R.item("Pair[s] of Greaves", C.Color_132_126_135, 0.25, 350);
        t11.depth$1(47);
        t11._armor = 12;
        t11._weight = 3;
        R.finishItem();
        D.Monsters_initialize();
        Z.Affixes_initialize();
        t11 = P.double;
        R.shop("The General's General Store", P.LinkedHashMap_LinkedHashMap$_literal(["Loaf of Bread", 2, "Chunk of Meat", 0.6, "Tallow Candle", 1, "Wax Candle", 0.7, "Oil Lamp", 0.5, "Torch", 0.3, "Lantern", 0.1, "Soothing Balm", 0.6, "Mending Salve", 0.4, "Healing Poultice", 0.2, "Club", 0.1, "Staff", 0.1, "Quarterstaff", 0.05, "Whip", 0.1, "Dagger", 0.1], t12, t11));
        R.shop("Dirk's Death Emporium", P.LinkedHashMap_LinkedHashMap$_literal(["Hammer", 0.5, "Mattock", 0.2, "War Hammer", 0.1, "Morningstar", 0.6, "Mace", 0.3, "Chain Whip", 0.2, "Flail", 0.1, "Falchion", 0.7, "Rapier", 1, "Shortsword", 0.6, "Scimitar", 0.4, "Cutlass", 0.2, "Spear", 1, "Angon", 0.4, "Lance", 0.2, "Partisan", 0.1, "Hatchet", 1, "Axe", 0.5, "Valaska", 0.25, "Battleaxe", 0.2, "Short Bow", 1, "Longbow", 0.3, "Crossbow", 0.05], t12, t11));
        R.shop("Skullduggery and Bamboozelry", P.LinkedHashMap_LinkedHashMap$_literal(["Dirk", 1, "Dagger", 0.3, "Stiletto", 0.1, "Rondel", 0.05, "Baselard", 0.02], t12, t11));
        R.shop("Garthag's Armoury", P.LinkedHashMap_LinkedHashMap$_literal(["Cloak", 1, "Fur Cloak", 1, "Cloth Shirt", 1, "Leather Shirt", 1, "Jerkin", 1, "Leather Armor", 1, "Padded Armor", 1, "Studded Armor", 1, "Mail Hauberk", 1, "Scale Mail", 1, "Robe", 1, "Fur-lined Robe", 1, "Pair of Sandals", 1, "Pair of Shoes", 1, "Pair of Boots", 1, "Pair of Plated Boots", 1, "Pair of Greaves", 1], t12, t11));
        R.shop("Unguence the Alchemist", P.LinkedHashMap_LinkedHashMap$_literal(["Soothing Balm", 1, "Mending Salve", 1, "Healing Poultice", 1, "Antidote", 1, "Potion of Quickness", 1, "Potion of Alacrity", 1, "Bottled Wind", 1, "Bottled Ice", 1, "Bottled Fire", 1, "Bottled Ocean", 1, "Bottled Earth", 1], t12, t11));
        R.shop("The Droll Magery", P.LinkedHashMap_LinkedHashMap$_literal(['Spellbook "Elemental Primer"', 1, "Scroll of Sidestepping", 1, "Scroll of Phasing", 1, "Scroll of Item Detection", 1], t12, t11));
        F.floorDrop(new X._AllOfDrop(H.setRuntimeTypeInfo([new X._PercentDrop(30, X.parseDrop("Skull", null, null)), new X._PercentDrop(30, X.parseDrop("treasure", null, null)), new X._PercentDrop(20, X.parseDrop("weapon", null, null)), new X._PercentDrop(20, X.parseDrop("armor", null, null)), new X._PercentDrop(20, X.parseDrop("food", null, null)), new X._PercentDrop(15, X.parseDrop("magic", null, null)), new X._PercentDrop(15, X.parseDrop("magic", null, null))], [L.Drop])), null, C.SpawnLocation_2, 2);
        F.floorDrop(X.parseDrop("magic", null, null), null, C.SpawnLocation_2, 5);
        F.floorDrop(X.parseDrop("food", null, null), 1, null, 10);
        F.floorDrop(X.parseDrop("Rock", null, null), 0.01, C.SpawnLocation_3, 3);
        F.floorDrop(X.parseDrop("treasure", null, null), null, null, 10);
        F.floorDrop(X.parseDrop("light", null, null), 0.1, null, 4);
        F.floorDrop(X.parseDrop("item", null, null), 5, C.SpawnLocation_0, 2);
        t11 = $.$get$Decor_all();
        t11.defineTags$1("built/room/dungeon");
        t11.defineTags$1("built/room/keep");
        t11.defineTags$1("catacomb");
        t11.defineTags$1("cave/glowing-moss");
        t11.defineTags$1("water");
        t11 = $.$get$Tiles_glowingMoss();
        t3 = $.$get$Motility_walk();
        t10 = S.Cell;
        t11 = P.LinkedHashMap_LinkedHashMap$_literal(["*", S.Cell$(t11, t3, null, null)], t12, t10);
        $._themes = "glowing-moss";
        $._categoryFrequency = null;
        $._categoryCells = t11;
        T.furnishing(null, C.Symmetry_4, "    #\n    *");
        T.furnishing(null, C.Symmetry_4, "    ##\n    #*");
        T.furnishing(null, null, "    ?.?\n    .*.\n    ?.?");
        t11 = $.$get$Tiles_candle();
        t8 = P.LinkedHashMap_LinkedHashMap$_literal(["!", S.Cell$(t11, t3, null, null)], t12, t10);
        $._themes = "catacomb dungeon";
        $._categoryFrequency = null;
        $._categoryCells = t8;
        T.furnishing(null, null, "    ?.?\n    .!.\n    ?.?");
        tableCells = P.LinkedHashMap_LinkedHashMap$_literal(["\u250c", S.Cell$($.$get$Tiles_tableTopLeft(), t3, null, null), "\u2500", S.Cell$($.$get$Tiles_tableTop(), t3, null, null), "\u2510", S.Cell$($.$get$Tiles_tableTopRight(), t3, null, null), "-", S.Cell$($.$get$Tiles_tableCenter(), t3, null, null), "\u2502", S.Cell$($.$get$Tiles_tableSide(), t3, null, null), "\u2558", S.Cell$($.$get$Tiles_tableBottomLeft(), t3, null, null), "\u2550", S.Cell$($.$get$Tiles_tableBottom(), t3, null, null), "\u255b", S.Cell$($.$get$Tiles_tableBottomRight(), t3, null, null), "\u255e", S.Cell$($.$get$Tiles_tableLegLeft(), t3, null, null), "\u2564", S.Cell$($.$get$Tiles_tableLeg(), t3, null, null), "\u2561", S.Cell$($.$get$Tiles_tableLegRight(), t3, null, null), "i", S.Cell$(t11, t3, null, null)], t12, t10);
        $._themes = "dungeon keep";
        $._categoryFrequency = null;
        $._categoryCells = tableCells;
        T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
        T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #i\u2502.\n    #\u2564\u255b.\n    ?...");
        T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
        T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #i\u2502.\n    #i\u2502.\n    #\u2564\u255b.\n    ?...");
        T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #-\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
        T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #i\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
        T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #i\u2502.\n    #-\u2502.\n    #i\u2502.\n    #\u2564\u255b.\n    ?...");
        T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    ?###?");
        T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502i\u2502.\n    ?###?");
        T.furnishing(null, null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    ?####?");
        T.furnishing(null, null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502ii\u2502.\n    ?####?");
        T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    ?#####?");
        T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    ?#####?");
        T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502i-i\u2502.\n    ?#####?");
        T.furnishing(null, null, "    ?###?\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
        T.furnishing(null, null, "    ?###?\n    .\u2502i\u2502.\n    .\u255e\u2550\u2561.\n    .....");
        T.furnishing(null, null, "    ?####?\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
        T.furnishing(null, null, "    ?####?\n    .\u2502ii\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
        T.furnishing(null, null, "    ?#####?\n    .\u2502---\u2502.\n    .\u255e\u2550\u2550\u2550\u2561.\n    .......");
        T.furnishing(null, null, "    ?#####?\n    .\u2502-i-\u2502.\n    .\u255e\u2550\u2550\u2550\u2561.\n    .......");
        T.furnishing(null, null, "    ?#####?\n    .\u2502i-i\u2502.\n    .\u255e\u2550\u2550\u2550\u2561.\n    .......");
        $._themes = "dungeon keep";
        $._categoryFrequency = null;
        $._categoryCells = tableCells;
        T.furnishing(null, null, "    ?.....?\n    #\u2500\u2510.\u250c\u2500#\n    #\u2564\u255b.\u2558\u2564#\n    ?.....?");
        T.furnishing(null, null, "    ?.......?\n    #\u2500\u2500\u2510.\u250c\u2500\u2500#\n    #\u2550\u2564\u255b.\u2558\u2564\u2550#\n    ?.......?");
        T.furnishing(null, null, "    ?.........?\n    #\u2500\u2500\u2500\u2510.\u250c\u2500\u2500\u2500#\n    #\u2550\u2550\u2564\u255b.\u2558\u2564\u2550\u2550#\n    ?.........?");
        T.furnishing(null, null, "    ?##?\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    ?##?");
        T.furnishing(null, null, "    ?##?\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    ?##?");
        T.furnishing(null, null, "    ?##?\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    ?##?");
        $._themes = "dungeon keep";
        $._categoryFrequency = null;
        $._categoryCells = tableCells;
        T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
        T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502i\u2502.\n    .\u255e\u2550\u2561.\n    .....");
        T.furnishing(null, null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
        T.furnishing(null, null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502ii\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
        T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
        T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
        T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502i-i\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
        T.furnishing(null, null, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502----\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
        T.furnishing(null, null, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502i--i\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
        T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-----\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
        T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502--i--\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
        T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-i-i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
        T.furnishing(null, null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502------\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
        T.furnishing(null, null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-i--i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
        T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
        T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502i\u2502.\n    .\u2502i\u2502.\n    .\u255e\u2550\u2561.\n    .....");
        T.furnishing(null, null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
        T.furnishing(null, C.Symmetry_1, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502i-\u2502.\n    .\u2502-i\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
        T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    .\u2502---\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
        T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    .\u2502-i-\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
        T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    .\u2502i-i\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
        T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502i-i\u2502.\n    .\u2502-i-\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
        T.furnishing(null, null, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502----\u2502.\n    .\u2502----\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
        T.furnishing(null, C.Symmetry_1, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502i---\u2502.\n    .\u2502---i\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
        T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-----\u2502.\n    .\u2502-----\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
        T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502--i--\u2502.\n    .\u2502-i-i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
        T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502i---i\u2502.\n    .\u2502--i--\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
        T.furnishing(null, null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502------\u2502.\n    .\u2502------\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
        T.furnishing(null, null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-i--i-\u2502.\n    .\u2502-i--i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
        t11 = P.LinkedHashMap_LinkedHashMap$_literal(["\u03c0", S.Cell$($.$get$Tiles_chair(), t3, null, null)], t12, t10);
        $._themes = "built";
        $._categoryFrequency = 2;
        $._categoryCells = t11;
        T.furnishing(null, C.Symmetry_3, "    \u03c0.\n    .\u250c");
        T.furnishing(null, C.Symmetry_3, "    \u03c0.\n    \u250c?");
        T.furnishing(null, C.Symmetry_3, "    ..\n    \u03c0\u250c");
        T.furnishing(null, C.Symmetry_1, "    .\u255e\n    \u03c0.");
        T.furnishing(null, C.Symmetry_4, "    ?\u2550?\n    .\u03c0.");
        T.furnishing(null, null, "    ?\u2564?\n    .\u03c0.");
        T.furnishing(null, C.Symmetry_4, "    \u03c0\n    #");
        T.furnishing(null, C.Symmetry_4, "    \u03c0\n    .\n    #");
        t11 = P.LinkedHashMap_LinkedHashMap$_literal(["%", S.Cell$($.$get$Tiles_closedBarrel(), t3, null, null)], t12, t10);
        $._themes = "built";
        $._categoryFrequency = 0.7;
        $._categoryCells = t11;
        T.furnishing(null, C.Symmetry_4, "    ##?\n    #%.\n    ?.?");
        T.furnishing(null, C.Symmetry_4, "    ?.?\n    .%.\n    ?.?");
        T.furnishing(null, C.Symmetry_4, "    ###?\n    #%%.\n    ?..?");
        T.furnishing(null, C.Symmetry_4, "    ###?\n    #%%.\n    #%.?\n    ?.??");
        T.furnishing(null, C.Symmetry_4, "    ?##?\n    .%%.\n    ?..?");
        T.furnishing(null, C.Symmetry_4, "    ?###?\n    .%%%.\n    ?...?");
        t3 = P.LinkedHashMap_LinkedHashMap$_literal(["&", S.Cell$($.$get$Tiles_closedChest(), t3, null, null)], t12, t10);
        $._themes = "built";
        $._categoryFrequency = 0.5;
        $._categoryCells = t3;
        T.furnishing(null, C.Symmetry_4, "    ##?\n    #&.\n    ?.?");
        T.furnishing(null, C.Symmetry_4, "    ?#?\n    .&.\n    ?.?");
        t3 = $.$get$Tiles_steppingStone();
        t10 = P.LinkedHashMap_LinkedHashMap$_literal(["*", S.Cell$(t3, null, $.$get$Tiles_water(), null), "o", S.Cell$(null, null, t3, null)], t12, t10);
        $._themes = "water";
        $._categoryFrequency = null;
        $._categoryCells = t10;
        T.furnishing(0.6, C.Symmetry_4, "    .*");
        T.furnishing(0.6, C.Symmetry_4, "    ..\n    .*");
        T.furnishing(null, C.Symmetry_4, "    o*");
        T.furnishing(null, C.Symmetry_4, "    \u2248*\n    o\u2248");
        $content = new T.GameContent();
        F._addFont("8x8", 8, null);
        F._addFont("8x10", 8, 10);
        F._addFont("9x12", 9, 12);
        F._addFont("10x12", 10, 12);
        F._addFont("16x16", 16, null);
        F._addFont("16x20", 16, 20);
        fontName = window.localStorage.getItem("font");
        t10 = $.$get$_fonts();
        t12 = t10.length;
        if (1 >= t12)
          return H.ioore(t10, 1);
        $._font = t10[1];
        for (_i = 0; _i < t12; ++_i) {
          thisFont = t10[_i];
          if (thisFont.name === fontName) {
            $._font = thisFont;
            break;
          }
        }
        document.querySelector("#game").appendChild($._font.canvas);
        t1 = W.Event;
        W._EventStreamSubscription$(window, "resize", H.functionTypeCheck(new F.main_closure(), {func: 1, ret: -1, args: [t1]}), false, t1);
        t1 = $._font.terminal;
        t2 = Y.Input;
        t3 = new S.KeyBindings(new H.JsLinkedHashMap([S._KeyBinding, t2]), [t2]);
        $._ui = new B.UserInterface(t3, H.setRuntimeTypeInfo([], [[B.Screen, Y.Input]]), t1, [t2]);
        t3.bind$2(C.Input_ok, 13);
        $._ui.keyPress.bind$2(C.Input_cancel, 27);
        $._ui.keyPress.bind$2(C.Input_cancel, 192);
        $._ui.keyPress.bind$3$shift(C.Input_forfeit, 70, true);
        $._ui.keyPress.bind$2(C.Input_quit, 81);
        $._ui.keyPress.bind$3$shift(C.Input_open, 67, true);
        $._ui.keyPress.bind$2(C.Input_close, 67);
        $._ui.keyPress.bind$2(C.Input_drop, 68);
        $._ui.keyPress.bind$2(C.Input_use, 85);
        $._ui.keyPress.bind$2(C.Input_pickUp, 71);
        $._ui.keyPress.bind$2(C.Input_swap, 88);
        $._ui.keyPress.bind$2(C.Input_equip, 69);
        $._ui.keyPress.bind$2(C.Input_toss, 84);
        $._ui.keyPress.bind$2(C.Input_selectSkill, 83);
        $._ui.keyPress.bind$2(C.Input_heroInfo, 65);
        $._ui.keyPress.bind$3$shift(C.Input_editSkills, 83, true);
        $._ui.keyPress.bind$2(C.Input_nw, 73);
        $._ui.keyPress.bind$2(C.Input_n, 79);
        $._ui.keyPress.bind$2(C.Input_ne, 80);
        $._ui.keyPress.bind$2(C.Input_w, 75);
        $._ui.keyPress.bind$2(C.Input_e, 186);
        $._ui.keyPress.bind$2(C.Input_sw, 188);
        $._ui.keyPress.bind$2(C.Input_s, 190);
        $._ui.keyPress.bind$2(C.Input_se, 191);
        $._ui.keyPress.bind$3$shift(C.Input_runNW, 73, true);
        $._ui.keyPress.bind$3$shift(C.Input_runN, 79, true);
        $._ui.keyPress.bind$3$shift(C.Input_runNE, 80, true);
        $._ui.keyPress.bind$3$shift(C.Input_runW, 75, true);
        $._ui.keyPress.bind$3$shift(C.Input_runE, 186, true);
        $._ui.keyPress.bind$3$shift(C.Input_runSW, 188, true);
        $._ui.keyPress.bind$3$shift(C.Input_runS, 190, true);
        $._ui.keyPress.bind$3$shift(C.Input_runSE, 191, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireNW, 73, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireN, 79, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireNE, 80, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireW, 75, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireE, 186, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireSW, 188, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireS, 190, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireSE, 191, true);
        $._ui.keyPress.bind$2(C.Input_ok, 76);
        $._ui.keyPress.bind$3$shift(C.Input_rest, 76, true);
        $._ui.keyPress.bind$3$alt(C.Input_fire, 76, true);
        $._ui.keyPress.bind$2(C.Input_n, 38);
        $._ui.keyPress.bind$2(C.Input_w, 37);
        $._ui.keyPress.bind$2(C.Input_e, 39);
        $._ui.keyPress.bind$2(C.Input_s, 40);
        $._ui.keyPress.bind$3$shift(C.Input_runN, 38, true);
        $._ui.keyPress.bind$3$shift(C.Input_runW, 37, true);
        $._ui.keyPress.bind$3$shift(C.Input_runE, 39, true);
        $._ui.keyPress.bind$3$shift(C.Input_runS, 40, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireN, 38, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireW, 37, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireE, 39, true);
        $._ui.keyPress.bind$3$alt(C.Input_fireS, 40, true);
        $._ui.keyPress.bind$2(C.Input_nw, 103);
        $._ui.keyPress.bind$2(C.Input_n, 104);
        $._ui.keyPress.bind$2(C.Input_ne, 105);
        $._ui.keyPress.bind$2(C.Input_w, 100);
        $._ui.keyPress.bind$2(C.Input_e, 102);
        $._ui.keyPress.bind$2(C.Input_sw, 97);
        $._ui.keyPress.bind$2(C.Input_s, 98);
        $._ui.keyPress.bind$2(C.Input_se, 99);
        $._ui.keyPress.bind$3$shift(C.Input_runNW, 103, true);
        $._ui.keyPress.bind$3$shift(C.Input_runN, 104, true);
        $._ui.keyPress.bind$3$shift(C.Input_runNE, 105, true);
        $._ui.keyPress.bind$3$shift(C.Input_runW, 100, true);
        $._ui.keyPress.bind$3$shift(C.Input_runE, 102, true);
        $._ui.keyPress.bind$3$shift(C.Input_runSW, 97, true);
        $._ui.keyPress.bind$3$shift(C.Input_runS, 98, true);
        $._ui.keyPress.bind$3$shift(C.Input_runSE, 99, true);
        $._ui.keyPress.bind$2(C.Input_ok, 101);
        $._ui.keyPress.bind$3$shift(C.Input_rest, 101, true);
        $._ui.keyPress.bind$3$alt(C.Input_fire, 101, true);
        $._ui.keyPress.bind$4$alt$shift(C.Input_wizard, 87, true, true);
        t3 = $._ui;
        t2 = new S.Storage($content, H.setRuntimeTypeInfo([], [K.HeroSave]));
        t2._load$0();
        t3.push$1(new B.MainMenuScreen($content, t2));
        $._ui.set$handlingInput(true);
        $._ui.set$running(true);
      },
      _addFont: function($name, charWidth, charHeight) {
        var canvas, t1, terminal, button, t2;
        if (charHeight == null)
          charHeight = charWidth;
        canvas = W.CanvasElement_CanvasElement(null, null);
        t1 = W.Event;
        W._EventStreamSubscription$(canvas, "dblclick", H.functionTypeCheck(new F._addFont_closure(), {func: 1, ret: -1, args: [t1]}), false, t1);
        terminal = F._makeTerminal(canvas, charWidth, charHeight);
        C.JSArray_methods.add$1($.$get$_fonts(), new F.TerminalFont($name, canvas, terminal, charWidth, charHeight));
        t1 = document;
        button = t1.createElement("button");
        C.ButtonElement_methods.setInnerHtml$1(button, $name);
        t2 = W.MouseEvent;
        W._EventStreamSubscription$(button, "click", H.functionTypeCheck(new F._addFont_closure0($name), {func: 1, ret: -1, args: [t2]}), false, t2);
        J.get$children$x(t1.querySelector(".button-bar")).add$1(0, button);
      },
      _makeTerminal: function(canvas, charWidth, charHeight) {
        var t1, t2, t3, width, height, scale, canvasWidth, canvasHeight, file, t4, e;
        t1 = document;
        t2 = t1.body;
        t3 = t2.clientWidth;
        if (typeof t3 !== "number")
          return t3.$sub();
        width = C.JSInt_methods.$tdiv(t3 - 20, charWidth);
        t2 = t2.clientHeight;
        if (typeof t2 !== "number")
          return t2.$sub();
        height = C.JSInt_methods.$tdiv(t2 - 30, charHeight);
        width = Math.max(width, 80);
        height = Math.max(height, 40);
        scale = J.toInt$0$n(window.devicePixelRatio);
        canvasWidth = charWidth * width;
        canvasHeight = charHeight * height;
        canvas.width = canvasWidth * scale;
        canvas.height = canvasHeight * scale;
        t2 = canvas.style;
        t3 = "" + canvasWidth + "px";
        t2.width = t3;
        t2 = canvas.style;
        t3 = "" + canvasHeight + "px";
        t2.height = t3;
        file = "font_" + charWidth;
        t2 = (charWidth !== charHeight ? file + ("_" + charHeight) : file) + ".png";
        scale = J.toInt$0$n(window.devicePixelRatio);
        t3 = L.Glyph;
        t4 = M.Array2D$(width, height, null, t3);
        t3 = M.Array2D$(width, height, C.Glyph_kVM, t3);
        e = t1.createElement("img");
        e.src = t2;
        return S.RetroTerminal$_(new D.Display(t4, t3), charWidth, charHeight, canvas, e, scale);
      },
      _resizeTerminal: function() {
        var t1, terminal;
        t1 = $._font;
        terminal = F._makeTerminal(t1.canvas, t1.charWidth, t1.charHeight);
        $._font.terminal = terminal;
        $._ui.setTerminal$1(terminal);
      },
      _fullscreen: function() {
        var div, t1, jsElement, methods, _i, method;
        div = document.querySelector("#game");
        t1 = div == null;
        if (t1)
          H.throwExpression(P.ArgumentError$("object cannot be a num, string, bool, or null"));
        jsElement = H.interceptedTypeCheck(P._wrapToDart(P._convertToJS(div)), "$isJsObject");
        methods = ["requestFullscreen", "mozRequestFullScreen", "webkitRequestFullscreen", "msRequestFullscreen"];
        for (_i = 0; _i < 4; ++_i) {
          method = methods[_i];
          if (method in jsElement._js$_jsObject) {
            jsElement.callMethod$1(method);
            return;
          }
        }
      },
      TerminalFont: function TerminalFont(t0, t1, t2, t3, t4) {
        var _ = this;
        _.name = t0;
        _.canvas = t1;
        _.terminal = t2;
        _.charWidth = t3;
        _.charHeight = t4;
      },
      main_closure: function main_closure() {
      },
      _addFont_closure: function _addFont_closure() {
      },
      _addFont_closure0: function _addFont_closure0(t0) {
        this.name = t0;
      }
    },
    Q = {MappingAction: function MappingAction(t0, t1) {
      var _ = this;
      _._mapping$_maxDistance = t0;
      _._illuminate = t1;
      _._currentDistance = 0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = _._mapping$_tilesByDistance = null;
    }, MappingFlow: function MappingFlow(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._mapping$_maxDistance = t0;
      _.stage = t1;
      _._flow$_start = t2;
      _._maxDistance = t3;
      _._offset = _._costs = null;
      _._open = t4;
      _._found = t5;
    }, PolymorphAction: function PolymorphAction(t0) {
      var _ = this;
      _._polymorph$_breed = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, AmputateAction: function AmputateAction(t0, t1, t2) {
      var _ = this;
      _._bodyBreed = t0;
      _._partBreed = t1;
      _._polymorph$_message = t2;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, _OpenTileAction: function _OpenTileAction() {
    }, OpenBarrelAction: function OpenBarrelAction(t0) {
      var _ = this;
      _._tile$_pos = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, OpenChestAction: function OpenChestAction(t0) {
      var _ = this;
      _._tile$_pos = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, AmputateMove: function AmputateMove(t0, t1, t2, t3) {
      var _ = this;
      _._amputate$_body = t0;
      _._part = t1;
      _._amputate$_message = t2;
      _.rate = t3;
    },
      Skills_find: function($name) {
        var t1;
        H.stringTypeCheck($name);
        t1 = $.$get$Skills__byName();
        if (!t1.containsKey$1(0, $name))
          throw H.wrapException(P.ArgumentError$("Unknown skill '" + H.S($name) + "'."));
        return t1.$index(0, $name);
      },
      Skills_closure: function Skills_closure() {
      },
      Cavern: function Cavern() {
        this._region = this._style = this._architect = null;
      },
      Dungeon: function Dungeon(t0) {
        var _ = this;
        _._dungeon$_density = t0;
        _._region = _._style = _._architect = null;
      },
      PaintStyle$: function(_types) {
        return new Q.PaintStyle(_types);
      },
      Painter: function Painter(t0, t1, t2) {
        var _ = this;
        _._decorator = t0;
        _._painter$_architect = t1;
        _._architecture = t2;
        _._painted = 0;
      },
      PaintStyle: function PaintStyle(t0) {
        this._types = t0;
      },
      _DoorPaintStyle: function _DoorPaintStyle(t0) {
        this._types = t0;
      },
      Motility$_: function(_bitMask) {
        return new Q.Motility(_bitMask);
      },
      Motility: function Motility(t0) {
        this._bitMask = t0;
      },
      TilePortal: function TilePortal(t0) {
        this.name = t0;
      },
      TileType: function TileType(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _.name = t0;
        _.portal = t1;
        _.emanation = t2;
        _.appearance = t3;
        _.motility = t4;
        _.onClose = t5;
        _.onOpen = t6;
      },
      Tile: function Tile(t0) {
        var _ = this;
        _.type = null;
        _._isOccluded = false;
        _._appliedEmanation = _.illumination = _._fallOff = 0;
        _._isExplored = false;
        _.element = t0;
        _.substance = 0;
      },
      HeroItemLoreDialog: function HeroItemLoreDialog(t0, t1, t2, t3) {
        var _ = this;
        _._hero_item_lore_dialog$_items = t0;
        _._sort = t1;
        _._scroll = _._selection = 0;
        _.content = t2;
        _.hero = t3;
        _._ui = null;
      },
      HeroItemLoreDialog_render_writeLine: function HeroItemLoreDialog_render_writeLine(t0) {
        this.terminal = t0;
      },
      HeroItemLoreDialog__listItems_compareSort: function HeroItemLoreDialog__listItems_compareSort() {
      },
      HeroItemLoreDialog__listItems_compareDepth: function HeroItemLoreDialog__listItems_compareDepth() {
      },
      HeroItemLoreDialog__listItems_comparePrice: function HeroItemLoreDialog__listItems_comparePrice() {
      },
      HeroItemLoreDialog__listItems_closure: function HeroItemLoreDialog__listItems_closure(t0) {
        this._box_0 = t0;
      },
      _Sort: function _Sort(t0, t1) {
        this.description = t0;
        this.helpText = t1;
      },
      _CircleIterator__CircleIterator: function(circle, edge) {
        var t1, size;
        t1 = circle.radius;
        size = t1 + t1 + 1;
        t1 = -t1;
        return new Q._CircleIterator(circle, X.RectIterator$(new X.Rect(new L.Vec(t1, t1), new L.Vec(size, size))), edge);
      },
      _radiusSquared: function(radius) {
        if (radius < 7) {
          if (radius < 0)
            return H.ioore(C.List_E7y, radius);
          return C.List_E7y[radius];
        }
        return radius * radius;
      },
      Circle: function Circle(t0, t1) {
        this.center = t0;
        this.radius = t1;
      },
      _CircleIterator: function _CircleIterator(t0, t1, t2) {
        this._circle = t0;
        this._boundsIterator = t1;
        this._edge = t2;
      }
    },
    L = {SpawnAction: function SpawnAction(t0, t1) {
      var _ = this;
      _._spawn$_pos = t0;
      _._spawn$_breed = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    },
      SpawnMove$: function(rate, preferStraight) {
        return new L.SpawnMove(preferStraight === true, rate);
      },
      SpawnMove: function SpawnMove(t0, t1) {
        this._preferStraight = t0;
        this.rate = t1;
      },
      SpawnMove_onGetAction_checkNeighbor: function SpawnMove_onGetAction_checkNeighbor(t0, t1) {
        this.monster = t0;
        this.dir = t1;
      },
      Icicle: function Icicle(t0) {
        this._sortOrder = t0;
      },
      BrilliantBeam: function BrilliantBeam(t0) {
        this._sortOrder = t0;
      },
      Windstorm: function Windstorm(t0) {
        this._sortOrder = t0;
      },
      FireBarrier: function FireBarrier(t0) {
        this._sortOrder = t0;
      },
      TidalWave: function TidalWave(t0) {
        this._sortOrder = t0;
      },
      _BrilliantBeam_Spell_TargetSkill: function _BrilliantBeam_Spell_TargetSkill() {
      },
      _FireBarrier_Spell_TargetSkill: function _FireBarrier_Spell_TargetSkill() {
      },
      _Icicle_Spell_TargetSkill: function _Icicle_Spell_TargetSkill() {
      },
      Affix: function Affix(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
        var _ = this;
        _.name = t0;
        _.displayName = t1;
        _.heftScale = t2;
        _.weightBonus = t3;
        _.strikeBonus = t4;
        _.damageScale = t5;
        _.damageBonus = t6;
        _.brand = t7;
        _.armor = t8;
        _._resists = t9;
        _._statBonuses = t10;
        _.priceBonus = t11;
        _.priceScale = t12;
      },
      Drop: function Drop() {
      },
      ItemUse: function ItemUse(t0, t1) {
        this.description = t0;
        this.createAction = t1;
      },
      Toss: function Toss(t0, t1, t2) {
        this.breakage = t0;
        this.attack = t1;
        this.use = t2;
      },
      ItemType: function ItemType(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
        var _ = this;
        _.quantifiableName = t0;
        _.appearance = t1;
        _.depth = t2;
        _.sortIndex = t3;
        _.equipSlot = t4;
        _.isTwoHanded = t5;
        _.weaponType = t6;
        _.use = t7;
        _.attack = t8;
        _.toss = t9;
        _.defense = t10;
        _.armor = t11;
        _.price = t12;
        _.weight = t13;
        _.heft = t14;
        _.emanationLevel = t15;
        _.isTreasure = t16;
        _.maxStack = t17;
        _.destroyChance = t18;
        _.fuel = t19;
        _.skills = t20;
      },
      Stage$: function(width, height, game) {
        var t1, t2, t3, t4;
        t1 = S.Actor;
        t2 = H.setRuntimeTypeInfo([], [t1]);
        t3 = L.Vec;
        t4 = Q.Tile;
        t4 = new M.Array2D(P.List_List$filled(width * height, null, false, t4), new X.Rect(new L.Vec(0, 0), new L.Vec(width, height)), [t4]);
        t4.generate$1(new L.Stage_closure());
        t1 = new L.Stage(game, t2, t4, P.LinkedHashMap_LinkedHashMap$_empty(t3, O.Inventory), M.Array2D$(width, height, null, t1));
        t4 = H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]);
        t2 = P.int;
        t1._lighting = new F.Lighting(t1, M.Array2D$(width, height, 0, t2), M.Array2D$(width, height, 0, t2), new B.Fov(t1), new B.BucketQueue(t4, [t3]));
        t1._sound = new Z.Sound(t1);
        return t1;
      },
      Stage: function Stage(t0, t1, t2, t3, t4) {
        var _ = this;
        _.game = t0;
        _._actors = t1;
        _._sound = _._lighting = null;
        _._currentActorIndex = 0;
        _.tiles = t2;
        _._itemsByTile = t3;
        _._actorsByTile = t4;
      },
      Stage_closure: function Stage_closure() {
      },
      Stage_placeDrops_closure: function Stage_placeDrops_closure(t0, t1, t2, t3) {
        var _ = this;
        _.$this = t0;
        _.items = t1;
        _.flow = t2;
        _.pos = t3;
      },
      Stage_placeDrops__closure: function Stage_placeDrops__closure(t0) {
        this.$this = t0;
      },
      Stage_addItem_closure: function Stage_addItem_closure() {
      },
      Stage_forEachItem_closure: function Stage_forEachItem_closure(t0) {
        this.callback = t0;
      },
      Glyph$: function(char, fore, $back) {
        var t1, t2;
        t1 = J._codeUnitAt$1$s(char, 0);
        t2 = fore != null ? fore : C.Color_255_255_255;
        return new L.Glyph(t1, t2, $back != null ? $back : C.Color_0_0_0);
      },
      Glyph$fromCharCode: function(char, fore, $back) {
        var t1 = fore != null ? fore : C.Color_255_255_255;
        return new L.Glyph(char, t1, $back != null ? $back : C.Color_0_0_0);
      },
      Color: function Color(t0, t1, t2) {
        this.r = t0;
        this.g = t1;
        this.b = t2;
      },
      Glyph: function Glyph(t0, t1, t2) {
        this.char = t0;
        this.fore = t1;
        this.back = t2;
      },
      VecBase: function VecBase() {
      },
      Vec: function Vec(t0, t1) {
        this.x = t0;
        this.y = t1;
      }
    },
    S = {TeleportAction: function TeleportAction(t0) {
      var _ = this;
      _.distance = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    },
      Cell$: function(apply, motility, require, requireAny) {
        var t1 = H.setRuntimeTypeInfo([], [Q.TileType]);
        if (require != null)
          C.JSArray_methods.add$1(t1, require);
        if (requireAny != null)
          C.JSArray_methods.addAll$1(t1, requireAny);
        return new S.Cell(apply, motility, t1);
      },
      Furnishing: function Furnishing(t0) {
        this._cells = t0;
      },
      Cell: function Cell(t0, t1, t2) {
        this._apply = t0;
        this._motility = t1;
        this._require = t2;
      },
      TeleportMove: function TeleportMove(t0, t1) {
        this._teleport$_range = t0;
        this.rate = t1;
      },
      MasteryDiscipline: function MasteryDiscipline() {
      },
      MasteryDiscipline__hasWeapon_closure: function MasteryDiscipline__hasWeapon_closure(t0) {
        this.$this = t0;
      },
      MasteryAction: function MasteryAction() {
      },
      Decorator: function Decorator(t0, t1, t2) {
        var _ = this;
        _._decorator$_architect = t0;
        _._heroPos = null;
        _._tilesByArchitecture = t1;
        _._spawnedUniques = t2;
      },
      Decorator_decorate_closure: function Decorator_decorate_closure() {
      },
      Decorator__spawnMonsters_closure: function Decorator__spawnMonsters_closure(t0, t1) {
        this.$this = t0;
        this.spawned = t1;
      },
      Decorator__spawnMonster_spawn: function Decorator__spawnMonster_spawn(t0, t1, t2, t3) {
        var _ = this;
        _._box_0 = t0;
        _.$this = t1;
        _.isCorpse = t2;
        _.density = t3;
      },
      Decorator__spawnMonster_closure: function Decorator__spawnMonster_closure() {
      },
      Decorator__spawnMonster_closure0: function Decorator__spawnMonster_closure0() {
      },
      DensityMap: function DensityMap(t0) {
        this._density = t0;
        this._possibleTiles = this._total = 0;
      },
      AttackAction: function AttackAction(t0) {
        var _ = this;
        _.defender = t0;
        _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
      },
      Actor: function Actor() {
      },
      Actor_closure: function Actor_closure(t0) {
        this.$this = t0;
      },
      Actor_finishTurn_closure: function Actor_finishTurn_closure(t0) {
        this.action = t0;
      },
      Storage: function Storage(t0, t1) {
        this.content = t0;
        this.heroes = t1;
      },
      Storage__load_closure: function Storage__load_closure(t0) {
        this.name = t0;
      },
      Storage__load_closure0: function Storage__load_closure0(t0, t1, t2) {
        this.$this = t0;
        this.hero = t1;
        this.shops = t2;
      },
      Storage__loadRace_closure: function Storage__loadRace_closure(t0) {
        this.name = t0;
      },
      Storage__loadLore_closure: function Storage__loadLore_closure(t0, t1) {
        this.$this = t0;
        this.seenBreeds = t1;
      },
      Storage__loadLore_closure0: function Storage__loadLore_closure0(t0, t1) {
        this.$this = t0;
        this.slain = t1;
      },
      Storage__loadLore_closure1: function Storage__loadLore_closure1(t0, t1) {
        this.$this = t0;
        this.foundItems = t1;
      },
      Storage__loadLore_closure2: function Storage__loadLore_closure2(t0, t1) {
        this.$this = t0;
        this.foundAffixes = t1;
      },
      Storage__loadLore_closure3: function Storage__loadLore_closure3(t0, t1) {
        this.$this = t0;
        this.usedItems = t1;
      },
      Storage_save_closure: function Storage_save_closure(t0, t1) {
        this.$this = t0;
        this.shops = t1;
      },
      KeyBindings: function KeyBindings(t0, t1) {
        this._bindings = t0;
        this.$ti = t1;
      },
      _KeyBinding: function _KeyBinding(t0, t1, t2) {
        this.charCode = t0;
        this.shift = t1;
        this.alt = t2;
      },
      RetroTerminal$_: function(_display, _charWidth, _charHeight, canvas, _font, _scale) {
        var t1 = new S.RetroTerminal(_display, canvas, canvas.getContext("2d"), _font, P.LinkedHashMap_LinkedHashMap$_empty(L.Color, W.CanvasElement), _scale, _charWidth, _charHeight, C.Color_255_255_255, C.Color_0_0_0);
        t1.RetroTerminal$_$6(_display, _charWidth, _charHeight, canvas, _font, _scale);
        return t1;
      },
      RetroTerminal: function RetroTerminal(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
        var _ = this;
        _._display = t0;
        _._canvas = t1;
        _._context = t2;
        _._font = t3;
        _._fontColorCache = t4;
        _._scale = t5;
        _._imageLoaded = false;
        _._charWidth = t6;
        _._charHeight = t7;
        _.foreColor = t8;
        _.backColor = t9;
      },
      RetroTerminal$__closure: function RetroTerminal$__closure(t0) {
        this.$this = t0;
      },
      RetroTerminal_render_closure: function RetroTerminal_render_closure(t0) {
        this.$this = t0;
      }
    },
    Y = {
      Decor_choose: function(depth, theme) {
        var t1 = $.$get$Decor_all();
        if (!t1._tags.containsKey$1(0, theme))
          return;
        return t1.tryChoose$2$tag(depth, theme);
      },
      Decor: function Decor() {
      },
      ConeMove: function ConeMove(t0, t1) {
        this.attack = t0;
        this.rate = t1;
      },
      DualWield: function DualWield(t0) {
        this._sortOrder = t0;
      },
      Energy: function Energy() {
        this.energy = 0;
      },
      ResourceSet$: function($T) {
        var t1 = P.String;
        return new Y.ResourceSet(P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Tag, $T]), P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Resource, $T]), P.LinkedHashMap_LinkedHashMap$_empty(Y._QueryKey, [Y._ResourceQuery, $T]), [$T]);
      },
      ResourceSet: function ResourceSet(t0, t1, t2, t3) {
        var _ = this;
        _._tags = t0;
        _._resources = t1;
        _._queries = t2;
        _.$ti = t3;
      },
      ResourceSet_all_closure: function ResourceSet_all_closure(t0) {
        this.$this = t0;
      },
      ResourceSet_hasTag_closure: function ResourceSet_hasTag_closure(t0, t1) {
        this.$this = t0;
        this.tag = t1;
      },
      ResourceSet_getTags_closure: function ResourceSet_getTags_closure(t0) {
        this.$this = t0;
      },
      ResourceSet_tryChoose_closure: function ResourceSet_tryChoose_closure(t0) {
        this.$this = t0;
      },
      ResourceSet_tryChoose_closure0: function ResourceSet_tryChoose_closure0(t0, t1, t2) {
        this._box_0 = t0;
        this.$this = t1;
        this.goalTag = t2;
      },
      ResourceSet_tryChooseMatching_closure: function ResourceSet_tryChooseMatching_closure(t0) {
        this.$this = t0;
      },
      ResourceSet_tryChooseMatching_closure0: function ResourceSet_tryChooseMatching_closure0(t0, t1) {
        this.$this = t0;
        this.tagObjects = t1;
      },
      ResourceSet_tryChooseMatching__closure: function ResourceSet_tryChooseMatching__closure(t0, t1) {
        this.$this = t0;
        this.resourceTag = t1;
      },
      _Resource: function _Resource(t0, t1, t2, t3, t4, t5, t6) {
        var _ = this;
        _.object = t0;
        _.startDepth = t1;
        _.endDepth = t2;
        _.startFrequency = t3;
        _.endFrequency = t4;
        _._tags = t5;
        _.$ti = t6;
      },
      _Tag: function _Tag(t0, t1, t2) {
        this.name = t0;
        this.parent = t1;
        this.$ti = t2;
      },
      _QueryKey: function _QueryKey(t0, t1) {
        this.name = t0;
        this.depth = t1;
      },
      _ResourceQuery: function _ResourceQuery(t0, t1, t2, t3, t4) {
        var _ = this;
        _.depth = t0;
        _.resources = t1;
        _.chances = t2;
        _.totalChance = t3;
        _.$ti = t4;
      },
      Path: function Path(t0, t1, t2, t3) {
        var _ = this;
        _.startDirection = t0;
        _.pos = t1;
        _.length = t2;
        _.cost = t3;
      },
      Pathfinder: function Pathfinder() {
      },
      Input: function Input(t0) {
        this.name = t0;
      },
      drawInspector: function(terminal, hero, item) {
        var _box_0, t1, writeSection, writeLabel, writeScale, writeBonus, writeStat, writeText, t2, t3, t4, t5, color, armor, x, _i, element, resistance, description, stat, bonus, t6;
        _box_0 = {};
        t1 = terminal.size;
        R.Draw__box(terminal, 0, 0, t1.x, t1.y, null, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
        t1 = item.type;
        terminal.drawGlyph$3(1, 0, t1.appearance);
        terminal.writeAt$4(3, 0, item.get$nounText(), C.Color_226_223_240);
        _box_0.y = 2;
        writeSection = new Y.drawInspector_writeSection(_box_0, terminal);
        writeLabel = new Y.drawInspector_writeLabel(_box_0, terminal);
        writeScale = new Y.drawInspector_writeScale(terminal);
        writeBonus = new Y.drawInspector_writeBonus(terminal);
        writeStat = new Y.drawInspector_writeStat(_box_0, writeLabel, terminal);
        writeText = new Y.drawInspector_writeText(_box_0, terminal);
        t2 = t1.attack;
        if (t2 != null) {
          writeSection.call$1("Attack");
          writeLabel.call$1("Damage");
          if (item.get$element() != $.$get$Element_none())
            terminal.writeAt$4(9, _box_0.y, item.get$element().abbreviation, B.elementColor(item.get$element()));
          t3 = _box_0.y;
          t4 = t2.damage;
          terminal.writeAt$4(12, t3, C.JSInt_methods.toString$0(t4), C.Color_132_126_135);
          writeScale.call$3(16, _box_0.y, item.get$damageScale());
          writeBonus.call$3(20, _box_0.y, item.get$damageBonus());
          terminal.writeAt$4(25, _box_0.y, "=", C.Color_38_38_56);
          t3 = item.get$damageScale();
          t5 = item.get$damageBonus();
          terminal.writeAt$4(27, _box_0.y, C.JSString_methods.padLeft$1(C.JSNumber_methods.toStringAsFixed$1(t4 * t3 + t5, 2), 6), C.Color_179_74_4);
          ++_box_0.y;
          if (item.get$strikeBonus() !== 0) {
            writeLabel.call$1("Strike");
            writeBonus.call$3(12, _box_0.y, item.get$strikeBonus());
            ++_box_0.y;
          }
          t2 = t2.range;
          if (t2 > 0)
            writeStat.call$2("Range", t2);
          writeLabel.call$1("Heft");
          t2 = hero.strength;
          color = t2._modify$1(t2._value) >= item.get$heft() ? C.Color_226_223_240 : C.Color_204_35_57;
          terminal.writeAt$4(12, _box_0.y, C.JSInt_methods.toString$0(item.get$heft()), color);
          writeScale.call$3(16, _box_0.y, t2.heftScale$1(item.get$heft()));
          ++_box_0.y;
        }
        t2 = t1.armor;
        if (t2 + item.get$armorModifier() !== 0 || t1.defense != null) {
          writeSection.call$1("Defense");
          t3 = t1.defense;
          if (t3 != null)
            writeStat.call$2("Dodge", t3.amount);
          if (t2 + item.get$armorModifier() !== 0) {
            writeLabel.call$1("Armor");
            terminal.writeAt$4(12, _box_0.y, C.JSInt_methods.toString$0(t2), C.Color_132_126_135);
            writeBonus.call$3(16, _box_0.y, item.get$armorModifier());
            terminal.writeAt$4(25, _box_0.y, "=", C.Color_38_38_56);
            armor = C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t2 + item.get$armorModifier()), 6);
            terminal.writeAt$4(27, _box_0.y, armor, C.Color_22_117_38);
            ++_box_0.y;
          }
          writeStat.call$2("Weight", item.get$weight());
        }
        if (t1.equipSlot != null) {
          writeSection.call$1("Resistances");
          for (t2 = $.$get$Elements_all(), x = 1, _i = 0; _i < 12; ++_i) {
            element = t2[_i];
            if (element == $.$get$Element_none())
              continue;
            resistance = item.resistance$1(element);
            writeBonus.call$3(x - 1, _box_0.y, resistance);
            t3 = _box_0.y;
            t4 = element.abbreviation;
            t5 = resistance === 0 ? C.Color_38_38_56 : B.elementColor(element);
            terminal.writeAt$4(x, t3 + 1, t4, t5);
            x += 3;
          }
          _box_0.y += 2;
        }
        t2 = t1.use;
        if (t2 != null) {
          writeSection.call$1("Use");
          writeText.call$1(t2.description);
        }
        writeSection.call$1("Description");
        description = H.setRuntimeTypeInfo([], [P.String]);
        for (t2 = item.suffix, t3 = t2 != null, t4 = item.prefix, t5 = t4 != null, _i = 0; _i < 5; ++_i) {
          stat = C.List_zPV[_i];
          if (t5) {
            bonus = t4._statBonuses.$index(0, stat);
            if (bonus == null)
              bonus = 0;
          } else
            bonus = 0;
          if (t3) {
            t6 = t2._statBonuses.$index(0, stat);
            bonus += t6 == null ? 0 : t6;
          }
          if (bonus < 0)
            C.JSArray_methods.add$1(description, "It lowers your " + stat.name + " by " + -bonus + ".");
          else if (bonus > 0)
            C.JSArray_methods.add$1(description, "It raises your " + stat.name + " by " + bonus + ".");
        }
        t2 = t1.toss;
        if (t2 != null) {
          t3 = t2.attack;
          t4 = t3.element;
          element = t4 != $.$get$Element_none() ? " " + t4.name : "";
          C.JSArray_methods.add$1(description, "It can be thrown for " + t3.damage + element + " damage up to range " + t3.range + ".");
          t2 = t2.breakage;
          if (t2 !== 0)
            C.JSArray_methods.add$1(description, "It has a " + t2 + "% chance of breaking when thrown.");
        }
        t2 = t1.emanationLevel;
        if (t2 > 0)
          C.JSArray_methods.add$1(description, "It emanates " + t2 + " light.");
        for (t1 = t1.destroyChance, t1 = t1.get$keys(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
          C.JSArray_methods.add$1(description, "It can be destroyed by " + t1.get$current().name.toLowerCase() + ".");
        writeText.call$1(C.JSArray_methods.join$1(description, " "));
      },
      formatMoney: function(price) {
        var result, t1;
        result = J.toString$0$(price);
        if (typeof price !== "number")
          return price.$gt();
        if (price > 999999999) {
          t1 = result.length - 9;
          result = C.JSString_methods.substring$2(result, 0, t1) + "," + C.JSString_methods.substring$1(result, t1);
        }
        if (price > 999999) {
          t1 = result.length - 6;
          result = C.JSString_methods.substring$2(result, 0, t1) + "," + C.JSString_methods.substring$1(result, t1);
        }
        if (price > 999) {
          t1 = result.length - 3;
          result = C.JSString_methods.substring$2(result, 0, t1) + "," + C.JSString_methods.substring$1(result, t1);
        }
        return result;
      },
      ItemView: function ItemView() {
      },
      ItemView_render_drawStat: function ItemView_render_drawStat(t0, t1, t2, t3) {
        var _ = this;
        _._box_1 = t0;
        _._box_0 = t1;
        _.terminal = t2;
        _.y = t3;
      },
      drawInspector_writeSection: function drawInspector_writeSection(t0, t1) {
        this._box_0 = t0;
        this.terminal = t1;
      },
      drawInspector_writeLabel: function drawInspector_writeLabel(t0, t1) {
        this._box_0 = t0;
        this.terminal = t1;
      },
      drawInspector_writeScale: function drawInspector_writeScale(t0) {
        this.terminal = t0;
      },
      drawInspector_writeBonus: function drawInspector_writeBonus(t0) {
        this.terminal = t0;
      },
      drawInspector_writeStat: function drawInspector_writeStat(t0, t1, t2) {
        this._box_0 = t0;
        this.writeLabel = t1;
        this.terminal = t2;
      },
      drawInspector_writeText: function drawInspector_writeText(t0, t1) {
        this._box_0 = t0;
        this.terminal = t1;
      },
      Panel: function Panel() {
      }
    },
    A = {Elements_closure2: function Elements_closure2() {
    }, Elements_closure7: function Elements_closure7() {
    }, Elements_closure8: function Elements_closure8() {
    }, Elements_closure5: function Elements_closure5() {
    }, Elements_closure6: function Elements_closure6() {
    }, Elements_closure: function Elements_closure() {
    }, Elements_closure0: function Elements_closure0() {
    }, Elements_closure1: function Elements_closure1() {
    }, Elements_closure3: function Elements_closure3() {
    }, Elements_closure4: function Elements_closure4() {
    }, ClubMastery: function ClubMastery(t0) {
      this._sortOrder = t0;
    }, BashAction: function BashAction(t0, t1) {
      var _ = this;
      _._club$_dir = t0;
      _._damage = _._step = 0;
      _.damageScale = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    },
      SlayDiscipline$: function(_displayName, _breedGroup) {
        var t1 = $.Skill__nextSortOrder;
        $.Skill__nextSortOrder = t1 + 1;
        return new A.SlayDiscipline(_displayName, _breedGroup, t1);
      },
      SlayDiscipline: function SlayDiscipline(t0, t1, t2) {
        this._displayName = t0;
        this._breedGroup = t1;
        this._sortOrder = t2;
      },
      Pit: function Pit(t0, t1, t2, t3) {
        var _ = this;
        _._monsterGroup = t0;
        _._minSize = t1;
        _._maxSize = t2;
        _._monsterTiles = t3;
        _._region = _._style = _._architect = null;
      },
      LogPanel: function LogPanel(t0) {
        this._log = t0;
        this.bounds = null;
      }
    },
    B = {_BreedSpawn: function _BreedSpawn(t0) {
      this._spawns$_breed = t0;
    }, _TagSpawn: function _TagSpawn(t0) {
      this._spawns$_tag = t0;
    }, _RepeatSpawn: function _RepeatSpawn(t0, t1, t2) {
      this._minCount = t0;
      this._spawns$_maxCount = t1;
      this._spawn = t2;
    }, _AllOfSpawn: function _AllOfSpawn(t0) {
      this._spawns = t0;
    }, TossAction: function TossAction(t0, t1, t2, t3) {
      var _ = this;
      _._toss$_hit = t0;
      _._toss$_target = t1;
      _.location = t2;
      _.item = t3;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, TossLosAction: function TossLosAction(t0, t1, t2) {
      var _ = this;
      _._toss$_item = t0;
      _._toss$_hit = t1;
      _._missed = false;
      _._los$_target = t2;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = _._los = _._lastPos = null;
    }, WalkAction: function WalkAction(t0) {
      var _ = this;
      _.dir = t0;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, OpenDoorAction: function OpenDoorAction(t0, t1) {
      var _ = this;
      _.pos = t0;
      _.openDoor = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, CloseDoorAction: function CloseDoorAction(t0, t1) {
      var _ = this;
      _.doorPos = t0;
      _.closedDoor = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, RestAction: function RestAction() {
      var _ = this;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    },
      BreedRef_resolve: function(resolver) {
        var t1, t2, _i, ref;
        H.functionTypeCheck(resolver, {func: 1, ret: B.Breed, args: [P.String]});
        for (t1 = $.$get$BreedRef__unresolved(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          ref = t1[_i];
          ref._breed$_breed = H.interceptedTypeCheck(resolver.call$1(ref._breed$_name), "$isBreed");
        }
        C.JSArray_methods.set$length($.$get$BreedRef__unresolved(), 0);
      },
      BreedRef: function BreedRef(t0) {
        this._breed$_name = t0;
        this._breed$_breed = null;
      },
      Breed: function Breed(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24) {
        var _ = this;
        _.pronoun = t0;
        _.appearance = t1;
        _.depth = t2;
        _.attacks = t3;
        _.moves = t4;
        _.maxHealth = t5;
        _.tracking = t6;
        _.vision = t7;
        _.hearing = t8;
        _.meander = t9;
        _.speed = t10;
        _.drop = t11;
        _.location = t12;
        _.motility = t13;
        _.flags = t14;
        _.dodge = t15;
        _.emanationLevel = t16;
        _.defenses = t17;
        _.countMin = t18;
        _.countMax = t19;
        _.minions = t20;
        _._breed$_name = t21;
        _.stain = t22;
        _.groups = t23;
        _.description = t24;
      },
      SpawnLocation: function SpawnLocation(t0, t1) {
        this.index = t0;
        this._breed$_name = t1;
      },
      Spawn: function Spawn() {
      },
      BreedFlags: function BreedFlags(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.berzerk = t0;
        _.cowardly = t1;
        _.fearless = t2;
        _.immobile = t3;
        _.protective = t4;
        _.unique = t5;
      },
      Monster$: function(game, _breed, x, y, generation) {
        var t1 = new B.Monster(_breed, generation, P.LinkedHashMap_LinkedHashMap$_empty(O.Move, P.num), 0, 0, game, new Y.Energy(), new E.HasteCondition(), new E.ColdCondition(), new E.PoisonCondition(), new E.BlindnessCondition(), new E.BlindnessCondition(), P.LinkedHashMap_LinkedHashMap$_empty(G.Element, E.ResistCondition), new L.Vec(x, y));
        t1.Actor$3(game, x, y);
        t1.Monster$5(game, _breed, x, y, generation);
        return t1;
      },
      Monster: function Monster(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
        var _ = this;
        _._breed = t0;
        _.generation = t1;
        _._monster$_state = null;
        _._recharges = t2;
        _.wantsToMelee = true;
        _._alertness = t3;
        _._fear = t4;
        _._frightenThreshold = null;
        _.game = t5;
        _.energy = t6;
        _.haste = t7;
        _.cold = t8;
        _.poison = t9;
        _.blindness = t10;
        _.dazzle = t11;
        _.resistances = t12;
        _._pos = t13;
        _._health = null;
      },
      Monster_onGiveDamage_closure: function Monster_onGiveDamage_closure(t0, t1) {
        this.action = t0;
        this.damage = t1;
      },
      Monster_onTakeDamage_closure: function Monster_onTakeDamage_closure(t0, t1, t2) {
        this.$this = t0;
        this.action = t1;
        this.damage = t2;
      },
      Monster_onTakeDamage_closure0: function Monster_onTakeDamage_closure0(t0, t1) {
        this.$this = t0;
        this.damage = t1;
      },
      BucketQueue: function BucketQueue(t0, t1) {
        this._buckets = t0;
        this._bucket = 0;
        this.$ti = t1;
      },
      Fov: function Fov(t0) {
        this._fov$_stage = t0;
        this._shadows = null;
      },
      _Shadow: function _Shadow(t0, t1) {
        this.start = t0;
        this.end = t1;
      },
      MainMenuScreen: function MainMenuScreen(t0, t1) {
        var _ = this;
        _.content = t0;
        _.storage = t1;
        _.selectedHero = 0;
        _._ui = null;
      },
      ItemPanel: function ItemPanel(t0) {
        this._item_panel$_game = t0;
        this.bounds = null;
      },
      _ItemPanelItemView: function _ItemPanelItemView(t0) {
        this.items = t0;
      },
      UserInterface: function UserInterface(t0, t1, t2, t3) {
        var _ = this;
        _.keyPress = t0;
        _._screens = t1;
        _._terminal = t2;
        _._dirty = true;
        _._keyUpSubscription = _._keyDownSubscription = null;
        _._running = false;
        _.$ti = t3;
      },
      Screen: function Screen() {
      },
      Races__race: function($name, agility, description, fortitude, intellect, strength, will) {
        return new N.Race($name, description, P.LinkedHashMap_LinkedHashMap$_literal([C.Stat_Strength, strength, C.Stat_Agility, agility, C.Stat_Fortitude, fortitude, C.Stat_Intellect, intellect, C.Stat_Will, will], D.Stat, P.int));
      },
      elementColor: function(element) {
        return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Element_none(), C.Color_132_126_135, $.$get$Elements_air(), C.Color_129_231_235, $.$get$Elements_earth(), C.Color_142_82_55, $.$get$Elements_fire(), C.Color_204_35_57, $.$get$Elements_water(), C.Color_26_46_150, $.$get$Elements_acid(), C.Color_131_158_13, $.$get$Elements_cold(), C.Color_64_163_229, $.$get$Elements_lightning(), C.Color_189_106_235, $.$get$Elements_poison(), C.Color_22_117_38, $.$get$Elements_dark(), C.Color_38_38_56, $.$get$Elements_light(), C.Color_255_238_168, $.$get$Elements_spirit(), C.Color_86_30_138], G.Element, L.Color).$index(0, element);
      }
    },
    D = {AxeMastery: function AxeMastery(t0) {
      this._sortOrder = t0;
    }, SweepAction: function SweepAction(t0, t1, t2) {
      var _ = this;
      _._axe$_dir = t0;
      _.GeneratorActionMixin__iterator = t1;
      _.damageScale = t2;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, _SweepAction_MasteryAction_GeneratorActionMixin: function _SweepAction_MasteryAction_GeneratorActionMixin() {
    }, SenseItems: function SenseItems(t0) {
      this._sortOrder = t0;
    }, Catacomb: function Catacomb(t0, t1, t2) {
      var _ = this;
      _._catacomb$_density = t0;
      _._catacomb$_minSize = t1;
      _._catacomb$_maxSize = t2;
      _._region = _._style = _._architect = null;
    }, Reachability: function Reachability(t0, t1, t2, t3) {
      var _ = this;
      _.stage = t0;
      _._reachability$_start = t1;
      _._distances = t2;
      _._affected = t3;
      _._reachedOpenCount = 0;
      _._beforeFill = null;
    }, _FillStep: function _FillStep(t0, t1) {
      this.pos = t0;
      this.distance = t1;
    }, Town: function Town(t0) {
      this.stage = t0;
    },
      Game$: function($content, _save, depth, height, width) {
        var t1, t2, t3, t4, t5, t6;
        t1 = H.setRuntimeTypeInfo([], [O.Message]);
        t2 = V.Action;
        t3 = P.ListQueue$(null, t2);
        t2 = H.setRuntimeTypeInfo([], [t2]);
        t4 = H.setRuntimeTypeInfo([], [D.Event0]);
        t5 = [L.Vec];
        t6 = H.setRuntimeTypeInfo([], t5);
        t4 = new D.Game($content, _save, new O.Log(t1), t3, t2, t4, new Y.Energy(), t6, depth);
        t1 = width == null ? 80 : width;
        t1 = L.Stage$(t1, height == null ? 60 : height, t4);
        t4._stage = t1;
        C.JSArray_methods.addAll$1(t6, t1.tiles.bounds.inflate$1(-1));
        t1 = $.$get$rng();
        t1.toString;
        C.JSArray_methods.shuffle$1(H.assertSubtype(t6, "$isList", t5, "$asList"), t1._random);
        return t4;
      },
      Game: function Game(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
        var _ = this;
        _.content = t0;
        _._save = t1;
        _.log = t2;
        _._actions = t3;
        _._reactions = t4;
        _._events = t5;
        _._substanceEnergy = t6;
        _._substanceUpdateOrder = t7;
        _._substanceIndex = null;
        _.depth = t8;
        _.hero = _._stage = null;
      },
      Game_generate_closure: function Game_generate_closure(t0) {
        this._box_0 = t0;
      },
      GameResult: function GameResult(t0, t1) {
        this.events = t0;
        this.madeProgress = t1;
      },
      Event0: function Event0(t0, t1, t2, t3, t4, t5) {
        var _ = this;
        _.type = t0;
        _.actor = t1;
        _.element = t2;
        _.other = t3;
        _.pos = t4;
        _.dir = t5;
      },
      EventType: function EventType(t0) {
        this._game$_name = t0;
      },
      Property: function Property(t0) {
        this._value = null;
        this.$ti = t0;
      },
      Stat: function Stat(t0) {
        this.name = t0;
      },
      StatBase: function StatBase() {
      },
      StatBase_refresh_closure: function StatBase_refresh_closure(t0, t1, t2) {
        this.$this = t0;
        this.newValue = t1;
        this.game = t2;
      },
      Strength: function Strength() {
        this._value = this._hero = null;
      },
      Agility: function Agility() {
        this._value = this._hero = null;
      },
      Fortitude: function Fortitude() {
        this._value = this._hero = null;
      },
      Intellect: function Intellect() {
        this._value = this._hero = null;
      },
      Will: function Will() {
        this._value = this._hero = null;
      },
      ItemDialog: function ItemDialog(t0, t1, t2) {
        var _ = this;
        _._item_dialog$_gameScreen = t0;
        _._command = t1;
        _._location = t2;
        _._item_dialog$_count = _._selectedItem = null;
        _._item_dialog$_shiftDown = false;
        _._ui = _._item_dialog$_inspected = null;
      },
      _ItemDialogItemView: function _ItemDialogItemView(t0) {
        this._dialog = t0;
      },
      _ItemCommand: function _ItemCommand() {
      },
      _DropItemCommand: function _DropItemCommand() {
      },
      _UseItemCommand: function _UseItemCommand() {
      },
      _EquipItemCommand: function _EquipItemCommand() {
      },
      _TossItemCommand: function _TossItemCommand() {
      },
      _TossItemCommand_selectItem_closure: function _TossItemCommand_selectItem_closure(t0, t1, t2, t3) {
        var _ = this;
        _.dialog = t0;
        _.location = t1;
        _.item = t2;
        _.hit = t3;
      },
      _PickUpItemCommand: function _PickUpItemCommand() {
      },
      _PutItemCommand: function _PutItemCommand() {
      },
      _SellItemCommand: function _SellItemCommand(t0) {
        this._item_dialog$_shop = t0;
      },
      Display: function Display(t0, t1) {
        this._glyphs = t0;
        this._changedGlyphs = t1;
      },
      Monsters_initialize: function() {
        var groups, _i, group, t1, t2, t3, description, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
        groups = ["humanoid/hob/fae", "humanoid/hob/goblin", "humanoid/hob/kobold", "humanoid/human", "humanoid/orcus/ogre", "humanoid/orcus/orc", "humanoid/saurian", "magical/eye", "magical/jelly", "mythical/beast/dragon", "mythical/beast/hybrid", "natural/animal/bird", "natural/animal/herp/salamander", "natural/animal/herp/snake", "natural/animal/mammal/bat", "natural/animal/mammal/canine", "natural/animal/mammal/feline", "natural/animal/mammal/rodent", "natural/bug/fly", "natural/bug/slug", "natural/bug/spider", "natural/bug/worm", "natural/plant/vine", "undead/skeleton"];
        for (_i = 0; _i < 24; ++_i) {
          group = groups[_i];
          $.$get$Monsters_breeds().defineTags$1("monster/" + group);
        }
        t1 = R.family("a", null, "fearless", null, null, null, null);
        t2 = [P.String];
        C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("spider".split(" "), t2));
        t1._vision = 4;
        t1._hearing = 2;
        t1._stain = $.$get$Tiles_spiderweb();
        t1 = R.breed("brown spider", 5, C.Color_142_82_55, 6, 30, null, 40, 0);
        t3 = $.$get$Elements_poison();
        C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 5, 0, t3));
        t1 = $.$get$collapseNewlines();
        description = H.stringReplaceAllUnchecked("Like a large dog, if the dog had eight articulated legs, eight\n  glittering eyes, and wanted nothing more than to kill you.", t1, " ");
        $._builder._description = description;
        C.JSArray_methods.add$1(R.breed("gray spider", 7, C.Color_63_64_114, 12, 30, null, 30, 0)._attacks, U.Attack$(null, "bite[s]", 5, 0, t3));
        t4 = R.breed("spiderling", 9, C.Color_226_223_240, 14, 35, null, 50, 0);
        t4.count$2(2, 7);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 10, 0, t3));
        C.JSArray_methods.add$1(R.breed("giant spider", 12, C.Color_26_46_150, 40, null, null, 30, 0)._attacks, U.Attack$(null, "bite[s]", 7, 0, t3));
        t4 = R.family("b", null, null, null, null, 1, null);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("bat".split(" "), t2));
        t4._vision = 2;
        t4._hearing = 8;
        t5 = t4._builder0$_motility;
        t6 = $.$get$Motility_fly();
        t5 = t5._bitMask;
        t6 = t6._bitMask;
        t4._builder0$_motility = new Q.Motility(t5 | t6);
        t4._builder0$_location = C.SpawnLocation_1;
        t4 = R.breed("brown bat", 1, C.Color_142_82_55, 3, null, 0.5, 50, 0);
        C.JSArray_methods.add$1(t4._defenses, new U.Defense(20, "{1} flits out of the way."));
        t4.count$2(2, 4);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 3, 0, null));
        C.JSArray_methods.add$1(R.breed("giant bat", 4, C.Color_64_31_36, 24, null, null, 30, 0)._attacks, U.Attack$(null, "bite[s]", 6, 0, null));
        t4 = R.breed("cave bat", 6, C.Color_132_126_135, 30, null, null, 40, 0);
        C.JSArray_methods.add$1(t4._defenses, new U.Defense(20, "{1} flits out of the way."));
        t4.count$2(2, 5);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 6, 0, null));
        t4 = R.family("c", 25, null, null, 25, null, 20);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("canine".split(" "), t2));
        t4._vision = 5;
        t4._hearing = 10;
        t4 = R.breed("mangy cur", 2, C.Color_255_238_168, 11, null, null, null, 0);
        t4.count$1(4);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 4, 0, null));
        C.JSArray_methods.add$1(t4._moves, new U.HowlMove(6, null, 10));
        t4 = R.breed("wild dog", 4, C.Color_132_126_135, 20, null, null, null, 0);
        t4.count$1(4);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 6, 0, null));
        C.JSArray_methods.add$1(t4._moves, new U.HowlMove(8, null, 10));
        t4 = R.breed("mongrel", 7, C.Color_179_74_4, 28, null, null, null, 0);
        t4.count$2(2, 5);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 8, 0, null));
        C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
        t4 = R.breed("wolf", 26, C.Color_226_223_240, 60, null, null, null, 0);
        t4.count$2(3, 6);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 12, 0, null));
        C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
        t4 = R.breed("varg", 30, C.Color_63_64_114, 80, null, null, null, 0);
        t4.count$2(2, 6);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 16, 0, null));
        C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
        t4 = R.breed("Skoll", 36, C.Color_222_156_33, 200, null, null, null, 0);
        t4._flags = "unique";
        t4.minion$3("canine", 5, 9);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 20, 0, null));
        C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
        t4 = R.breed("Hati", 40, C.Color_21_87_194, 250, null, null, null, 0);
        t4._flags = "unique";
        t4.minion$3("canine", 5, 9);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 23, 0, null));
        C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
        t4 = R.breed("Fenrir", 44, C.Color_38_38_56, 300, null, null, null, 0);
        t4._flags = "unique";
        t4.minion$3("canine", 3, 5);
        t4.minion$1("Skoll");
        t4.minion$1("Hati");
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 26, 0, null));
        C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
        t4 = R.family("d", null, null, null, null, null, null);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("dragon".split(" "), t2));
        t4._vision = 16;
        t4._hearing = 10;
        C.JSArray_methods.add$1(t4._defenses, new U.Defense(20, "{2} [is|are] deflected by its scales."));
        t4._builder0$_location = C.SpawnLocation_1;
        t4 = R.breed("green dragon", 60, C.Color_131_158_13, 350, null, null, null, 0);
        t5 = t4._attacks;
        C.JSArray_methods.add$1(t5, U.Attack$(null, "bite[s]", 30, 0, null));
        C.JSArray_methods.add$1(t5, U.Attack$(null, "claw[s]", 25, 0, null));
        t4.drop$2$count("treasure", 5);
        t4.drop$2$count("magic", 3);
        t4.drop$2$count("equipment", 2);
        t4 = R.breed("blue dragon", 65, C.Color_21_87_194, 400, null, null, null, 0);
        t5 = t4._attacks;
        C.JSArray_methods.add$1(t5, U.Attack$(null, "bite[s]", 30, 0, null));
        C.JSArray_methods.add$1(t5, U.Attack$(null, "claw[s]", 25, 0, null));
        t4.toString;
        t5 = $.$get$Elements_water();
        t7 = U.Attack$(new O.Noun("the water"), "blasts", 70, 10, t5);
        C.JSArray_methods.add$1(t4._moves, new Y.ConeMove(t7, 5));
        t4.drop$2$count("treasure", 5);
        t4.drop$2$count("magic", 3);
        t4.drop$2$count("equipment", 2);
        t4 = R.breed("white dragon", 70, C.Color_226_223_240, 500, null, null, null, 0);
        t7 = t4._attacks;
        C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 30, 0, null));
        C.JSArray_methods.add$1(t7, U.Attack$(null, "claw[s]", 25, 0, null));
        t4.toString;
        t7 = $.$get$Elements_cold();
        t8 = U.Attack$(new O.Noun("the ice"), "freezes", 80, 10, t7);
        C.JSArray_methods.add$1(t4._moves, new Y.ConeMove(t8, 5));
        t4.drop$2$count("treasure", 5);
        t4.drop$2$count("magic", 3);
        t4.drop$2$count("equipment", 2);
        t4 = R.breed("purple dragon", 75, C.Color_86_30_138, 600, null, null, null, 0);
        t8 = t4._attacks;
        C.JSArray_methods.add$1(t8, U.Attack$(null, "bite[s]", 30, 0, null));
        C.JSArray_methods.add$1(t8, U.Attack$(null, "claw[s]", 25, 0, null));
        t4.toString;
        t8 = $.$get$Elements_lightning();
        t9 = U.Attack$(new O.Noun("the lightning"), "shocks", 100, 10, t8);
        C.JSArray_methods.add$1(t4._moves, new Y.ConeMove(t9, 5));
        t4.drop$2$count("treasure", 5);
        t4.drop$2$count("magic", 3);
        t4.drop$2$count("equipment", 2);
        t4 = R.breed("red dragon", 75, C.Color_204_35_57, 600, null, null, null, 0);
        t9 = t4._attacks;
        C.JSArray_methods.add$1(t9, U.Attack$(null, "bite[s]", 30, 0, null));
        C.JSArray_methods.add$1(t9, U.Attack$(null, "claw[s]", 25, 0, null));
        t4.toString;
        t9 = $.$get$Elements_fire();
        t10 = U.Attack$(new O.Noun("the flame"), "burns", 100, 10, t9);
        C.JSArray_methods.add$1(t4._moves, new Y.ConeMove(t10, 5));
        t4.drop$2$count("treasure", 5);
        t4.drop$2$count("magic", 3);
        t4.drop$2$count("equipment", 2);
        t4 = R.breed("gold dragon", 80, C.Color_222_156_33, 700, null, null, null, 0);
        t10 = t4._attacks;
        C.JSArray_methods.add$1(t10, U.Attack$(null, "bite[s]", 32, 0, null));
        C.JSArray_methods.add$1(t10, U.Attack$(null, "claw[s]", 27, 0, null));
        t4.toString;
        t10 = $.$get$Elements_light();
        t11 = U.Attack$(new O.Noun("the light"), "sears", 120, 10, t10);
        C.JSArray_methods.add$1(t4._moves, new Y.ConeMove(t11, 5));
        t4.drop$2$count("treasure", 5);
        t4.drop$2$count("magic", 3);
        t4.drop$2$count("equipment", 2);
        t4 = R.family("e", null, "immobile", null, null, null, null);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("eye".split(" "), t2));
        t4._vision = 16;
        t4._hearing = 1;
        C.JSArray_methods.add$1(t4._defenses, new U.Defense(10, "{1} blinks out of the way."));
        t4._builder0$_motility = new Q.Motility(t4._builder0$_motility._bitMask | t6);
        t4._builder0$_location = C.SpawnLocation_1;
        t4 = R.breed("lazy eye", 5, C.Color_64_163_229, 20, null, null, null, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stare[s] at", 8, 0, null));
        t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 12, 8, 5);
        t4 = R.breed("mad eye", 9, C.Color_255_122_105, 40, null, null, null, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stare[s] at", 8, 0, null));
        t4.toString;
        t11 = $.$get$Elements_air();
        t4._bolt$6$damage$range$rate("the wind", "blows", t11, 15, 8, 6);
        t4 = R.breed("floating eye", 15, C.Color_255_238_168, 60, null, null, null, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stare[s] at", 10, 0, null));
        t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 24, 8, 4);
        C.JSArray_methods.add$1(t4._moves, new S.TeleportMove(7, 10));
        t4 = R.breed("baleful eye", 20, C.Color_179_74_4, 80, null, null, null, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "gaze[s] into", 12, 0, null));
        t4._bolt$6$damage$range$rate("the flame", "burns", t9, 20, 8, 4);
        t4._bolt$6$damage$range$rate("the jet", "splashes", t5, 20, 8, 4);
        C.JSArray_methods.add$1(t4._moves, new S.TeleportMove(9, 10));
        t4 = R.breed("malevolent eye", 30, C.Color_204_35_57, 120, null, null, null, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "gaze[s] into", 20, 0, null));
        t4._bolt$6$damage$range$rate("the light", "sears", t10, 20, 10, 4);
        t12 = $.$get$Elements_dark();
        t4._bolt$6$damage$range$rate("the darkness", "crushes", t12, 20, 10, 4);
        t13 = U.Attack$(new O.Noun("the flame"), "burns", 30, 10, t9);
        t4 = t4._moves;
        C.JSArray_methods.add$1(t4, new Y.ConeMove(t13, 7));
        C.JSArray_methods.add$1(t4, new S.TeleportMove(9, 10));
        t4 = R.breed("murderous eye", 40, C.Color_84_0_39, 180, null, null, null, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "gaze[s] into", 30, 0, null));
        t4.toString;
        t13 = $.$get$Elements_acid();
        t4._bolt$6$damage$range$rate("the acid", "burns", t13, 40, 8, 7);
        t14 = $.$get$Elements_earth();
        t4._bolt$6$damage$range$rate("the stone", "hits", t14, 40, 8, 7);
        t15 = U.Attack$(new O.Noun("the ice"), "freezes", 30, 10, t7);
        t4 = t4._moves;
        C.JSArray_methods.add$1(t4, new Y.ConeMove(t15, 7));
        C.JSArray_methods.add$1(t4, new S.TeleportMove(9, 10));
        t4 = R.breed("watcher", 60, C.Color_132_126_135, 300, null, null, null, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "see[s]", 50, 0, null));
        t4._bolt$6$damage$range$rate("the light", "sears", t10, 40, 10, 7);
        t10 = U.Attack$(new O.Noun("the light"), "sears", 30, 10, t10);
        t15 = t4._moves;
        C.JSArray_methods.add$1(t15, new Y.ConeMove(t10, 7));
        t4._bolt$6$damage$range$rate("the darkness", "crushes", t12, 50, 10, 7);
        C.JSArray_methods.add$1(t15, new Y.ConeMove(U.Attack$(new O.Noun("the darkness"), "crushes", 40, 10, t12), 7));
        t15 = R.family("f", null, null, null, null, null, null);
        t15._vision = 10;
        t15._hearing = 8;
        C.JSArray_methods.addAll$1(t15._groups, H.setRuntimeTypeInfo("feline".split(" "), t2));
        t15 = R.breed("stray cat", 1, C.Color_222_156_33, 11, null, null, 30, 1)._attacks;
        C.JSArray_methods.add$1(t15, U.Attack$(null, "bite[s]", 5, 0, null));
        C.JSArray_methods.add$1(t15, U.Attack$(null, "scratch[es]", 4, 0, null));
        t15 = R.family("g", null, null, null, 10, null, null);
        t15._vision = 8;
        t15._hearing = 4;
        C.JSArray_methods.addAll$1(t15._groups, H.setRuntimeTypeInfo("goblin".split(" "), t2));
        t4 = t15._builder0$_motility;
        t10 = $.$get$Motility_door();
        t4 = t4._bitMask;
        t10 = t10._bitMask;
        t15._builder0$_motility = new Q.Motility(t4 | t10);
        t4 = R.breed("goblin peon", 4, C.Color_189_144_108, 30, null, null, 20, 0);
        t4.count$1(4);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 8, 0, null));
        C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_1, 8));
        t4.drop$2$percent("treasure", 20);
        t4.drop$2$percent("spear", 5);
        t4.drop$2$percent("healing", 10);
        t4 = R.breed("goblin archer", 6, C.Color_22_117_38, 36, null, null, null, 0);
        t4.count$1(2);
        t4.minion$3("goblin", 0, 3);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 4, 0, null));
        t15 = $.$get$Element_none();
        t4._bolt$6$damage$range$rate("the arrow", "hits", t15, 8, 8, 3);
        t4.drop$2$percent("treasure", 30);
        t4.drop$2$percent("bow", 10);
        t4.drop$2$percent("dagger", 5);
        t4.drop$2$percent("healing", 10);
        t4 = R.breed("goblin fighter", 6, C.Color_142_82_55, 58, null, null, null, 0);
        t4.count$1(2);
        t4.minion$3("goblin", 1, 4);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 12, 0, null));
        t4.drop$2$percent("treasure", 20);
        t4.drop$2$percent("spear", 10);
        t4.drop$2$percent("armor", 10);
        t4.drop$2$percent("resistance", 5);
        t4.drop$2$percent("healing", 10);
        t4 = R.breed("goblin warrior", 8, C.Color_132_126_135, 68, null, null, null, 0);
        t4.count$1(2);
        t4.minion$3("goblin", 1, 5);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 16, 0, null));
        t4.drop$2$percent("treasure", 25);
        t4.drop$2$percent("axe", 10);
        t4.drop$2$percent("armor", 10);
        t4.drop$2$percent("resistance", 5);
        t4.drop$2$percent("healing", 10);
        t4._flags = "protective";
        t4 = R.breed("goblin mage", 9, C.Color_26_46_150, 50, null, null, null, 0);
        t4.minion$3("goblin", 1, 4);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "whip[s]", 7, 0, null));
        t4._bolt$6$damage$range$rate("the flame", "burns", t9, 12, 8, 12);
        t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 16, 8, 12);
        t4.drop$2$percent("treasure", 20);
        t4.drop$2$percent("robe", 10);
        t4.drop$2$percent("magic", 30);
        t4 = R.breed("goblin ranger", 12, C.Color_0_64_39, 60, null, null, null, 0);
        t4.minion$3("goblin", 0, 5);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 10, 0, null));
        t4._bolt$6$damage$range$rate("the arrow", "hits", t15, 12, 8, 3);
        t4.drop$2$percent("treasure", 20);
        t4.drop$2$percent("bow", 15);
        t4.drop$2$percent("armor", 10);
        t4.drop$2$percent("magic", 20);
        t4 = R.breed("Erlkonig, the Goblin Prince", 14, C.Color_38_38_56, 120, null, null, null, 0);
        t4._pronoun = C.Pronoun_he_him_his;
        t4.minion$3("goblin", 4, 8);
        t16 = t4._attacks;
        C.JSArray_methods.add$1(t16, U.Attack$(null, "hit[s]", 10, 0, null));
        C.JSArray_methods.add$1(t16, U.Attack$(null, "slash[es]", 14, 0, null));
        t4._bolt$6$damage$range$rate("the darkness", "crushes", t12, 20, 10, 20);
        t4.drop$2$count("treasure", 3);
        t4.drop$4$affixChance$count$depthOffset("equipment", 30, 2, 8);
        t4.drop$3$count$depthOffset("magic", 3, 4);
        t4._flags = "protective unique";
        t4 = R.family("i", null, "fearless", null, 40, null, 3);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("bug".split(" "), t2));
        t4._vision = 5;
        t4._hearing = 2;
        t4 = R.breed("giant cockroach[es]", 1, C.Color_64_31_36, 1, null, 0.4, null, 0);
        t4.count$2(2, 5);
        t4._builder0$_location = C.SpawnLocation_3;
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 2, 0, null));
        t16 = L.SpawnMove$(6, null);
        C.JSArray_methods.add$1(t4._moves, t16);
        description = H.stringReplaceAllUnchecked("It's not quite as easy to squash one of these when it's as long as\n      your arm.", t1, " ");
        $._builder._description = description;
        t4 = R.breed("giant centipede", 3, C.Color_204_35_57, 14, null, null, 20, 2)._attacks;
        C.JSArray_methods.add$1(t4, U.Attack$(null, "crawl[s] on", 4, 0, null));
        C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 8, 0, null));
        t4 = R.family("i", null, "fearless", null, 40, null, 3);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("fly".split(" "), t2));
        t4._vision = 5;
        t4._hearing = 2;
        t4 = R.breed("firefly", 8, C.Color_179_74_4, 6, null, null, 70, 1);
        t4.count$2(3, 8);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 12, 0, t9));
        t4 = R.family("j", null, "fearless", 0.7, 30, -1, null);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("jelly".split(" "), t2));
        t4._vision = 3;
        t4._hearing = 1;
        t4._builder0$_location = C.SpawnLocation_2;
        t4.count$1(4);
        t4 = R.breed("green jelly", 1, C.Color_131_158_13, 5, null, null, null, 0);
        t16 = $.$get$Tiles_greenJellyStain();
        t4._stain = t16;
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 3, 0, null));
        t4 = R.family("j", null, "fearless immobile", 0.6, null, null, null);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("jelly".split(" "), t2));
        t4._vision = 2;
        t4._hearing = 1;
        t4._builder0$_location = C.SpawnLocation_3;
        t4.count$1(4);
        t4 = R.breed("green slime", 2, C.Color_22_117_38, 10, null, null, null, 0);
        t4._stain = t16;
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 4, 0, null));
        t4.toString;
        t17 = L.SpawnMove$(4, null);
        C.JSArray_methods.add$1(t4._moves, t17);
        t17 = R.breed("frosty slime", 4, C.Color_226_223_240, 14, null, null, null, 0);
        t17._stain = $.$get$Tiles_whiteJellyStain();
        C.JSArray_methods.add$1(t17._attacks, U.Attack$(null, "crawl[s] on", 5, 0, t7));
        t17.toString;
        t4 = L.SpawnMove$(4, null);
        C.JSArray_methods.add$1(t17._moves, t4);
        t4 = R.breed("mud slime", 6, C.Color_142_82_55, 20, null, null, null, 0);
        t4._stain = $.$get$Tiles_brownJellyStain();
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 8, 0, t14));
        t4.toString;
        t17 = L.SpawnMove$(4, null);
        C.JSArray_methods.add$1(t4._moves, t17);
        t17 = R.breed("smoking slime", 15, C.Color_204_35_57, 30, null, null, null, 0);
        t17._emanationLevel = 4;
        t17._stain = $.$get$Tiles_redJellyStain();
        C.JSArray_methods.add$1(t17._attacks, U.Attack$(null, "crawl[s] on", 10, 0, t9));
        t17.toString;
        t4 = L.SpawnMove$(4, null);
        C.JSArray_methods.add$1(t17._moves, t4);
        t4 = R.breed("sparkling slime", 20, C.Color_86_30_138, 40, null, null, null, 0);
        t4._emanationLevel = 3;
        t4._stain = $.$get$Tiles_violetJellyStain();
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 12, 0, t8));
        t4.toString;
        t17 = L.SpawnMove$(4, null);
        C.JSArray_methods.add$1(t4._moves, t17);
        t17 = R.breed("caustic slime", 25, C.Color_129_217_117, 50, null, null, null, 0);
        t17._stain = t16;
        C.JSArray_methods.add$1(t17._attacks, U.Attack$(null, "crawl[s] on", 13, 0, t13));
        t17.toString;
        t4 = L.SpawnMove$(4, null);
        C.JSArray_methods.add$1(t17._moves, t4);
        t4 = R.breed("virulent slime", 35, C.Color_0_64_39, 60, null, null, null, 0);
        t4._stain = t16;
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 14, 0, t3));
        t4.toString;
        t16 = L.SpawnMove$(4, null);
        C.JSArray_methods.add$1(t4._moves, t16);
        t16 = R.breed("ectoplasm", 45, C.Color_38_38_56, 40, null, null, null, 0);
        t16._stain = $.$get$Tiles_grayJellyStain();
        t4 = $.$get$Elements_spirit();
        C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "crawl[s] on", 15, 0, t4));
        t16.toString;
        t4 = L.SpawnMove$(4, null);
        C.JSArray_methods.add$1(t16._moves, t4);
        t4 = R.family("k", null, "cowardly", null, 15, null, null);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("kobold".split(" "), t2));
        t4._vision = 10;
        t4._hearing = 4;
        t4 = R.breed("scurrilous imp", 1, C.Color_255_122_105, 12, null, null, 20, 0);
        t4.count$1(2);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "club[s]", 4, 0, null));
        t16 = t4._moves;
        C.JSArray_methods.add$1(t16, new R.MissiveMove(C.Missive_1, 5));
        C.JSArray_methods.add$1(t16, new X.HasteMove(10, 1, 5));
        t4.drop$2$percent("treasure", 20);
        t4.drop$2$percent("club", 10);
        t4.drop$2$percent("speed", 20);
        t4 = R.breed("vexing imp", 2, C.Color_86_30_138, 16, null, null, null, 0);
        t4.count$1(2);
        t4.minion$3("kobold", 0, 1);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "scratch[es]", 4, 0, null));
        C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_1, 5));
        t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 6, 8, 5);
        t4.drop$2$percent("treasure", 25);
        t4.drop$2$percent("teleportation", 20);
        C.JSArray_methods.addAll$1(R.family("k", null, null, null, 20, null, null)._groups, H.setRuntimeTypeInfo("kobold".split(" "), t2));
        t4 = R.breed("kobold", 3, C.Color_204_35_57, 20, null, null, null, 0);
        t4.count$1(3);
        t4.minion$3("canine", 0, 3);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "poke[s]", 4, 0, null));
        C.JSArray_methods.add$1(t4._moves, new S.TeleportMove(6, 10));
        t4.drop$2$percent("treasure", 25);
        t4.drop$2$percent("equipment", 10);
        t4.drop$2$percent("magic", 20);
        t4 = R.breed("kobold shaman", 4, C.Color_26_46_150, 20, null, null, null, 0);
        t4.count$1(2);
        t4.minion$3("canine", 0, 3);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 4, 0, null));
        t4._bolt$6$damage$range$rate("the jet", "splashes", t5, 8, 8, 10);
        t4.drop$2$percent("treasure", 25);
        t4.drop$2$percent("robe", 10);
        t4.drop$2$percent("magic", 20);
        t4 = R.breed("kobold trickster", 5, C.Color_222_156_33, 24, null, null, null, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 5, 0, null));
        t5 = t4._moves;
        C.JSArray_methods.add$1(t5, new R.MissiveMove(C.Missive_1, 5));
        t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 8, 8, 5);
        C.JSArray_methods.add$1(t5, new S.TeleportMove(6, 7));
        C.JSArray_methods.add$1(t5, new X.HasteMove(10, 1, 7));
        t4.drop$2$percent("treasure", 35);
        t4.drop$2$percent("magic", 20);
        t4 = R.breed("kobold priest", 6, C.Color_21_87_194, 30, null, null, null, 0);
        t4.count$1(2);
        t4.minion$3("kobold", 1, 3);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "club[s]", 6, 0, null));
        t5 = t4._moves;
        C.JSArray_methods.add$1(t5, new O.HealMove(10, 15));
        C.JSArray_methods.add$1(t5, new X.HasteMove(10, 1, 7));
        t4.drop$2$percent("treasure", 20);
        t4.drop$2$percent("club", 10);
        t4.drop$2$percent("robe", 10);
        t4.drop$2$percent("magic", 30);
        t4 = R.breed("imp incanter", 7, C.Color_189_106_235, 33, null, null, null, 0);
        t4.count$1(2);
        t4.minion$3("kobold", 1, 3);
        t4.minion$3("canine", 0, 3);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "scratch[es]", 4, 0, null));
        C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_1, 6));
        t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 10, 8, 5);
        t4.drop$2$percent("treasure", 30);
        t4.drop$2$percent("robe", 10);
        t4.drop$2$percent("magic", 35);
        t4._flags = "cowardly";
        t4 = R.breed("imp warlock", 8, C.Color_56_16_125, 46, null, null, null, 0);
        t4.minion$3("kobold", 2, 5);
        t4.minion$3("canine", 0, 3);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 5, 0, null));
        t4._bolt$6$damage$range$rate("the ice", "freezes", t7, 12, 8, 8);
        t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 12, 8, 8);
        t4.drop$2$percent("treasure", 30);
        t4.drop$2$percent("staff", 20);
        t4.drop$2$percent("robe", 10);
        t4.drop$2$percent("magic", 30);
        t4 = R.breed("Feng", 10, C.Color_179_74_4, 80, null, null, 10, 1);
        t4._pronoun = C.Pronoun_he_him_his;
        t4.minion$3("kobold", 4, 10);
        t4.minion$3("canine", 1, 3);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 5, 0, null));
        t7 = t4._moves;
        C.JSArray_methods.add$1(t7, new R.MissiveMove(C.Missive_1, 7));
        C.JSArray_methods.add$1(t7, new S.TeleportMove(6, 5));
        C.JSArray_methods.add$1(t7, new S.TeleportMove(30, 50));
        C.JSArray_methods.add$1(t7, new Y.ConeMove(U.Attack$(new O.Noun("the lightning"), "shocks", 12, 10, t8), 8));
        t4.drop$3$count$depthOffset("treasure", 3, 5);
        t4.drop$4$affixChance$depthOffset$percent("spear", 20, 5, 20);
        t4.drop$4$affixChance$depthOffset$percent("armor", 10, 5, 30);
        t4.drop$3$count$depthOffset("magic", 2, 5);
        t4._flags = "unique";
        t4 = R.family("l", null, "fearless", null, 10, null, null);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("saurian".split(" "), t2));
        t4._vision = 10;
        t4._hearing = 5;
        C.JSArray_methods.add$1(t4._defenses, new U.Defense(5, "{2} [is|are] deflected by its scales."));
        t4 = R.breed("lizard guard", 11, C.Color_222_156_33, 26, null, null, null, 0);
        t7 = t4._attacks;
        C.JSArray_methods.add$1(t7, U.Attack$(null, "claw[s]", 8, 0, null));
        C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 10, 0, null));
        t4.drop$2$percent("treasure", 30);
        t4.drop$2$percent("armor", 10);
        t4.drop$2$percent("spear", 10);
        t4 = R.breed("lizard protector", 15, C.Color_131_158_13, 30, null, null, null, 0);
        t4.minion$3("saurian", 0, 2);
        t7 = t4._attacks;
        C.JSArray_methods.add$1(t7, U.Attack$(null, "claw[s]", 10, 0, null));
        C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 14, 0, null));
        t4.drop$2$percent("treasure", 30);
        t4.drop$2$percent("armor", 10);
        t4.drop$2$percent("spear", 10);
        t4 = R.breed("armored lizard", 17, C.Color_132_126_135, 38, null, null, null, 0);
        t4.minion$3("saurian", 0, 2);
        t7 = t4._attacks;
        C.JSArray_methods.add$1(t7, U.Attack$(null, "claw[s]", 10, 0, null));
        C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 15, 0, null));
        t4.drop$2$percent("treasure", 30);
        t4.drop$2$percent("armor", 20);
        t4.drop$2$percent("spear", 10);
        t4 = R.breed("scaled guardian", 19, C.Color_38_38_56, 50, null, null, null, 0);
        t4.minion$3("saurian", 0, 3);
        t4.minion$3("salamander", 0, 2);
        t7 = t4._attacks;
        C.JSArray_methods.add$1(t7, U.Attack$(null, "claw[s]", 10, 0, null));
        C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 15, 0, null));
        t4.drop$2$percent("treasure", 40);
        t4.drop$2$percent("equipment", 10);
        t4 = R.breed("saurian", 21, C.Color_179_74_4, 64, null, null, null, 0);
        t4.minion$3("saurian", 1, 4);
        t4.minion$3("salamander", 0, 2);
        t7 = t4._attacks;
        C.JSArray_methods.add$1(t7, U.Attack$(null, "claw[s]", 12, 0, null));
        C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 17, 0, null));
        t4.drop$2$percent("treasure", 50);
        t4.drop$2$percent("equipment", 10);
        t4 = R.family("o", null, null, null, 10, null, null);
        t4._vision = 7;
        t4._hearing = 6;
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("orc".split(" "), t2));
        t4._builder0$_motility = new Q.Motility(t4._builder0$_motility._bitMask | t10);
        t4._flags = "protective";
        t4 = R.breed("orc", 28, C.Color_179_74_4, 100, null, null, null, 0);
        t4.count$2(3, 6);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 12, 0, null));
        t4.drop$2$percent("treasure", 20);
        t4.drop$2$percent("equipment", 5);
        t4.drop$2$percent("spear", 5);
        t4 = R.breed("orc brute", 29, C.Color_129_217_117, 120, null, null, null, 0);
        t4.count$1(1);
        t4.minion$3("orc", 2, 5);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bash[es]", 16, 0, null));
        t4.drop$2$percent("treasure", 20);
        t4.drop$2$percent("club", 10);
        t4.drop$2$percent("armor", 10);
        t4 = R.breed("orc soldier", 30, C.Color_132_126_135, 140, null, null, null, 0);
        t4.count$2(4, 6);
        t4.minion$3("orcus", 1, 5);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 20, 0, null));
        t4.drop$2$percent("treasure", 25);
        t4.drop$2$percent("axe", 10);
        t4.drop$2$percent("armor", 10);
        t4 = R.breed("orc chieftain", 31, C.Color_204_35_57, 180, null, null, null, 0);
        t4.minion$3("orcus", 2, 10);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 10, 0, null));
        t4.drop$3$count$percent("treasure", 2, 40);
        t4.drop$2$percent("equipment", 20);
        t4.drop$2$percent("item", 20);
        t4 = R.family("p", null, null, null, 10, null, 14);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("human".split(" "), t2));
        t4._vision = 10;
        t4._hearing = 5;
        t4._builder0$_motility = new Q.Motility(t4._builder0$_motility._bitMask | t10);
        t4._emanationLevel = 2;
        t4 = R.breed("Harold the Misfortunate", 1, C.Color_189_106_235, 30, null, null, null, 0);
        t4._pronoun = C.Pronoun_he_him_his;
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 3, 0, null));
        C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_0, 5));
        t4.drop$2$percent("treasure", 80);
        t4.drop$3$depthOffset$percent("weapon", 4, 20);
        t4.drop$3$depthOffset$percent("armor", 4, 30);
        t4.drop$3$depthOffset$percent("magic", 4, 40);
        t4._flags = "unique";
        t4 = R.breed("hapless adventurer", 1, C.Color_255_238_168, 14, 15, null, 30, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 3, 0, null));
        C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_0, 12));
        t4.drop$2$percent("treasure", 15);
        t4.drop$2$percent("weapon", 10);
        t4.drop$2$percent("armor", 15);
        t4.drop$2$percent("magic", 20);
        t4._flags = "cowardly";
        t4 = R.breed("simpering knave", 2, C.Color_179_74_4, 17, null, null, null, 0);
        t7 = t4._attacks;
        C.JSArray_methods.add$1(t7, U.Attack$(null, "hit[s]", 2, 0, null));
        C.JSArray_methods.add$1(t7, U.Attack$(null, "stab[s]", 4, 0, null));
        t4.drop$2$percent("treasure", 20);
        t4.drop$2$percent("whip", 10);
        t4.drop$2$percent("armor", 15);
        t4.drop$2$percent("magic", 20);
        t4._flags = "cowardly";
        t4 = R.breed("decrepit mage", 3, C.Color_86_30_138, 20, null, null, 30, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 2, 0, null));
        t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 8, 8, 10);
        t4.drop$2$percent("treasure", 15);
        t4.drop$2$percent("magic", 30);
        t4.drop$2$percent("dagger", 5);
        t4.drop$2$percent("staff", 5);
        t4.drop$2$percent("robe", 10);
        t4.drop$2$percent("boots", 5);
        t4 = R.breed("unlucky ranger", 5, C.Color_22_117_38, 30, 25, null, 20, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "slash[es]", 2, 0, null));
        t4._bolt$6$damage$range$rate("the arrow", "hits", t15, 2, 8, 4);
        C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_0, 10));
        t4.drop$2$percent("treasure", 20);
        t4.drop$2$percent("potion", 20);
        t4.drop$2$percent("bow", 10);
        t4.drop$2$percent("body", 20);
        t4 = R.breed("drunken priest", 5, C.Color_21_87_194, 34, null, null, 40, 0);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 8, 0, null));
        t7 = t4._moves;
        C.JSArray_methods.add$1(t7, new O.HealMove(8, 15));
        C.JSArray_methods.add$1(t7, new R.MissiveMove(C.Missive_0, 5));
        t4.drop$2$percent("treasure", 35);
        t4.drop$2$percent("scroll", 20);
        t4.drop$2$percent("club", 10);
        t4.drop$2$percent("robe", 10);
        t4._flags = "fearless";
        t4 = R.family("r", 30, null, null, 30, null, null);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("rodent".split(" "), t2));
        t4._vision = 4;
        t4._hearing = 6;
        t4._builder0$_location = C.SpawnLocation_2;
        t4 = R.breed("[mouse|mice]", 1, C.Color_189_144_108, 2, null, 0.7, null, 0);
        t4.count$2(2, 5);
        t4 = t4._attacks;
        C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 3, 0, null));
        C.JSArray_methods.add$1(t4, U.Attack$(null, "scratch[es]", 2, 0, null));
        t4 = R.breed("sewer rat", 2, C.Color_38_38_56, 8, null, null, 20, 0);
        t4.count$2(1, 4);
        t4 = t4._attacks;
        C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 4, 0, null));
        C.JSArray_methods.add$1(t4, U.Attack$(null, "scratch[es]", 3, 0, null));
        t4 = R.breed("sickly rat", 3, C.Color_22_117_38, 10, null, null, null, 0)._attacks;
        C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 8, 0, t3));
        C.JSArray_methods.add$1(t4, U.Attack$(null, "scratch[es]", 4, 0, null));
        t4 = R.breed("plague rat", 6, C.Color_131_158_13, 20, null, null, null, 0);
        t4.count$2(1, 4);
        t4 = t4._attacks;
        C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 15, 0, t3));
        C.JSArray_methods.add$1(t4, U.Attack$(null, "scratch[es]", 8, 0, null));
        t4 = R.breed("giant rat", 8, C.Color_179_74_4, 40, null, null, null, 0)._attacks;
        C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 12, 0, null));
        C.JSArray_methods.add$1(t4, U.Attack$(null, "scratch[es]", 8, 0, null));
        t4 = R.breed("The Rat King", 8, C.Color_84_0_39, 120, null, null, null, 0);
        t4._pronoun = C.Pronoun_he_him_his;
        t7 = t4._attacks;
        C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 16, 0, null));
        C.JSArray_methods.add$1(t7, U.Attack$(null, "scratch[es]", 10, 0, null));
        t4.minion$3("rodent", 8, 16);
        t4.drop$2$count("treasure", 3);
        t4.drop$4$affixChance$depthOffset$percent("item", 10, 10, 50);
        t4._flags = "unique";
        t4 = R.family("s", 5, "fearless", null, 30, -3, 2);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("slug".split(" "), t2));
        t4._vision = 3;
        t4._hearing = 1;
        C.JSArray_methods.add$1(R.breed("giant slug", 3, C.Color_99_87_7, 20, null, null, null, 0)._attacks, U.Attack$(null, "crawl[s] on", 8, 0, null));
        C.JSArray_methods.add$1(R.breed("suppurating slug", 6, C.Color_131_158_13, 50, null, null, null, 0)._attacks, U.Attack$(null, "crawl[s] on", 12, 0, t3));
        C.JSArray_methods.add$1(R.breed("acidic slug", 9, C.Color_99_87_7, 70, null, null, null, 0)._attacks, U.Attack$(null, "crawl[s] on", 16, 0, t13));
        t4 = R.family("v", null, "fearless immobile", null, null, null, null);
        C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("vine".split(" "), t2));
        t4._vision = 10;
        t4._hearing = 10;
        C.JSArray_methods.add$1(R.breed("choker", 16, C.Color_22_117_38, 40, null, null, null, 0)._attacks, U.Attack$(null, "strangle", 12, 0, null));
        t4 = R.breed("nightshade", 19, C.Color_189_106_235, 50, null, null, null, 0);
        t4._bolt$6$damage$range$rate(null, "whips", t15, 10, 2, 3);
        C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "touch[es]", 12, 0, t3));
        t3 = R.breed("creeper", 22, C.Color_131_158_13, 60, null, null, null, 0);
        t3.toString;
        t4 = L.SpawnMove$(10, true);
        C.JSArray_methods.add$1(t3._moves, t4);
        t3._bolt$6$damage$range$rate(null, "whips", t15, 10, 2, 3);
        C.JSArray_methods.add$1(t3._attacks, U.Attack$(null, "strangle", 8, 0, null));
        C.JSArray_methods.add$1(R.breed("strangler", 26, C.Color_0_64_39, 80, null, null, null, 0)._attacks, U.Attack$(null, "strangle", 14, 0, null));
        t3 = R.family("w", 15, "fearless", null, 40, null, null);
        C.JSArray_methods.addAll$1(t3._groups, H.setRuntimeTypeInfo("worm".split(" "), t2));
        t3._vision = 2;
        t3._hearing = 3;
        t3 = R.breed("blood worm", 1, C.Color_84_0_39, 4, null, 0.5, null, 0);
        t3.count$2(2, 5);
        C.JSArray_methods.add$1(t3._attacks, U.Attack$(null, "crawl[s] on", 5, 0, null));
        t3 = R.breed("fire worm", 10, C.Color_179_74_4, 6, null, null, null, 0);
        t3.count$2(2, 6);
        t3._builder0$_location = C.SpawnLocation_2;
        C.JSArray_methods.add$1(t3._attacks, U.Attack$(null, "crawl[s] on", 5, 0, t9));
        C.JSArray_methods.addAll$1(R.family("w", 10, "fearless", null, 30, null, null)._groups, H.setRuntimeTypeInfo("worm".split(" "), t2));
        C.JSArray_methods.add$1(R.breed("giant earthworm", 3, C.Color_255_122_105, 20, null, null, null, -2)._attacks, U.Attack$(null, "crawl[s] on", 5, 0, null));
        C.JSArray_methods.add$1(R.breed("giant cave worm", 7, C.Color_189_144_108, 80, null, null, null, -2)._attacks, U.Attack$(null, "crawl[s] on", 12, 0, t13));
        t13 = R.family("x", null, null, null, 30, null, null);
        C.JSArray_methods.addAll$1(t13._groups, H.setRuntimeTypeInfo("skeleton".split(" "), t2));
        t13._vision = 4;
        t13._hearing = 4;
        C.JSArray_methods.add$1(R.breed("bony hand", 3, C.Color_63_64_114, 12, null, 3, 40, -1)._attacks, U.Attack$(null, "claw[s]", 5, 0, null));
        C.JSArray_methods.add$1(R.breed("bony arm", 4, C.Color_132_126_135, 18, null, 4, 40, 0)._attacks, U.Attack$(null, "claw[s]", 7, 0, null));
        C.JSArray_methods.add$1(R.breed("severed skull", 7, C.Color_189_144_108, 20, null, 3, 40, -2)._attacks, U.Attack$(null, "bite[s]", 9, 0, null));
        t13 = R.breed("decapitated skeleton", 10, C.Color_255_238_168, 30, null, 4, 60, 0);
        t13._vision = 0;
        t13._hearing = 0;
        t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t10);
        C.JSArray_methods.add$1(t13._attacks, U.Attack$(null, "claw[s]", 7, 0, null));
        t13.drop$2$percent("treasure", 30);
        t13.drop$2$percent("weapon", 10);
        t13.drop$2$percent("armor", 10);
        t13 = R.breed("armless skeleton", 12, C.Color_129_217_117, 25, null, 4, null, 0);
        t3 = t13._attacks;
        C.JSArray_methods.add$1(t3, U.Attack$(null, "bite[s]", 9, 0, null));
        C.JSArray_methods.add$1(t3, U.Attack$(null, "kick[s]", 7, 0, null));
        t13.drop$2$percent("treasure", 30);
        t13.drop$2$percent("armor", 10);
        t13 = R.breed("one-armed skeleton", 13, C.Color_131_158_13, 30, null, 5, null, 0);
        t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t10);
        C.JSArray_methods.add$1(t13._attacks, U.Attack$(null, "claw[s]", 7, 0, null));
        t13.toString;
        t3 = new B.BreedRef("armless skeleton");
        t15 = $.$get$BreedRef__unresolved();
        C.JSArray_methods.add$1(t15, t3);
        t4 = new B.BreedRef("bony arm");
        C.JSArray_methods.add$1(t15, t4);
        t7 = t13._moves;
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s arm falls off!", 1));
        t4 = new B.BreedRef("armless skeleton");
        C.JSArray_methods.add$1(t15, t4);
        t3 = new B.BreedRef("bony hand");
        C.JSArray_methods.add$1(t15, t3);
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t4, t3, "{1}'s hand falls off!", 1));
        t13.drop$2$percent("treasure", 30);
        t13.drop$2$percent("weapon", 5);
        t13.drop$2$percent("armor", 10);
        t13 = R.breed("skeleton", 15, C.Color_226_223_240, 40, null, 6, null, 0);
        t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t10);
        t3 = t13._attacks;
        C.JSArray_methods.add$1(t3, U.Attack$(null, "claw[s]", 7, 0, null));
        C.JSArray_methods.add$1(t3, U.Attack$(null, "bite[s]", 9, 0, null));
        t13.toString;
        t3 = new B.BreedRef("decapitated skeleton");
        C.JSArray_methods.add$1(t15, t3);
        t4 = new B.BreedRef("severed skull");
        C.JSArray_methods.add$1(t15, t4);
        t7 = t13._moves;
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s head pops off!", 1));
        t4 = new B.BreedRef("one-armed skeleton");
        C.JSArray_methods.add$1(t15, t4);
        t3 = new B.BreedRef("bony arm");
        C.JSArray_methods.add$1(t15, t3);
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t4, t3, "{1}'s arm falls off!", 1));
        t3 = new B.BreedRef("one-armed skeleton");
        C.JSArray_methods.add$1(t15, t3);
        t4 = new B.BreedRef("bony hand");
        C.JSArray_methods.add$1(t15, t4);
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s hand falls off!", 1));
        t13.drop$2$percent("treasure", 40);
        t13.drop$2$percent("weapon", 10);
        t13.drop$2$percent("armor", 10);
        t13 = R.breed("skeleton warrior", 17, C.Color_255_122_105, 50, null, 6, null, 0);
        t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t10);
        t4 = t13._attacks;
        C.JSArray_methods.add$1(t4, U.Attack$(null, "slash[es]", 13, 0, null));
        C.JSArray_methods.add$1(t4, U.Attack$(null, "stab[s]", 10, 0, null));
        t13.toString;
        t4 = new B.BreedRef("decapitated skeleton");
        C.JSArray_methods.add$1(t15, t4);
        t3 = new B.BreedRef("severed skull");
        C.JSArray_methods.add$1(t15, t3);
        t7 = t13._moves;
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t4, t3, "{1}'s head pops off!", 1));
        t3 = new B.BreedRef("one-armed skeleton");
        C.JSArray_methods.add$1(t15, t3);
        t4 = new B.BreedRef("bony arm");
        C.JSArray_methods.add$1(t15, t4);
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s arm falls off!", 1));
        t4 = new B.BreedRef("one-armed skeleton");
        C.JSArray_methods.add$1(t15, t4);
        t3 = new B.BreedRef("bony hand");
        C.JSArray_methods.add$1(t15, t3);
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t4, t3, "{1}'s hand falls off!", 1));
        t13.drop$2$percent("treasure", 50);
        t13.drop$2$percent("weapon", 20);
        t13.drop$2$percent("armor", 15);
        t13 = R.breed("robed skeleton", 19, C.Color_189_106_235, 50, null, 4, null, 0);
        t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t10);
        t3 = t13._attacks;
        C.JSArray_methods.add$1(t3, U.Attack$(null, "slash[es]", 13, 0, null));
        C.JSArray_methods.add$1(t3, U.Attack$(null, "stab[s]", 10, 0, null));
        t13._bolt$6$damage$range$rate("the lightning", "shocks", t8, 15, 10, 8);
        t3 = new B.BreedRef("decapitated skeleton");
        C.JSArray_methods.add$1(t15, t3);
        t4 = new B.BreedRef("severed skull");
        C.JSArray_methods.add$1(t15, t4);
        t7 = t13._moves;
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s head pops off!", 1));
        t4 = new B.BreedRef("one-armed skeleton");
        C.JSArray_methods.add$1(t15, t4);
        t3 = new B.BreedRef("bony arm");
        C.JSArray_methods.add$1(t15, t3);
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t4, t3, "{1}'s arm falls off!", 1));
        t3 = new B.BreedRef("one-armed skeleton");
        C.JSArray_methods.add$1(t15, t3);
        t4 = new B.BreedRef("bony hand");
        C.JSArray_methods.add$1(t15, t4);
        C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s hand falls off!", 1));
        t13.drop$2$percent("treasure", 50);
        t13.drop$2$percent("magic", 20);
        t13.drop$2$percent("armor", 10);
        t13 = R.family("B", null, null, null, null, null, null);
        C.JSArray_methods.addAll$1(t13._groups, H.setRuntimeTypeInfo("bird".split(" "), t2));
        t13._vision = 8;
        t13._hearing = 6;
        C.JSArray_methods.add$1(t13._defenses, new U.Defense(10, "{1} flaps out of the way."));
        t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t6);
        t13.count$2(3, 6);
        t13 = R.breed("crow", 4, C.Color_38_38_56, 7, null, null, 30, 2);
        C.JSArray_methods.add$1(t13._attacks, U.Attack$(null, "bite[s]", 5, 0, null));
        t13.drop$2$percent("treasure", 10);
        description = H.stringReplaceAllUnchecked('"What harm can a stupid little crow do?" you think as it and its\n      murderous friends dive towards your eyes, claws extended.', t1, " ");
        $._builder._description = description;
        t3 = R.breed("raven", 6, C.Color_63_64_114, 16, null, null, 15, 0);
        t4 = t3._attacks;
        C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 5, 0, null));
        C.JSArray_methods.add$1(t4, U.Attack$(null, "claw[s]", 4, 0, null));
        t3.drop$2$percent("treasure", 10);
        t3._flags = "protective";
        description = H.stringReplaceAllUnchecked("It's black eyes gleam with a malevolent intelligence.", t1, " ");
        $._builder._description = description;
        t1 = R.family("F", null, "cowardly", null, 30, 2, null);
        C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("fae".split(" "), t2));
        t1._vision = 10;
        t1._hearing = 8;
        C.JSArray_methods.add$1(t1._defenses, new U.Defense(10, "{1} flits out of the way."));
        t1._builder0$_motility = new Q.Motility(t1._builder0$_motility._bitMask | t6);
        t1._builder0$_location = C.SpawnLocation_1;
        t1 = R.breed("forest sprite", 2, C.Color_129_217_117, 6, null, null, null, 0);
        C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "scratch[es]", 3, 0, null));
        C.JSArray_methods.add$1(t1._moves, new R.MissiveMove(C.Missive_1, 4));
        t1._bolt$6$damage$range$rate("the spark", "zaps", t8, 4, 8, 7);
        t1.drop$2$percent("treasure", 10);
        t1.drop$2$percent("magic", 30);
        t1 = R.breed("house sprite", 5, C.Color_64_163_229, 10, null, null, null, 0);
        C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "poke[s]", 5, 0, null));
        t3 = t1._moves;
        C.JSArray_methods.add$1(t3, new R.MissiveMove(C.Missive_1, 4));
        t1._bolt$6$damage$range$rate("the stone", "hits", t14, 4, 8, 10);
        C.JSArray_methods.add$1(t3, new S.TeleportMove(4, 7));
        t1.drop$2$percent("treasure", 10);
        t1.drop$2$percent("magic", 30);
        t1 = R.breed("mischievous sprite", 7, C.Color_255_122_105, 24, null, null, null, 0);
        C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "poke[s]", 6, 0, null));
        t3 = t1._moves;
        C.JSArray_methods.add$1(t3, new R.MissiveMove(C.Missive_1, 4));
        t1._bolt$6$damage$range$rate("the wind", "blows", t11, 8, 8, 8);
        C.JSArray_methods.add$1(t3, new S.TeleportMove(5, 5));
        t1.drop$2$percent("treasure", 10);
        t1.drop$2$percent("magic", 30);
        t1 = R.breed("Tink", 8, C.Color_22_117_38, 40, null, null, 10, 0);
        t1._pronoun = C.Pronoun_she_her_her;
        C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "poke[s]", 8, 0, null));
        t3 = t1._moves;
        C.JSArray_methods.add$1(t3, new R.MissiveMove(C.Missive_1, 4));
        t1._bolt$6$damage$range$rate("the spark", "zaps", t8, 4, 8, 7);
        t1._bolt$6$damage$range$rate("the wind", "blows", t11, 7, 8, 8);
        C.JSArray_methods.add$1(t3, new S.TeleportMove(5, 5));
        t1.drop$2$count("treasure", 2);
        t1.drop$3$count$depthOffset("magic", 3, 3);
        t1._flags = "unique";
        t1 = R.family("H", null, null, null, null, null, null);
        C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("hybrid".split(" "), t2));
        t1._vision = 10;
        t1._hearing = 12;
        t1 = R.breed("harpy", 25, C.Color_189_106_235, 50, null, null, null, 2);
        t1._builder0$_motility = new Q.Motility(t1._builder0$_motility._bitMask | t6);
        t1.count$2(2, 5);
        t6 = t1._attacks;
        C.JSArray_methods.add$1(t6, U.Attack$(null, "bite[s]", 10, 0, null));
        C.JSArray_methods.add$1(t6, U.Attack$(null, "scratch[es]", 15, 0, null));
        t1 = t1._moves;
        C.JSArray_methods.add$1(t1, new U.HowlMove(10, "screeches", 10));
        C.JSArray_methods.add$1(t1, new R.MissiveMove(C.Missive_2, 5));
        t1 = R.breed("griffin", 35, C.Color_222_156_33, 200, null, null, null, 0)._attacks;
        C.JSArray_methods.add$1(t1, U.Attack$(null, "bite[s]", 20, 0, null));
        C.JSArray_methods.add$1(t1, U.Attack$(null, "scratch[es]", 15, 0, null));
        C.JSArray_methods.addAll$1(R.family("Q", null, null, null, null, null, null)._groups, H.setRuntimeTypeInfo("magical".split(" "), t2));
        t1 = R.breed("Nameless Unmaker", 100, C.Color_86_30_138, 1000, null, null, null, 2);
        t1._vision = 16;
        t1._hearing = 16;
        t6 = t1._attacks;
        C.JSArray_methods.add$1(t6, U.Attack$(null, "crushe[s]", 250, 0, t14));
        C.JSArray_methods.add$1(t6, U.Attack$(null, "blast[s]", 200, 0, t8));
        t1.toString;
        t12 = U.Attack$(new O.Noun("the darkness"), "crushes", 500, 10, t12);
        C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t12, 5));
        t1._flags = "fearless unique";
        t1._builder0$_motility = new Q.Motility(t1._builder0$_motility._bitMask | t10);
        t1.drop$3$affixChance$count("item", 50, 20);
        C.JSArray_methods.addAll$1(R.family("R", null, null, null, null, null, null)._groups, H.setRuntimeTypeInfo("herp".split(" "), t2));
        t1 = R.breed("frog", 1, C.Color_131_158_13, 4, 30, null, 30, 0);
        t1._vision = 6;
        t1._hearing = 4;
        t10 = t1._builder0$_motility;
        t12 = $.$get$Motility_swim();
        t1._builder0$_motility = new Q.Motility(t10._bitMask | t12._bitMask);
        C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "hop[s] on", 2, 0, null));
        t1 = R.family("R", 30, null, null, 20, null, null);
        C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("salamander".split(" "), t2));
        t1._vision = 6;
        t1._hearing = 5;
        t1._builder0$_location = C.SpawnLocation_1;
        t1._emanationLevel = 3;
        t1 = R.breed("juvenile salamander", 7, C.Color_255_122_105, 20, null, null, null, 0);
        C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 14, 0, t9));
        t1.toString;
        t12 = U.Attack$(new O.Noun("the flame"), "burns", 20, 4, t9);
        C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t12, 16));
        t12 = R.breed("salamander", 13, C.Color_204_35_57, 30, null, null, null, 0);
        C.JSArray_methods.add$1(t12._attacks, U.Attack$(null, "bite[s]", 18, 0, t9));
        t12.toString;
        t1 = U.Attack$(new O.Noun("the flame"), "burns", 30, 5, t9);
        C.JSArray_methods.add$1(t12._moves, new Y.ConeMove(t1, 16));
        t1 = R.breed("three-headed salamander", 23, C.Color_84_0_39, 90, null, null, null, 0);
        C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 24, 0, t9));
        t1.toString;
        t9 = U.Attack$(new O.Noun("the flame"), "burns", 20, 5, t9);
        C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t9, 10));
        t9 = R.family("S", 30, null, null, 30, null, null);
        C.JSArray_methods.addAll$1(t9._groups, H.setRuntimeTypeInfo("snake".split(" "), t2));
        t9._vision = 4;
        t9._hearing = 7;
        C.JSArray_methods.add$1(R.breed("water snake", 1, C.Color_131_158_13, 9, null, null, null, 0)._attacks, U.Attack$(null, "bite[s]", 3, 0, null));
        C.JSArray_methods.add$1(R.breed("brown snake", 3, C.Color_142_82_55, 25, null, null, null, 0)._attacks, U.Attack$(null, "bite[s]", 4, 0, null));
        C.JSArray_methods.add$1(R.breed("cave snake", 8, C.Color_132_126_135, 40, null, null, null, 0)._attacks, U.Attack$(null, "bite[s]", 10, 0, null));
        R.finishBreed();
        t9 = $.$get$Monsters_breeds();
        B.BreedRef_resolve(t9.get$find(t9));
      }
    },
    M = {BattleHardening: function BattleHardening(t0) {
      this._sortOrder = t0;
    }, Skill: function Skill() {
    }, UsableSkill: function UsableSkill() {
    }, TargetSkill: function TargetSkill() {
    }, Discipline: function Discipline() {
    }, Spell: function Spell() {
    }, SkillSet: function SkillSet(t0, t1) {
      this._levels = t0;
      this._points = t1;
    }, SkillSet_acquired_closure: function SkillSet_acquired_closure(t0) {
      this.$this = t0;
    }, _Spell_Skill_UsableSkill: function _Spell_Skill_UsableSkill() {
    }, MonsterState: function MonsterState() {
    }, MonsterState__meander_closure: function MonsterState__meander_closure(t0) {
      this.$this = t0;
    }, AsleepState: function AsleepState() {
      this._monster = null;
    }, AwakeState: function AwakeState() {
      this._monster = null;
    }, AwakeState_getAction_closure: function AwakeState_getAction_closure(t0) {
      this.$this = t0;
    }, AwakeState__escapeSubstance_closure: function AwakeState__escapeSubstance_closure(t0) {
      this.$this = t0;
    }, AwakeState__findRangedPath_isValidRangedPosition: function AwakeState__findRangedPath_isValidRangedPosition(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    }, AfraidState: function AfraidState() {
      this._monster = null;
    }, AfraidState_getAction_closure: function AfraidState_getAction_closure(t0) {
      this.$this = t0;
    }, AfraidState_getAction_closure0: function AfraidState_getAction_closure0(t0, t1) {
      this.$this = t0;
      this.heroDistance = t1;
    }, HeroEquipmentDialog: function HeroEquipmentDialog(t0, t1) {
      this.content = t0;
      this.hero = t1;
      this._ui = null;
    }, HeroEquipmentDialog_render_writeLine: function HeroEquipmentDialog_render_writeLine(t0) {
      this.terminal = t0;
    }, HeroEquipmentDialog_render_writeScale: function HeroEquipmentDialog_render_writeScale(t0) {
      this.terminal = t0;
    }, HeroEquipmentDialog_render_writeBonus: function HeroEquipmentDialog_render_writeBonus(t0) {
      this.terminal = t0;
    }, HeroEquipmentDialog_render_closure: function HeroEquipmentDialog_render_closure(t0, t1, t2, t3) {
      var _ = this;
      _.writeLine = t0;
      _.terminal = t1;
      _.writeScale = t2;
      _.writeBonus = t3;
    }, HeroInfoDialog: function HeroInfoDialog() {
    },
      Array2D$: function(width, height, value, $T) {
        return new M.Array2D(P.List_List$filled(width * height, value, false, $T), new X.Rect(new L.Vec(0, 0), new L.Vec(width, height)), [$T]);
      },
      Array2D: function Array2D(t0, t1, t2) {
        this._elements = t0;
        this.bounds = t1;
        this.$ti = t2;
      },
      Blob_make: function(size) {
        var blob;
        if (size >= 64) {
          size = C.JSInt_methods._tdivFast$1(size, 8) * 8;
          blob = M.Blob__make(C.JSInt_methods._tdivFast$1(size, 8), 2, null);
          blob = M.Blob__make(C.JSInt_methods._tdivFast$1(size, 4), 3, blob);
          blob = M.Blob__make(size, 6, M.Blob__make(C.JSInt_methods._tdivFast$1(size, 2), 5, blob));
        } else if (size >= 32) {
          size = C.JSInt_methods._tdivFast$1(size, 4) * 4;
          blob = M.Blob__make(C.JSInt_methods._tdivFast$1(size, 4), 2, null);
          blob = M.Blob__make(size, 5, M.Blob__make(C.JSInt_methods._tdivFast$1(size, 2), 3, blob));
        } else if (size >= 16) {
          size = C.JSInt_methods._tdivFast$1(size, 2) * 2;
          blob = M.Blob__make(size, 3, M.Blob__make(C.JSInt_methods._tdivFast$1(size, 2), 2, null));
        } else
          blob = M.Blob__make(size, 3, null);
        return M.Blob__crop(blob);
      },
      Blob__make: function(size, smoothing, input) {
        var t1, cells, dest, t2, t3, t4, t5, t6, t7, t8, t9, t10, value, center, maxLength, i, t0, walls, t11, _i, neighbor, t12;
        t1 = P.bool;
        H.assertSubtype(input, "$isArray2D", [t1], "$asArray2D");
        cells = M.Array2D$(size, size, false, t1);
        dest = M.Array2D$(size, size, false, t1);
        if (input != null)
          for (t1 = cells.bounds, t2 = X.RectIterator$(t1.inflate$1(-1)), t3 = H.getTypeArgumentByIndex(cells, 0), t4 = cells._elements, t1 = t1.size.x, t5 = input._elements, t6 = input.bounds.size.x, t7 = t5.length; t2.moveNext$0();) {
            t8 = t2._x;
            t9 = t2._y;
            t10 = C.JSInt_methods._tdivFast$1(t8, 2);
            t10 = C.JSInt_methods._tdivFast$1(t9, 2) * t6 + t10;
            if (t10 < 0 || t10 >= t7)
              return H.ioore(t5, t10);
            value = t5[t10] ? 0.3 : 0.7;
            C.JSArray_methods.$indexSet(t4, t9 * t1 + t8, H.assertSubtypeOfRuntimeType($.$get$rng().float$1(0, 1) > value, t3));
          }
        else {
          t1 = cells.bounds;
          center = t1.get$center();
          maxLength = Math.sqrt(new L.Vec(t1.get$left(t1), t1.get$top(t1)).$sub(0, t1.get$center()).get$lengthSquared());
          for (t2 = X.RectIterator$(t1.inflate$1(-1)), t3 = H.getTypeArgumentByIndex(cells, 0), t4 = cells._elements, t1 = t1.size.x; t2.moveNext$0();) {
            t5 = t2._x;
            t6 = t2._y;
            t7 = new L.Vec(t5, t6).$sub(0, center);
            t8 = t7.x;
            t7 = t7.y;
            t7 = Math.sqrt(t8 * t8 + t7 * t7);
            C.JSArray_methods.$indexSet(t4, t6 * t1 + t5, H.assertSubtypeOfRuntimeType($.$get$rng().float$1(0, 1) > t7 / maxLength, t3));
          }
        }
        for (i = 0; i < smoothing; ++i, t0 = dest, dest = cells, cells = t0)
          for (t1 = cells.bounds, t2 = t1.inflate$1(-1), t3 = new X.RectIterator(t2), t2 = t2.pos, t3._x = t2.x - 1, t3._y = t2.y, t2 = H.getTypeArgumentByIndex(dest, 0), t4 = dest._elements, t5 = dest.bounds.size.x, t6 = cells._elements, t1 = t1.size.x, t7 = t6.length; t3.moveNext$0();) {
            t8 = t3._x;
            t9 = t3._y;
            t10 = t9 * t1 + t8;
            if (t10 < 0 || t10 >= t7)
              return H.ioore(t6, t10);
            walls = t6[t10] ? 1 : 0;
            for (t10 = new L.Vec(t8, t9).get$neighbors(), t11 = t10.length, _i = 0; _i < t11; ++_i) {
              neighbor = t10[_i];
              t12 = neighbor.y * t1 + neighbor.x;
              if (t12 < 0 || t12 >= t7)
                return H.ioore(t6, t12);
              if (t6[t12])
                ++walls;
            }
            C.JSArray_methods.$indexSet(t4, t9 * t5 + t8, H.assertSubtypeOfRuntimeType(walls >= 5, t2));
          }
        return dest;
      },
      Blob__crop: function(blob) {
        var t1, t2, t3, minX, minY, t4, minX0, maxX, maxY, t5, t6, t7, result, t8, t9;
        t1 = P.bool;
        H.assertSubtype(blob, "$isArray2D", [t1], "$asArray2D");
        t2 = blob.bounds;
        t3 = t2.size;
        minX = t3.x;
        minY = t3.y;
        for (t2 = X.RectIterator$(t2), t3 = blob._elements, t4 = t3.length, minX0 = minX, maxX = -1, maxY = -1; t2.moveNext$0();) {
          t5 = t2._x;
          t6 = t2._y;
          t7 = t6 * minX + t5;
          if (t7 < 0 || t7 >= t4)
            return H.ioore(t3, t7);
          if (t3[t7]) {
            minX0 = Math.min(minX0, t5);
            maxX = Math.max(maxX, t5);
            minY = Math.min(minY, t6);
            maxY = Math.max(maxY, t6);
          }
        }
        result = M.Array2D$(maxX - minX0 + 1, maxY - minY + 1, null, t1);
        for (t1 = result.bounds, t2 = X.RectIterator$(t1), t5 = H.getTypeArgumentByIndex(result, 0), t6 = result._elements, t1 = t1.size.x; t2.moveNext$0();) {
          t7 = t2._x;
          t8 = t2._y;
          t9 = (t8 + minY) * minX + (t7 + minX0);
          if (t9 < 0 || t9 >= t4)
            return H.ioore(t3, t9);
          C.JSArray_methods.$indexSet(t6, t8 * t1 + t7, H.assertSubtypeOfRuntimeType(t3[t9], t5));
        }
        return result;
      }
    },
    Z = {SpearMastery: function SpearMastery(t0) {
      this._sortOrder = t0;
    }, SpearAction: function SpearAction(t0, t1, t2) {
      var _ = this;
      _._dir = t0;
      _.GeneratorActionMixin__iterator = t1;
      _.damageScale = t2;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, _SpearAction_MasteryAction_GeneratorActionMixin: function _SpearAction_MasteryAction_GeneratorActionMixin() {
    },
      Keep_Keep: function(maxRooms) {
        var t1, t2, t3;
        t1 = $.$get$rng().triangleInt$2(maxRooms, maxRooms / 2 | 0);
        t2 = Z.Junction;
        t3 = H.setRuntimeTypeInfo([], [t2]);
        return new Z.Keep(new Z.JunctionSet(C.TakeFrom_1, P.LinkedHashMap_LinkedHashMap$_empty(L.Vec, t2), t3), t1);
      },
      Keep: function Keep(t0, t1) {
        var _ = this;
        _._junctions = t0;
        _._placedRooms = 0;
        _._maxRooms = t1;
        _._region = _._style = _._architect = null;
      },
      Keep_spawnMonsters_closure: function Keep_spawnMonsters_closure(t0) {
        this.painter = t0;
      },
      Keep__regionContains_diagonal: function Keep__regionContains_diagonal(t0) {
        this.$this = t0;
      },
      Keep__tryAttachRoom_closure: function Keep__tryAttachRoom_closure(t0, t1) {
        this.room = t0;
        this.direction = t1;
      },
      Junction: function Junction(t0, t1) {
        this.position = t0;
        this.direction = t1;
        this.tries = 0;
      },
      TakeFrom: function TakeFrom(t0, t1) {
        this.index = t0;
        this._keep$_name = t1;
      },
      JunctionSet: function JunctionSet(t0, t1, t2) {
        this._takeFrom = t0;
        this._byPosition = t1;
        this._junctions = t2;
      },
      _closeDoor: function(pos) {
        return new B.CloseDoorAction(H.interceptedTypeCheck(pos, "$isVec"), $.$get$Tiles_closedDoor());
      },
      _openDoor: function(pos) {
        return new B.OpenDoorAction(H.interceptedTypeCheck(pos, "$isVec"), $.$get$Tiles_openDoor());
      },
      _closeBarredDoor: function(pos) {
        return new B.CloseDoorAction(H.interceptedTypeCheck(pos, "$isVec"), $.$get$Tiles_closedBarredDoor());
      },
      _openBarredDoor: function(pos) {
        return new B.OpenDoorAction(H.interceptedTypeCheck(pos, "$isVec"), $.$get$Tiles_openBarredDoor());
      },
      Tiles_multi: function($name, char, fore, $back, count, generate) {
        var result, t1, i, charCode;
        H.functionTypeCheck(generate, {func: 1, ret: Q.TileType, args: [Z._TileBuilder, P.int]});
        result = H.setRuntimeTypeInfo([], [Q.TileType]);
        for (t1 = [L.Glyph], i = 0; i < count; ++i) {
          charCode = C.JSString_methods._codeUnitAt$1(char, 0);
          C.JSArray_methods.add$1(result, generate.call$2(new Z._TileBuilder($name, H.setRuntimeTypeInfo([new L.Glyph(charCode, fore, C.Color_19_17_28)], t1)), i));
        }
        return result;
      },
      Tiles_ignition: function(tile) {
        var t1 = $.$get$Tiles__ignition().$index(0, tile);
        return t1 == null ? 0 : t1;
      },
      Tiles_fuel: function(tile) {
        var t1 = $.$get$Tiles__fuel().$index(0, tile);
        return t1 == null ? 0 : t1;
      },
      Tiles_burnResult: function(tile) {
        var t1 = $.$get$Tiles__burnTypes();
        if (t1.containsKey$1(0, tile))
          return t1.$index(0, tile);
        return H.setRuntimeTypeInfo([$.$get$Tiles_burntFloor(), $.$get$Tiles_burntFloor2()], [Q.TileType]);
      },
      _TileBuilder__TileBuilder: function($name, char, fore, $back) {
        var charCode;
        if ($back == null)
          $back = C.Color_19_17_28;
        charCode = C.JSString_methods._codeUnitAt$1(char, 0);
        return new Z._TileBuilder($name, H.setRuntimeTypeInfo([L.Glyph$fromCharCode(charCode, fore, $back)], [L.Glyph]));
      },
      Tiles_closure: function Tiles_closure() {
      },
      Tiles_closure0: function Tiles_closure0() {
      },
      Tiles_closure1: function Tiles_closure1() {
      },
      _TileBuilder: function _TileBuilder(t0, t1) {
        var _ = this;
        _.name = t0;
        _.glyphs = t1;
        _._portal = _._onOpen = _._onClose = null;
        _._emanation = 0;
      },
      _tileCost: function(tile) {
        var t1;
        if (J.$eq$(tile.type.motility, $.$get$Motility_door()))
          return 8;
        tile.toString;
        t1 = $.$get$Motility_fly();
        if ((tile.type.motility._bitMask & t1._bitMask) === 0)
          return 10;
        return 1;
      },
      Sound: function Sound(t0) {
        this._sound$_stage = t0;
        this._sound$_flow = null;
      },
      _SoundFlow: function _SoundFlow(t0, t1, t2, t3, t4) {
        var _ = this;
        _.stage = t0;
        _._flow$_start = t1;
        _._maxDistance = t2;
        _._offset = _._costs = null;
        _._open = t3;
        _._found = t4;
      },
      _SoundPathfinder: function _SoundPathfinder(t0, t1, t2) {
        this.stage = t0;
        this.start = t1;
        this.end = t2;
      },
      HeroMonsterLoreDialog: function HeroMonsterLoreDialog(t0, t1, t2, t3) {
        var _ = this;
        _._breeds = t0;
        _._hero_monster_lore_dialog$_sort = t1;
        _._hero_monster_lore_dialog$_scroll = _._hero_monster_lore_dialog$_selection = 0;
        _.content = t2;
        _.hero = t3;
        _._ui = null;
      },
      HeroMonsterLoreDialog_render_writeLine: function HeroMonsterLoreDialog_render_writeLine(t0) {
        this.terminal = t0;
      },
      HeroMonsterLoreDialog__describeBreed_closure: function HeroMonsterLoreDialog__describeBreed_closure() {
      },
      HeroMonsterLoreDialog__describeBreed_closure0: function HeroMonsterLoreDialog__describeBreed_closure0() {
      },
      HeroMonsterLoreDialog__listBreeds_closure: function HeroMonsterLoreDialog__listBreeds_closure() {
      },
      HeroMonsterLoreDialog__listBreeds_compareGlyph: function HeroMonsterLoreDialog__listBreeds_compareGlyph() {
      },
      HeroMonsterLoreDialog__listBreeds_compareGlyph_isUpper: function HeroMonsterLoreDialog__listBreeds_compareGlyph_isUpper() {
      },
      HeroMonsterLoreDialog__listBreeds_compareDepth: function HeroMonsterLoreDialog__listBreeds_compareDepth() {
      },
      HeroMonsterLoreDialog__listBreeds_closure0: function HeroMonsterLoreDialog__listBreeds_closure0(t0) {
        this._box_0 = t0;
      },
      _Sort0: function _Sort0(t0, t1) {
        this.description = t0;
        this.helpText = t1;
      },
      HeroResistancesDialog: function HeroResistancesDialog(t0, t1) {
        this.content = t0;
        this.hero = t1;
        this._ui = null;
      },
      HeroResistancesDialog_render_writeLine: function HeroResistancesDialog_render_writeLine(t0) {
        this.terminal = t0;
      },
      HeroResistancesDialog_render_closure: function HeroResistancesDialog_render_closure(t0, t1, t2) {
        this.$this = t0;
        this.writeLine = t1;
        this.terminal = t2;
      },
      SelectSkillDialog$: function(_gameScreen) {
        var t1 = new Z.SelectSkillDialog(_gameScreen, H.setRuntimeTypeInfo([], [M.UsableSkill]));
        t1.SelectSkillDialog$1(_gameScreen);
        return t1;
      },
      SelectSkillDialog: function SelectSkillDialog(t0, t1) {
        this._select_skill_dialog$_gameScreen = t0;
        this._select_skill_dialog$_skills = t1;
        this._ui = null;
      },
      Direction: function Direction(t0, t1) {
        this.x = t0;
        this.y = t1;
      },
      Affixes_createItem: function(itemType, droppedDepth, affixChance) {
        var t1, outOfDepth, affixDepth, weight, chance, affixes, t2, t3, t4, prefix, suffix;
        if (affixChance == null)
          affixChance = 0;
        if (itemType.equipSlot == null)
          return new R.Item(itemType, null, null, 1);
        t1 = itemType.depth;
        if (typeof t1 !== "number")
          return t1.$sub();
        outOfDepth = t1 - droppedDepth;
        if (outOfDepth > 0)
          affixDepth = droppedDepth - outOfDepth;
        else {
          weight = K.lerpDouble(droppedDepth, 1, 100, 0.5, 0);
          affixDepth = droppedDepth - $.$get$rng().round$1(0, outOfDepth * weight);
        }
        affixDepth = H.intTypeCheck(C.JSInt_methods.clamp$2(affixDepth, 1, 100));
        chance = 0.008 * affixDepth * affixDepth + 0.05 * affixDepth + 0.1;
        t1 = $.$get$rng();
        affixes = t1.float$1(0, 100) < chance + affixChance ? 1 : 0;
        if (t1.float$1(0, 100) < chance && t1.range$1(5) === 0)
          ++affixes;
        if (affixes === 0)
          return new R.Item(itemType, null, null, 1);
        t2 = $.$get$Affixes_prefixes();
        t3 = $.$get$Items_types();
        t4 = itemType.quantifiableName;
        prefix = t2.tryChooseMatching$2(affixDepth, t3.getTags$1(O.Log__categorize(t4, false, true)));
        suffix = $.$get$Affixes_suffixes().tryChooseMatching$2(affixDepth, t3.getTags$1(O.Log__categorize(t4, false, true)));
        if (affixes === 1 && prefix != null && suffix != null)
          if (t1.range$1(2) === 0)
            prefix = null;
          else
            suffix = null;
        return new R.Item(itemType, prefix, suffix, 1);
      },
      Affixes_find: function($name) {
        var type = $.$get$Affixes_prefixes().tryFind$1($name);
        if (type != null)
          return type;
        return $.$get$Affixes_suffixes().find$1(0, $name);
      },
      Affixes_initialize: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, i;
        R.finishAffix();
        $._affixTag = "body";
        t1 = R.affix("Elven _", 1);
        t1.depth$2$to(40, 80);
        t1._priceBonus = 400;
        t1._priceScale = 2;
        t1._weightBonus = -2;
        t1._armor = 2;
        t2 = $.$get$Elements_light();
        t1.resist$1(t2);
        t1 = R.affix("Elven _", 0.3);
        t1.depth$1(60);
        t1._priceBonus = 600;
        t1._priceScale = 3;
        t1._weightBonus = -3;
        t1._armor = 4;
        t1.resist$1(t2);
        R.finishAffix();
        $._affixTag = "cloak";
        t1 = R.affix("Elven _", 1);
        t1.depth$2$to(40, 80);
        t1._priceBonus = 300;
        t1._priceScale = 2;
        t1._weightBonus = -1;
        t1._armor = 3;
        t1.resist$1(t2);
        t1 = R.affix("Elven _", 0.3);
        t1.depth$1(60);
        t1._priceBonus = 500;
        t1._priceScale = 3;
        t1._weightBonus = -2;
        t1._armor = 5;
        t1.resist$1(t2);
        R.finishAffix();
        $._affixTag = "boots";
        t1 = R.affix("Elven _", 1);
        t1.depth$1(50);
        t1._priceBonus = 400;
        t1._priceScale = 2.5;
        t1._weightBonus = -2;
        t1._armor = 2;
        R.finishAffix();
        $._affixTag = "helm";
        t1 = R.affix("Elven _", 1);
        t1.depth$2$to(40, 80);
        t1._priceBonus = 400;
        t1._priceScale = 2;
        t1._weightBonus = -1;
        t1._armor = 1;
        t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 1);
        t1.resist$1(t2);
        t1 = R.affix("Elven _", 0.3);
        t1.depth$1(60);
        t1._priceBonus = 600;
        t1._priceScale = 3;
        t1._weightBonus = -1;
        t1._armor = 2;
        t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 2);
        t1.resist$1(t2);
        R.finishAffix();
        $._affixTag = "shield";
        t1 = R.affix("Elven _", 1);
        t1.depth$2$to(40, 80);
        t1._priceBonus = 300;
        t1._priceScale = 1.6;
        t1._heftScale = 0.8;
        t1._builder$_damageScale = 1.3;
        t1._builder$_damageBonus = null;
        t1.resist$1(t2);
        t1 = R.affix("Elven _", 0.5);
        t1.depth$1(50);
        t1._priceBonus = 500;
        t1._priceScale = 2.2;
        t1._heftScale = 0.6;
        t1._builder$_damageScale = 1.5;
        t1._builder$_damageBonus = null;
        t1._builder$_statBonuses.$indexSet(0, C.Stat_Will, 1);
        t1.resist$1(t2);
        R.finishAffix();
        $._affixTag = "body";
        t1 = R.affix("Dwarven _", 1);
        t1.depth$2$to(30, 70);
        t1._priceBonus = 400;
        t1._priceScale = 2;
        t1._weightBonus = 2;
        t1._armor = 4;
        t3 = $.$get$Elements_earth();
        t1.resist$1(t3);
        t4 = $.$get$Elements_dark();
        t1.resist$1(t4);
        t1 = R.affix("Dwarven _", 0.5);
        t1.depth$1(40);
        t1._priceBonus = 600;
        t1._priceScale = 3;
        t1._weightBonus = 2;
        t1._armor = 6;
        t1.resist$1(t3);
        t1.resist$1(t4);
        R.finishAffix();
        $._affixTag = "helm";
        t1 = R.affix("Dwarven _", 1);
        t1.depth$2$to(50, 80);
        t1._priceBonus = 300;
        t1._priceScale = 2;
        t1._weightBonus = 1;
        t1._armor = 3;
        t1.resist$1(t4);
        t1 = R.affix("Dwarven _", 0.5);
        t1.depth$1(60);
        t1._priceBonus = 500;
        t1._priceScale = 3;
        t1._weightBonus = 1;
        t1._armor = 4;
        t5 = t1._builder$_statBonuses;
        t5.$indexSet(0, C.Stat_Strength, 1);
        t5.$indexSet(0, C.Stat_Fortitude, 1);
        t1.resist$1(t4);
        R.finishAffix();
        $._affixTag = "gloves";
        t1 = R.affix("Dwarven _", 1);
        t1.depth$1(50);
        t1._priceBonus = 300;
        t1._priceScale = 2;
        t1._weightBonus = 1;
        t1._armor = 3;
        t1._builder$_statBonuses.$indexSet(0, C.Stat_Strength, 1);
        t1.resist$1(t3);
        R.finishAffix();
        $._affixTag = "boots";
        t1 = R.affix("Dwarven _", 1);
        t1.depth$2$to(50, 70);
        t1._priceBonus = 300;
        t1._priceScale = 2;
        t1._weightBonus = 1;
        t1._armor = 3;
        t1.resist$1(t3);
        t1 = R.affix("Dwarven _", 0.3);
        t1.depth$1(60);
        t1._priceBonus = 500;
        t1._priceScale = 3;
        t1._weightBonus = 2;
        t1._armor = 5;
        t1._builder$_statBonuses.$indexSet(0, C.Stat_Fortitude, 1);
        t1.resist$1(t4);
        t1.resist$1(t3);
        R.finishAffix();
        $._affixTag = "shield";
        t1 = R.affix("Dwarven _", 1);
        t1.depth$2$to(40, 80);
        t1._priceBonus = 200;
        t1._priceScale = 2.2;
        t1._heftScale = 1.2;
        t1._builder$_damageScale = 1.5;
        t1._builder$_damageBonus = 4;
        t1.resist$1(t3);
        t1.resist$1(t4);
        t1 = R.affix("Dwarven _", 1);
        t1.depth$1(60);
        t1._priceBonus = 400;
        t1._priceScale = 2.4;
        t1._heftScale = 1.3;
        t1._builder$_damageScale = 1.7;
        t1._builder$_damageBonus = 5;
        t1._builder$_statBonuses.$indexSet(0, C.Stat_Fortitude, 1);
        t1.resist$1(t3);
        t1.resist$1(t4);
        R.finishAffix();
        $._affixTag = "armor";
        t1 = R.affix("_ of Resist Air", 0.5);
        t1.depth$2$to(10, 50);
        t1._priceBonus = 200;
        t1._priceScale = 1.2;
        t5 = $.$get$Elements_air();
        t1.resist$1(t5);
        t1 = R.affix("_ of Resist Earth", 0.5);
        t1.depth$2$to(11, 51);
        t1._priceBonus = 230;
        t1._priceScale = 1.2;
        t1.resist$1(t3);
        t1 = R.affix("_ of Resist Fire", 0.5);
        t1.depth$2$to(12, 52);
        t1._priceBonus = 260;
        t1._priceScale = 1.3;
        t6 = $.$get$Elements_fire();
        t1.resist$1(t6);
        t1 = R.affix("_ of Resist Water", 0.5);
        t1.depth$2$to(13, 53);
        t1._priceBonus = 310;
        t1._priceScale = 1.2;
        t7 = $.$get$Elements_water();
        t1.resist$1(t7);
        t1 = R.affix("_ of Resist Acid", 0.3);
        t1.depth$2$to(14, 54);
        t1._priceBonus = 340;
        t1._priceScale = 1.3;
        t8 = $.$get$Elements_acid();
        t1.resist$1(t8);
        t1 = R.affix("_ of Resist Cold", 0.5);
        t1.depth$2$to(15, 55);
        t1._priceBonus = 400;
        t1._priceScale = 1.2;
        t9 = $.$get$Elements_cold();
        t1.resist$1(t9);
        t1 = R.affix("_ of Resist Lightning", 0.3);
        t1.depth$2$to(16, 56);
        t1._priceBonus = 430;
        t1._priceScale = 1.2;
        t10 = $.$get$Elements_lightning();
        t1.resist$1(t10);
        t1 = R.affix("_ of Resist Poison", 0.25);
        t1.depth$2$to(17, 57);
        t1._priceBonus = 460;
        t1._priceScale = 1.5;
        t11 = $.$get$Elements_poison();
        t1.resist$1(t11);
        t1 = R.affix("_ of Resist Dark", 0.25);
        t1.depth$2$to(18, 58);
        t1._priceBonus = 490;
        t1._priceScale = 1.3;
        t1.resist$1(t4);
        t1 = R.affix("_ of Resist Light", 0.25);
        t1.depth$2$to(19, 59);
        t1._priceBonus = 490;
        t1._priceScale = 1.3;
        t1.resist$1(t2);
        t1 = R.affix("_ of Resist Spirit", 0.4);
        t1.depth$2$to(10, 60);
        t1._priceBonus = 520;
        t1._priceScale = 1.4;
        t12 = $.$get$Elements_spirit();
        t1.resist$1(t12);
        t1 = R.affix("_ of Resist Nature", 0.3);
        t1.depth$1(40);
        t1._priceBonus = 3000;
        t1._priceScale = 4;
        t1.resist$1(t5);
        t1.resist$1(t3);
        t1.resist$1(t6);
        t1.resist$1(t7);
        t1.resist$1(t9);
        t1.resist$1(t10);
        t1 = R.affix("_ of Resist Destruction", 0.3);
        t1.depth$1(40);
        t1._priceBonus = 1300;
        t1._priceScale = 2.6;
        t1.resist$1(t8);
        t1.resist$1(t6);
        t1.resist$1(t10);
        t1.resist$1(t11);
        t1 = R.affix("_ of Resist Evil", 0.3);
        t1.depth$1(60);
        t1._priceBonus = 1500;
        t1._priceScale = 3;
        t1.resist$1(t8);
        t1.resist$1(t11);
        t1.resist$1(t4);
        t1.resist$1(t12);
        t1 = R.affix("_ of Resistance", 0.3);
        t1.depth$1(70);
        t1._priceBonus = 5000;
        t1._priceScale = 6;
        t1.resist$1(t5);
        t1.resist$1(t3);
        t1.resist$1(t6);
        t1.resist$1(t7);
        t1.resist$1(t8);
        t1.resist$1(t9);
        t1.resist$1(t10);
        t1.resist$1(t11);
        t1.resist$1(t4);
        t1.resist$1(t2);
        t1.resist$1(t12);
        t1 = R.affix("_ of Protection from Air", 0.25);
        t1.depth$1(36);
        t1._priceBonus = 500;
        t1._priceScale = 1.4;
        t1.resist$2(t5, 2);
        t5 = R.affix("_ of Protection from Earth", 0.25);
        t5.depth$1(37);
        t5._priceBonus = 500;
        t5._priceScale = 1.4;
        t5.resist$2(t3, 2);
        t3 = R.affix("_ of Protection from Fire", 0.25);
        t3.depth$1(38);
        t3._priceBonus = 500;
        t3._priceScale = 1.5;
        t3.resist$2(t6, 2);
        t3 = R.affix("_ of Protection from Water", 0.25);
        t3.depth$1(39);
        t3._priceBonus = 500;
        t3._priceScale = 1.4;
        t3.resist$2(t7, 2);
        t7 = R.affix("_ of Protection from Acid", 0.2);
        t7.depth$1(40);
        t7._priceBonus = 500;
        t7._priceScale = 1.5;
        t7.resist$2(t8, 2);
        t8 = R.affix("_ of Protection from Cold", 0.25);
        t8.depth$1(41);
        t8._priceBonus = 500;
        t8._priceScale = 1.4;
        t8.resist$2(t9, 2);
        t8 = R.affix("_ of Protection from Lightning", 0.16);
        t8.depth$1(42);
        t8._priceBonus = 500;
        t8._priceScale = 1.4;
        t8.resist$2(t10, 2);
        t8 = R.affix("_ of Protection from Poison", 0.14);
        t8.depth$1(43);
        t8._priceBonus = 1000;
        t8._priceScale = 1.6;
        t8.resist$2(t11, 2);
        t8 = R.affix("_ of Protection from Dark", 0.14);
        t8.depth$1(44);
        t8._priceBonus = 500;
        t8._priceScale = 1.5;
        t8.resist$2(t4, 2);
        t8 = R.affix("_ of Protection from Light", 0.14);
        t8.depth$1(45);
        t8._priceBonus = 500;
        t8._priceScale = 1.5;
        t8.resist$2(t2, 2);
        t8 = R.affix("_ of Protection from Spirit", 0.13);
        t8.depth$1(46);
        t8._priceBonus = 800;
        t8._priceScale = 1.6;
        t8.resist$2(t12, 2);
        R.finishAffix();
        $._affixTag = "weapon";
        t8 = R.affix("_ of Harming", 1);
        t8.depth$2$to(1, 30);
        t8._priceBonus = 100;
        t8._priceScale = 1.2;
        t8._heftScale = 1.05;
        t8._builder$_damageScale = null;
        t8._builder$_damageBonus = 1;
        t8 = R.affix("_ of Wounding", 1);
        t8.depth$2$to(10, 50);
        t8._priceBonus = 140;
        t8._priceScale = 1.3;
        t8._heftScale = 1.07;
        t8._builder$_damageScale = null;
        t8._builder$_damageBonus = 3;
        t8 = R.affix("_ of Maiming", 1);
        t8.depth$2$to(25, 75);
        t8._priceBonus = 180;
        t8._priceScale = 1.5;
        t8._heftScale = 1.09;
        t8._builder$_damageScale = 1.2;
        t8._builder$_damageBonus = 3;
        t8 = R.affix("_ of Slaying", 1);
        t8.depth$1(45);
        t8._priceBonus = 200;
        t8._priceScale = 2;
        t8._heftScale = 1.11;
        t8._builder$_damageScale = 1.4;
        t8._builder$_damageBonus = 5;
        R.finishAffix();
        $._affixTag = "bow";
        t8 = R.affix("Ash _", 1);
        t8.depth$2$to(10, 70);
        t8._priceBonus = 300;
        t8._priceScale = 1.3;
        t8._heftScale = 0.8;
        t8._builder$_damageScale = null;
        t8._builder$_damageBonus = 3;
        t8 = R.affix("Yew _", 1);
        t8.depth$1(20);
        t8._priceBonus = 500;
        t8._priceScale = 1.4;
        t8._heftScale = 0.8;
        t8._builder$_damageScale = null;
        t8._builder$_damageBonus = 5;
        R.finishAffix();
        $._affixTag = "weapon";
        t8 = R.affix("Glimmering _", 0.3);
        t8.depth$2$to(20, 60);
        t8._priceBonus = 300;
        t8._priceScale = 1.3;
        t8._builder$_damageScale = 1.2;
        t8._builder$_damageBonus = null;
        t8.brand$1(t2);
        t8 = R.affix("Shining _", 0.25);
        t8.depth$2$to(32, 90);
        t8._priceBonus = 400;
        t8._priceScale = 1.6;
        t8._builder$_damageScale = 1.4;
        t8._builder$_damageBonus = null;
        t8.brand$1(t2);
        t8 = R.affix("Radiant _", 0.2);
        t8.depth$1(48);
        t8._priceBonus = 500;
        t8._priceScale = 2;
        t8._builder$_damageScale = 1.6;
        t8._builder$_damageBonus = null;
        t8.brand$2$resist(t2, 2);
        t2 = R.affix("Dim _", 0.3);
        t2.depth$2$to(16, 60);
        t2._priceBonus = 300;
        t2._priceScale = 1.3;
        t2._builder$_damageScale = 1.2;
        t2._builder$_damageBonus = null;
        t2.brand$1(t4);
        t2 = R.affix("Dark _", 0.25);
        t2.depth$2$to(32, 80);
        t2._priceBonus = 400;
        t2._priceScale = 1.6;
        t2._builder$_damageScale = 1.4;
        t2._builder$_damageBonus = null;
        t2.brand$1(t4);
        t2 = R.affix("Black _", 0.2);
        t2.depth$1(56);
        t2._priceBonus = 500;
        t2._priceScale = 2;
        t2._builder$_damageScale = 1.6;
        t2._builder$_damageBonus = null;
        t2.brand$2$resist(t4, 2);
        t4 = R.affix("Chilling _", 0.3);
        t4.depth$2$to(20, 65);
        t4._priceBonus = 300;
        t4._priceScale = 1.5;
        t4._builder$_damageScale = 1.4;
        t4._builder$_damageBonus = null;
        t4.brand$1(t9);
        t4 = R.affix("Freezing _", 0.25);
        t4.depth$1(40);
        t4._priceBonus = 400;
        t4._priceScale = 1.7;
        t4._builder$_damageScale = 1.6;
        t4._builder$_damageBonus = null;
        t4.brand$2$resist(t9, 2);
        t9 = R.affix("Burning _", 0.3);
        t9.depth$2$to(20, 60);
        t9._priceBonus = 300;
        t9._priceScale = 1.5;
        t9._builder$_damageScale = 1.3;
        t9._builder$_damageBonus = null;
        t9.brand$1(t6);
        t9 = R.affix("Flaming _", 0.25);
        t9.depth$2$to(40, 90);
        t9._priceBonus = 360;
        t9._priceScale = 1.8;
        t9._builder$_damageScale = 1.6;
        t9._builder$_damageBonus = null;
        t9.brand$1(t6);
        t9 = R.affix("Searing _", 0.2);
        t9.depth$1(60);
        t9._priceBonus = 500;
        t9._priceScale = 2.1;
        t9._builder$_damageScale = 1.8;
        t9._builder$_damageBonus = null;
        t9.brand$2$resist(t6, 2);
        t6 = R.affix("Electric _", 0.2);
        t6.depth$1(50);
        t6._priceBonus = 300;
        t6._priceScale = 1.5;
        t6._builder$_damageScale = 1.4;
        t6._builder$_damageBonus = null;
        t6.brand$1(t10);
        t6 = R.affix("Shocking _", 0.2);
        t6.depth$1(70);
        t6._priceBonus = 400;
        t6._priceScale = 2;
        t6._builder$_damageScale = 1.8;
        t6._builder$_damageBonus = null;
        t6.brand$2$resist(t10, 2);
        t10 = R.affix("Poisonous _", 0.2);
        t10.depth$2$to(35, 90);
        t10._priceBonus = 500;
        t10._priceScale = 1.5;
        t10._builder$_damageScale = 1.1;
        t10._builder$_damageBonus = null;
        t10.brand$1(t11);
        t10 = R.affix("Venomous _", 0.2);
        t10.depth$1(70);
        t10._priceBonus = 800;
        t10._priceScale = 1.8;
        t10._builder$_damageScale = 1.3;
        t10._builder$_damageBonus = null;
        t10.brand$2$resist(t11, 2);
        t11 = R.affix("Ghostly _", 0.2);
        t11.depth$2$to(45, 85);
        t11._priceBonus = 300;
        t11._priceScale = 1.6;
        t11._heftScale = 0.7;
        t11._builder$_damageScale = 1.4;
        t11._builder$_damageBonus = null;
        t11.brand$1(t12);
        t11 = R.affix("Spiritual _", 0.15);
        t11.depth$1(80);
        t11._priceBonus = 400;
        t11._priceScale = 2.1;
        t11._heftScale = 0.7;
        t11._builder$_damageScale = 1.7;
        t11._builder$_damageBonus = null;
        t11.brand$2$resist(t12, 2);
        R.finishAffix();
        $._affixTag = "helm";
        for (i = 0; i < 2; ++i) {
          t1 = R.affix("_ of Acumen", 1);
          t1._minDepth = 35;
          t1._maxDepth = 55;
          t1._priceBonus = 300;
          t1._priceScale = 2;
          t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 1 + i);
          t1 = R.affix("_ of Wisdom", 1);
          t1._minDepth = 45;
          t1._maxDepth = 75;
          t1._priceBonus = 500;
          t1._priceScale = 3;
          t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 3 + i);
          t1 = R.affix("_ of Sagacity", 1);
          t1._minDepth = 75;
          t1._maxDepth = 100;
          t1._priceBonus = 700;
          t1._priceScale = 4;
          t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 5 + i);
          t1 = R.affix("_ of Genius", 1);
          t1._minDepth = 65;
          t1._maxDepth = 100;
          t1._priceBonus = 1000;
          t1._priceScale = 5;
          t1._builder$_statBonuses.$indexSet(0, C.Stat_Intellect, 7 + i);
        }
        R.finishAffix();
      }
    },
    K = {Flee: function Flee(t0) {
      this._sortOrder = t0;
    }, Escape: function Escape(t0) {
      this._sortOrder = t0;
    }, Disappear: function Disappear(t0) {
      this._sortOrder = t0;
    },
      lerpDouble: function(value, min, max, outMin, outMax) {
        if (typeof value !== "number")
          return value.$le();
        if (value <= min)
          return outMin;
        if (value >= max)
          return outMax;
        return outMin + (value - min) / (max - min) * (outMax - outMin);
      },
      hashPoint: function(x, y, seed) {
        var t1 = new K.hashPoint_hashInt();
        return J.$and$bn(t1.call$1(J.$add$ansx(t1.call$1(J.$add$ansx(t1.call$1(0), x)), y)), 4294967295);
      },
      hashPoint_hashInt: function hashPoint_hashInt() {
      },
      HeroSave$load: function($name, race, heroClass, _inventory, _equipment, _home, _crucible, shops, experience, skills, _lore, gold, maxDepth) {
        var t1;
        O.Inventory$(C.ItemLocation_wMy, 24, null);
        E.Equipment$();
        O.Inventory$(C.ItemLocation_ukJ, 26, null);
        O.Inventory$(C.ItemLocation_vOz, 8, null);
        t1 = new K.HeroSave($name, race, heroClass, _inventory, _equipment, _home, _crucible, shops, experience, skills, gold, maxDepth, _lore, new D.Strength(), new D.Agility(), new D.Fortitude(), new D.Intellect(), new D.Will());
        t1._bindStats$0();
        return t1;
      },
      HeroSave: function HeroSave(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17) {
        var _ = this;
        _.name = t0;
        _.race = t1;
        _.heroClass = t2;
        _._inventory = t3;
        _._equipment = t4;
        _._home = t5;
        _._crucible = t6;
        _.shops = t7;
        _.experience = t8;
        _.skills = t9;
        _.gold = t10;
        _.maxDepth = t11;
        _._lore = t12;
        _.strength = t13;
        _.agility = t14;
        _.fortitude = t15;
        _.intellect = t16;
        _.will = t17;
      },
      MonsterPathfinder: function MonsterPathfinder(t0, t1, t2, t3) {
        var _ = this;
        _._monster_pathfinder$_monster = t0;
        _._nearest = null;
        _.stage = t1;
        _.start = t2;
        _.end = t3;
      },
      addEffects: function(effects, $event) {
        var t1, char, t2, t3, i, theta, radius, numParticles, t4, line, color;
        H.assertSubtype(effects, "$isList", [K.Effect], "$asList");
        switch ($event.type) {
          case C.EventType_pause:
            break;
          case C.EventType_bolt:
            t1 = $event.element;
            if (t1 == $.$get$Element_none()) {
              char = C.Map_gofLp.$index(0, $event.dir);
              C.JSArray_methods.add$1(effects, new K.FrameEffect($event.pos, char, C.Color_189_144_108, 2));
            } else
              C.JSArray_methods.add$1(effects, new K.ElementEffect($event.pos, $.$get$_elementSequences().$index(0, t1)));
            break;
          case C.EventType_cone:
            t1 = $event.pos;
            t2 = $event.element;
            C.JSArray_methods.add$1(effects, new K.ElementEffect(t1, $.$get$_elementSequences().$index(0, t2)));
            break;
          case C.EventType_toss:
            C.JSArray_methods.add$1(effects, new K.ItemEffect($event.pos, H.interceptedTypeCast($event.other, "$isItem")));
            break;
          case C.EventType_hit:
            t1 = $event.actor;
            t2 = $event.element;
            t3 = H.intTypeCast($event.other);
            if (typeof t3 !== "number")
              return t3.$div();
            C.JSArray_methods.add$1(effects, new K.DamageEffect(t1, t2, C.JSNumber_methods.ceil$0(Math.sqrt(t3 / 5))));
            break;
          case C.EventType_die:
            for (i = 0; i < 10; ++i) {
              t1 = $event.actor._pos;
              t1 = new K.ParticleEffect(t1.x, t1.y, C.Color_204_35_57);
              t2 = $.$get$rng();
              theta = t2._random.nextInt$1(628) / 100;
              radius = (t2._random.nextInt$1(10) + 30) / 100;
              t1.h = Math.cos(theta) * radius;
              t1.v = Math.sin(theta) * radius;
              t1.life = t2._random.nextInt$1(8) + 7;
              C.JSArray_methods.add$1(effects, t1);
            }
            break;
          case C.EventType_heal:
            t1 = $event.actor._pos;
            C.JSArray_methods.add$1(effects, new K.HealEffect(t1.x, t1.y));
            break;
          case C.EventType_detect:
            C.JSArray_methods.add$1(effects, new K.DetectEffect($event.pos));
            break;
          case C.EventType_map:
            t1 = $event.pos;
            t2 = $.$get$rng().range$2(10, 20);
            t1 = new K.MapEffect(t2, t1);
            t1.life = t2;
            C.JSArray_methods.add$1(effects, t1);
            break;
          case C.EventType_teleport:
            t1 = $event.actor;
            t2 = t1._pos;
            t3 = $event.pos;
            numParticles = t2.$sub(0, t3).get$kingLength() * 2;
            for (i = 0; i < numParticles; ++i) {
              t2 = new K.TeleportEffect(t1._pos);
              t2.x = t3.x;
              t2.y = t3.y;
              t4 = $.$get$rng();
              theta = t4._random.nextInt$1(628) / 100;
              radius = (t4._random.nextInt$1(70) + 10) / 100;
              t2.h = Math.cos(theta) * radius;
              t2.v = Math.sin(theta) * radius;
              C.JSArray_methods.add$1(effects, t2);
            }
            break;
          case C.EventType_spawn:
            C.JSArray_methods.add$1(effects, new K.FrameEffect($event.actor._pos, "*", C.Color_226_223_240, 4));
            break;
          case C.EventType_polymorph:
            C.JSArray_methods.add$1(effects, new K.FrameEffect($event.actor._pos, "*", C.Color_226_223_240, 4));
            break;
          case C.EventType_howl:
            C.JSArray_methods.add$1(effects, new K.HowlEffect($event.actor));
            break;
          case C.EventType_awaken:
            C.JSArray_methods.add$1(effects, new K.BlinkEffect($event.actor, L.Glyph$("!", C.Color_226_223_240, null)));
            break;
          case C.EventType_frighten:
            C.JSArray_methods.add$1(effects, new K.BlinkEffect($event.actor, L.Glyph$("!", C.Color_222_156_33, null)));
            break;
          case C.EventType_wind:
            break;
          case C.EventType_knockBack:
            C.JSArray_methods.add$1(effects, new K.FrameEffect($event.pos, "*", C.Color_255_238_168, 4));
            break;
          case C.EventType_slash:
          case C.EventType_stab:
            line = $.$get$_directionLines().$index(0, $event.dir);
            t1 = $event.other;
            color = t1 != null ? H.interceptedTypeCast(t1, "$isGlyph").fore : C.Color_226_223_240;
            C.JSArray_methods.add$1(effects, new K.FrameEffect($event.pos, line, color, 4));
            break;
          case C.EventType_gold:
            t1 = $event.pos;
            t2 = H.interceptedTypeCast($event.other, "$isItem");
            C.JSArray_methods.add$1(effects, new K.TreasureEffect(t1.x, t1.y, t2));
            break;
          case C.EventType_openBarrel:
            C.JSArray_methods.add$1(effects, new K.FrameEffect($event.pos, "*", C.Color_189_144_108, 4));
            break;
        }
      },
      _glyphs: function(chars, colors) {
        var results, t1, t2, t3, _i, color;
        H.assertSubtype(colors, "$isList", [L.Color], "$asList");
        results = H.setRuntimeTypeInfo([], [L.Glyph]);
        for (t1 = new H.CodeUnits(chars), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [P.int]); t1.moveNext$0();) {
          t2 = t1._current;
          for (t3 = colors.length, _i = 0; _i < colors.length; colors.length === t3 || (0, H.throwConcurrentModificationError)(colors), ++_i) {
            color = colors[_i];
            C.JSArray_methods.add$1(results, new L.Glyph(t2, color, C.Color_0_0_0));
          }
        }
        return results;
      },
      Effect: function Effect() {
      },
      ElementEffect: function ElementEffect(t0, t1) {
        this._effect$_pos = t0;
        this._sequence = t1;
        this._age = 0;
      },
      FrameEffect: function FrameEffect(t0, t1, t2, t3) {
        var _ = this;
        _.pos = t0;
        _.char = t1;
        _.color = t2;
        _.life = t3;
      },
      ItemEffect: function ItemEffect(t0, t1) {
        this.pos = t0;
        this.item = t1;
        this._life = 2;
      },
      DamageEffect: function DamageEffect(t0, t1, t2) {
        var _ = this;
        _.actor = t0;
        _.element = t1;
        _._blinks = t2;
        _._effect$_frame = 0;
      },
      ParticleEffect: function ParticleEffect(t0, t1, t2) {
        var _ = this;
        _.x = t0;
        _.y = t1;
        _.life = _.v = _.h = null;
        _.color = t2;
      },
      TeleportEffect: function TeleportEffect(t0) {
        var _ = this;
        _.v = _.h = _.y = _.x = null;
        _.age = 0;
        _.target = t0;
      },
      HealEffect: function HealEffect(t0, t1) {
        this.x = t0;
        this.y = t1;
        this.frame = 0;
      },
      DetectEffect: function DetectEffect(t0) {
        this.pos = t0;
        this.life = 20;
      },
      MapEffect: function MapEffect(t0, t1) {
        this._maxLife = t0;
        this.pos = t1;
        this.life = null;
      },
      TreasureEffect: function TreasureEffect(t0, t1, t2) {
        var _ = this;
        _._effect$_x = t0;
        _._effect$_y = t1;
        _._item = t2;
        _._life = 8;
      },
      HowlEffect: function HowlEffect(t0) {
        this._effect$_actor = t0;
        this._age = 0;
      },
      BlinkEffect: function BlinkEffect(t0, t1) {
        this._effect$_actor = t0;
        this._glyph = t1;
        this._age = 0;
      },
      Terminal: function Terminal() {
      },
      RenderableTerminal: function RenderableTerminal() {
      }
    },
    V = {Action: function Action() {
    }, ActionResult: function ActionResult(t0, t1, t2) {
      this.alternative = t0;
      this.succeeded = t1;
      this.done = t2;
    }, FocusAction: function FocusAction(t0, t1) {
      var _ = this;
      _._action$_focus = t0;
      _._action = t1;
      _._consumesEnergy = _._action$_game = _._action$_pos = _._actor = null;
    }, GeneratorActionMixin: function GeneratorActionMixin() {
    }, GeneratorActionMixin_wait_closure: function GeneratorActionMixin_wait_closure() {
    },
      Lore$from: function(_seenBreeds, _slainBreeds, _foundItems, _foundAffixes, _usedItems) {
        return new V.Lore(_seenBreeds, _slainBreeds, _foundItems, _foundAffixes, _usedItems);
      },
      Lore: function Lore(t0, t1, t2, t3, t4) {
        var _ = this;
        _._seenBreeds = t0;
        _._slainBreeds = t1;
        _._foundItems = t2;
        _._foundAffixes = t3;
        _._usedItems = t4;
      },
      Lore_allSlain_closure: function Lore_allSlain_closure() {
      },
      Lore_seeBreed_closure: function Lore_seeBreed_closure() {
      },
      Lore_slay_closure: function Lore_slay_closure() {
      },
      Lore_findItem_closure: function Lore_findItem_closure() {
      },
      Lore_findItem_findAffix: function Lore_findItem_findAffix(t0) {
        this.$this = t0;
      },
      Lore_findItem_findAffix_closure: function Lore_findItem_findAffix_closure() {
      },
      Lore_useItem_closure: function Lore_useItem_closure() {
      },
      _class: function($name, description, startingItems, masteries, spells) {
        var proficiencies, t1, t2, _i, skill, t3, proficiency;
        proficiencies = P.LinkedHashMap_LinkedHashMap$_empty(M.Skill, P.double);
        for (t1 = $.$get$Skills_all(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          skill = t1[_i];
          t3 = J.getInterceptor$(skill);
          proficiency = !!t3.$isMasteryDiscipline ? masteries : 1;
          proficiencies.$indexSet(0, skill, !!t3.$isSpell ? proficiency * spells : proficiency);
        }
        return new T.HeroClass($name, description, proficiencies, startingItems);
      }
    };
  var holders = [C, H, J, P, W, T, R, O, E, X, G, N, U, F, Q, L, S, Y, A, B, D, M, Z, K, V];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1: function(receiver, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $and: function(receiver, other) {
      return H.checkBool(other) && receiver;
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    noSuchMethod$1: function(receiver, invocation) {
      return this.super$Interceptor$noSuchMethod(receiver, H.interceptedTypeCheck(invocation, "$isInvocation"));
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver.splice(index, 1)[0];
    },
    removeLast$0: function(receiver) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    _removeWhere$2: function(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!test.call$1(element))
          retained.push(element);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    where$1: function(receiver, f) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.WhereIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    join$1: function(receiver, separator) {
      var list, i;
      list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(receiver, 0)]});
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    firstWhere$2$orElse: function(receiver, test, orElse) {
      var end, i, element;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (test.call$1(element))
          return element;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      throw H.wrapException(H.IterableElementError_noElement());
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    sublist$2: function(receiver, start, end) {
      var t1 = receiver.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$single: function(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(receiver, 0);
        return receiver[0];
      }
      if (t1 === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      throw H.wrapException(H.IterableElementError_tooMany());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, t2, i;
      t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("setRange"));
      P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      H.assertSubtype(iterable, "$isList", [t1], "$asList");
      t1 = J.getInterceptor$asx(iterable);
      t2 = t1.get$length(iterable);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (skipCount + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(iterable, skipCount + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(iterable, skipCount + i);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    fillRange$3: function(receiver, start, end, fillValue) {
      var i;
      H.assertSubtypeOfRuntimeType(fillValue, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("fill range"));
      P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
      for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    any$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (test.call$1(receiver[i]))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare, t1);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    shuffle$1: function(receiver, random) {
      var $length, pos, t1, tmp;
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("shuffle"));
      if (random == null)
        random = C.C__JSRandom;
      $length = receiver.length;
      for (; $length > 1;) {
        pos = random.nextInt$1($length);
        --$length;
        t1 = receiver.length;
        if ($length >= t1)
          return H.ioore(receiver, $length);
        tmp = receiver[$length];
        if (pos < 0 || pos >= t1)
          return H.ioore(receiver, pos);
        this.$indexSet(receiver, $length, receiver[pos]);
        this.$indexSet(receiver, pos, tmp);
      }
    },
    indexOf$2: function(receiver, element, start) {
      var i;
      if (start >= receiver.length)
        return -1;
      for (i = start; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element))
          return i;
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1 = H.setRuntimeTypeInfo(receiver.slice(0), [H.getTypeArgumentByIndex(receiver, 0)]);
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, 0, [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$value(newLength, "newLength", null));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $add: function(receiver, other) {
      var t1, totalLength;
      t1 = [H.getTypeArgumentByIndex(receiver, 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      totalLength = C.JSInt_methods.$add(receiver.length, other.get$length(other));
      t1 = H.setRuntimeTypeInfo([], t1);
      this.set$length(t1, totalLength);
      this.setRange$3(t1, 0, receiver.length, receiver);
      this.setRange$3(t1, receiver.length, totalLength, other);
      return t1;
    },
    indexWhere$2: function(receiver, test, start) {
      var i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      if (start >= receiver.length)
        return -1;
      for (i = start; i < receiver.length; ++i)
        if (test.call$1(receiver[i]))
          return i;
      return -1;
    },
    indexWhere$1: function($receiver, test) {
      return this.indexWhere$2($receiver, test, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this.__interceptors$_current;
    },
    moveNext$0: function() {
      var t1, $length, t2;
      t1 = this.__interceptors$_iterable;
      $length = t1.length;
      if (this.__interceptors$_length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = this.__interceptors$_index;
      if (t2 >= $length) {
        this.set$__interceptors$_current(null);
        return false;
      }
      this.set$__interceptors$_current(t1[t2]);
      ++this.__interceptors$_index;
      return true;
    },
    set$__interceptors$_current: function(_current) {
      this.__interceptors$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (typeof upperLimit !== "number")
        throw H.wrapException(H.argumentErrorValue(upperLimit));
      if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toStringAsFixed$1: function(receiver, fractionDigits) {
      var result;
      if (fractionDigits > 20)
        throw H.wrapException(P.RangeError$range(fractionDigits, 0, 20, "fractionDigits", null));
      result = receiver.toFixed(fractionDigits);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var intValue, absolute, floorLog2, factor, scaled;
      intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver + other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      return (receiver & other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver > other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver >= other;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$sign: function(receiver) {
      var t1;
      if (receiver > 0)
        t1 = 1;
      else
        t1 = receiver < 0 ? -1 : receiver;
      return t1;
    },
    $isint: 1
  };
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, i;
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return;
      for (i = 0; i < t1; ++i)
        if (this._codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return;
      return new H.StringMatch(start, string, receiver);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    split$1: function(receiver, pattern) {
      var t1 = H.setRuntimeTypeInfo(receiver.split(pattern), [P.String]);
      return t1;
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2: function(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padLeft$1: function($receiver, width) {
      return this.padLeft$2($receiver, width, " ");
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1, t2, i;
      if (pattern == null)
        H.throwExpression(H.argumentErrorValue(pattern));
      if (start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern === "string")
        return receiver.indexOf(pattern, start);
      for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
        if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1,
    $isString: 1
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return this._string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this._string, H.intTypeCheck(i));
    },
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    }
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    join$1: function(_, separator) {
      var $length, first, t1, i;
      $length = this.get$length(this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(this.elementAt$1(0, 0));
        if ($length != this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = first;
        i = 1;
        for (; i < $length; ++i) {
          t1 = t1 + separator + H.S(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        t1 = "";
        for (; i < $length; ++i) {
          t1 += H.S(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "ListIterable", 0);
      return new H.MappedListIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    toList$1$growable: function(_, growable) {
      var result, i, t1;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(this));
      i = 0;
      while (true) {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, this.elementAt$1(0, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    get$_endIndex: function() {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || t2 >= $length)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var t1, realIndex;
      t1 = this.get$_startIndex();
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof index !== "number")
        return H.iae(index);
      realIndex = t1 + index;
      if (index >= 0) {
        t1 = this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, this, "index", null, null));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    toList$1$growable: function(_, growable) {
      var start, t1, t2, end, end0, t3, $length, result, i;
      start = this.__internal$_start;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      end = t2.get$length(t1);
      end0 = this._endOrLength;
      if (end0 != null) {
        if (typeof end !== "number")
          return H.iae(end);
        t3 = end0 < end;
      } else
        t3 = false;
      if (t3)
        end = end0;
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length < 0)
        $length = 0;
      t3 = new Array($length);
      t3.fixed$length = Array;
      result = H.setRuntimeTypeInfo(t3, this.$ti);
      for (i = 0; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return t3.$lt();
        if (t3 < end)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this.__internal$_length != $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        this.set$_current(null);
        return false;
      }
      this.set$_current(t2.elementAt$1(t1, t3));
      ++this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      return new H.MappedIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._iterable, index));
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this.set$_current(this._f.call$1(t1.get$current()));
        return true;
      }
      this.set$_current(null);
      return false;
    },
    get$current: function() {
      return this._current;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (t2.call$1(t1.get$current()))
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.TakeIterable.prototype = {
    get$iterator: function(_) {
      return new H.TakeIterator(J.get$iterator$ax(this._iterable), this._takeCount, this.$ti);
    }
  };
  H.EfficientLengthTakeIterable.prototype = {
    get$length: function(_) {
      var iterableLength, t1;
      iterableLength = J.get$length$asx(this._iterable);
      t1 = this._takeCount;
      if (typeof iterableLength !== "number")
        return iterableLength.$gt();
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  H.TakeIterator.prototype = {
    moveNext$0: function() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current: function() {
      if (this._remaining < 0)
        return;
      return this._iterator.get$current();
    }
  };
  H.TakeWhileIterable.prototype = {
    get$iterator: function(_) {
      return new H.TakeWhileIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
    }
  };
  H.TakeWhileIterator.prototype = {
    moveNext$0: function() {
      if (this._isFinished)
        return false;
      var t1 = this._iterator;
      if (!t1.moveNext$0() || !this._f.call$1(t1.get$current())) {
        this._isFinished = true;
        return false;
      }
      return true;
    },
    get$current: function() {
      if (this._isFinished)
        return;
      return this._iterator.get$current();
    }
  };
  H.SkipIterable.prototype = {
    get$iterator: function(_) {
      return new H.SkipIterator(J.get$iterator$ax(this._iterable), this._skipCount, this.$ti);
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var t1, $length;
      t1 = J.get$length$asx(this._iterable);
      if (typeof t1 !== "number")
        return t1.$sub();
      $length = t1 - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    moveNext$0: function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1, t2, t3;
      t1 = this._source;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.get$length(t1);
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof index !== "number")
        return H.iae(index);
      return t2.elementAt$1(t1, t3 - 1 - index);
    }
  };
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 536870911 & 664597 * J.get$hashCode$(this.__internal$_name);
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this.__internal$_name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(val, H.getTypeArgumentByIndex(this, 1));
      return H.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this._length;
    },
    containsKey$1: function(_, key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(0, key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[H.stringTypeCheck(key)];
    },
    forEach$1: function(_, f) {
      var t1, keys, t2, i, key;
      t1 = H.getTypeArgumentByIndex(this, 1);
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), t1]});
      keys = this._keys;
      for (t2 = keys.length, i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, H.assertSubtypeOfRuntimeType(this._fetch$1(key), t1));
      }
    },
    get$keys: function(_) {
      return new H._ConstantMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    }
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this._map._keys;
      return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: function(_) {
      return this._map._keys.length;
    }
  };
  H.GeneralConstantMap.prototype = {
    _getMap$0: function() {
      var backingMap = this.$map;
      if (backingMap == null) {
        backingMap = new H.JsLinkedHashMap(this.$ti);
        H.fillLiteralMap(this._jsData, backingMap);
        this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1: function(_, key) {
      return this._getMap$0().containsKey$1(0, key);
    },
    $index: function(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1: function(_, f) {
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
      this._getMap$0().forEach$1(0, f);
    },
    get$keys: function(_) {
      var t1 = this._getMap$0();
      return t1.get$keys(t1);
    },
    get$length: function(_) {
      var t1 = this._getMap$0();
      return t1.get$length(t1);
    }
  };
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index;
      if (this._kind === 1)
        return C.List_empty2;
      t1 = this._arguments;
      argumentCount = t1.length - this._namedArgumentNames.length - this._typeArgumentCount;
      if (argumentCount === 0)
        return C.List_empty2;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, t3, map, i, t4, t5;
      if (this._kind !== 0)
        return C.Map_empty;
      t1 = this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return C.Map_empty;
      t3 = P.Symbol0;
      map = new H.JsLinkedHashMap([t3, null]);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t4 = t1[i];
        t5 = namedArgumentsStartIndex + i;
        if (t5 < 0 || t5 >= t2.length)
          return H.ioore(t2, t5);
        map.$indexSet(0, new H.Symbol(t4), t2[t5]);
      }
      return new H.ConstantMapView(map, [t3, null]);
    },
    $isInvocation: 1
  };
  H.ReflectionInfo.prototype = {};
  H.Primitives_initTicker_closure.prototype = {
    call$0: function() {
      return C.JSNumber_methods.floor$0(1000 * this.performance.now());
    },
    $signature: 4
  };
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1;
      H.stringTypeCheck($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + H.S($name);
      C.JSArray_methods.add$1(this.namedArgumentList, $name);
      C.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 5
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: method not found: '" + t1 + "' (" + H.S(this._message) + ")";
      return "NoSuchMethodError: method not found: '" + t1 + "' on '" + t2 + "' (" + H.S(this._message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 1
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this.__js_helper$_name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(receiver) + "'");
    }
  };
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this._length;
    },
    get$isEmpty: function(_) {
      return this._length === 0;
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$keys: function(_) {
      return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(this.get$keys(this), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, nums;
      if (typeof key === "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return this._containsTableEntry$2(strings, key);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return this._containsTableEntry$2(nums, key);
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", this.$ti, "$asMap").forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, t1, nums;
      if (typeof key === "string") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      if (typeof key === "string") {
        strings = this._strings;
        if (strings == null) {
          strings = this._newHashTable$0();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = this._newHashTable$0();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      rest = this._rest;
      if (rest == null) {
        rest = this._newHashTable$0();
        this._rest = rest;
      }
      hash = this.internalComputeHashCode$1(key);
      bucket = this._getTableBucket$2(rest, hash);
      if (bucket == null)
        this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
      else {
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      var value;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(this, 1)});
      if (this.containsKey$1(0, key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var t1 = this.internalRemove$1(key);
      return t1;
    },
    internalRemove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.hashMapCellValue;
    },
    clear$0: function(_) {
      if (this._length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._length = 0;
        this._modified$0();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _modified$0: function() {
      this._modifications = this._modifications + 1 & 67108863;
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last._next = cell;
        this._last = cell;
      }
      ++this._length;
      this._modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell._previous;
      next = cell._next;
      if (previous == null)
        this._first = next;
      else
        previous._next = next;
      if (next == null)
        this._last = previous;
      else
        next._previous = previous;
      --this._length;
      this._modified$0();
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var table = Object.create(null);
      this._setTableEntry$3(table, "<non-identifier-key>", table);
      this._deleteTableEntry$2(table, "<non-identifier-key>");
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.JsLinkedHashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      t1.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map._length;
    },
    get$isEmpty: function(_) {
      return this._map._length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti);
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(0, element);
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this.set$__js_helper$_current(null);
          return false;
        } else {
          this.set$__js_helper$_current(t1.hashMapCellKey);
          this._cell = this._cell._next;
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 1
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 61
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 109
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/";
    },
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    firstMatch$1: function(string) {
      var m;
      if (typeof string !== "string")
        H.throwExpression(H.argumentErrorValue(string));
      m = this._nativeRegExp.exec(string);
      if (m == null)
        return;
      return new H._MatchImplementation(this, m);
    },
    $isPattern: 1
  };
  H._MatchImplementation.prototype = {
    $index: function(_, index) {
      return C.JSArray_methods.$index(this._match, H.intTypeCheck(index));
    }
  };
  H.StringMatch.prototype = {
    $index: function(_, g) {
      H.intTypeCheck(g);
      if (g !== 0)
        H.throwExpression(P.RangeError$value(g, null, null));
      return this.pattern;
    }
  };
  H.NativeTypedData.prototype = {$isTypedData: 1};
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.doubleTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeInt16List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt32List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint16List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8ClampedList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1, f;
      t1 = this._box_0;
      f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 26
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 84
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 2
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 2
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._handle = null;
      t1._tick = 1;
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 6
  };
  P._IterationMarker.prototype = {
    toString$0: function(_) {
      return "IterationMarker(" + this.state + ", " + H.S(this.value) + ")";
    }
  };
  P._SyncStarIterator.prototype = {
    get$current: function() {
      var t1 = this._nestedIterator;
      if (t1 == null)
        return this._async$_current;
      return H.assertSubtypeOfRuntimeType(t1.get$current(), H.getTypeArgumentByIndex(this, 0));
    },
    moveNext$0: function() {
      var t1, value, state, inner;
      for (; true;) {
        t1 = this._nestedIterator;
        if (t1 != null)
          if (t1.moveNext$0())
            return true;
          else
            this._nestedIterator = null;
        value = function(body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        }(this._body, 0, 1);
        if (value instanceof P._IterationMarker) {
          state = value.state;
          if (state === 2) {
            t1 = this._suspendedBodies;
            if (t1 == null || t1.length === 0) {
              this.set$_async$_current(null);
              return false;
            }
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            this._body = t1.pop();
            continue;
          } else {
            t1 = value.value;
            if (state === 3)
              throw t1;
            else {
              inner = J.get$iterator$ax(t1);
              if (!!inner.$is_SyncStarIterator) {
                t1 = this._suspendedBodies;
                if (t1 == null) {
                  t1 = [];
                  this._suspendedBodies = t1;
                }
                C.JSArray_methods.add$1(t1, this._body);
                this._body = inner._body;
                continue;
              } else {
                this._nestedIterator = inner;
                continue;
              }
            }
          }
        } else {
          this.set$_async$_current(value);
          return true;
        }
      }
      return false;
    },
    set$_async$_current: function(_current) {
      this._async$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P._SyncStarIterable.prototype = {
    get$iterator: function(_) {
      return new P._SyncStarIterator(this._outerHelper(), this.$ti);
    }
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if (this.state !== 6)
        return true;
      return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback, t1, t2, t3;
      errorCallback = this.errorCallback;
      t1 = P.Object;
      t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)};
      t3 = this.result._zone;
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var t1, currentZone;
      t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        currentZone.toString;
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      return this._thenNoZoneRegistration$1$2(f, onError, $R);
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenNoZoneRegistration$1$2: function(f, onError, $E) {
      var t1, result, t2;
      t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $E}, args: [t1]});
      result = new P._Future(0, $.Zone__current, [$E]);
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $E]));
      return result;
    },
    _addListener$1: function(listener) {
      var t1, source;
      t1 = this._state;
      if (t1 <= 1) {
        listener._nextListener = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
        this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          this._state = t1;
          this._resultOrListeners = source._resultOrListeners;
        }
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__addListener_closure(this, listener), {func: 1, ret: -1}));
      }
    },
    _prependListeners$1: function(listeners) {
      var _box_0, t1, existingListeners, cursor, cursor0, source;
      _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = this._state;
      if (t1 <= 1) {
        existingListeners = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
        this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (cursor = listeners; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          this._state = t1;
          this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = this._reverseListeners$1(listeners);
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, this), {func: 1, ret: -1}));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, t2, listeners;
      t1 = H.getTypeArgumentByIndex(this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        H.assertSubtypeOfRuntimeType(value, t1);
        this._state = 4;
        this._resultOrListeners = value;
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeError$2: function(error, stackTrace) {
      var listeners;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = this._removeListeners$0();
      this._state = 8;
      this._resultOrListeners = new P.AsyncError(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 2
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 2
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 26
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 62
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 2
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var completeResult, e, s, t1, exception, t2, originalSource;
      completeResult = null;
      try {
        t1 = this.listener;
        completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (this.hasError) {
          t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError").error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this._box_0;
        if (t1)
          t2.listenerValueOrError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
        else
          t2.listenerValueOrError = new P.AsyncError(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && completeResult._state >= 4) {
          if (completeResult._state === 8) {
            t1 = this._box_0;
            t1.listenerValueOrError = H.interceptedTypeCheck(completeResult._resultOrListeners, "$isAsyncError");
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = this._box_1.source;
        t1 = this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    $signature: 6
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 70
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, exception;
      try {
        t1 = this.listener;
        t1.toString;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.assertSubtypeOfRuntimeType(this.sourceResult, t2);
        t4 = H.getTypeArgumentByIndex(t1, 1);
        this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = new P.AsyncError(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 6
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4;
      try {
        asyncError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
        t1 = this.listener;
        if (t1.matchesErrorTest$1(asyncError) && t1.errorCallback != null) {
          t2 = this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
        t2 = t1.error;
        t3 = e;
        t4 = this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = new P.AsyncError(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 6
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$length: function(_) {
      var t1, future, t2, t3;
      t1 = {};
      future = new P._Future(0, $.Zone__current, [P.int]);
      t1.count = 0;
      t2 = H.getTypeArgumentByIndex(this, 0);
      t3 = H.functionTypeCheck(new P.Stream_length_closure(t1, this), {func: 1, ret: -1, args: [t2]});
      H.functionTypeCheck(new P.Stream_length_closure0(t1, future), {func: 1, ret: -1});
      W._EventStreamSubscription$(this._target, this._eventType, t3, false, t2);
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H.assertSubtypeOfRuntimeType(_, H.getTypeArgumentByIndex(this.$this, 0));
      ++this._box_0.count;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 2
  };
  P.StreamSubscription.prototype = {};
  P.StreamTransformerBase.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var t1, t2, error;
      t1 = this._box_0;
      t2 = t1.error;
      if (t2 == null) {
        error = new P.NullThrownError();
        t1.error = error;
        t1 = error;
      } else
        t1 = t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      error = H.wrapException(t1);
      error.stack = t2.toString$0(0);
      throw error;
    },
    $signature: 2
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(null, null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(null, null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    $index: function(_, key) {
      return;
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 6
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._LinkedHashSet.prototype = {
    _newSet$0: function() {
      return new P._LinkedHashSet(this.$ti);
    },
    get$iterator: function(_) {
      var t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, this.$ti);
      t1._collection$_cell = this._collection$_first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
      } else if (typeof object === "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return H.interceptedTypeCheck(nums[object], "$is_LinkedHashSetCell") != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    get$first: function(_) {
      var t1 = this._collection$_first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(this, 0));
    },
    add$1: function(_, element) {
      var strings, nums;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null) {
          strings = P._LinkedHashSet__newHashTable();
          this._collection$_strings = strings;
        }
        return this._collection$_addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = this._collection$_nums;
        if (nums == null) {
          nums = P._LinkedHashSet__newHashTable();
          this._collection$_nums = nums;
        }
        return this._collection$_addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      rest = this._collection$_rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._collection$_rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._collection$_newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._collection$_strings, object);
      else if (typeof object === "number" && (object & 1073741823) === object)
        return this._removeHashTableEntry$2(this._collection$_nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._collection$_rest;
      if (rest == null)
        return false;
      bucket = this._getBucket$2(rest, object);
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell");
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0: function() {
      this._collection$_modifications = 1073741823 & this._collection$_modifications + 1;
    },
    _collection$_newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0)));
      if (this._collection$_first == null) {
        this._collection$_last = cell;
        this._collection$_first = cell;
      } else {
        last = this._collection$_last;
        cell._collection$_previous = last;
        last._collection$_next = cell;
        this._collection$_last = cell;
      }
      ++this._collection$_length;
      this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell._collection$_previous;
      next = cell._collection$_next;
      if (previous == null)
        this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --this._collection$_length;
      this._collection$_modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._collection$_cell;
        if (t1 == null) {
          this.set$_collection$_current(null);
          return false;
        } else {
          this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(this, 0)));
          this._collection$_cell = this._collection$_cell._collection$_next;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P.IterableMixin.prototype = {
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, true, H.getRuntimeTypeArgument(this, "IterableMixin", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var t1, it, count;
      t1 = this._items;
      it = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$first: function(_) {
      var t1, it;
      t1 = this._items;
      it = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.__interceptors$_current;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      if (index == null)
        H.throwExpression(P.ArgumentError$notNull("index"));
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
      for (t1 = this._items, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]), elementIndex = 0; t1.moveNext$0();) {
        element = t1.__interceptors$_current;
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    },
    $isIterable: 1
  };
  P.IterableBase.prototype = {};
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
    },
    $signature: 15
  };
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    where$1: function(receiver, test) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.WhereIterable(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    toList$1$growable: function(receiver, growable) {
      var result, i, t1;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
      i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, this.$index(receiver, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1;
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$add();
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    $add: function(receiver, other) {
      var t1, result, t2;
      t1 = [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      result = H.setRuntimeTypeInfo([], t1);
      t1 = this.get$length(receiver);
      t2 = other.get$length(other);
      if (typeof t1 !== "number")
        return t1.$add();
      C.JSArray_methods.set$length(result, C.JSInt_methods.$add(t1, t2));
      C.JSArray_methods.setRange$3(result, 0, this.get$length(receiver), receiver);
      C.JSArray_methods.setRange$3(result, this.get$length(receiver), result.length, other);
      return result;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t1, t2;
      t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 15
  };
  P.MapMixin.prototype = {
    forEach$1: function(receiver, action) {
      var t1, key;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1)]});
      for (t1 = J.get$iterator$ax(this.get$keys(receiver)); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, this.$index(receiver, key));
      }
    },
    get$entries: function(receiver) {
      return J.map$1$1$ax(this.get$keys(receiver), new P.MapMixin_entries_closure(receiver), [P.MapEntry, H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1)]);
    },
    containsKey$1: function(receiver, key) {
      return J.contains$1$asx(this.get$keys(receiver), key);
    },
    get$length: function(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    get$isEmpty: function(receiver) {
      return J.get$isEmpty$asx(this.get$keys(receiver));
    },
    toString$0: function(receiver) {
      return P.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  P.MapMixin_entries_closure.prototype = {
    call$1: function(key) {
      var t1, t2, t3;
      t1 = this.$this;
      t2 = J.getInterceptor$(t1);
      t3 = H.getRuntimeTypeArgumentIntercepted(t2, t1, "MapMixin", 0);
      H.assertSubtypeOfRuntimeType(key, t3);
      return new P.MapEntry(key, t2.$index(t1, key), [t3, H.getRuntimeTypeArgumentIntercepted(t2, t1, "MapMixin", 1)]);
    },
    $signature: function() {
      var t1, t2, t3;
      t1 = this.$this;
      t2 = J.getInterceptor$(t1);
      t3 = H.getRuntimeTypeArgumentIntercepted(t2, t1, "MapMixin", 0);
      return {func: 1, ret: [P.MapEntry, t3, H.getRuntimeTypeArgumentIntercepted(t2, t1, "MapMixin", 1)], args: [t3]};
    }
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet: function(_, key, value) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  P.MapView.prototype = {
    $index: function(_, key) {
      return this._collection$_map.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this._collection$_map.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(_, key) {
      return this._collection$_map.containsKey$1(0, key);
    },
    forEach$1: function(_, action) {
      this._collection$_map.forEach$1(0, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
    },
    get$isEmpty: function(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$length: function(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$keys: function(_) {
      var t1 = this._collection$_map;
      return t1.get$keys(t1);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this._collection$_map);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {};
  P.Queue.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.ListQueue.prototype = {
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, this.$ti);
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    elementAt$1: function(_, index) {
      var $length, t1, t2, t3;
      $length = this.get$length(this);
      if (typeof index !== "number")
        return H.iae(index);
      if (0 > index || index >= $length)
        H.throwExpression(P.IndexError$(index, this, "index", null, $length));
      t1 = this._table;
      t2 = t1.length;
      t3 = (this._head + index & t2 - 1) >>> 0;
      if (t3 < 0 || t3 >= t2)
        return H.ioore(t1, t3);
      return t1[t3];
    },
    toList$1$growable: function(_, growable) {
      var t1, list, t2;
      t1 = this.$ti;
      if (growable) {
        list = H.setRuntimeTypeInfo([], t1);
        C.JSArray_methods.set$length(list, this.get$length(this));
      } else {
        t2 = new Array(this.get$length(this));
        t2.fixed$length = Array;
        list = H.setRuntimeTypeInfo(t2, t1);
      }
      this._writeToList$1(list);
      return list;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(_, value) {
      this._add$1(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0)));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++this._modificationCount;
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      result = t2[t1];
      C.JSArray_methods.$indexSet(t2, t1, null);
      this._head = (this._head + 1 & this._table.length - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      C.JSArray_methods.$indexSet(this._table, this._tail, element);
      t1 = (this._tail + 1 & this._table.length - 1) >>> 0;
      this._tail = t1;
      if (this._head === t1)
        this._grow$0();
      ++this._modificationCount;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = new Array(this._table.length * 2);
      t1.fixed$length = Array;
      newTable = H.setRuntimeTypeInfo(t1, this.$ti);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
      C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
      this._head = 0;
      this._tail = this._table.length;
      this.set$_table(newTable);
    },
    _writeToList$1: function(target) {
      var t1, t2, t3, $length, firstPartSize;
      H.assertSubtype(target, "$isList", this.$ti, "$asList");
      t1 = this._head;
      t2 = this._tail;
      t3 = this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
        C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + this._tail, this._table, 0);
        return this._tail + firstPartSize;
      }
    },
    set$_table: function(_table) {
      this._table = H.assertSubtype(_table, "$isList", this.$ti, "$asList");
    },
    $isQueue: 1
  };
  P._ListQueueIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._collection$_queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._collection$_end) {
        this.set$_collection$_current(null);
        return false;
      }
      t3 = t1._table;
      if (t2 >= t3.length)
        return H.ioore(t3, t2);
      this.set$_collection$_current(t3[t2]);
      this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
      return true;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P._SetBase.prototype = {
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable")); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i, i0;
      result = H.setRuntimeTypeInfo([], this.$ti);
      C.JSArray_methods.set$length(result, this._collection$_length);
      for (t1 = P._LinkedHashSetIterator$(this, this._collection$_modifications, H.getTypeArgumentByIndex(this, 0)), i = 0; t1.moveNext$0(); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, t1._collection$_current);
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    join$1: function(_, separator) {
      var iterator, t1;
      iterator = P._LinkedHashSetIterator$(this, this._collection$_modifications, H.getTypeArgumentByIndex(this, 0));
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += H.S(iterator._collection$_current);
        while (iterator.moveNext$0());
      } else {
        t1 = H.S(iterator._collection$_current);
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + H.S(iterator._collection$_current);
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    any$1: function(_, test) {
      var t1;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this, 0)]});
      for (t1 = P._LinkedHashSetIterator$(this, this._collection$_modifications, H.getTypeArgumentByIndex(this, 0)); t1.moveNext$0();)
        if (test.call$1(t1._collection$_current))
          return true;
      return false;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      if (index == null)
        H.throwExpression(P.ArgumentError$notNull("index"));
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
      for (t1 = P._LinkedHashSetIterator$(this, this._collection$_modifications, H.getTypeArgumentByIndex(this, 0)), elementIndex = 0; t1.moveNext$0();) {
        element = t1._collection$_current;
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var t1, result;
      t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._convert$_process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$keys: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return t1.get$keys(t1);
      }
      return new P._JsonMapKeyIterable(this);
    },
    $indexSet: function(_, key, value) {
      var processed, original;
      if (this._processed == null)
        this._data.$indexSet(0, key, value);
      else if (this.containsKey$1(0, key)) {
        processed = this._processed;
        processed[key] = value;
        original = this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1: function(_, key) {
      if (this._processed == null)
        return this._data.containsKey$1(0, key);
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1: function(_, f) {
      var keys, i, key, value;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      if (this._processed == null)
        return this._data.forEach$1(0, f);
      keys = this._computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(this._original[key]);
          this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== this._data)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var keys = H.listTypeCheck(this._data);
      if (keys == null) {
        keys = H.setRuntimeTypeInfo(Object.keys(this._original), [P.String]);
        this._data = keys;
      }
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key;
      if (this._processed == null)
        return this._data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = this._computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, this.$index(0, key));
      }
      if (t1 === 0)
        C.JSArray_methods.add$1(keys, null);
      else
        C.JSArray_methods.set$length(keys, 0);
      this._processed = null;
      this._original = null;
      this._data = result;
      return result;
    },
    _convert$_process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      var t1 = this._convert$_parent;
      return t1.get$length(t1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._convert$_parent;
      return t1._processed == null ? t1.get$keys(t1).elementAt$1(0, index) : C.JSArray_methods.$index(t1._computeKeys$0(), index);
    },
    get$iterator: function(_) {
      var t1 = this._convert$_parent;
      if (t1._processed == null) {
        t1 = t1.get$keys(t1);
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      }
      return t1;
    },
    contains$1: function(_, key) {
      return this._convert$_parent.containsKey$1(0, key);
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListIterable: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  P.Codec.prototype = {};
  P.Converter.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$2$reviver: function(_, source, reviver) {
      var t1 = P._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    decode$1: function($receiver, source) {
      return this.decode$2$reviver($receiver, source, null);
    },
    encode$2$toEncodable: function(value, toEncodable) {
      var t1 = this.get$encoder();
      t1 = P._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      return t1;
    },
    encode$1: function(value) {
      return this.encode$2$toEncodable(value, null);
    },
    get$encoder: function() {
      return C.JsonEncoder_null_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    },
    $asCodec: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonEncoder.prototype = {
    $asConverter: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonDecoder.prototype = {
    $asConverter: function() {
      return [P.String, P.Object];
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var $length, t1, t2, offset, i, charCode, t3;
      $length = s.length;
      for (t1 = J.getInterceptor$s(s), t2 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          switch (charCode) {
            case 8:
              t2._contents += H.Primitives_stringFromCharCode(98);
              break;
            case 9:
              t2._contents += H.Primitives_stringFromCharCode(116);
              break;
            case 10:
              t2._contents += H.Primitives_stringFromCharCode(110);
              break;
            case 12:
              t2._contents += H.Primitives_stringFromCharCode(102);
              break;
            case 13:
              t2._contents += H.Primitives_stringFromCharCode(114);
              break;
            default:
              t2._contents += H.Primitives_stringFromCharCode(117);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t3 = charCode >>> 4 & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t3 = charCode & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          t2._contents += H.Primitives_stringFromCharCode(charCode);
        }
      }
      if (offset === 0)
        t2._contents += H.S(s);
      else if (offset < $length)
        t2._contents += t1.substring$2(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception;
      if (this.writeJsonValue$1(object))
        return;
      this._checkCycle$1(object);
      try {
        customJson = this._toEncodable.call$1(object);
        if (!this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success;
      if (typeof object === "number") {
        if (!isFinite(object))
          return false;
        this._sink._contents += C.JSNumber_methods.toString$0(object);
        return true;
      } else if (object === true) {
        this._sink._contents += "true";
        return true;
      } else if (object === false) {
        this._sink._contents += "false";
        return true;
      } else if (object == null) {
        this._sink._contents += "null";
        return true;
      } else if (typeof object === "string") {
        t1 = this._sink;
        t1._contents += '"';
        this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else {
        t1 = J.getInterceptor$(object);
        if (!!t1.$isList) {
          this._checkCycle$1(object);
          this.writeList$1(object);
          t1 = this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return true;
        } else if (!!t1.$isMap) {
          this._checkCycle$1(object);
          success = this.writeMap$1(object);
          t1 = this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return success;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t1, t2, i, t3;
      t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$asx(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        i = 1;
        while (true) {
          t3 = t2.get$length(list);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
          ++i;
        }
      }
      t1._contents += "]";
    },
    writeMap$1: function(map) {
      var _box_0, t1, t2, keyValueList, separator, i, t3;
      _box_0 = {};
      t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        this._sink._contents += "{}";
        return true;
      }
      t2 = t1.get$length(map);
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 *= 2;
      keyValueList = new Array(t2);
      keyValueList.fixed$length = Array;
      _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t1 = this._sink;
      t1._contents += "{";
      for (separator = '"', i = 0; i < t2; i += 2, separator = ',"') {
        t1._contents += separator;
        this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        t1._contents += '":';
        t3 = i + 1;
        if (t3 >= t2)
          return H.ioore(keyValueList, t3);
        this.writeObject$1(keyValueList[t3]);
      }
      t1._contents += "}";
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 15
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      H.interceptedTypeCheck(key, "$isSymbol0");
      t1 = this.sb;
      t2 = this._box_0;
      t1._contents += t2.comma;
      t3 = t1._contents += H.S(key.__internal$_name);
      t1._contents = t3 + ": ";
      t1._contents += P.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 108
  };
  P.bool.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._core$_value === other._core$_value && true;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._core$_value, H.interceptedTypeCheck(other, "$isDateTime")._core$_value);
    },
    get$hashCode: function(_) {
      var t1 = this._core$_value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var y, m, d, h, min, sec, ms, t1;
      y = P.DateTime__fourDigits(H.Primitives_getYear(this));
      m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
      d = P.DateTime__twoDigits(H.Primitives_getDay(this));
      h = P.DateTime__twoDigits(H.Primitives_getHours(this));
      min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
      sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
      ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
      t1 = y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      return t1;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.DateTime];
    }
  };
  P.double.prototype = {};
  P.Error.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var t1, nameString, message, prefix, explanation, errorValue;
      t1 = this.name;
      nameString = t1 != null ? " (" + t1 + ")" : "";
      t1 = this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = this.get$_errorName() + nameString + message;
      if (!this._hasValue)
        return prefix;
      explanation = this.get$_errorExplanation();
      errorValue = P.Error_safeToString(this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1, explanation, t2;
      t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else if (t2 > t1)
          explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
        else
          explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
      }
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var invalidValue, t1;
      invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var _box_0, sb, t1, t2, _i, t3, t4, argument, receiverText, actualParameters;
      _box_0 = {};
      sb = new P.StringBuffer("");
      _box_0.comma = "";
      for (t1 = this._core$_arguments, t2 = t1.length, _i = 0, t3 = "", t4 = ""; _i < t2; ++_i, t4 = ", ") {
        argument = t1[_i];
        sb._contents = t3 + t4;
        t3 = sb._contents += P.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = P.Error_safeToString(this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + H.S(this._core$_memberName.__internal$_name) + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var t1, report, objectSource, source;
      t1 = this.message;
      report = "" !== t1 ? "FormatException: " + t1 : "FormatException";
      objectSource = this.source;
      if (typeof objectSource === "string") {
        source = objectSource.length > 78 ? C.JSString_methods.substring$2(objectSource, 0, 75) + "..." : objectSource;
        return report + "\n" + source;
      } else
        return report;
    }
  };
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Iterable.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    any$1: function(_, test) {
      var t1;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (test.call$1(t1.get$current()))
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, true, H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      var t1, element;
      t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (test.call$1(element))
          return element;
      }
      return orElse.call$0();
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      if (index == null)
        H.throwExpression(P.ArgumentError$notNull("index"));
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.MapEntry.prototype = {
    toString$0: function(_) {
      return "MapEntry(" + H.S(this.key) + ": " + H.S(this.value) + ")";
    }
  };
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1: function(_, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.StackTrace.prototype = {};
  P.Stopwatch.prototype = {};
  P.String.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  P.Symbol0.prototype = {};
  W.HtmlElement.prototype = {};
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isAnchorElement: 1
  };
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.BaseElement.prototype = {$isBaseElement: 1};
  W.Blob.prototype = {$isBlob: 1};
  W.BodyElement.prototype = {$isBodyElement: 1};
  W.ButtonElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.CanvasElement.prototype = {$isCanvasElement: 1,
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    }
  };
  W.CanvasRenderingContext2D.prototype = {$isCanvasRenderingContext2D: 1};
  W.CharacterData.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclaration.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclarationBase.prototype = {};
  W.DomError.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.DomException.prototype = {
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.DomRectReadOnly.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      if (!H.checkSubtype(other, "$isRectangle", [P.num], "$asRectangle"))
        return false;
      t1 = J.getInterceptor$x(other);
      return receiver.left === t1.get$left(other) && receiver.top === t1.get$top(other) && receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(receiver.width), C.JSNumber_methods.get$hashCode(receiver.height));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$left: function(receiver) {
      return receiver.left;
    },
    get$top: function(receiver) {
      return receiver.top;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W._ChildrenElementList.prototype = {
    get$isEmpty: function(_) {
      return this._html$_element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      return H.interceptedTypeCheck(J.$index$asx(this._childElements, H.intTypeCheck(index)), "$isElement0");
    },
    $indexSet: function(_, index, value) {
      this._html$_element.replaceChild(H.interceptedTypeCheck(value, "$isElement0"), J.$index$asx(this._childElements, index));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      H.interceptedTypeCheck(value, "$isElement0");
      this._html$_element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    $asEfficientLengthIterable: function() {
      return [W.Element0];
    },
    $asListMixin: function() {
      return [W.Element0];
    },
    $asIterable: function() {
      return [W.Element0];
    },
    $asList: function() {
      return [W.Element0];
    }
  };
  W.Element0.prototype = {
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
          C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document;
        t2 = t1.implementation.createHTMLDocument("");
        $.Element__parseDocument = t2;
        $.Element__parseRange = t2.createRange();
        t2 = $.Element__parseDocument.createElement("base");
        H.interceptedTypeCheck(t2, "$isBaseElement");
        t2.href = t1.baseURI;
        $.Element__parseDocument.head.appendChild(t2);
      }
      t1 = $.Element__parseDocument;
      if (t1.body == null) {
        t2 = t1.createElement("body");
        t1.body = H.interceptedTypeCheck(t2, "$isBodyElement");
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
    },
    $isElement0: 1,
    get$tagName: function(receiver) {
      return receiver.tagName;
    }
  };
  W.Element_Element$html_closure.prototype = {
    call$1: function(e) {
      return !!J.getInterceptor$(H.interceptedTypeCheck(e, "$isNode")).$isElement0;
    },
    $signature: 22
  };
  W.EmbedElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
    },
    $isEventTarget: 1
  };
  W.FieldSetElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.File.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.FormElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.HtmlCollection.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isHtmlCollection: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.IFrameElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.ImageData.prototype = {$isImageData: 1};
  W.ImageElement.prototype = {$isImageElement: 1,
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    }
  };
  W.InputElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  W.Location.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isLocation: 1
  };
  W.MapElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.MetaElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.MouseEvent.prototype = {$isMouseEvent: 1};
  W.NavigatorUserMediaError.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W._ChildNodeListLazy.prototype = {
    get$single: function(_) {
      var t1, l;
      t1 = this._this;
      l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    add$1: function(_, value) {
      this._this.appendChild(H.interceptedTypeCheck(value, "$isNode"));
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      H.assertSubtype(iterable, "$isIterable", [W.Node], "$asIterable");
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    },
    $indexSet: function(_, index, value) {
      var t1 = this._this;
      t1.replaceChild(H.interceptedTypeCheck(value, "$isNode"), C.NodeList_methods.$index(t1.childNodes, index));
    },
    get$iterator: function(_) {
      var t1 = this._this.childNodes;
      return new W.FixedSizeListIterator(t1, t1.length, -1, [H.getRuntimeTypeArgumentIntercepted(C.NodeList_methods, t1, "ImmutableListMixin", 0)]);
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      H.intTypeCheck(index);
      return C.NodeList_methods.$index(this._this.childNodes, index);
    },
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    }
  };
  W.Node.prototype = {
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return receiver;
    },
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    _replaceChild$2: function(receiver, node, child) {
      return receiver.replaceChild(node, child);
    },
    $isNode: 1
  };
  W.NodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.ObjectElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.OutputElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.OverconstrainedError.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.ParamElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.SelectElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.SharedWorkerGlobalScope.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.SlotElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.SpeechSynthesisEvent.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.Storage0.prototype = {
    containsKey$1: function(receiver, key) {
      return receiver.getItem(key) != null;
    },
    $index: function(receiver, key) {
      return receiver.getItem(H.stringTypeCheck(key));
    },
    $indexSet: function(receiver, key, value) {
      receiver.setItem(key, H.stringTypeCheck(value));
    },
    forEach$1: function(receiver, f) {
      var i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        f.call$2(key, receiver.getItem(key));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.Storage_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$isEmpty: function(receiver) {
      return receiver.key(0) == null;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W.Storage_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 112
  };
  W.TableElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      table.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(table));
      return fragment;
    }
  };
  W.TableRowElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      row.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
      return fragment;
    }
  };
  W.TableSectionElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      section.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
      return fragment;
    }
  };
  W.TemplateElement.prototype = {$isTemplateElement: 1};
  W.TextAreaElement.prototype = {
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.UIEvent.prototype = {};
  W.Window.prototype = {
    requestAnimationFrame$1: function(receiver, callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]});
      this._ensureRequestAnimationFrame$0(receiver);
      return this._requestAnimationFrame$1(receiver, W._wrapZone(callback, P.num));
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]}), 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    $isWindow: 1,
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W.WorkerGlobalScope.prototype = {$isWorkerGlobalScope: 1};
  W._Attr.prototype = {$is_Attr: 1,
    get$name: function(receiver) {
      return receiver.name;
    }
  };
  W._DomRect.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      if (!H.checkSubtype(other, "$isRectangle", [P.num], "$asRectangle"))
        return false;
      t1 = J.getInterceptor$x(other);
      return receiver.left === t1.get$left(other) && receiver.top === t1.get$top(other) && receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(receiver.width), C.JSNumber_methods.get$hashCode(receiver.height));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    }
  };
  W._NamedNodeMap.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._AttributeMap.prototype = {
    forEach$1: function(_, f) {
      var t1, t2, t3, _i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        f.call$2(key, t3.getAttribute(key));
      }
    },
    get$keys: function(_) {
      var attributes, keys, len, i, attr;
      attributes = this._html$_element.attributes;
      keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        attr = H.interceptedTypeCheck(attributes[i], "$is_Attr");
        if (attr.namespaceURI == null)
          C.JSArray_methods.add$1(keys, attr.name);
      }
      return keys;
    },
    get$isEmpty: function(_) {
      return this.get$keys(this).length === 0;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._ElementAttributeMap.prototype = {
    containsKey$1: function(_, key) {
      return this._html$_element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._html$_element.getAttribute(H.stringTypeCheck(key));
    },
    $indexSet: function(_, key, value) {
      this._html$_element.setAttribute(key, H.stringTypeCheck(value));
    },
    get$length: function(_) {
      return this.get$keys(this).length;
    }
  };
  W._EventStream.prototype = {};
  W._ElementEventStreamImpl.prototype = {};
  W._EventStreamSubscription.prototype = {
    _tryResume$0: function() {
      var t1, t2, t3;
      t1 = this._onData;
      t2 = t1 != null;
      if (t2 && this._pauseCount <= 0) {
        t3 = this._target;
        t3.toString;
        H.functionTypeCheck(t1, {func: 1, args: [W.Event]});
        if (t2)
          J._addEventListener$3$x(t3, this._eventType, t1, false);
      }
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 122
  };
  W._Html5NodeValidator.prototype = {
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, _i;
      t1 = $.$get$_Html5NodeValidator__attributeValidators();
      if (t1.get$isEmpty(t1)) {
        for (_i = 0; _i < 262; ++_i)
          t1.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
        for (_i = 0; _i < 12; ++_i)
          t1.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    allowsElement$1: function(element) {
      return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = W.Element__safeTagName(element);
      t1 = $.$get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
      if (validator == null)
        validator = t1.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return H.boolTypeCheck(validator.call$4(element, attributeName, value, this));
    },
    $isNodeValidator: 1
  };
  W.ImmutableListMixin.prototype = {
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    }
  };
  W.NodeValidatorBuilder.prototype = {
    add$1: function(_, validator) {
      C.JSArray_methods.add$1(this._validators, validator);
    },
    allowsElement$1: function(element) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: 1
  };
  W.NodeValidatorBuilder_allowsElement_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isNodeValidator").allowsElement$1(this.element);
    },
    $signature: 23
  };
  W.NodeValidatorBuilder_allowsAttribute_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isNodeValidator").allowsAttribute$3(this.element, this.attributeName, this.value);
    },
    $signature: 23
  };
  W._SimpleNodeValidator.prototype = {
    _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
      var legalAttributes, extraUriAttributes, t1;
      this.allowedElements.addAll$1(0, allowedElements);
      legalAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure());
      extraUriAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure0());
      this.allowedAttributes.addAll$1(0, legalAttributes);
      t1 = this.allowedUriAttributes;
      t1.addAll$1(0, C.List_empty0);
      t1.addAll$1(0, extraUriAttributes);
    },
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = W.Element__safeTagName(element);
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    },
    $isNodeValidator: 1
  };
  W._SimpleNodeValidator_closure.prototype = {
    call$1: function(x) {
      return !C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
    },
    $signature: 16
  };
  W._SimpleNodeValidator_closure0.prototype = {
    call$1: function(x) {
      return C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
    },
    $signature: 16
  };
  W._TemplatingNodeValidator.prototype = {
    allowsAttribute$3: function(element, attributeName, value) {
      if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    }
  };
  W._TemplatingNodeValidator_closure.prototype = {
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(H.stringTypeCheck(attr));
    },
    $signature: 3
  };
  W._SvgNodeValidator.prototype = {
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor$(element);
      if (!!t1.$isScriptElement)
        return false;
      t1 = !!t1.$isSvgElement;
      if (t1 && W.Element__safeTagName(element) === "foreignObject")
        return false;
      if (t1)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: 1
  };
  W.FixedSizeListIterator.prototype = {
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this.set$_html$_current(J.$index$asx(this._array, nextPosition));
        this._position = nextPosition;
        return true;
      }
      this.set$_html$_current(null);
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    },
    set$_html$_current: function(_current) {
      this._html$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  W.NodeValidator.prototype = {};
  W._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  W._ValidatingTreeSanitizer.prototype = {
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
    },
    _removeNode$2: function(node, $parent) {
      if ($parent == null)
        J.remove$0$ax(node);
      else
        $parent.removeChild(node);
    },
    _sanitizeUntrustedElement$2: function(element, $parent) {
      var corrupted, attrs, isAttr, corruptedTest1, elementText, elementTagName, exception, t1;
      corrupted = true;
      attrs = null;
      isAttr = null;
      try {
        attrs = J.get$attributes$x(element);
        isAttr = attrs._html$_element.getAttribute("is");
        H.interceptedTypeCheck(element, "$isElement0");
        corruptedTest1 = function(element) {
          if (!(element.attributes instanceof NamedNodeMap))
            return true;
          var childNodes = element.childNodes;
          if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
            return true;
          if (element.children)
            if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
              return true;
          var length = 0;
          if (element.children)
            length = element.children.length;
          for (var i = 0; i < length; i++) {
            var child = element.children[i];
            if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'children' || child.name == 'children')
              return true;
          }
          return false;
        }(element);
        corrupted = corruptedTest1 ? true : !(element.attributes instanceof NamedNodeMap);
      } catch (exception) {
        H.unwrapException(exception);
      }
      elementText = "element unprintable";
      try {
        elementText = J.toString$0$(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      try {
        elementTagName = W.Element__safeTagName(element);
        this._sanitizeElement$7(H.interceptedTypeCheck(element, "$isElement0"), $parent, corrupted, elementText, elementTagName, H.interceptedTypeCheck(attrs, "$isMap"), H.stringTypeCheck(isAttr));
      } catch (exception) {
        if (H.unwrapException(exception) instanceof P.ArgumentError)
          throw exception;
        else {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing corrupted element " + H.S(elementText);
          if (typeof console != "undefined")
            window.console.warn(t1);
        }
      }
    },
    _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
      var t1, keys, i, $name, t2, t3;
      if (corrupted) {
        this._removeNode$2(element, $parent);
        window;
        t1 = "Removing element due to corrupted attributes on <" + text + ">";
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (!this.validator.allowsElement$1(element)) {
        this._removeNode$2(element, $parent);
        window;
        t1 = "Removing disallowed element <" + H.S(tag) + "> from " + H.S($parent);
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (isAttr != null)
        if (!this.validator.allowsAttribute$3(element, "is", isAttr)) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
      t1 = attrs.get$keys(attrs);
      keys = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      for (i = attrs.get$keys(attrs).length - 1, t1 = attrs._html$_element; i >= 0; --i) {
        if (i >= keys.length)
          return H.ioore(keys, i);
        $name = keys[i];
        t2 = this.validator;
        t3 = J.toLowerCase$0$s($name);
        H.stringTypeCheck($name);
        if (!t2.allowsAttribute$3(element, t3, t1.getAttribute($name))) {
          window;
          t2 = "Removing disallowed attribute <" + H.S(tag) + " " + H.S($name) + '="' + H.S(t1.getAttribute($name)) + '">';
          if (typeof console != "undefined")
            window.console.warn(t2);
          if (typeof $name === "string")
            t1.removeAttribute($name);
        }
      }
      if (!!J.getInterceptor$(element).$isTemplateElement)
        this.sanitizeTree$1(element.content);
    },
    $isNodeTreeSanitizer: 1
  };
  W._ValidatingTreeSanitizer_sanitizeTree_walk.prototype = {
    call$2: function(node, $parent) {
      var child, nextChild, t1, exception, t2, t3;
      t1 = this.$this;
      switch (node.nodeType) {
        case 1:
          t1._sanitizeUntrustedElement$2(node, $parent);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          t1._removeNode$2(node, $parent);
      }
      child = node.lastChild;
      for (t1 = node == null; null != child;) {
        nextChild = null;
        try {
          nextChild = child.previousSibling;
        } catch (exception) {
          H.unwrapException(exception);
          t2 = H.interceptedTypeCheck(child, "$isNode");
          if (t1) {
            t3 = t2.parentNode;
            if (t3 != null)
              t3.removeChild(t2);
          } else
            node.removeChild(t2);
          child = null;
          nextChild = node.lastChild;
        }
        if (child != null)
          this.call$2(child, node);
        child = H.interceptedTypeCheck(nextChild, "$isNode");
      }
    },
    $signature: 80
  };
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._Storage_Interceptor_MapMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P.FilteredElementList.prototype = {
    get$_html_common$_iterable: function() {
      var t1, t2, t3;
      t1 = this._childNodes;
      t2 = H.getRuntimeTypeArgument(t1, "ListMixin", 0);
      t3 = W.Element0;
      return new H.MappedIterable(new H.WhereIterable(t1, H.functionTypeCheck(new P.FilteredElementList__iterable_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), H.functionTypeCheck(new P.FilteredElementList__iterable_closure0(), {func: 1, ret: t3, args: [t2]}), [t2, t3]);
    },
    $indexSet: function(_, index, value) {
      var t1;
      H.interceptedTypeCheck(value, "$isElement0");
      t1 = this.get$_html_common$_iterable();
      J.replaceWith$1$x(t1._f.call$1(J.elementAt$1$ax(t1._iterable, index)), value);
    },
    set$length: function(_, newLength) {
      var len = J.get$length$asx(this.get$_html_common$_iterable()._iterable);
      if (typeof len !== "number")
        return H.iae(len);
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(H.interceptedTypeCheck(value, "$isElement0"));
    },
    removeRange$2: function(_, start, end) {
      var t1 = this.get$_html_common$_iterable();
      t1 = H.SkipIterable_SkipIterable(t1, start, H.getRuntimeTypeArgument(t1, "Iterable", 0));
      if (typeof end !== "number")
        return end.$sub();
      C.JSArray_methods.forEach$1(P.List_List$from(H.TakeIterable_TakeIterable(t1, end - start, H.getRuntimeTypeArgument(t1, "Iterable", 0)), true, null), new P.FilteredElementList_removeRange_closure());
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_html_common$_iterable()._iterable);
    },
    $index: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this.get$_html_common$_iterable();
      return t1._f.call$1(J.elementAt$1$ax(t1._iterable, index));
    },
    get$iterator: function(_) {
      var t1 = P.List_List$from(this.get$_html_common$_iterable(), false, W.Element0);
      return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    $asEfficientLengthIterable: function() {
      return [W.Element0];
    },
    $asListMixin: function() {
      return [W.Element0];
    },
    $asIterable: function() {
      return [W.Element0];
    },
    $asList: function() {
      return [W.Element0];
    }
  };
  P.FilteredElementList__iterable_closure.prototype = {
    call$1: function(n) {
      return !!J.getInterceptor$(H.interceptedTypeCheck(n, "$isNode")).$isElement0;
    },
    $signature: 22
  };
  P.FilteredElementList__iterable_closure0.prototype = {
    call$1: function(n) {
      return H.interceptedTypeCast(H.interceptedTypeCheck(n, "$isNode"), "$isElement0");
    },
    $signature: 81
  };
  P.FilteredElementList_removeRange_closure.prototype = {
    call$1: function(el) {
      return J.remove$0$ax(el);
    },
    $signature: 1
  };
  P.KeyRange.prototype = {$isKeyRange: 1};
  P.JsObject.prototype = {
    $index: function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._js$_jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._js$_jsObject[property] = P._convertToJS(value);
    },
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.JsObject && this._js$_jsObject === other._js$_jsObject;
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._js$_jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        t1 = this.super$Object$toString(this);
        return t1;
      }
    },
    callMethod$2: function(method, args) {
      var t1, t2;
      if (typeof method !== "string" && true)
        throw H.wrapException(P.ArgumentError$("method is not a String or num"));
      t1 = this._js$_jsObject;
      if (args == null)
        t2 = null;
      else {
        t2 = H.getTypeArgumentByIndex(args, 0);
        t2 = P.List_List$from(new H.MappedListIterable(args, H.functionTypeCheck(P.js___convertToJS$closure(), {func: 1, ret: null, args: [t2]}), [t2, null]), true, null);
      }
      return P._convertToDart(t1[method].apply(t1, t2));
    },
    callMethod$1: function(method) {
      return this.callMethod$2(method, null);
    }
  };
  P.JsFunction.prototype = {};
  P.JsArray.prototype = {
    _checkIndex$1: function(index) {
      var t1 = index < 0 || index >= this.get$length(this);
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this), null, null));
    },
    $index: function(_, index) {
      if (typeof index === "number" && index === C.JSInt_methods.toInt$0(index))
        this._checkIndex$1(H.intTypeCheck(index));
      return H.assertSubtypeOfRuntimeType(this.super$JsObject$$index(0, index), H.getTypeArgumentByIndex(this, 0));
    },
    $indexSet: function(_, index, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      if (typeof index === "number" && index === C.JSInt_methods.toInt$0(index))
        this._checkIndex$1(index);
      this.super$JsObject$$indexSet(0, index, value);
    },
    get$length: function(_) {
      var len = this._js$_jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    set$length: function(_, $length) {
      this.super$JsObject$$indexSet(0, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0))]);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P._convertToJS_closure.prototype = {
    call$1: function(o) {
      var jsFunction;
      H.interceptedTypeCheck(o, "$isFunction");
      jsFunction = function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunction, o, false);
      P._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    },
    $signature: 1
  };
  P._convertToJS_closure0.prototype = {
    call$1: function(o) {
      return new this.ctor(o);
    },
    $signature: 1
  };
  P._wrapToDart_closure.prototype = {
    call$1: function(o) {
      return new P.JsFunction(o);
    },
    $signature: 82
  };
  P._wrapToDart_closure0.prototype = {
    call$1: function(o) {
      return new P.JsArray(o, [null]);
    },
    $signature: 40
  };
  P._wrapToDart_closure1.prototype = {
    call$1: function(o) {
      return new P.JsObject(o);
    },
    $signature: 92
  };
  P._JsArray_JsObject_ListMixin.prototype = {};
  P._JSRandom.prototype = {
    nextInt$1: function(max) {
      if (typeof max !== "number")
        return max.$le();
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    },
    nextDouble$0: function() {
      return Math.random();
    },
    $isRandom: 1
  };
  P._Random.prototype = {
    _Random$1: function(seed) {
      var empty_seed, low, high, tmplow, low0, t1, t2, t3;
      empty_seed = seed < 0 ? -1 : 0;
      do {
        low = (seed & 4294967295) >>> 0;
        seed = C.JSInt_methods._tdivFast$1(seed - low, 4294967296);
        high = (seed & 4294967295) >>> 0;
        seed = C.JSInt_methods._tdivFast$1(seed - high, 4294967296);
        tmplow = ((~low & 4294967295) >>> 0) + (low << 21 >>> 0);
        low0 = (tmplow & 4294967295) >>> 0;
        high = (~high >>> 0) + ((high << 21 | low >>> 11) >>> 0) + C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296) & 4294967295;
        tmplow = ((low0 ^ (low0 >>> 24 | high << 8)) >>> 0) * 265;
        low = (tmplow & 4294967295) >>> 0;
        high = ((high ^ high >>> 24) >>> 0) * 265 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
        tmplow = ((low ^ (low >>> 14 | high << 18)) >>> 0) * 21;
        low = (tmplow & 4294967295) >>> 0;
        high = ((high ^ high >>> 14) >>> 0) * 21 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
        low = (low ^ (low >>> 28 | high << 4)) >>> 0;
        high = (high ^ high >>> 28) >>> 0;
        tmplow = (low << 31 >>> 0) + low;
        low0 = (tmplow & 4294967295) >>> 0;
        t1 = C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296);
        tmplow = this._lo * 1037;
        t2 = (tmplow & 4294967295) >>> 0;
        this._lo = t2;
        t3 = (this._hi * 1037 + C.JSInt_methods._tdivFast$1(tmplow - t2, 4294967296) & 4294967295) >>> 0;
        this._hi = t3;
        t2 = (t2 ^ low0) >>> 0;
        this._lo = t2;
        t1 = (t3 ^ high + ((high << 31 | low >>> 1) >>> 0) + t1 & 4294967295) >>> 0;
        this._hi = t1;
      } while (seed !== empty_seed);
      if (t1 === 0 && t2 === 0)
        this._lo = 23063;
      this._nextState$0();
      this._nextState$0();
      this._nextState$0();
      this._nextState$0();
    },
    _nextState$0: function() {
      var t1, tmpHi, tmpHiLo, tmpLo, tmpLoLo, newLo;
      t1 = this._lo;
      tmpHi = 4294901760 * t1;
      tmpHiLo = (tmpHi & 4294967295) >>> 0;
      tmpLo = 55905 * t1;
      tmpLoLo = (tmpLo & 4294967295) >>> 0;
      newLo = tmpLoLo + tmpHiLo + this._hi;
      t1 = (newLo & 4294967295) >>> 0;
      this._lo = t1;
      this._hi = (C.JSInt_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) & 4294967295) >>> 0;
    },
    nextInt$1: function(max) {
      var t1, rnd32, result;
      if (typeof max !== "number")
        return max.$le();
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      t1 = max - 1;
      if ((max & t1) >>> 0 === 0) {
        this._nextState$0();
        return (this._lo & t1) >>> 0;
      }
      do {
        this._nextState$0();
        rnd32 = this._lo;
        result = rnd32 % max;
      } while (rnd32 - result + max >= 4294967296);
      return result;
    },
    nextDouble$0: function() {
      this._nextState$0();
      var t1 = this._lo;
      this._nextState$0();
      return ((t1 & 67108863) * 134217728 + (this._lo & 134217727)) / 9007199254740992;
    },
    $isRandom: 1
  };
  P.ScriptElement.prototype = {$isScriptElement: 1};
  P.SvgElement.prototype = {
    get$children: function(receiver) {
      return new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    },
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var t1, html, t2, fragment, svgFragment, root;
      t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
      C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
      C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
      C.JSArray_methods.add$1(t1, new W._SvgNodeValidator());
      treeSanitizer = new W._ValidatingTreeSanitizer(new W.NodeValidatorBuilder(t1));
      html = '<svg version="1.1">' + svg + "</svg>";
      t1 = document;
      t2 = t1.body;
      fragment = (t2 && C.BodyElement_methods).createFragment$2$treeSanitizer(t2, html, treeSanitizer);
      svgFragment = t1.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    $isSvgElement: 1
  };
  T.GameContent.prototype = {
    buildStage$4: function(lore, stage, depth, placeHero) {
      var t1;
      H.functionTypeCheck(placeHero, {func: 1, args: [L.Vec]});
      if (depth === 0)
        return new D.Town(stage).buildStage$1(placeHero);
      t1 = stage.tiles.bounds.size;
      t1 = M.Array2D$(t1.x, t1.y, null, X.Architecture);
      $.Architect_debugOwners = t1;
      return new X.Architect(lore, stage, depth, t1).buildStage$1(placeHero);
    },
    createHero$3: function($name, race, heroClass) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, hero, inventory;
      if (race == null)
        race = $.$get$Races_human();
      if (heroClass == null)
        heroClass = $.$get$Classes_adventurer();
      t1 = O.Inventory$(C.ItemLocation_wMy, 24, null);
      t2 = E.Equipment$();
      t3 = O.Inventory$(C.ItemLocation_ukJ, 26, null);
      t4 = O.Inventory$(C.ItemLocation_vOz, 8, null);
      t5 = P.LinkedHashMap_LinkedHashMap$_empty(O.Shop, O.Inventory);
      t6 = M.Skill;
      t7 = P.int;
      t8 = B.Breed;
      t9 = L.ItemType;
      hero = new K.HeroSave($name, race.rollStats$0(), heroClass, t1, t2, t3, t4, t5, 0, new M.SkillSet(P.LinkedHashMap_LinkedHashMap$_empty(t6, t7), P.LinkedHashMap_LinkedHashMap$_empty(t6, t7)), 60, 0, new V.Lore(P.LinkedHashMap_LinkedHashMap$_empty(t8, t7), P.LinkedHashMap_LinkedHashMap$_empty(t8, t7), P.LinkedHashMap_LinkedHashMap$_empty(t9, t7), P.LinkedHashMap_LinkedHashMap$_empty(L.Affix, t7), P.LinkedHashMap_LinkedHashMap$_empty(t9, t7)), new D.Strength(), new D.Agility(), new D.Fortitude(), new D.Intellect(), new D.Will());
      hero._bindStats$0();
      P.LinkedHashMap_LinkedHashMap$_literal(["Mending Salve", 3, "Scroll of Sidestepping", 2, "Tallow Candle", 4, "Loaf of Bread", 5], P.String, t7).forEach$1(0, new T.GameContent_createHero_closure(hero));
      heroClass.startingItems.dropItem$2(1, hero._inventory.get$tryAdd());
      for (t1 = $.$get$Shops_all(), t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), t2 = [R.Item]; t1.moveNext$0();) {
        t3 = t1.get$current();
        inventory = new O.Inventory(new O.ItemLocation(t3.name, "All sold out!"), H.setRuntimeTypeInfo([], t2), 26);
        t3.update$1(0, inventory);
        t5.$indexSet(0, t3, inventory);
      }
      return hero;
    },
    updateSubstance$2: function(stage, pos) {
      var t1, t2, t3;
      t1 = stage.tiles.$index(0, pos);
      t2 = t1.substance;
      if (t2 === 0) {
        if (!this._tryToIgniteTile$3(stage, pos, t1))
          this._spreadPoison$3(stage, pos, t1);
      } else {
        t3 = t1.element;
        if (t3 == $.$get$Elements_fire()) {
          --t2;
          t1.substance = t2;
          if (t2 <= 0) {
            if (Z.Tiles_ignition(t1.type) > 0) {
              t2 = $.$get$rng();
              t3 = Z.Tiles_burnResult(t1.type);
              t2.toString;
              H.assertSubtype(t3, "$isList", [Q.TileType], "$asList");
              t2 = t2.range$1(t3.length);
              if (t2 < 0 || t2 >= t3.length)
                return H.ioore(t3, t2);
              t1.type = t3[t2];
            }
            stage._lighting._floorLightDirty = true;
          } else
            return new G.BurningFloorAction(pos);
        } else if (t3 == $.$get$Elements_poison()) {
          this._spreadPoison$3(stage, pos, t1);
          if (t1.substance > 0)
            return new G.PoisonedFloorAction(pos);
        }
      }
      return;
    },
    _tryToIgniteTile$3: function(stage, pos, tile) {
      var t1, ignition, t2, fuel;
      t1 = {};
      ignition = Z.Tiles_ignition(tile.type);
      if (ignition === 0)
        return false;
      t1.fire = 0;
      t2 = new T.GameContent__tryToIgniteTile_neighbor(t1, stage, pos);
      t2.call$3(-1, 0, 3);
      t2.call$3(1, 0, 3);
      t2.call$3(0, -1, 3);
      t2.call$3(0, 1, 3);
      t2.call$3(-1, -1, 2);
      t2.call$3(-1, 1, 2);
      t2.call$3(1, -1, 2);
      t2.call$3(1, 1, 2);
      t1 = t1.fire;
      t2 = $.$get$rng();
      if (t1 <= t2.range$1(50 + ignition))
        return false;
      fuel = Z.Tiles_fuel(tile.type);
      tile.substance = t2.range$2(fuel / 2 | 0, fuel);
      tile.element = $.$get$Elements_fire();
      stage._lighting._floorLightDirty = true;
      return true;
    },
    _spreadPoison$3: function(stage, pos, tile) {
      var t1, t2, t3, t4, poison;
      t1 = {};
      tile.toString;
      t2 = $.$get$Motility_fly();
      if ((tile.type.motility._bitMask & t2._bitMask) === 0)
        return;
      t2 = tile.element;
      t3 = $.$get$Elements_poison();
      t1.poison = t2 == t3 ? tile.substance * 4 : 0;
      t1.open = 4;
      t4 = new T.GameContent__spreadPoison_neighbor(t1, stage, pos);
      t4.call$2(-1, 0);
      t4.call$2(1, 0);
      t4.call$2(0, -1);
      t4.call$2(0, 1);
      poison = C.JSDouble_methods.round$0(t1.poison / t1.open);
      t1.poison = poison;
      tile.element = t3;
      tile.substance = H.intTypeCheck(C.JSInt_methods.clamp$2(poison - 1, 0, 255));
    },
    $isContent: 1
  };
  T.GameContent_createHero_closure.prototype = {
    call$2: function(type, amount) {
      H.stringTypeCheck(type);
      H.intTypeCheck(amount);
      this.hero._inventory.tryAdd$1(new R.Item($.$get$Items_types().find$1(0, type), null, null, amount));
    },
    $signature: 96
  };
  T.GameContent__tryToIgniteTile_neighbor.prototype = {
    call$3: function(x, y, amount) {
      var t1, t2;
      t1 = this.pos;
      t2 = t1.x;
      t1 = t1.y;
      t1 = this.stage.tiles.$get$2(t2 + x, t1 + y);
      if (t1.substance === 0)
        return;
      if (t1.element == $.$get$Elements_fire())
        this._box_0.fire += amount;
    }
  };
  T.GameContent__spreadPoison_neighbor.prototype = {
    call$2: function(x, y) {
      var t1, t2;
      t1 = this.pos;
      t2 = t1.x;
      t1 = t1.y;
      t1 = this.stage.tiles.$get$2(t2 + x, t1 + y);
      t1.toString;
      t2 = $.$get$Motility_fly();
      if ((t1.type.motility._bitMask & t2._bitMask) !== 0) {
        t2 = this._box_0;
        ++t2.open;
        if (t1.element == $.$get$Elements_poison())
          t2.poison = t2.poison + t1.substance;
      }
    },
    $signature: 97
  };
  R.BarrierAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    onPerform$0: function() {
      var t1, t2;
      for (; this._distance < 6;) {
        t1 = {};
        t1.madeProgress = false;
        t2 = new R.BarrierAction_onPerform_tryDirection(t1, this);
        this._goingPositive = H.boolTypeCheck(t2.call$2(this._goingPositive, 1));
        this._goingNegative = H.boolTypeCheck(t2.call$2(this._goingNegative, -1));
        if (t1.madeProgress)
          return C.ActionResult_null_true_false;
        this._distance += 0.1;
      }
      return C.ActionResult_null_true_true;
    }
  };
  R.BarrierAction_onPerform_tryDirection.prototype = {
    call$2: function(going, sign) {
      var t1, allStopped;
      if (!going)
        return false;
      t1 = new R.BarrierAction_onPerform_tryDirection_tryOffset(this._box_0, this.$this, sign);
      allStopped = !t1.call$2(0, 0) || false;
      if (t1.call$2(-0.1, 0))
        allStopped = false;
      if (t1.call$2(0.1, 0))
        allStopped = false;
      if (t1.call$2(0, -0.1))
        allStopped = false;
      return !(t1.call$2(0, 0.1) ? false : allStopped);
    },
    $signature: 103
  };
  R.BarrierAction_onPerform_tryDirection_tryOffset.prototype = {
    call$2: function(h, v) {
      var t1, t2, pos, t3;
      t1 = this.$this;
      t2 = t1._distance;
      pos = t1._center.$add(0, new L.Vec(C.JSNumber_methods.round$0(t1._h * t2 + h), C.JSNumber_methods.round$0(t1._v * t2 + v)).$mul(0, this.sign));
      t2 = t1._action$_game._stage.tiles.$index(0, pos);
      t2.toString;
      t3 = $.$get$Motility_fly();
      if ((t2.type.motility._bitMask & t3._bitMask) === 0)
        return false;
      if (t1._hitTiles.add$1(0, pos)) {
        t1.hitTile$4(t1._hit, pos, t1._distance, $.$get$rng().range$2(30, 40));
        this._box_0.madeProgress = true;
      }
      return true;
    },
    $signature: 106
  };
  R._BarrierAction_Action_ElementActionMixin.prototype = {};
  O.BoltAction.prototype = {
    get$range: function() {
      var t1 = this._range;
      return t1 == null ? this._bolt$_hit.get$range() : t1;
    },
    onStep$2: function(previous, pos) {
      var t1 = this._bolt$_hit.get$element();
      this.addEvent$4$dir$element$pos(C.EventType_bolt, pos.$sub(0, previous).get$nearestDirection(), t1, pos);
    },
    onHitActor$2: function(pos, target) {
      this._bolt$_hit.perform$4$canMiss(this, this._actor, target, this._canMiss);
      return true;
    }
  };
  E.HasteAction.prototype = {
    get$condition: function() {
      return this._actor.haste;
    },
    getIntensity$0: function() {
      return this._condition0$_speed;
    },
    getDuration$0: function() {
      return this._condition0$_duration;
    },
    onActivate$0: function(_) {
      return this.log$2("{1} start[s] moving faster.", this._actor);
    },
    onExtend$0: function() {
      return this.log$2("{1} [feel]s the haste lasting longer.", this._actor);
    },
    onIntensify$0: function() {
      return this.log$2("{1} move[s] even faster.", this._actor);
    }
  };
  E.FreezeActorAction.prototype = {
    get$condition: function() {
      return this._actor.cold;
    },
    onPerform$0: function() {
      this.destroyHeldItems$1($.$get$Elements_cold());
      return this.super$ConditionAction$onPerform();
    },
    getIntensity$0: function() {
      var t1 = this._condition0$_damage;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return 1 + C.JSInt_methods._tdivFast$1(t1, 40);
    },
    getDuration$0: function() {
      var t1, t2;
      t1 = $.$get$rng();
      t2 = this._condition0$_damage;
      if (typeof t2 !== "number")
        return t2.$mul();
      return 3 + t1.triangleInt$2(t2 * 2, C.JSInt_methods._tdivFast$1(t2, 2));
    },
    onActivate$0: function(_) {
      return this.log$2("{1} [are|is] frozen!", this._actor);
    },
    onExtend$0: function() {
      return this.log$2("{1} feel[s] the cold linger!", this._actor);
    },
    onIntensify$0: function() {
      return this.log$2("{1} feel[s] the cold intensify!", this._actor);
    }
  };
  E.PoisonAction.prototype = {
    get$condition: function() {
      return this._actor.poison;
    },
    getIntensity$0: function() {
      var t1 = this._condition0$_damage;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return 1 + C.JSInt_methods._tdivFast$1(t1, 20);
    },
    getDuration$0: function() {
      var t1, t2;
      t1 = $.$get$rng();
      t2 = this._condition0$_damage;
      if (typeof t2 !== "number")
        return t2.$mul();
      return 1 + t1.triangleInt$2(t2 * 2, C.JSInt_methods._tdivFast$1(t2, 2));
    },
    onActivate$0: function(_) {
      return this.log$2("{1} [are|is] poisoned!", this._actor);
    },
    onExtend$0: function() {
      return this.log$2("{1} feel[s] the poison linger!", this._actor);
    },
    onIntensify$0: function() {
      return this.log$2("{1} feel[s] the poison intensify!", this._actor);
    }
  };
  E.BlindAction.prototype = {
    get$condition: function() {
      return this._actor.blindness;
    },
    getDuration$0: function() {
      var t1, t2;
      t1 = $.$get$rng();
      t2 = this._condition0$_damage;
      if (typeof t2 !== "number")
        return t2.$mul();
      return 3 + t1.triangleInt$2(t2 * 2, C.JSInt_methods._tdivFast$1(t2, 2));
    },
    onActivate$0: function(_) {
      this.log$2("{1 his} vision dims!", this._actor);
      this._action$_game._stage._lighting._visibilityDirty = true;
    },
    onExtend$0: function() {
      return this.log$2("{1 his} vision dims!", this._actor);
    }
  };
  E.DazzleAction.prototype = {
    get$condition: function() {
      return this._actor.dazzle;
    },
    getDuration$0: function() {
      var t1, t2;
      t1 = $.$get$rng();
      t2 = this._condition0$_damage;
      if (typeof t2 !== "number")
        return t2.$mul();
      return 3 + t1.triangleInt$2(t2 * 2, C.JSInt_methods._tdivFast$1(t2, 2));
    },
    onActivate$0: function(_) {
      return this.log$2("{1} [are|is] dazzled by the light!", this._actor);
    },
    onExtend$0: function() {
      return this.log$2("{1} [are|is] dazzled by the light!", this._actor);
    }
  };
  E.ResistAction.prototype = {
    get$condition: function() {
      return this._actor.resistances.$index(0, this._condition0$_element);
    },
    getDuration$0: function() {
      return this._condition0$_duration;
    },
    onActivate$0: function(_) {
      return this.log$2("{1} [are|is] resistant to " + H.S(this._condition0$_element) + ".", this._actor);
    },
    onExtend$0: function() {
      return this.log$2("{1} feel[s] the resistance extend.", this._actor);
    }
  };
  E._FreezeActorAction_ConditionAction_DestroyActionMixin.prototype = {};
  T.DetectType.prototype = {
    toString$0: function(_) {
      return this._detection$_name;
    }
  };
  T.DetectAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    onPerform$0: function() {
      var t1, t2, t3;
      if (this._tilesByDistance == null)
        this._findTiles$0();
      t1 = this._tilesByDistance;
      if (t1.length === 0)
        return C.ActionResult_null_true_true;
      for (t1 = J.get$iterator$ax((t1 && C.JSArray_methods).removeLast$0(t1)); t1.moveNext$0();) {
        t2 = t1.get$current();
        t3 = this._action$_game._stage;
        t3.toString;
        t3.exploreAt$3$force(t2.x, t2.y, true);
        C.JSArray_methods.add$1(this._action$_game._events, new D.Event0(C.EventType_detect, null, null, null, t2, null));
      }
      return C.ActionResult_null_true_false;
    },
    _findTiles$0: function() {
      var _box_0, t1, distanceMap, addTile, t2, t3, foundExits, t4, t5, t6, t7, distances;
      _box_0 = {};
      t1 = [P.List, L.Vec];
      distanceMap = P.LinkedHashMap_LinkedHashMap$_empty(P.int, t1);
      addTile = new T.DetectAction__findTiles_addTile(this, distanceMap);
      t2 = this._detection$_types;
      if (t2.contains$1(0, C.DetectType_0))
        for (t3 = X.RectIterator$(this._action$_game._stage.tiles.bounds), foundExits = 0; t3.moveNext$0();) {
          t4 = t3._x;
          t5 = t3._y;
          t6 = this._action$_game._stage.tiles;
          t7 = t6._elements;
          t6 = t5 * t6.bounds.size.x + t4;
          if (t6 < 0 || t6 >= t7.length)
            return H.ioore(t7, t6);
          t6 = t7[t6];
          if (t6._isExplored)
            continue;
          if (t6.type.portal !== C.TilePortal_exit)
            continue;
          ++foundExits;
          addTile.call$1(new L.Vec(t4, t5));
        }
      else
        foundExits = 0;
      _box_0.foundItems = 0;
      if (t2.contains$1(0, C.DetectType_1))
        this._action$_game._stage.forEachItem$1(new T.DetectAction__findTiles_closure(_box_0, this, addTile));
      if (foundExits > 0) {
        t2 = _box_0.foundItems;
        t3 = this._actor;
        if (t2 > 0)
          this.log$2("{1} sense[s] hidden secrets in the dark!", t3);
        else
          this.log$2("{1} sense[s] places to escape!", t3);
      } else if (_box_0.foundItems > 0)
        this.log$2("{1} sense[s] the treasures held in the dark!", this._actor);
      else
        this.log$1("The darkness holds no secrets.");
      t2 = distanceMap.get$keys(distanceMap);
      distances = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
      C.JSArray_methods.sort$1(distances, new T.DetectAction__findTiles_closure0());
      t2 = H.getTypeArgumentByIndex(distances, 0);
      this.set$_tilesByDistance(new H.MappedListIterable(distances, H.functionTypeCheck(new T.DetectAction__findTiles_closure1(distanceMap), {func: 1, ret: t1, args: [t2]}), [t2, t1]).toList$0(0));
    },
    set$_tilesByDistance: function(_tilesByDistance) {
      this._tilesByDistance = H.assertSubtype(_tilesByDistance, "$isList", [[P.List, L.Vec]], "$asList");
    }
  };
  T.DetectAction__findTiles_addTile.prototype = {
    call$1: function(pos) {
      var t1, distance;
      t1 = this.$this;
      distance = t1._actor._pos.$sub(0, pos).get$lengthSquared();
      t1 = t1._detection$_maxDistance;
      if (t1 != null && distance > t1 * t1)
        return;
      t1 = this.distanceMap;
      t1.putIfAbsent$2(0, distance, new T.DetectAction__findTiles_addTile_closure());
      J.add$1$ax(t1.$index(0, distance), pos);
    },
    $signature: 24
  };
  T.DetectAction__findTiles_addTile_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [L.Vec]);
    },
    $signature: 33
  };
  T.DetectAction__findTiles_closure.prototype = {
    call$2: function(item, pos) {
      if (this.$this._action$_game._stage.tiles.$index(0, pos)._isExplored)
        return;
      ++this._box_0.foundItems;
      this.addTile.call$1(pos);
    },
    $signature: 110
  };
  T.DetectAction__findTiles_closure0.prototype = {
    call$2: function(a, b) {
      H.intTypeCheck(a);
      return J.compareTo$1$ns(H.intTypeCheck(b), a);
    },
    $signature: 21
  };
  T.DetectAction__findTiles_closure1.prototype = {
    call$1: function(distance) {
      return this.distanceMap.$index(0, H.intTypeCheck(distance));
    },
    $signature: 114
  };
  X.EatAction.prototype = {
    onPerform$0: function() {
      var t1, t2;
      t1 = H.interceptedTypeCast(this._actor, "$isHero");
      t2 = t1._stomach;
      if (t2 === 400)
        this.log$2("{1} [is|are] already full!", t1);
      else if (t2 + this._eat$_amount > 400)
        this.log$2("{1} [is|are] stuffed!", t1);
      else
        this.log$2("{1} feel[s] satiated.", t1);
      t1 = H.interceptedTypeCast(this._actor, "$isHero");
      t2 = t1._stomach;
      t1.toString;
      t1._stomach = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + this._eat$_amount, 0, 400));
      return C.ActionResult_null_true_true;
    }
  };
  G.ElementActionMixin.prototype = {
    hitTile$4: function(hit, pos, distance, fuel) {
      var t1, action;
      t1 = this._action$_game._stage.tiles.$index(0, pos).type.onOpen;
      if (t1 != null)
        this.addAction$1(t1.call$1(pos));
      this.addEvent$3$element$pos(C.EventType_cone, hit.get$element(), pos);
      t1 = this._action$_game._stage._actorsByTile.$index(0, pos);
      if (t1 != null && t1 !== this._actor)
        hit.perform$4$canMiss(this, this._actor, t1, false);
      action = hit.get$element().floorAction.call$4(pos, hit, distance, fuel);
      if (action != null)
        this.addAction$1(action);
    },
    hitTile$3: function(hit, pos, distance) {
      return this.hitTile$4(hit, pos, distance, 0);
    }
  };
  G.BurnActorAction.prototype = {
    onPerform$0: function() {
      var t1, t2;
      this.destroyHeldItems$1($.$get$Elements_fire());
      t1 = this._actor;
      t2 = t1.cold;
      if (t2._turnsRemaining > 0) {
        t2._turnsRemaining = 0;
        t2._intensity = 0;
        return this.succeed$2("The fire warms {1} back up.", t1);
      }
      return C.ActionResult_null_true_true;
    }
  };
  G.BurnFloorAction.prototype = {
    onPerform$0: function() {
      var t1, t2, t3, t4, fuel, ignition;
      t1 = this._element$_fuel;
      t2 = this._element$_pos;
      t3 = $.$get$Elements_fire();
      t4 = this.destroyFloorItems$2(t2, t3);
      if (typeof t1 !== "number")
        return t1.$add();
      fuel = t1 + t4;
      t2 = this._action$_game._stage.tiles.$index(0, t2);
      ignition = Z.Tiles_ignition(t2.type);
      if (fuel <= 0)
        t1 = ignition > 0 && this._element$_damage > $.$get$rng().range$1(ignition);
      else
        t1 = true;
      if (t1) {
        fuel += Z.Tiles_fuel(t2.type);
        t1 = $.$get$rng().range$2(C.JSInt_methods._tdivFast$1(fuel, 2), fuel);
        t2.substance = t1;
        t1 -= C.JSInt_methods._tdivFast$1(this._element$_damage, 4);
        t2.substance = t1;
        if (t1 <= 0)
          t2.substance = 1;
        t2.element = t3;
        this._action$_game._stage._lighting._floorLightDirty = true;
      }
      return C.ActionResult_null_true_true;
    }
  };
  G.BurningFloorAction.prototype = {
    onPerform$0: function() {
      var t1, t2;
      t1 = this._element$_pos;
      t2 = this._action$_game._stage._actorsByTile.$index(0, t1);
      if (t2 != null)
        new U.Hit(U.Attack$(new O.Noun("fire"), "burns", 10, 0, $.$get$Elements_fire()), 1, 1, $.$get$Element_none(), 1).perform$4$canMiss(this, null, t2, false);
      t2 = this._action$_game._stage.tiles.$index(0, t1);
      t2.substance = t2.substance + this.destroyFloorItems$2(t1, $.$get$Elements_fire());
      return C.ActionResult_null_true_true;
    }
  };
  G.FreezeFloorAction.prototype = {
    onPerform$0: function() {
      this.destroyFloorItems$2(this._element$_pos, $.$get$Elements_cold());
      return C.ActionResult_null_true_true;
    }
  };
  G.PoisonFloorAction.prototype = {
    onPerform$0: function() {
      var t1, t2;
      t1 = this._action$_game._stage.tiles.$index(0, this._element$_pos);
      if (t1.element == $.$get$Elements_fire() && t1.substance > 0)
        return C.ActionResult_null_true_true;
      t1.toString;
      t2 = $.$get$Motility_fly();
      if ((t1.type.motility._bitMask & t2._bitMask) !== 0) {
        t1.element = $.$get$Elements_poison();
        t1.substance = H.intTypeCheck(C.JSInt_methods.clamp$2(t1.substance + this._element$_damage * 16, 0, 255));
      }
      return C.ActionResult_null_true_true;
    }
  };
  G.PoisonedFloorAction.prototype = {
    onPerform$0: function() {
      var t1 = this._action$_game._stage._actorsByTile.$index(0, this._element$_pos);
      if (t1 != null)
        new U.Hit(U.Attack$(new O.Noun("poison"), "chokes", 4, 0, $.$get$Elements_poison()), 1, 1, $.$get$Element_none(), 1).perform$4$canMiss(this, null, t1, false);
      return C.ActionResult_null_true_true;
    }
  };
  G.WindAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    onPerform$0: function() {
      var t1, t2, distance, positions;
      t1 = this._actor.get$motility();
      t2 = $.$get$Motility_fly();
      distance = (t1._bitMask & t2._bitMask) !== 0 ? 6 : 3;
      t1 = this._actor.get$motility();
      t2 = $.$get$Motility_door();
      t1 = t1._bitMask;
      t2 = t2._bitMask;
      t2 = N.MotilityFlow$(this._action$_game._stage, this._actor._pos, new Q.Motility(t1 & ~t2), null, null, distance).get$reachable();
      t2.toString;
      t1 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
      positions = P.List_List$from(new H.WhereIterable(t2, H.functionTypeCheck(new G.WindAction_onPerform_closure(this), {func: 1, ret: P.bool, args: [t1]}), [t1]), true, t1);
      if (positions.length === 0)
        return C.ActionResult_null_false_true;
      this.log$2("{1} [are|is] thrown by the wind!", this._actor);
      t1 = this._actor;
      this.addEvent$3$actor$pos(C.EventType_wind, t1, t1._pos);
      t1 = this._actor;
      t2 = $.$get$rng();
      t2.toString;
      H.assertSubtype(positions, "$isList", [L.Vec], "$asList");
      t2 = t2.range$1(positions.length);
      if (t2 < 0 || t2 >= positions.length)
        return H.ioore(positions, t2);
      t1.set$pos(positions[t2]);
      return C.ActionResult_null_true_true;
    }
  };
  G.WindAction_onPerform_closure.prototype = {
    call$1: function(pos) {
      H.interceptedTypeCheck(pos, "$isVec");
      return this.$this._action$_game._stage._actorsByTile.$index(0, pos) == null;
    },
    $signature: 0
  };
  G.LightFloorAction.prototype = {
    onPerform$0: function() {
      this._action$_game._stage.tiles.$index(0, this._element$_pos).addEmanation$1(this._element$_emanation);
      this._action$_game._stage._lighting._floorLightDirty = true;
      return C.ActionResult_null_true_true;
    }
  };
  G._BurnActorAction_Action_DestroyActionMixin.prototype = {};
  G._BurnFloorAction_Action_DestroyActionMixin.prototype = {};
  G._BurningFloorAction_Action_DestroyActionMixin.prototype = {};
  G._FreezeFloorAction_Action_DestroyActionMixin.prototype = {};
  G._PoisonFloorAction_Action_DestroyActionMixin.prototype = {};
  G._PoisonedFloorAction_Action_DestroyActionMixin.prototype = {};
  N.FlowAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    onPerform$0: function() {
      var t1, t2, distance, end, t3, _i;
      t1 = (this._flow0$_frame + 1) % this._slowness;
      this._flow0$_frame = t1;
      if (t1 !== 0) {
        this.addEvent$1(C.EventType_pause);
        return C.ActionResult_null_true_false;
      }
      if (this._tiles == null) {
        t1 = N.MotilityFlow$(this._action$_game._stage, this._flow0$_from, this._flow0$_motility, false, null, null);
        this._flow = t1;
        t1 = t1.get$reachable();
        t1.toString;
        t2 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
        this.set$_tiles(P.List_List$from(new H.TakeWhileIterable(t1, H.functionTypeCheck(new N.FlowAction_onPerform_closure(this), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2));
      }
      t1 = this._flow;
      t2 = this._tiles;
      distance = t1.costAt$1((t2 && C.JSArray_methods).get$first(t2));
      for (end = 0; t1 = this._tiles, end < t1.length; ++end)
        if (this._flow.costAt$1(t1[end]) != distance)
          break;
      for (t1 = this._tiles, t1 = (t1 && C.JSArray_methods).sublist$2(t1, 0, end), t2 = t1.length, t3 = this._flow0$_hit, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        this.hitTile$3(t3, t1[_i], distance);
      t1 = this._tiles;
      this.set$_tiles((t1 && C.JSArray_methods).sublist$1(t1, end));
      if (this._tiles.length === 0)
        return C.ActionResult_null_true_true;
      return C.ActionResult_null_true_false;
    },
    set$_tiles: function(_tiles) {
      this._tiles = H.assertSubtype(_tiles, "$isList", [L.Vec], "$asList");
    }
  };
  N.FlowAction_onPerform_closure.prototype = {
    call$1: function(pos) {
      var t1, t2;
      H.interceptedTypeCheck(pos, "$isVec");
      t1 = this.$this;
      t2 = t1._flow.costAt$1(pos);
      t1 = t1._flow0$_hit.get$range();
      if (typeof t2 !== "number")
        return t2.$le();
      return t2 <= t1;
    },
    $signature: 0
  };
  N.FlowSelfAction.prototype = {
    onPerform$0: function() {
      return this.alternate$1(N.FlowAction$(this._actor._pos, new U.Hit(this._flow0$_attack, 1, 1, $.$get$Element_none(), 1), this._flow0$_motility, null));
    }
  };
  N.FlowFromAction.prototype = {
    onPerform$0: function() {
      return this.alternate$1(N.FlowAction$(this._flow0$_pos, new U.Hit(this._flow0$_attack, 1, 1, $.$get$Element_none(), 1), this._flow0$_motility, null));
    }
  };
  N._FlowAction_Action_ElementActionMixin.prototype = {};
  O.HealAction.prototype = {
    onPerform$0: function() {
      var t1, t2, changed, t3;
      t1 = this._actor;
      t2 = t1.poison;
      if (t2._turnsRemaining > 0 && this.curePoison) {
        t2._turnsRemaining = 0;
        t2._intensity = 0;
        this.log$2("{1} [are|is] cleansed of poison.", t1);
        changed = true;
      } else
        changed = false;
      t1 = this._actor;
      if (t1._health !== t1.get$maxHealth() && this.amount > 0) {
        t1 = this._actor;
        t2 = t1._health;
        t3 = this.amount;
        if (typeof t2 !== "number")
          return t2.$add();
        t1._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + t3, 0, t1.get$maxHealth()));
        this.addEvent$3$actor$other(C.EventType_heal, this._actor, t3);
        this.log$2("{1} feel[s] better.", this._actor);
        changed = true;
      }
      if (changed)
        return C.ActionResult_null_true_true;
      else
        return this.succeed$2("{1} [don't|doesn't] feel any different.", this._actor);
    }
  };
  U.HowlAction.prototype = {
    onPerform$0: function() {
      var t1, t2, t3, _i, other, t4, t5, t6;
      this.log$2("{1} " + this._howl0$_verb + "!", this._actor);
      this.addEvent$2$actor(C.EventType_howl, this._actor);
      for (t1 = H.interceptedTypeCast(this._actor, "$isMonster").game._stage._actors, t2 = t1.length, t3 = this._howl0$_range, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        other = t1[_i];
        t4 = this._actor;
        if (other != t4 && other instanceof B.Monster && other._pos.$sub(0, H.interceptedTypeCast(t4, "$isMonster")._pos).$le(0, t3)) {
          t4 = this._action$_game._stage;
          t5 = this._actor._pos;
          t6 = other._pos;
          t6 = t4._sound.volumeBetween$2(t5, t6);
          t6 = other._alertness + t6 * other._breed.hearing;
          other._alertness = t6;
          other._alertness = C.JSNumber_methods.clamp$2(t6, 0, 1);
        }
      }
      return C.ActionResult_null_true_true;
    }
  };
  F.IlluminateAction.prototype = {
    reachStartTile$1: function(pos) {
      this.reachTile$2(pos, 0);
    },
    reachTile$2: function(pos, distance) {
      this._action$_game._stage.tiles.$index(0, pos).addEmanation$1(F.Lighting_emanationForLevel(this._illuminate$_emanationLevel));
      this._action$_game._stage._lighting._floorLightDirty = true;
      this.addEvent$1(C.EventType_pause);
    },
    get$range: function() {
      return this.range;
    }
  };
  F.IlluminateSelfAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    onPerform$0: function() {
      var t1, t2;
      t1 = this._actor._pos;
      t2 = new F.IlluminateAction(this._illuminate$_range, this._illuminate$_emanationLevel, t1, t1, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 1, H.setRuntimeTypeInfo([], [P.double]));
      t2.RayActionBase$3(t1, t1, 1);
      return this.alternate$1(t2);
    }
  };
  Q.MappingAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    onPerform$0: function() {
      var t1, i, t2, t3, _i, pos, t4, t5, t6, t7, _i0, neighbor;
      if (this._mapping$_tilesByDistance == null)
        this._mapping$_findTiles$0();
      for (t1 = this._illuminate, i = 0; i < 2; ++i) {
        t2 = this._currentDistance;
        t3 = this._mapping$_tilesByDistance;
        if (t2 >= t3.length)
          return C.ActionResult_null_true_true;
        for (t2 = t3[t2], t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          pos = t2[_i];
          t4 = this._action$_game._stage;
          t4.toString;
          H.interceptedTypeCheck(pos, "$isVec");
          t5 = pos.x;
          t6 = pos.y;
          t4.exploreAt$3$force(t5, t6, true);
          C.JSArray_methods.add$1(this._action$_game._events, new D.Event0(C.EventType_map, null, null, null, pos, null));
          if (t1) {
            t4 = this._action$_game._stage.tiles;
            t7 = t4._elements;
            t5 = t6 * t4.bounds.size.x + t5;
            if (t5 < 0 || t5 >= t7.length)
              return H.ioore(t7, t5);
            t5 = t7[t5];
            t5._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t5._appliedEmanation + 255, 0, 192));
            this._action$_game._stage._lighting._floorLightDirty = true;
          }
          for (t4 = pos.get$neighbors(), t5 = t4.length, _i0 = 0; _i0 < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i0) {
            neighbor = t4[_i0];
            this._action$_game._stage.exploreAt$3$force(neighbor.x, neighbor.y, true);
          }
        }
        ++this._currentDistance;
      }
      return C.ActionResult_null_true_false;
    },
    _mapping$_findTiles$0: function() {
      var t1, t2, t3, t4, t5, flow, distance, i;
      t1 = L.Vec;
      t2 = [t1];
      this.set$_mapping$_tilesByDistance(H.setRuntimeTypeInfo([H.setRuntimeTypeInfo([], t2)], [[P.List, L.Vec]]));
      t3 = this._mapping$_tilesByDistance;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      C.JSArray_methods.add$1(t3[0], this._actor._pos);
      t3 = this._action$_game._stage;
      t4 = this._actor._pos;
      t5 = this._mapping$_maxDistance;
      flow = new Q.MappingFlow(t5, t3, t4, t5, new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]), [t1]), H.setRuntimeTypeInfo([], t2));
      flow.Flow$3$maxDistance(t3, t4, t5);
      for (t1 = flow.get$reachable(), t1 = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        t3 = t1.get$current();
        distance = flow.costAt$1(t3);
        i = this._mapping$_tilesByDistance.length;
        if (typeof distance !== "number")
          return H.iae(distance);
        for (; i <= distance; ++i) {
          t4 = this._mapping$_tilesByDistance;
          (t4 && C.JSArray_methods).add$1(t4, H.setRuntimeTypeInfo([], t2));
        }
        t4 = this._mapping$_tilesByDistance;
        if (distance < 0 || distance >= t4.length)
          return H.ioore(t4, distance);
        C.JSArray_methods.add$1(t4[distance], t3);
      }
      for (i = 0; t1 = this._mapping$_tilesByDistance, i < t1.length; ++i) {
        t3 = $.$get$rng();
        t1 = t1[i];
        t3.toString;
        C.JSArray_methods.shuffle$1(H.assertSubtype(t1, "$isList", t2, "$asList"), t3._random);
      }
    },
    set$_mapping$_tilesByDistance: function(_tilesByDistance) {
      this._mapping$_tilesByDistance = H.assertSubtype(_tilesByDistance, "$isList", [[P.List, L.Vec]], "$asList");
    }
  };
  Q.MappingFlow.prototype = {
    tileCost$4: function(parentCost, pos, tile, isDiagonal) {
      var t1 = $.$get$Motility_doorAndFly();
      if ((tile.type.motility._bitMask & t1._bitMask) === 0)
        return;
      if (typeof parentCost !== "number")
        return parentCost.$ge();
      if (parentCost >= this._mapping$_maxDistance * 2)
        return;
      return isDiagonal ? 3 : 2;
    }
  };
  R.Missive.prototype = {
    toString$0: function(_) {
      return this._missive$_name;
    }
  };
  R.MissiveAction.prototype = {
    onPerform$0: function() {
      var t1, t2;
      t1 = $.$get$rng();
      t2 = $.$get$_messages().$index(0, this.missive);
      t1.toString;
      H.assertSubtype(t2, "$isList", [P.String], "$asList");
      t1 = t1.range$1(t2.length);
      if (t1 < 0 || t1 >= t2.length)
        return H.ioore(t2, t1);
      return this.succeed$3(t2[t1], this._actor, this.target);
    }
  };
  Q.PolymorphAction.prototype = {
    onPerform$0: function() {
      var t1, t2;
      t1 = H.interceptedTypeCast(this._actor, "$isMonster");
      t2 = this._polymorph$_breed;
      t1._breed = t2;
      t1._health = H.intTypeCheck(C.JSInt_methods.clamp$2(H.intTypeCheck(J.clamp$2$n(t1._health, 0, t2.maxHealth)), 0, t1.get$maxHealth()));
      t1._recharges.clear$0(0);
      t1._resetCharges$0();
      this.addEvent$2$actor(C.EventType_polymorph, this._actor);
      return C.ActionResult_null_true_true;
    }
  };
  Q.AmputateAction.prototype = {
    onPerform$0: function() {
      var part, state, t1, positions, t2, _i, dir, pos, t3, t4;
      this.addAction$1(new Q.PolymorphAction(this._bodyBreed));
      this.log$2(this._polymorph$_message, this._actor);
      part = this._partBreed.spawn$3(this._action$_game, C.Vec_0_0, H.interceptedTypeCast(this._actor, "$isMonster"));
      state = new M.AwakeState();
      part._monster$_state = state;
      state._monster = part;
      t1 = [L.Vec];
      positions = H.setRuntimeTypeInfo([], t1);
      for (t2 = part.game, _i = 0; _i < 8; ++_i) {
        dir = C.List_slV[_i];
        pos = this._actor._pos.$add(0, dir);
        if (part.canOccupy$1(pos)) {
          t3 = t2._stage._actorsByTile;
          t4 = t3._elements;
          t3 = pos.y * t3.bounds.size.x + pos.x;
          if (t3 < 0 || t3 >= t4.length)
            return H.ioore(t4, t3);
          t3 = t4[t3] == null;
        } else
          t3 = false;
        if (t3)
          C.JSArray_methods.add$1(positions, pos);
      }
      t2 = positions.length;
      if (t2 !== 0) {
        t3 = $.$get$rng();
        t3.toString;
        H.assertSubtype(positions, "$isList", t1, "$asList");
        t2 = t3.range$1(t2);
        if (t2 < 0 || t2 >= positions.length)
          return H.ioore(positions, t2);
        part.set$pos(positions[t2]);
        this._action$_game._stage.addActor$1(part);
        this.addEvent$2$actor(C.EventType_spawn, part);
      }
      return C.ActionResult_null_true_true;
    }
  };
  G.RayActionBase.prototype = {
    get$isImmediate: function() {
      return false;
    },
    RayActionBase$3: function(_from, _to, fraction) {
      var numRays, t1, t2, offset, centerTheta, t3, i, thetaStep;
      numRays = C.JSDouble_methods.ceil$0(6.283185307179586 * this.get$range() * fraction * 2);
      if (fraction < 1) {
        t1 = this._to;
        t2 = this._from;
        offset = t1.$sub(0, t2);
        centerTheta = !J.$eq$(t2, t1) ? Math.atan2(offset.x, offset.y) : 0;
        for (t1 = numRays - 1, t2 = this._rays, t3 = 6.283185307179586 * fraction, i = 0; i < numRays; ++i)
          C.JSArray_methods.add$1(t2, centerTheta + (i / t1 - 0.5) * t3);
      } else {
        thetaStep = 6.283185307179586 / numRays;
        for (t1 = this._rays, i = 0; i < numRays; ++i)
          C.JSArray_methods.add$1(t1, i * thetaStep);
      }
    },
    onPerform$0: function() {
      var t1, t2;
      if (this._radius === 0) {
        this.reachStartTile$1(this._from);
        ++this._radius;
        return C.ActionResult_null_true_false;
      }
      t1 = this._rays;
      t2 = H.functionTypeCheck(new G.RayActionBase_onPerform_closure(this), {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(t1, 0)]});
      C.JSArray_methods._removeWhere$2(t1, t2, true);
      if (++this._radius > this.get$range() || t1.length === 0)
        return C.ActionResult_null_true_true;
      return C.ActionResult_null_true_false;
    },
    reachStartTile$1: function(pos) {
    }
  };
  G.RayActionBase_onPerform_closure.prototype = {
    call$1: function(ray) {
      var t1, t2, pos, t3, t4;
      H.doubleTypeCheck(ray);
      t1 = this.$this;
      t2 = t1._from;
      pos = new L.Vec(t2.x + C.JSNumber_methods.round$0(Math.sin(H.checkNum(ray)) * t1._radius), t2.y + C.JSNumber_methods.round$0(Math.cos(H.checkNum(ray)) * t1._radius));
      t3 = t1._action$_game._stage.tiles.$index(0, pos);
      t3.toString;
      t4 = $.$get$Motility_fly();
      if ((t3.type.motility._bitMask & t4._bitMask) === 0)
        return true;
      if (!t1._ray$_hitTiles.add$1(0, pos))
        return false;
      t1.reachTile$2(pos, Math.sqrt(pos.$sub(0, t2).get$lengthSquared()));
      return false;
    },
    $signature: 123
  };
  G.RayAction.prototype = {
    get$range: function() {
      return this._ray$_hit.get$range();
    },
    reachTile$2: function(pos, distance) {
      this.hitTile$3(this._ray$_hit, pos, distance);
    }
  };
  G.RingSelfAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    onPerform$0: function() {
      var t1, t2;
      t1 = this._actor._pos;
      t2 = new G.RayAction(new U.Hit(this._ray$_attack, 1, 1, $.$get$Element_none(), 1), t1, t1, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 1, H.setRuntimeTypeInfo([], [P.double]));
      t2.RayActionBase$3(t1, t1, 1);
      return this.alternate$1(t2);
    }
  };
  G.RingFromAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    onPerform$0: function() {
      var t1, t2;
      t1 = this._ray$_pos;
      t2 = new G.RayAction(new U.Hit(this._ray$_attack, 1, 1, $.$get$Element_none(), 1), t1, t1, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 1, H.setRuntimeTypeInfo([], [P.double]));
      t2.RayActionBase$3(t1, t1, 1);
      return this.alternate$1(t2);
    }
  };
  G._RayAction_RayActionBase_ElementActionMixin.prototype = {};
  L.SpawnAction.prototype = {
    onPerform$0: function() {
      var t1, spawned;
      if ($.$get$rng().range$1(H.interceptedTypeCast(this._actor, "$isMonster").generation) !== 0)
        return C.ActionResult_null_true_true;
      t1 = H.interceptedTypeCast(this._actor, "$isMonster");
      ++t1.generation;
      spawned = this._spawn$_breed.spawn$3(this._action$_game, this._spawn$_pos, t1);
      this._action$_game._stage.addActor$1(spawned);
      this.addEvent$2$actor(C.EventType_spawn, spawned);
      return C.ActionResult_null_true_true;
    }
  };
  S.TeleportAction.prototype = {
    onPerform$0: function() {
      var t1, targets, t2, t3, t4, t5, pos, t6, t7, t8, best, tries, max, from;
      t1 = [L.Vec];
      targets = H.setRuntimeTypeInfo([], t1);
      t2 = this._actor._pos;
      t3 = t2.x;
      t4 = this.distance;
      t2 = t2.y;
      for (t2 = X.RectIterator$(X.Rect_intersect(X.Rect$leftTopRightBottom(t3 - t4, t2 - t4, t3 + t4, t2 + t4), this._action$_game._stage.tiles.bounds)); t2.moveNext$0();) {
        t3 = t2._x;
        t5 = t2._y;
        pos = new L.Vec(t3, t5);
        t6 = this._actor;
        if (t6.canOccupy$1(pos)) {
          t7 = t6.game._stage._actorsByTile;
          t8 = t7._elements;
          t7 = t5 * t7.bounds.size.x + t3;
          if (t7 < 0 || t7 >= t8.length)
            return H.ioore(t8, t7);
          t7 = t8[t7] == null;
        } else
          t7 = false;
        if (t7) {
          t6 = t6.game._stage.tiles;
          t7 = t6._elements;
          t3 = t5 * t6.bounds.size.x + t3;
          if (t3 < 0 || t3 >= t7.length)
            return H.ioore(t7, t3);
          t3 = t7[t3].substance === 0;
        } else
          t3 = false;
        if (!t3)
          continue;
        if (pos.$sub(0, this._actor._pos).$gt(0, t4))
          continue;
        C.JSArray_methods.add$1(targets, pos);
      }
      t2 = targets.length;
      if (t2 === 0)
        return this.fail$2("{1} couldn't escape.", this._actor);
      t3 = $.$get$rng();
      t3.toString;
      H.assertSubtype(targets, "$isList", t1, "$asList");
      t2 = t3.range$1(t2);
      if (t2 < 0 || t2 >= targets.length)
        return H.ioore(targets, t2);
      best = targets[t2];
      for (tries = 0; tries < 10; ++tries) {
        max = targets.length;
        t1 = t3._random.nextInt$1(max - 0);
        if (t1 < 0 || t1 >= targets.length)
          return H.ioore(targets, t1);
        pos = targets[t1];
        if (pos.$sub(0, this._actor._pos).$gt(0, best.$sub(0, this._actor._pos)))
          best = pos;
      }
      t1 = this._actor;
      from = t1._pos;
      t1.set$pos(best);
      this.addEvent$3$actor$pos(C.EventType_teleport, this._actor, from);
      return this.succeed$2("{1} teleport[s]!", this._actor);
    }
  };
  Q._OpenTileAction.prototype = {
    onPerform$0: function() {
      var t1, t2, t3;
      t1 = this._tile$_pos;
      this._action$_game._stage.tiles.$index(0, t1).type = this.get$_openTile();
      this.addEvent$2$pos(C.EventType_openBarrel, t1);
      t2 = $.$get$rng();
      t3 = C.JSNumber_methods.round$0(K.lerpDouble(this._action$_game.depth, 1, 100, this.get$_minDepthEmptyChance(), this.get$_maxDepthEmptyChance()));
      if (t2.range$1(100) < t3)
        this.log$2("The " + this.get$_tile$_name() + " is empty.", this._actor);
      else {
        this._action$_game._stage.placeDrops$3(t1, $.$get$Motility_walk(), this._createDrop$0());
        this.log$2("{1} open[s] the " + this.get$_tile$_name() + ".", this._actor);
      }
      return C.ActionResult_null_true_true;
    }
  };
  Q.OpenBarrelAction.prototype = {
    get$_tile$_name: function() {
      return "barrel";
    },
    get$_openTile: function() {
      return $.$get$Tiles_openBarrel();
    },
    get$_minDepthEmptyChance: function() {
      return 40;
    },
    get$_maxDepthEmptyChance: function() {
      return 10;
    },
    _createDrop$0: function() {
      return X.parseDrop("food", null, this._action$_game.depth);
    }
  };
  Q.OpenChestAction.prototype = {
    get$_tile$_name: function() {
      return "chest";
    },
    get$_openTile: function() {
      return $.$get$Tiles_openChest();
    },
    get$_minDepthEmptyChance: function() {
      return 20;
    },
    get$_maxDepthEmptyChance: function() {
      return 2;
    },
    _createDrop$0: function() {
      return X._OneOfDrop$(P.LinkedHashMap_LinkedHashMap$_literal([X.parseDrop("treasure", null, this._action$_game.depth), 0.5, X.parseDrop("magic", null, this._action$_game.depth), 0.2, X.parseDrop("equipment", null, this._action$_game.depth), 0.3], L.Drop, P.double));
    }
  };
  Y.Decor.prototype = {};
  S.Furnishing.prototype = {
    canPlace$2: function(painter, pos) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, y, t10, x, t11, t12, t13, t14, t15;
      for (t1 = this._cells, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t1 = t1._elements, t4 = t1.length, t5 = painter._painter$_architect, t6 = t5.stage, t5 = t5._owners, t7 = t5._elements, t5 = t5.bounds.size.x, t8 = t7.length, t9 = painter._architecture, y = 0; y < t3; ++y)
        for (t10 = y * t2, x = 0; x < t2; ++x) {
          t11 = pos.x + x;
          t12 = pos.y + y;
          t13 = t6.tiles;
          t14 = t13.bounds;
          if (!t14.contains$1(0, new L.Vec(t11, t12)))
            return false;
          t15 = t12 * t5 + t11;
          if (t15 < 0 || t15 >= t8)
            return H.ioore(t7, t15);
          if (t7[t15] != t9)
            return false;
          t15 = t10 + x;
          if (t15 < 0 || t15 >= t4)
            return H.ioore(t1, t15);
          t15 = t1[t15];
          t13 = t13._elements;
          t11 = t12 * t14.size.x + t11;
          if (t11 < 0 || t11 >= t13.length)
            return H.ioore(t13, t11);
          if (!t15.meetsRequirement$1(t13[t11].type))
            return false;
        }
      return true;
    },
    place$2: function(painter, pos) {
      var t1, t2, t3, t4, t5, y, t6, x, t7, t8, t9, t10, t11;
      for (t1 = this._cells, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t1 = t1._elements, t4 = t1.length, t5 = painter._painter$_architect.stage, y = 0; y < t3; ++y)
        for (t6 = y * t2, x = 0; x < t2; ++x) {
          t7 = t6 + x;
          if (t7 < 0 || t7 >= t4)
            return H.ioore(t1, t7);
          t7 = t1[t7];
          t8 = pos.x;
          t9 = pos.y;
          t7 = t7._apply;
          if (t7 != null) {
            t10 = t5.tiles;
            t11 = t10._elements;
            t8 = (t9 + y) * t10.bounds.size.x + (t8 + x);
            if (t8 < 0 || t8 >= t11.length)
              return H.ioore(t11, t8);
            t11[t8].type = t7;
            ++painter._painted;
          }
        }
    }
  };
  S.Cell.prototype = {
    meetsRequirement$1: function(tile) {
      var t1 = this._motility;
      if (t1 != null && (tile.motility._bitMask & t1._bitMask) === 0)
        return false;
      t1 = this._require;
      if (t1.length !== 0 && !C.JSArray_methods.contains$1(t1, tile))
        return false;
      return true;
    }
  };
  T.Symmetry.prototype = {
    toString$0: function(_) {
      return this._name;
    }
  };
  T.furnishing_closure.prototype = {
    call$1: function(line) {
      return J.trim$0$s(H.stringTypeCheck(line));
    },
    $signature: 3
  };
  A.Elements_closure2.prototype = {
    call$1: function(_) {
      H.intTypeCheck(_);
      return new G.WindAction();
    },
    $signature: 127
  };
  A.Elements_closure7.prototype = {
    call$1: function(_) {
      H.intTypeCheck(_);
      return new G.BurnActorAction();
    },
    $signature: 128
  };
  A.Elements_closure8.prototype = {
    call$4: function(pos, hit, distance, fuel) {
      H.interceptedTypeCheck(pos, "$isVec");
      H.interceptedTypeCheck(hit, "$isHit");
      H.numTypeCheck(distance);
      H.intTypeCheck(fuel);
      return new G.BurnFloorAction(pos, C.JSNumber_methods.toInt$0(hit.get$averageDamage()), fuel);
    },
    "call*": "call$4",
    $requiredArgCount: 4,
    $signature: 129
  };
  A.Elements_closure5.prototype = {
    call$1: function(damage) {
      return new E.FreezeActorAction(H.intTypeCheck(damage));
    },
    $signature: 134
  };
  A.Elements_closure6.prototype = {
    call$4: function(pos, hit, distance, _) {
      H.interceptedTypeCheck(pos, "$isVec");
      H.interceptedTypeCheck(hit, "$isHit");
      H.numTypeCheck(distance);
      H.intTypeCheck(_);
      return new G.FreezeFloorAction(pos);
    },
    "call*": "call$4",
    $requiredArgCount: 4,
    $signature: 135
  };
  A.Elements_closure.prototype = {
    call$1: function(damage) {
      return new E.PoisonAction(H.intTypeCheck(damage));
    },
    $signature: 41
  };
  A.Elements_closure0.prototype = {
    call$4: function(pos, hit, distance, _) {
      H.interceptedTypeCheck(pos, "$isVec");
      H.interceptedTypeCheck(hit, "$isHit");
      H.numTypeCheck(distance);
      H.intTypeCheck(_);
      return new G.PoisonFloorAction(pos, C.JSNumber_methods.toInt$0(hit.get$averageDamage()));
    },
    "call*": "call$4",
    $requiredArgCount: 4,
    $signature: 42
  };
  A.Elements_closure1.prototype = {
    call$1: function(damage) {
      return new E.BlindAction(H.intTypeCheck(damage));
    },
    $signature: 43
  };
  A.Elements_closure3.prototype = {
    call$1: function(damage) {
      return new E.DazzleAction(H.intTypeCheck(damage));
    },
    $signature: 44
  };
  A.Elements_closure4.prototype = {
    call$4: function(pos, hit, distance, _) {
      var t1, min, max, t2;
      H.interceptedTypeCheck(pos, "$isVec");
      H.interceptedTypeCheck(hit, "$isHit");
      H.numTypeCheck(distance);
      H.intTypeCheck(_);
      t1 = new G.LightFloorAction(pos);
      min = C.JSInt_methods.clamp$2(1 + C.JSNumber_methods.toInt$0(hit.get$averageDamage()) * 4, 0, 255);
      max = C.JSNumber_methods.clamp$2(128 + hit.get$averageDamage() * 16, 0, 255);
      t2 = hit.get$range();
      if (typeof distance !== "number")
        return H.iae(distance);
      t1._element$_emanation = C.JSNumber_methods.toInt$0(K.lerpDouble(t2 - distance, 0, hit.get$range(), min, max));
      return t1;
    },
    "call*": "call$4",
    $requiredArgCount: 4,
    $signature: 45
  };
  R._BaseBuilder.prototype = {
    stack$1: function(stack) {
      this._maxStack = stack;
    },
    toss$4$breakage$damage$element$range: function(breakage, damage, element, range) {
      this._tossDamage = damage;
      this._tossElement = element;
      this._tossRange = range;
      this._breakage = breakage;
    },
    toss$3$breakage$damage$range: function(breakage, damage, range) {
      return this.toss$4$breakage$damage$element$range(breakage, damage, null, range);
    },
    toss$1$breakage: function(breakage) {
      return this.toss$4$breakage$damage$element$range(breakage, null, null, null);
    },
    toss$3$damage$element$range: function(damage, element, range) {
      return this.toss$4$breakage$damage$element$range(null, damage, element, range);
    },
    toss$2$breakage$range: function(breakage, range) {
      return this.toss$4$breakage$damage$element$range(breakage, null, null, range);
    },
    toss$1$damage: function(damage) {
      return this.toss$4$breakage$damage$element$range(null, damage, null, null);
    },
    toss$1$range: function(range) {
      return this.toss$4$breakage$damage$element$range(null, null, null, range);
    },
    toss$2$damage$range: function(damage, range) {
      return this.toss$4$breakage$damage$element$range(null, damage, null, range);
    },
    set$_tossUse: function(_tossUse) {
      this._tossUse = H.functionTypeCheck(_tossUse, {func: 1, ret: V.Action, args: [L.Vec]});
    }
  };
  R._CategoryBuilder.prototype = {
    tag$1: function(_, tagPath) {
      var tags, t1, _i, equipSlot;
      $.$get$Items_types().defineTags$1("item/" + tagPath);
      tags = H.setRuntimeTypeInfo(tagPath.split("/"), [P.String]);
      this._builder$_tag = H.stringTypeCheck(C.JSArray_methods.get$last(tags));
      if (C.JSArray_methods.contains$1(tags, "shield") || C.JSArray_methods.contains$1(tags, "light"))
        this._equipSlot = "hand";
      else if (C.JSArray_methods.contains$1(tags, "weapon")) {
        this._equipSlot = "hand";
        t1 = C.JSArray_methods.indexOf$1(tags, "weapon") + 1;
        if (t1 < 0 || t1 >= tags.length)
          return H.ioore(tags, t1);
        this._weaponType = H.stringTypeCheck(tags[t1]);
      } else
        for (_i = 0; _i < 8; ++_i) {
          equipSlot = C.List_ww8[_i];
          if (C.JSArray_methods.contains$1(tags, equipSlot)) {
            this._equipSlot = equipSlot;
            break;
          }
        }
      $.$get$Affixes_prefixes().defineTags$1(tagPath);
      $.$get$Affixes_suffixes().defineTags$1(tagPath);
    }
  };
  R._ItemBuilder.prototype = {
    depth$2$to: function(from, to) {
      H.intTypeCheck(from);
      H.intTypeCheck(to);
      this._minDepth = from;
      this._maxDepth = to == null ? 100 : to;
    },
    depth$1: function(from) {
      return this.depth$2$to(from, null);
    },
    weapon$3$element$heft: function(damage, element, heft) {
      this._builder$_attack = U.Attack$(null, $._category._builder$_verb, damage, null, element);
      this._heft = heft;
    },
    weapon$2$heft: function(damage, heft) {
      return this.weapon$3$element$heft(damage, null, heft);
    },
    ranged$4$damage$heft$range: function(noun, damage, heft, range) {
      this._builder$_attack = U.Attack$(new O.Noun(noun), "pierce[s]", damage, range, null);
      this._heft = heft;
    },
    food$1: function(amount) {
      this._use = new L.ItemUse("Provides " + amount + " turns of food.", H.functionTypeCheck(new R._ItemBuilder_food_closure(amount), {func: 1, ret: V.Action}));
    },
    detection$2$range: function(types, range) {
      var t1, typeDescription, description;
      H.assertSubtype(types, "$isList", [T.DetectType], "$asList");
      t1 = types.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(types, 0);
        typeDescription = types[0] === C.DetectType_0 ? "exits" : "items";
      } else
        typeDescription = "exits and items";
      description = "Detects " + typeDescription;
      this._use = new L.ItemUse((range != null ? description + ("up to " + H.S(range) + " steps away") : description) + ".", H.functionTypeCheck(new R._ItemBuilder_detection_closure(types, range), {func: 1, ret: V.Action}));
    },
    detection$1: function(types) {
      return this.detection$2$range(types, null);
    },
    resistSalve$1: function(element) {
      this._use = new L.ItemUse("Grantes resistance to " + H.S(element) + " for 40 turns.", H.functionTypeCheck(new R._ItemBuilder_resistSalve_closure(element), {func: 1, ret: V.Action}));
    },
    mapping$2$illuminate: function(distance, illuminate) {
      var t1, t2, description;
      t1 = {};
      t1.illuminate = illuminate;
      if (illuminate == null) {
        t1.illuminate = false;
        t2 = false;
      } else
        t2 = illuminate;
      description = "Imparts knowledge of the dungeon up to " + distance + " steps from the hero.";
      if (t2)
        description += " Illuminates the dungeon.";
      this._use = new L.ItemUse(description, H.functionTypeCheck(new R._ItemBuilder_mapping_closure(t1, distance), {func: 1, ret: V.Action}));
    },
    mapping$1: function(distance) {
      return this.mapping$2$illuminate(distance, null);
    },
    haste$2: function(amount, duration) {
      this._use = new L.ItemUse("Raises speed by " + amount + " for " + duration + " turns.", H.functionTypeCheck(new R._ItemBuilder_haste_closure(amount, duration), {func: 1, ret: V.Action}));
    },
    teleport$1: function(distance) {
      this._use = new L.ItemUse("Attempts to teleport up to " + distance + " steps away.", H.functionTypeCheck(new R._ItemBuilder_teleport_closure(distance), {func: 1, ret: V.Action}));
    },
    heal$2$curePoison: function(amount, curePoison) {
      this._use = new L.ItemUse("Instantly heals " + amount + " lost health.", H.functionTypeCheck(new R._ItemBuilder_heal_closure(amount, curePoison), {func: 1, ret: V.Action}));
    },
    heal$1: function(amount) {
      return this.heal$2$curePoison(amount, false);
    },
    ball$5$range: function(element, noun, verb, damage, range) {
      var attack = U.Attack$(new O.Noun(noun), verb, damage, 3, element);
      this._use = new L.ItemUse("Unleashes a ball of " + H.S(element) + " that inflicts " + damage + " damage out to 3 steps from the hero.", H.functionTypeCheck(new R._ItemBuilder_ball_closure(attack), {func: 1, ret: V.Action}));
      this.set$_tossUse(H.functionTypeCheck(new R._ItemBuilder_ball_closure0(attack), {func: 1, ret: V.Action, args: [L.Vec]}));
    },
    ball$4: function(element, noun, verb, damage) {
      return this.ball$5$range(element, noun, verb, damage, null);
    },
    flow$6$fly$range: function(element, noun, verb, damage, fly, range) {
      var t1, attack, motility, t2;
      t1 = {};
      attack = U.Attack$(new O.Noun(noun), verb, damage, range, element);
      motility = $.$get$Motility_walk();
      t1.motility = motility;
      if (fly) {
        t2 = $.$get$Motility_fly();
        t1.motility = new Q.Motility(motility._bitMask | t2._bitMask);
      }
      this._use = new L.ItemUse("Unleashes a flow of " + H.S(element) + " that inflicts " + damage + " damage out to " + range + " steps from the hero.", H.functionTypeCheck(new R._ItemBuilder_flow_closure(t1, attack), {func: 1, ret: V.Action}));
      this.set$_tossUse(H.functionTypeCheck(new R._ItemBuilder_flow_closure0(t1, attack), {func: 1, ret: V.Action, args: [L.Vec]}));
    },
    flow$5$fly: function(element, noun, verb, damage, fly) {
      return this.flow$6$fly$range(element, noun, verb, damage, fly, 5);
    },
    flow$4: function(element, noun, verb, damage) {
      return this.flow$6$fly$range(element, noun, verb, damage, false, 5);
    },
    lightSource$2$level$range: function(level, range) {
      this._builder$_emanation = level;
      this._use = new L.ItemUse("Illuminates out to a range of " + range + ".", H.functionTypeCheck(new R._ItemBuilder_lightSource_closure(range, level), {func: 1, ret: V.Action}));
    }
  };
  R._ItemBuilder_food_closure.prototype = {
    call$0: function() {
      return new X.EatAction(this.amount);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 47
  };
  R._ItemBuilder_detection_closure.prototype = {
    call$0: function() {
      var t1 = this.types;
      return new T.DetectAction(P.LinkedHashSet_LinkedHashSet$from(t1, H.getTypeArgumentByIndex(t1, 0)), this.range);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 48
  };
  R._ItemBuilder_resistSalve_closure.prototype = {
    call$0: function() {
      return new E.ResistAction(40, this.element);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 49
  };
  R._ItemBuilder_mapping_closure.prototype = {
    call$0: function() {
      var t1 = this._box_0.illuminate;
      return new Q.MappingAction(this.distance, t1 === true);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 50
  };
  R._ItemBuilder_haste_closure.prototype = {
    call$0: function() {
      return new E.HasteAction(this.amount, this.duration);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 51
  };
  R._ItemBuilder_teleport_closure.prototype = {
    call$0: function() {
      return new S.TeleportAction(this.distance);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 52
  };
  R._ItemBuilder_heal_closure.prototype = {
    call$0: function() {
      return new O.HealAction(this.amount, this.curePoison);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 53
  };
  R._ItemBuilder_ball_closure.prototype = {
    call$0: function() {
      return new G.RingSelfAction(this.attack);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 54
  };
  R._ItemBuilder_ball_closure0.prototype = {
    call$1: function(pos) {
      return new G.RingFromAction(this.attack, H.interceptedTypeCheck(pos, "$isVec"));
    },
    $signature: 55
  };
  R._ItemBuilder_flow_closure.prototype = {
    call$0: function() {
      return new N.FlowSelfAction(this.attack, this._box_0.motility);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 56
  };
  R._ItemBuilder_flow_closure0.prototype = {
    call$1: function(pos) {
      return new N.FlowFromAction(this.attack, H.interceptedTypeCheck(pos, "$isVec"), this._box_0.motility);
    },
    $signature: 57
  };
  R._ItemBuilder_lightSource_closure.prototype = {
    call$0: function() {
      return new F.IlluminateSelfAction(this.range, this.level + 1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 58
  };
  R._AffixBuilder.prototype = {
    depth$2$to: function(from, to) {
      H.intTypeCheck(from);
      H.intTypeCheck(to);
      this._minDepth = from;
      this._maxDepth = to == null ? 100 : to;
    },
    depth$1: function(from) {
      return this.depth$2$to(from, null);
    },
    brand$2$resist: function(element, resist) {
      var t1;
      this._builder$_brand = element;
      t1 = resist == null ? 1 : resist;
      this._builder$_resists.$indexSet(0, element, t1);
    },
    brand$1: function(element) {
      return this.brand$2$resist(element, null);
    },
    resist$2: function(element, power) {
      var t1 = power == null ? 1 : power;
      this._builder$_resists.$indexSet(0, element, t1);
    },
    resist$1: function(element) {
      return this.resist$2(element, null);
    }
  };
  X._ItemDrop.prototype = {
    dropItem$2: function(depth, addItem) {
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      addItem.call$1(Z.Affixes_createItem(this._type, this._drops$_depth, this._affixChance));
    },
    $isDrop: 1
  };
  X._TagDrop.prototype = {
    dropItem$2: function(depth, addItem) {
      var t1, t2, itemType;
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      t1 = $.$get$Items_types();
      t2 = this._drops$_depth;
      itemType = t1.tryChoose$2$tag(t2, this._tag);
      if (itemType == null)
        return;
      addItem.call$1(Z.Affixes_createItem(itemType, t2, this._affixChance));
    },
    $isDrop: 1
  };
  X._PercentDrop.prototype = {
    dropItem$2: function(depth, addItem) {
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      if ($.$get$rng().range$1(100) >= this._chance)
        return;
      this._drop.dropItem$2(depth, addItem);
    },
    $isDrop: 1
  };
  X._AllOfDrop.prototype = {
    dropItem$2: function(depth, addItem) {
      var t1, t2, _i;
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      for (t1 = this._drops, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].dropItem$2(depth, addItem);
    },
    $isDrop: 1
  };
  X._OneOfDrop.prototype = {
    _OneOfDrop$1: function(drops) {
      drops.forEach$1(0, new X._OneOfDrop_closure(this));
    },
    dropItem$2: function(depth, addItem) {
      var drop;
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      drop = this._drop.tryChoose$1(1);
      if (drop == null)
        return;
      drop.dropItem$2(depth, addItem);
    },
    $isDrop: 1
  };
  X._OneOfDrop_closure.prototype = {
    call$2: function(drop, frequency) {
      var t1;
      H.interceptedTypeCheck(drop, "$isDrop");
      H.doubleTypeCheck(frequency);
      t1 = this.$this._drop;
      t1._resource$_add$7(H.assertSubtypeOfRuntimeType(drop, H.getTypeArgumentByIndex(t1, 0)), null, null, null, frequency, frequency, null);
    },
    $signature: 59
  };
  X._RepeatDrop.prototype = {
    dropItem$2: function(depth, addItem) {
      var t1, taper, t2, count, i;
      H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
      t1 = this._drops$_count;
      taper = t1 > 3 ? 4 : 5;
      if (t1 > 6)
        taper = 3;
      t2 = $.$get$rng();
      count = t2.triangleInt$2(t1, t1 / 2 | 0) + t2.taper$2(0, taper);
      for (t1 = this._drop, i = 0; i < count; ++i)
        t1.dropItem$2(depth, addItem);
    },
    $isDrop: 1
  };
  F.FloorDrop.prototype = {};
  R.shop_closure.prototype = {
    call$2: function($name, frequency) {
      H.stringTypeCheck($name);
      H.doubleTypeCheck(frequency);
      this.drops.$indexSet(0, X.parseDrop($name, null, null), frequency);
    },
    $signature: 60
  };
  R._BaseBuilder0.prototype = {
    count$2: function(minOrMax, max) {
      if (max == null) {
        this._countMin = 1;
        this._countMax = minOrMax;
      } else {
        this._countMin = minOrMax;
        this._countMax = max;
      }
    },
    count$1: function(minOrMax) {
      return this.count$2(minOrMax, null);
    }
  };
  R._FamilyBuilder.prototype = {};
  R._BreedBuilder.prototype = {
    minion$3: function($name, minOrMax, max) {
      var spawn, t1;
      if ($.$get$Monsters_breeds()._tags.containsKey$1(0, $name))
        spawn = new B._TagSpawn($name);
      else {
        t1 = new B.BreedRef($name);
        C.JSArray_methods.add$1($.$get$BreedRef__unresolved(), t1);
        spawn = new B._BreedSpawn(t1);
      }
      if (max != null)
        spawn = new B._RepeatSpawn(minOrMax, max, spawn);
      else if (minOrMax != null)
        spawn = new B._RepeatSpawn(1, minOrMax, spawn);
      C.JSArray_methods.add$1(this._minions, spawn);
    },
    minion$1: function($name) {
      return this.minion$3($name, null, null);
    },
    drop$5$affixChance$count$depthOffset$percent: function($name, affixChance, count, depthOffset, percent) {
      var drop = new X._PercentDrop(percent, X.parseDrop($name, affixChance, this._builder0$_depth + depthOffset));
      if (count > 1)
        drop = new X._RepeatDrop(count, drop);
      C.JSArray_methods.add$1(this._builder0$_drops, drop);
    },
    drop$2$count: function($name, count) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, null, count, 0, 100);
    },
    drop$2$percent: function($name, percent) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, null, 1, 0, percent);
    },
    drop$4$affixChance$count$depthOffset: function($name, affixChance, count, depthOffset) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, affixChance, count, depthOffset, 100);
    },
    drop$3$count$depthOffset: function($name, count, depthOffset) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, null, count, depthOffset, 100);
    },
    drop$4$affixChance$depthOffset$percent: function($name, affixChance, depthOffset, percent) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, affixChance, 1, depthOffset, percent);
    },
    drop$3$count$percent: function($name, count, percent) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, null, count, 0, percent);
    },
    drop$3$depthOffset$percent: function($name, depthOffset, percent) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, null, 1, depthOffset, percent);
    },
    drop$3$affixChance$count: function($name, affixChance, count) {
      return this.drop$5$affixChance$count$depthOffset$percent($name, affixChance, count, 0, 100);
    },
    _bolt$6$damage$range$rate: function(noun, verb, element, damage, range, rate) {
      C.JSArray_methods.add$1(this._moves, new O.BoltMove(U.Attack$(noun != null ? new O.Noun(noun) : null, verb, damage, range, element), rate));
    }
  };
  B._BreedSpawn.prototype = {
    spawnBreed$2: function(depth, addMonster) {
      H.functionTypeCheck(addMonster, {func: 1, ret: -1, args: [B.Breed]}).call$1(this._spawns$_breed._breed$_breed);
    },
    $isSpawn: 1
  };
  B._TagSpawn.prototype = {
    spawnBreed$2: function(depth, addMonster) {
      var t1, tries, breed;
      H.functionTypeCheck(addMonster, {func: 1, ret: -1, args: [B.Breed]});
      for (t1 = this._spawns$_tag, tries = 0; tries < 10; ++tries) {
        breed = $.$get$Monsters_breeds().tryChoose$3$includeParents$tag(depth, false, t1);
        if (breed == null)
          continue;
        if (breed.flags.unique)
          continue;
        addMonster.call$1(breed);
        break;
      }
    },
    $isSpawn: 1
  };
  B._RepeatSpawn.prototype = {
    spawnBreed$2: function(depth, addMonster) {
      var t1, taper, t2, count, i;
      H.functionTypeCheck(addMonster, {func: 1, ret: -1, args: [B.Breed]});
      t1 = this._spawns$_maxCount;
      taper = t1 > 3 ? 4 : 5;
      if (t1 > 6)
        taper = 3;
      t2 = $.$get$rng();
      count = t2.inclusive$2(this._minCount, t1) + t2.taper$2(0, taper);
      for (t1 = this._spawn, i = 0; i < count; ++i)
        t1.spawnBreed$2(depth, addMonster);
    },
    $isSpawn: 1
  };
  B._AllOfSpawn.prototype = {
    spawnBreed$2: function(depth, addMonster) {
      var t1, t2, _i;
      H.functionTypeCheck(addMonster, {func: 1, ret: -1, args: [B.Breed]});
      for (t1 = this._spawns, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].spawnBreed$2(depth, addMonster);
    },
    $isSpawn: 1
  };
  Q.AmputateMove.prototype = {
    get$experience: function() {
      return this._amputate$_body._breed$_breed.maxHealth * 0.5;
    },
    shouldUse$1: function(monster) {
      return false;
    },
    shouldUseOnDamage$2: function(monster, damage) {
      var t1, t2, t3;
      t1 = monster._breed.maxHealth;
      t2 = $.$get$rng();
      if (t2.float$1(0, 2) <= damage / t1)
        return true;
      t1 = monster._health;
      t3 = monster._breed.maxHealth;
      if (typeof t1 !== "number")
        return t1.$div();
      if (t2.float$1(0, 2) <= t1 / t3)
        return true;
      return false;
    },
    onGetAction$1: function(monster) {
      return new Q.AmputateAction(this._amputate$_body._breed$_breed, this._part._breed$_breed, this._amputate$_message);
    },
    toString$0: function(_) {
      return "Amputate " + H.S(O.Log__categorize(this._amputate$_body._breed$_breed._breed$_name, false, true)) + " + " + H.S(O.Log__categorize(this._part._breed$_breed._breed$_name, false, true));
    }
  };
  O.BoltMove.prototype = {
    get$experience: function() {
      var t1 = this.attack;
      return t1.damage * t1.element.experience * (1 + t1.range / 20);
    },
    shouldUse$1: function(monster) {
      var chance, target, toTarget;
      if ((monster.blindness._turnsRemaining > 0 || monster.dazzle._turnsRemaining > 0) && $.$get$rng().float$1(0, 1) < monster.get$sightReliance()) {
        chance = C.JSNumber_methods.toInt$0(K.lerpDouble(monster.get$sightReliance(), 0, 1, 0, 90));
        if ($.$get$rng().range$1(100) < chance)
          return false;
      }
      target = monster.game.hero._pos;
      toTarget = target.$sub(0, monster._pos);
      if (toTarget.$gt(0, this.attack.range)) {
        E.Debug_monsterLog(monster, "bolt move too far");
        return false;
      }
      if (toTarget.$lt(0, 1.5)) {
        E.Debug_monsterLog(monster, "bolt move too close");
        return false;
      }
      if (!monster.canTarget$1(target)) {
        E.Debug_monsterLog(monster, "bolt move can't target");
        return false;
      }
      E.Debug_monsterLog(monster, "bolt move OK");
      return true;
    },
    onGetAction$1: function(monster) {
      var t1 = monster.game.hero._pos;
      return new O.BoltAction(new U.Hit(this.attack, 1, 1, $.$get$Element_none(), 1), false, null, t1);
    },
    toString$0: function(_) {
      return "Bolt " + this.attack.toString$0(0) + " rate: " + this.rate;
    }
  };
  Y.ConeMove.prototype = {
    get$range: function() {
      return this.attack.range;
    },
    get$experience: function() {
      var t1 = this.attack;
      return t1.damage * 3 * t1.element.experience * (1 + t1.range / 10);
    },
    shouldUse$1: function(monster) {
      var chance, target;
      if ((monster.blindness._turnsRemaining > 0 || monster.dazzle._turnsRemaining > 0) && $.$get$rng().float$1(0, 1) < monster.get$sightReliance()) {
        chance = C.JSNumber_methods.toInt$0(K.lerpDouble(monster.get$sightReliance(), 0, 1, 0, 70));
        if ($.$get$rng().range$1(100) < chance)
          return false;
      }
      target = monster.game.hero._pos;
      if (target.$sub(0, monster._pos).$gt(0, this.attack.range)) {
        E.Debug_monsterLog(monster, "cone move too far");
        return false;
      }
      if (!monster.canView$1(target)) {
        E.Debug_monsterLog(monster, "cone move can't target");
        return false;
      }
      E.Debug_monsterLog(monster, "cone move OK");
      return true;
    },
    onGetAction$1: function(monster) {
      var t1, t2, t3;
      t1 = monster._pos;
      t2 = monster.game.hero._pos;
      t3 = new G.RayAction(new U.Hit(this.attack, 1, 1, $.$get$Element_none(), 1), t1, t2, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 1, H.setRuntimeTypeInfo([], [P.double]));
      t3.RayActionBase$3(t1, t2, 0.125);
      return t3;
    },
    toString$0: function(_) {
      return "Cone " + this.attack.toString$0(0) + " rate: " + this.rate;
    }
  };
  X.HasteMove.prototype = {
    get$experience: function() {
      return this._duration * this._speed;
    },
    shouldUse$1: function(monster) {
      return monster.haste._turnsRemaining <= 0;
    },
    onGetAction$1: function(monster) {
      return new E.HasteAction(this._duration, this._speed);
    },
    toString$0: function(_) {
      return "Haste " + this._speed + " for " + this._duration + " turns rate: " + this.rate;
    }
  };
  O.HealMove.prototype = {
    get$experience: function() {
      return this._amount;
    },
    shouldUse$1: function(monster) {
      var t1, t2;
      t1 = monster._health;
      t2 = monster._breed.maxHealth;
      if (typeof t1 !== "number")
        return t1.$div();
      return t1 / t2 < 0.25 || t2 - t1 >= this._amount;
    },
    onGetAction$1: function(monster) {
      return new O.HealAction(this._amount, false);
    },
    toString$0: function(_) {
      return "Heal " + this._amount + " rate: " + this.rate;
    }
  };
  U.HowlMove.prototype = {
    get$experience: function() {
      return this._howl$_range * 0.5;
    },
    shouldUse$1: function(monster) {
      var t1, t2, t3, _i, actor;
      t1 = monster.game;
      t2 = t1._stage;
      t3 = monster._pos;
      t3 = t2.tiles.$index(0, t3);
      if (!(!t3._isOccluded && t3.illumination - t3._fallOff > 0))
        return false;
      for (t1 = t1._stage._actors, t2 = t1.length, t3 = this._howl$_range, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        actor = t1[_i];
        if (actor == monster)
          continue;
        if (actor instanceof B.Monster && actor._monster$_state instanceof M.AsleepState && actor._pos.$sub(0, monster._pos).$le(0, t3))
          return true;
      }
      return false;
    },
    onGetAction$1: function(monster) {
      var t1 = this._howl$_verb;
      if (t1 == null)
        t1 = "howls";
      return new U.HowlAction(this._howl$_range, t1);
    },
    toString$0: function(_) {
      return "Howl " + this._howl$_range;
    }
  };
  R.MissiveMove.prototype = {
    get$experience: function() {
      return 0;
    },
    shouldUse$1: function(monster) {
      var target = monster.game.hero._pos;
      if (target.$sub(0, monster._pos).get$kingLength() <= 1)
        return false;
      return monster.canView$1(target);
    },
    onGetAction$1: function(monster) {
      return new R.MissiveAction(monster.game.hero, this._missive);
    },
    toString$0: function(_) {
      return this._missive.toString$0(0) + " rate: " + this.rate;
    }
  };
  L.SpawnMove.prototype = {
    get$experience: function() {
      return 6;
    },
    shouldUse$1: function(monster) {
      var t1, t2, t3, _i, neighbor, t4, t5;
      t1 = monster.game;
      t2 = t1._stage;
      t3 = monster._pos;
      t3 = t2.tiles.$index(0, t3);
      if (!(!t3._isOccluded && t3.illumination - t3._fallOff > 0))
        return false;
      for (t2 = monster._pos.get$neighbors(), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        neighbor = t2[_i];
        if (monster.canOccupy$1(neighbor)) {
          t4 = t1._stage._actorsByTile;
          t5 = t4._elements;
          t4 = neighbor.y * t4.bounds.size.x + neighbor.x;
          if (t4 < 0 || t4 >= t5.length)
            return H.ioore(t5, t4);
          t4 = t5[t4] == null;
        } else
          t4 = false;
        if (t4) {
          t4 = t1._stage.tiles;
          t5 = t4._elements;
          t4 = neighbor.y * t4.bounds.size.x + neighbor.x;
          if (t4 < 0 || t4 >= t5.length)
            return H.ioore(t5, t4);
          t4 = t5[t4].substance === 0;
        } else
          t4 = false;
        if (t4)
          return true;
      }
      return false;
    },
    onGetAction$1: function(monster) {
      var t1, dirs, _i, dir, t2, t3, t4;
      t1 = [Z.Direction];
      dirs = H.setRuntimeTypeInfo([], t1);
      if (this._preferStraight)
        for (_i = 0; _i < 8; ++_i) {
          dir = C.List_slV[_i];
          t2 = monster._pos.$add(0, dir);
          if (monster.canOccupy$1(t2)) {
            t3 = monster.game._stage._actorsByTile;
            t4 = t3._elements;
            t3 = t2.y * t3.bounds.size.x + t2.x;
            if (t3 < 0 || t3 >= t4.length)
              return H.ioore(t4, t3);
            t3 = t4[t3] == null;
          } else
            t3 = false;
          if (t3) {
            t3 = monster.game._stage.tiles;
            t4 = t3._elements;
            t2 = t2.y * t3.bounds.size.x + t2.x;
            if (t2 < 0 || t2 >= t4.length)
              return H.ioore(t4, t2);
            t2 = t4[t2].substance === 0;
          } else
            t2 = false;
          if (!t2)
            continue;
          t2 = new L.SpawnMove_onGetAction_checkNeighbor(monster, dir);
          if (t2.call$1(dir.get$rotate180()))
            C.JSArray_methods.addAll$1(dirs, H.setRuntimeTypeInfo([dir, dir, dir, dir, dir], t1));
          if (t2.call$1(dir.get$rotate180().get$rotateLeft45()))
            C.JSArray_methods.add$1(dirs, dir);
          if (t2.call$1(dir.get$rotate180().get$rotateRight45()))
            C.JSArray_methods.add$1(dirs, dir);
        }
      if (dirs.length === 0)
        for (_i = 0; _i < 8; ++_i) {
          dir = C.List_slV[_i];
          t1 = monster._pos.$add(0, dir);
          if (monster.canOccupy$1(t1)) {
            t2 = monster.game._stage._actorsByTile;
            t3 = t2._elements;
            t2 = t1.y * t2.bounds.size.x + t1.x;
            if (t2 < 0 || t2 >= t3.length)
              return H.ioore(t3, t2);
            t2 = t3[t2] == null;
          } else
            t2 = false;
          if (t2) {
            t2 = monster.game._stage.tiles;
            t3 = t2._elements;
            t1 = t1.y * t2.bounds.size.x + t1.x;
            if (t1 < 0 || t1 >= t3.length)
              return H.ioore(t3, t1);
            t1 = t3[t1].substance === 0;
          } else
            t1 = false;
          if (!t1)
            continue;
          C.JSArray_methods.add$1(dirs, dir);
        }
      t1 = monster._pos;
      t2 = $.$get$rng();
      t2.toString;
      H.assertSubtype(dirs, "$isList", [P.Object], "$asList");
      t2 = t2.range$1(dirs.length);
      if (t2 < 0 || t2 >= dirs.length)
        return H.ioore(dirs, t2);
      return new L.SpawnAction(t1.$add(0, dirs[t2]), monster._breed);
    },
    toString$0: function(_) {
      return "Spawn rate: " + this.rate;
    }
  };
  L.SpawnMove_onGetAction_checkNeighbor.prototype = {
    call$1: function(neighbor) {
      var t1, t2, t3;
      t1 = this.monster;
      t2 = t1.game._stage;
      t3 = t1._pos.$add(0, this.dir);
      t3 = t2._actorsByTile.$index(0, t3);
      return t3 != null && !!t3.$isMonster && t3._breed == t1._breed;
    },
    $signature: 8
  };
  S.TeleportMove.prototype = {
    get$experience: function() {
      return this._teleport$_range * 0.7;
    },
    shouldUse$1: function(monster) {
      var distance;
      if (monster._monster$_state instanceof M.AfraidState)
        return true;
      distance = monster.game.hero._pos.$sub(0, monster._pos).get$kingLength();
      if (monster.wantsToMelee && distance <= 1)
        return false;
      return true;
    },
    onGetAction$1: function(monster) {
      return new S.TeleportAction(this._teleport$_range);
    },
    toString$0: function(_) {
      return "Teleport " + this._teleport$_range;
    }
  };
  X.Archery.prototype = {
    get$maxLevel: function() {
      return 20;
    },
    get$name: function(_) {
      return "Archery";
    },
    get$description: function() {
      return "Kill your foe without risking harm to yourself by unleashing a volley of arrows from far away.";
    },
    levelDescription$1: function(level) {
      return "Scales strike by " + C.JSNumber_methods.toInt$0(K.lerpDouble(level, 1, 20, 0.7, 2) * 100) + "%.";
    },
    unusableReason$1: function(game) {
      if (this._hasBow$1(game.hero))
        return;
      return "No bow equipped.";
    },
    _hasBow$1: function(hero) {
      return hero.save._equipment.get$weapons().any$1(0, new X.Archery__hasBow_closure());
    },
    baseTrainingNeeded$1: function(level) {
      --level;
      return 100 * level * level * level;
    },
    getRange$1: function(_, game) {
      var hit = game.hero.createRangedHit$0();
      hit._strikeScale *= K.lerpDouble(game.hero.save.skills.level$1(this), 1, 20, 0.7, 2);
      return hit.get$range();
    },
    getTargetAction$3: function(game, level, target) {
      return new X.ArrowAction(this, game.hero.createRangedHit$0(), true, null, target);
    },
    $isUsableSkill: 1
  };
  X.Archery__hasBow_closure.prototype = {
    call$1: function(item) {
      return H.interceptedTypeCheck(item, "$isItem").type.weaponType === "bow";
    },
    $signature: 7
  };
  X.ArrowAction.prototype = {
    onHitActor$2: function(pos, target) {
      var t1;
      this.super$BoltAction$onHitActor(pos, target);
      H.interceptedTypeCast(target, "$isMonster");
      t1 = this._skill;
      H.interceptedTypeCast(this._actor, "$isHero").save.skills.earnPoints$2(t1, C.JSDouble_methods.ceil$0(target._breed.get$experience() / 1000));
      H.interceptedTypeCast(this._actor, "$isHero").refreshSkill$1(t1);
      return true;
    }
  };
  X._Archery_Discipline_TargetSkill.prototype = {};
  D.AxeMastery.prototype = {
    get$name: function(_) {
      return "Axe Mastery";
    },
    get$useName: function() {
      return "Axe Sweep";
    },
    get$description: function() {
      return "Axes are not just for woodcutting. In the hands of a skilled user, they can cut down a swath of nearby foes as well.";
    },
    get$weaponType: function() {
      return "axe";
    },
    levelDescription$1: function(level) {
      var damage = C.JSNumber_methods.toInt$0(K.lerpDouble(level, 1, 10, 0.5, 1) * 100);
      return this.super$MasteryDiscipline$levelDescription(level) + (" Sweep attacks inflict " + damage + "% of the damage of a regular attack.");
    },
    getDirectionAction$3: function(game, level, dir) {
      return new D.SweepAction(dir, null, K.lerpDouble(level, 1, 10, 0.5, 1));
    },
    $isDirectionSkill: 1
  };
  D.SweepAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    get$weaponType: function() {
      return "axe";
    },
    onGenerate$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, _i, dir, pos, t3, t4;
        return function $async$onGenerate$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._axe$_dir, t2 = [t1.get$rotateLeft45(), t1, t1.get$rotateRight45()], _i = 0;
              case 3:
                // for condition
                if (!(_i < 3)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                dir = t2[_i];
                pos = $async$self._actor._pos.$add(0, dir);
                t3 = $async$self._action$_game._stage.tiles;
                t4 = t3._elements;
                t3 = pos.y * t3.bounds.size.x + pos.x;
                if (t3 < 0 || t3 >= t4.length) {
                  H.ioore(t4, t3);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t3 = t4[t3];
                $async$goto = !t3._isExplored ? 6 : 7;
                break;
              case 6:
                // then
                $async$self.error$4(0, "You can't see where you're swinging.", null, null, null);
                $async$goto = 8;
                return C.ActionResult_null_false_true;
              case 8:
                // after yield
                // goto return
                $async$goto = 1;
                break;
              case 7:
                // join
                t4 = $.$get$Motility_fly();
                $async$goto = (t3.type.motility._bitMask & t4._bitMask) === 0 ? 9 : 10;
                break;
              case 9:
                // then
                $async$self.error$4(0, "There isn't enough room to swing your weapon.", null, null, null);
                $async$goto = 11;
                return C.ActionResult_null_false_true;
              case 11:
                // after yield
                // goto return
                $async$goto = 1;
                break;
              case 10:
              // join
              case 4:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                t1 = [t1.get$rotateLeft45(), t1, t1.get$rotateRight45()], _i = 0;
              case 12:
                // for condition
                if (!(_i < 3)) {
                  // goto after for
                  $async$goto = 14;
                  break;
                }
                dir = t1[_i];
                t2 = $async$self._actor._pos.$add(0, dir);
                C.JSArray_methods.add$1($async$self._action$_game._events, new D.Event0(C.EventType_slash, null, null, null, t2, dir));
                $async$goto = 15;
                return P._IterationMarker_yieldStar($async$self.wait$1(2));
              case 15:
                // after yield
                $async$self.attack$1($async$self._actor._pos.$add(0, dir));
                $async$goto = 16;
                return P._IterationMarker_yieldStar($async$self.wait$1(3));
              case 16:
              // after yield
              case 13:
                // for update
                ++_i;
                // goto for condition
                $async$goto = 12;
                break;
              case 14:
              // after for
              case 1:
                // return
                return P._IterationMarker_endOfIteration();
              case 2:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, V.ActionResult);
    },
    toString$0: function(_) {
      return H.S(this._actor) + " slashes " + this._axe$_dir.toString$0(0);
    }
  };
  D._SweepAction_MasteryAction_GeneratorActionMixin.prototype = {
    set$_action$_iterator: function(_iterator) {
      this.GeneratorActionMixin__iterator = H.assertSubtype(_iterator, "$isIterator", [V.ActionResult], "$asIterator");
    }
  };
  M.BattleHardening.prototype = {
    get$maxLevel: function() {
      return 40;
    },
    get$description: function() {
      return "Years of taking hits have turned your skin as hard as cured leather.";
    },
    get$name: function(_) {
      return "Battle Hardening";
    },
    takeDamage$2: function(hero, damage) {
      var t1, points;
      hero.discoverSkill$1(this);
      t1 = hero.save;
      points = C.JSDouble_methods.ceil$0(10 * damage / t1.fortitude.get$maxHealth());
      t1.skills.earnPoints$2(this, points);
      hero.refreshSkill$1(this);
    },
    modifyArmor$3: function(hero, level, armor) {
      return armor + level;
    },
    levelDescription$1: function(level) {
      return "Increases armor by " + level + ".";
    },
    baseTrainingNeeded$1: function(level) {
      return C.JSNumber_methods.ceil$0(60 * Math.pow(level, 1.5));
    }
  };
  A.ClubMastery.prototype = {
    get$name: function(_) {
      return "Club Mastery";
    },
    get$useName: function() {
      return "Club Bash";
    },
    get$description: function() {
      return "Bludgeons may not be the most sophisticated of weapons, but what they lack in refinement, they make up for in brute force.";
    },
    get$weaponType: function() {
      return "club";
    },
    levelDescription$1: function(level) {
      return this.super$MasteryDiscipline$levelDescription(level) + " Bashes the enemy away.";
    },
    getDirectionAction$3: function(game, level, dir) {
      return new A.BashAction(dir, K.lerpDouble(level, 1, 10, 0.2, 0.8));
    },
    $isDirectionSkill: 1
  };
  A.BashAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    get$weaponType: function() {
      return "club";
    },
    onPerform$0: function() {
      var t1, t2, t3, dest, chance;
      t1 = this._step;
      if (t1 === 0) {
        t1 = this.attack$1(this._actor._pos.$add(0, this._club$_dir));
        this._damage = t1;
        if (t1 == null)
          return C.ActionResult_null_true_true;
      } else if (t1 === 1) {
        t1 = this._action$_game._stage;
        t2 = this._club$_dir;
        t3 = this._actor._pos.$add(0, t2);
        t3 = t1._actorsByTile.$index(0, t3);
        if (t3 == null)
          return C.ActionResult_null_true_true;
        dest = this._actor._pos.$add(0, t2).$add(0, t2);
        t1 = this._damage;
        if (typeof t1 !== "number")
          return H.iae(t1);
        chance = H.intTypeCheck(C.JSInt_methods.clamp$2(C.JSInt_methods.$tdiv(300 * t1, t3.get$maxHealth()), 5, 100));
        if (t3.canEnter$1(dest) && $.$get$rng().range$1(100) < chance) {
          t3.set$pos(dest);
          t3.energy.energy = 0;
          this.log$2("{1} is knocked back!", t3);
          this.addEvent$3$dir$pos(C.EventType_knockBack, t2, this._actor._pos.$add(0, t2));
        }
      } else
        this.addEvent$1(C.EventType_pause);
      return ++this._step > 10 ? C.ActionResult_null_true_true : C.ActionResult_null_true_false;
    },
    toString$0: function(_) {
      return H.S(this._actor) + " bashes " + this._club$_dir.toString$0(0);
    }
  };
  Y.DualWield.prototype = {
    get$maxLevel: function() {
      return 10;
    },
    get$name: function(_) {
      return "Dual-wield";
    },
    get$description: function() {
      return "Attack with a weapon in each hand as effectively as other lesser warriors do with only a single weapon in their puny arms.";
    },
    levelDescription$1: function(level) {
      return "Reduces heft when dual-wielding by " + C.JSNumber_methods.toInt$0((1 - K.lerpDouble(level, 0, 10, 1, 0.8)) * 100) + "%.";
    },
    baseTrainingNeeded$1: function(level) {
      return 100 * level * level * level;
    },
    dualWield$1: function(hero) {
      hero.discoverSkill$1(this);
    },
    modifyHeft$3: function(hero, level, heft) {
      var t1 = hero.save._equipment.get$weapons();
      if (t1.get$length(t1) !== 2)
        return heft;
      return heft * K.lerpDouble(level, 0, 10, 1, 0.8);
    },
    killMonster$3: function(hero, action, monster) {
      var t1, t2;
      if (!(action instanceof S.AttackAction))
        return;
      t1 = hero.save;
      t2 = t1._equipment.get$weapons();
      if (t2.get$length(t2) !== 2)
        return;
      t1.skills.earnPoints$2(this, C.JSDouble_methods.ceil$0(monster._breed.get$experience() / 100));
      hero.refreshSkill$1(this);
    }
  };
  S.MasteryDiscipline.prototype = {
    get$maxLevel: function() {
      return 20;
    },
    modifyAttack$4: function(hero, monster, hit, level) {
      if (!this._hasWeapon$1(hero))
        return;
      hit._damageScale *= K.lerpDouble(level, 1, 20, 1, 2);
    },
    levelDescription$1: function(level) {
      return "Melee attacks inflict " + C.JSNumber_methods.toInt$0((K.lerpDouble(level, 1, 20, 1, 2) - 1) * 100) + "% more damage when using a " + this.get$weaponType() + ".";
    },
    unusableReason$1: function(game) {
      if (this._hasWeapon$1(game.hero))
        return;
      return "No " + this.get$weaponType() + " equipped.";
    },
    _hasWeapon$1: function(hero) {
      return hero.save._equipment.get$weapons().any$1(0, new S.MasteryDiscipline__hasWeapon_closure(this));
    },
    killMonster$3: function(hero, action, monster) {
      if (!(action instanceof S.AttackAction))
        return;
      if (!this._hasWeapon$1(hero))
        return;
      hero.save.skills.earnPoints$2(this, C.JSDouble_methods.ceil$0(monster._breed.get$experience() / 100));
      hero.refreshSkill$1(this);
    },
    baseTrainingNeeded$1: function(level) {
      if (level === 0)
        return 0;
      if (level === 1)
        return 1;
      --level;
      return 100 * level * level * level;
    },
    $isUsableSkill: 1
  };
  S.MasteryDiscipline__hasWeapon_closure.prototype = {
    call$1: function(item) {
      return H.interceptedTypeCheck(item, "$isItem").type.weaponType === this.$this.get$weaponType();
    },
    $signature: 7
  };
  S.MasteryAction.prototype = {
    attack$1: function(pos) {
      var t1, t2, weapons, hits, damage, i, hit;
      t1 = this._action$_game._stage._actorsByTile.$index(0, pos);
      if (t1 == null)
        return;
      t2 = H.interceptedTypeCast(this._actor, "$isHero").save._equipment.get$weapons();
      weapons = P.List_List$from(t2, true, H.getTypeArgumentByIndex(t2, 0));
      hits = H.interceptedTypeCast(this._actor, "$isHero").createMeleeHits$1(t1);
      for (damage = 0, i = 0; i < weapons.length; ++i) {
        if (weapons[i].type.weaponType !== this.get$weaponType())
          continue;
        if (i >= hits.length)
          return H.ioore(hits, i);
        hit = hits[i];
        hit._damageScale *= this.damageScale;
        damage += hit.perform$3(this, this._actor, t1);
        t2 = t1._health;
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 <= 0)
          break;
      }
      return damage;
    },
    get$noise: function() {
      return 1;
    }
  };
  A.SlayDiscipline.prototype = {
    get$maxLevel: function() {
      return 20;
    },
    get$description: function() {
      return "TODO: Implement description.";
    },
    get$discoverMessage: function() {
      return "{1} are eager to learn to slay " + this._displayName.toLowerCase() + ".";
    },
    get$name: function(_) {
      return "Slay " + this._displayName;
    },
    seeBreed$2: function(hero, breed) {
      if (!$.$get$Monsters_breeds().hasTag$2(O.Log__categorize(breed._breed$_name, false, true), this._breedGroup))
        return;
      hero.discoverSkill$1(this);
    },
    killMonster$3: function(hero, action, monster) {
      if (!$.$get$Monsters_breeds().hasTag$2(O.Log__categorize(monster._breed._breed$_name, false, true), this._breedGroup))
        return;
      hero.save.skills.earnPoints$2(this, C.JSDouble_methods.ceil$0(monster._breed.get$experience() / 1000));
      hero.refreshSkill$1(this);
    },
    modifyAttack$4: function(hero, monster, hit, level) {
      if (monster == null)
        return;
      if (!$.$get$Monsters_breeds().hasTag$2(O.Log__categorize(monster._breed._breed$_name, false, true), this._breedGroup))
        return;
      hit._damageScale *= K.lerpDouble(level, 1, 20, 1.05, 2);
    },
    levelDescription$1: function(level) {
      return "Melee attacks inflict " + C.JSNumber_methods.toInt$0((K.lerpDouble(level, 1, 20, 1.05, 2) - 1) * 100) + "% more damage against " + this._displayName.toLowerCase() + ".";
    },
    baseTrainingNeeded$1: function(level) {
      return 100 * level * level * level;
    }
  };
  Z.SpearMastery.prototype = {
    get$name: function(_) {
      return "Spear Mastery";
    },
    get$useName: function() {
      return "Spear Attack";
    },
    get$description: function() {
      return "Your diligent study of spears and polearms lets you attack at a distance when wielding one.";
    },
    get$weaponType: function() {
      return "spear";
    },
    levelDescription$1: function(level) {
      var damage = C.JSNumber_methods.toInt$0(K.lerpDouble(level, 1, 10, 0.5, 1.5) * 100);
      return this.super$MasteryDiscipline$levelDescription(level) + (" Distance spear attacks inflict " + damage + "% of the damage of a regular attack.");
    },
    getDirectionAction$3: function(game, level, dir) {
      return new Z.SpearAction(dir, null, K.lerpDouble(level, 1, 10, 0.5, 1.5));
    },
    $isDirectionSkill: 1
  };
  Z.SpearAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    get$weaponType: function() {
      return "spear";
    },
    onGenerate$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, step, pos, t4, t5, it, weapon;
        return function $async$onGenerate$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._dir, t2 = t1.x, t3 = t1.y, step = 1;
              case 3:
                // for condition
                if (!(step <= 2)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                pos = $async$self._actor._pos.$add(0, new L.Vec(t2 * step, t3 * step));
                t4 = $async$self._action$_game._stage.tiles;
                t5 = t4._elements;
                t4 = pos.y * t4.bounds.size.x + pos.x;
                if (t4 < 0 || t4 >= t5.length) {
                  H.ioore(t5, t4);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t4 = t5[t4];
                $async$goto = !t4._isExplored ? 6 : 7;
                break;
              case 6:
                // then
                $async$self.error$4(0, "You can't see far enough to aim.", null, null, null);
                $async$goto = 8;
                return C.ActionResult_null_false_true;
              case 8:
                // after yield
                // goto return
                $async$goto = 1;
                break;
              case 7:
                // join
                t5 = $.$get$Motility_fly();
                $async$goto = (t4.type.motility._bitMask & t5._bitMask) === 0 ? 9 : 10;
                break;
              case 9:
                // then
                $async$self.error$4(0, "There isn't enough room to use your weapon.", null, null, null);
                $async$goto = 11;
                return C.ActionResult_null_false_true;
              case 11:
                // after yield
                // goto return
                $async$goto = 1;
                break;
              case 10:
              // join
              case 4:
                // for update
                ++step;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
                step = 1;
              case 12:
                // for condition
                if (!(step <= 2)) {
                  // goto after for
                  $async$goto = 14;
                  break;
                }
                pos = $async$self._actor._pos.$add(0, new L.Vec(t2 * step, t3 * step));
                t4 = H.interceptedTypeCast($async$self._actor, "$isHero").save._equipment.get$weapons();
                it = t4.get$iterator(t4);
                if (!it.moveNext$0())
                  H.throwExpression(H.IterableElementError_noElement());
                weapon = it.get$current().type.appearance;
                C.JSArray_methods.add$1($async$self._action$_game._events, new D.Event0(C.EventType_stab, null, null, weapon, pos, t1));
                $async$goto = 15;
                return C.ActionResult_null_true_false;
              case 15:
                // after yield
                $async$self.attack$1(pos);
                $async$goto = 16;
                return C.ActionResult_null_true_false;
              case 16:
              // after yield
              case 13:
                // for update
                ++step;
                // goto for condition
                $async$goto = 12;
                break;
              case 14:
              // after for
              case 1:
                // return
                return P._IterationMarker_endOfIteration();
              case 2:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, V.ActionResult);
    },
    toString$0: function(_) {
      return H.S(this._actor) + " spears " + this._dir.toString$0(0);
    }
  };
  Z._SpearAction_MasteryAction_GeneratorActionMixin.prototype = {
    set$_action$_iterator: function(_iterator) {
      this.GeneratorActionMixin__iterator = H.assertSubtype(_iterator, "$isIterator", [V.ActionResult], "$asIterator");
    }
  };
  G.Swordfighting.prototype = {
    get$name: function(_) {
      return "Swordfighting";
    },
    get$description: function() {
      return "The most elegant tool for the most refined of martial arts.";
    },
    get$weaponType: function() {
      return "sword";
    },
    levelDescription$1: function(level) {
      return this.super$MasteryDiscipline$levelDescription(level) + (" Parrying increases dodge by " + C.JSNumber_methods.round$0(K.lerpDouble(level, 1, 20, 1, 20)) + ".");
    },
    getDefense$2: function(hero, level) {
      var t1, t2, swords;
      t1 = hero.save._equipment.get$weapons();
      t2 = H.getTypeArgumentByIndex(t1, 0);
      t2 = new H.WhereIterable(t1, H.functionTypeCheck(new G.Swordfighting_getDefense_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]);
      swords = t2.get$length(t2);
      if (swords === 0)
        return;
      return new U.Defense(C.JSNumber_methods.round$0(K.lerpDouble(level, 1, 20, 1, 20)) * swords, "{1} parr[y|ies] {2}.");
    }
  };
  G.Swordfighting_getDefense_closure.prototype = {
    call$1: function(weapon) {
      return H.interceptedTypeCheck(weapon, "$isItem").type.weaponType === "sword";
    },
    $signature: 7
  };
  O.WhipMastery.prototype = {
    get$name: function(_) {
      return "Whip Mastery";
    },
    get$useName: function() {
      return "Whip Crack";
    },
    get$description: function() {
      return "Whips and flails are difficult to use well, but deadly even at a distance when mastered.";
    },
    get$weaponType: function() {
      return "whip";
    },
    levelDescription$1: function(level) {
      var damage = C.JSNumber_methods.toInt$0(K.lerpDouble(level, 1, 10, 0.5, 1) * 100);
      return this.super$MasteryDiscipline$levelDescription(level) + (" Ranged whip attacks inflict " + damage + "% of the damage of a regular attack.");
    },
    getRange$1: function(_, game) {
      return 3;
    },
    getTargetAction$3: function(game, level, target) {
      var t1, t2, weapons, hits, hit, i;
      t1 = game._stage._actorsByTile.$index(0, target);
      t2 = game.hero.save._equipment.get$weapons();
      weapons = P.List_List$from(t2, true, H.getTypeArgumentByIndex(t2, 0));
      hits = game.hero.createMeleeHits$1(t1);
      t1 = weapons.length;
      i = 0;
      while (true) {
        if (!(i < t1)) {
          hit = null;
          break;
        }
        c$0: {
          if (weapons[i].type.weaponType !== "whip")
            break c$0;
          if (i >= hits.length)
            return H.ioore(hits, i);
          hit = hits[i];
          break;
        }
        ++i;
      }
      hit._damageScale *= K.lerpDouble(level, 1, 10, 0.5, 1);
      return new O.BoltAction(hit, true, 3, target);
    }
  };
  O._WhipMastery_MasteryDiscipline_TargetSkill.prototype = {};
  Q.Skills_closure.prototype = {
    call$1: function(skill) {
      return J.get$name$x(skill);
    },
    $signature: 63
  };
  K.Flee.prototype = {
    get$description: function() {
      return "Teleports the hero a short distance away.";
    },
    get$name: function(_) {
      return "Flee";
    },
    get$baseComplexity: function() {
      return 10;
    },
    get$baseFocusCost: function() {
      return 6;
    },
    get$range: function() {
      return 8;
    },
    onGetAction$1: function(game) {
      return new S.TeleportAction(8);
    },
    $isActionSkill: 1
  };
  K.Escape.prototype = {
    get$description: function() {
      return "Teleports the hero away.";
    },
    get$name: function(_) {
      return "Escape";
    },
    get$baseComplexity: function() {
      return 15;
    },
    get$baseFocusCost: function() {
      return 14;
    },
    get$range: function() {
      return 16;
    },
    onGetAction$1: function(game) {
      return new S.TeleportAction(16);
    },
    $isActionSkill: 1
  };
  K.Disappear.prototype = {
    get$description: function() {
      return "Moves the hero across the dungeon.";
    },
    get$name: function(_) {
      return "Disappear";
    },
    get$baseComplexity: function() {
      return 30;
    },
    get$baseFocusCost: function() {
      return 40;
    },
    get$range: function() {
      return 100;
    },
    onGetAction$1: function(game) {
      return new S.TeleportAction(100);
    },
    $isActionSkill: 1
  };
  D.SenseItems.prototype = {
    get$description: function() {
      return "Detect nearby items.";
    },
    get$name: function(_) {
      return "Sense Items";
    },
    get$baseComplexity: function() {
      return 17;
    },
    get$baseFocusCost: function() {
      return 18;
    },
    get$range: function() {
      return 20;
    },
    onGetAction$1: function(game) {
      var t1 = H.setRuntimeTypeInfo([C.DetectType_1], [T.DetectType]);
      return new T.DetectAction(P.LinkedHashSet_LinkedHashSet$from(t1, H.getTypeArgumentByIndex(t1, 0)), 20);
    },
    $isActionSkill: 1
  };
  L.Icicle.prototype = {
    get$name: function(_) {
      return "Icicle";
    },
    get$description: function() {
      return "Launches a spear-like icicle.";
    },
    get$baseComplexity: function() {
      return 10;
    },
    get$baseFocusCost: function() {
      return 8;
    },
    get$damage: function() {
      return 8;
    },
    get$range: function() {
      return 8;
    },
    onGetTargetAction$2: function(game, target) {
      return new O.BoltAction(new U.Hit(U.Attack$(new O.Noun("the icicle"), "pierce", 8, 8, $.$get$Elements_cold()), 1, 1, $.$get$Element_none(), 1), false, null, target);
    }
  };
  L.BrilliantBeam.prototype = {
    get$name: function(_) {
      return "Brilliant Beam";
    },
    get$description: function() {
      return "Emits a blinding beam of radiance.";
    },
    get$baseComplexity: function() {
      return 14;
    },
    get$baseFocusCost: function() {
      return 20;
    },
    get$damage: function() {
      return 10;
    },
    get$range: function() {
      return 12;
    },
    onGetTargetAction$2: function(game, target) {
      var attack, t1, t2;
      attack = U.Attack$(new O.Noun("the light"), "sear", 10, 12, $.$get$Elements_light());
      t1 = game.hero._pos;
      t2 = new G.RayAction(new U.Hit(attack, 1, 1, $.$get$Element_none(), 1), t1, target, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 1, H.setRuntimeTypeInfo([], [P.double]));
      t2.RayActionBase$3(t1, target, 0.125);
      return t2;
    }
  };
  L.Windstorm.prototype = {
    get$name: function(_) {
      return "Windstorm";
    },
    get$description: function() {
      return "Summons a blast of air, spreading out from the sorceror.";
    },
    get$baseComplexity: function() {
      return 18;
    },
    get$baseFocusCost: function() {
      return 26;
    },
    get$damage: function() {
      return 10;
    },
    get$range: function() {
      return 6;
    },
    onGetAction$1: function(game) {
      var attack = U.Attack$(new O.Noun("the wind"), "blast", 10, 6, $.$get$Elements_air());
      return N.FlowAction$(game.hero._pos, new U.Hit(attack, 1, 1, $.$get$Element_none(), 1), $.$get$Motility_flyAndWalk(), null);
    },
    $isActionSkill: 1
  };
  L.FireBarrier.prototype = {
    get$name: function(_) {
      return "Fire Barrier";
    },
    get$description: function() {
      return "Creates a wall of fire.";
    },
    get$baseComplexity: function() {
      return 30;
    },
    get$baseFocusCost: function() {
      return 60;
    },
    get$damage: function() {
      return 10;
    },
    get$range: function() {
      return 8;
    },
    onGetTargetAction$2: function(game, target) {
      var attack, t1, t2, offset, $length;
      attack = U.Attack$(new O.Noun("the fire"), "burn", 10, 8, $.$get$Elements_fire());
      t1 = game.hero._pos;
      t2 = $.$get$Element_none();
      offset = t1.$sub(0, target);
      $length = Math.sqrt(offset.get$lengthSquared());
      return new R.BarrierAction(target, -offset.y / $length, offset.x / $length, new U.Hit(attack, 1, 1, t2, 1), P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 0);
    }
  };
  L.TidalWave.prototype = {
    get$name: function(_) {
      return "Tidal Wave";
    },
    get$description: function() {
      return "Summons a giant tidal wave.";
    },
    get$baseComplexity: function() {
      return 40;
    },
    get$baseFocusCost: function() {
      return 200;
    },
    get$damage: function() {
      return 50;
    },
    get$range: function() {
      return 15;
    },
    onGetAction$1: function(game) {
      var attack, t1, t2, t3, t4;
      attack = U.Attack$(new O.Noun("the wave"), "inundate", 50, 15, $.$get$Elements_water());
      t1 = game.hero._pos;
      t2 = $.$get$Element_none();
      t3 = $.$get$Motility_walk();
      t4 = $.$get$Motility_door();
      return N.FlowAction$(t1, new U.Hit(attack, 1, 1, t2, 1), new Q.Motility(t3._bitMask | t4._bitMask | $.$get$Motility_swim()._bitMask), 2);
    },
    $isActionSkill: 1
  };
  L._BrilliantBeam_Spell_TargetSkill.prototype = {};
  L._FireBarrier_Spell_TargetSkill.prototype = {};
  L._Icicle_Spell_TargetSkill.prototype = {};
  X.Region.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  X.Architect.prototype = {
    buildStage$1: function(placeHero) {
      return this.buildStage$body$Architect(H.functionTypeCheck(placeHero, {func: 1, args: [L.Vec]}));
    },
    buildStage$body$Architect: function($async$placeHero) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var placeHero = $async$placeHero;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, styles, lastFillable, i, possibleRegions, regions, architecture, unownedPassages, decorator;
        return function $async$buildStage$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  for (t1 = $async$self.stage.tiles, t2 = t1.bounds, t3 = X.RectIterator$(t2); t3.moveNext$0();) {
                    t4 = t3._x;
                    t5 = t1._elements;
                    t4 = t3._y * t2.size.x + t4;
                    if (t4 < 0 || t4 >= t5.length) {
                      H.ioore(t5, t4);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t5[t4].type = $.$get$Tiles_unformed();
                  }
                  styles = F.ArchitecturalStyle_pick($async$self.depth);
                  i = styles.length - 1;
                  while (true) {
                    if (!(i >= 0)) {
                      lastFillable = null;
                      break;
                    }
                    if (styles[i].canFill) {
                      lastFillable = i;
                      break;
                    }
                    --i;
                  }
                  possibleRegions = H.setRuntimeTypeInfo(C.List_00.slice(0), [H.getTypeArgumentByIndex(C.List_00, 0)]);
                  t3 = X.Region;
                  regions = H.setRuntimeTypeInfo([], [t3]);
                  for (i = 0; i < styles.length; ++i)
                    if (i === lastFillable || !styles[i].canFill)
                      C.JSArray_methods.add$1(regions, C.Region_everywhere);
                    else
                      C.JSArray_methods.add$1(regions, $.$get$rng().take$1$1(0, possibleRegions, t3));
                  i = 0;
                case 3:
                  // for condition
                  if (!(i < styles.length)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  t3 = styles[i];
                  if (i >= regions.length) {
                    H.ioore(regions, i);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t4 = regions[i];
                  architecture = t3._factory.call$0();
                  architecture._architect = $async$self;
                  architecture._style = t3;
                  architecture._region = t4;
                  $async$goto = 6;
                  return P._IterationMarker_yieldStar(architecture.build$0());
                case 6:
                // after yield
                case 4:
                  // for update
                  ++i;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                  // after for
                  for (t3 = J.get$iterator$ax(t2.trace$0()); t3.moveNext$0();) {
                    t4 = t3.get$current();
                    t5 = t1._elements;
                    t4 = t4.y * t2.size.x + t4.x;
                    if (t4 < 0 || t4 >= t5.length) {
                      H.ioore(t5, t4);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t5[t4].type = $.$get$Tiles_solid();
                  }
                  unownedPassages = H.setRuntimeTypeInfo([], [L.Vec]);
                  $async$goto = 7;
                  return P._IterationMarker_yieldStar($async$self._fillPassages$1(unownedPassages));
                case 7:
                  // after yield
                  $async$goto = 8;
                  return P._IterationMarker_yieldStar($async$self._addShortcuts$1(unownedPassages));
                case 8:
                  // after yield
                  $async$goto = 9;
                  return P._IterationMarker_yieldStar($async$self._claimPassages$1(unownedPassages));
                case 9:
                  // after yield
                  decorator = new S.Decorator($async$self, P.LinkedHashMap_LinkedHashMap$_empty(X.Architecture, [P.List, L.Vec]), P.LinkedHashSet_LinkedHashSet(null, null, null, B.Breed));
                  $async$goto = 10;
                  return P._IterationMarker_yieldStar(decorator.decorate$0());
                case 10:
                  // after yield
                  placeHero.call$1(decorator._heroPos);
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _carve$4: function(architecture, x, y, tile) {
      var t1, t2, t3, t4, t5, t6, t7, _i, dir, t8, t9, t10;
      t1 = this.stage.tiles;
      t2 = t1.$get$2(x, y);
      t2.type = tile == null ? $.$get$Tiles_open() : tile;
      ++this._carvedTiles;
      t2 = this._owners;
      t2.$set$3(x, y, architecture);
      for (t3 = t2.bounds, t4 = H.getTypeArgumentByIndex(t2, 0), t2 = t2._elements, t5 = t3.size.x, t6 = t1._elements, t1 = t1.bounds.size.x, t7 = t6.length, _i = 0; _i < 8; ++_i) {
        dir = C.List_slV[_i];
        t8 = dir.x + x;
        t9 = dir.y + y;
        if (t3.contains$1(0, new L.Vec(t8, t9))) {
          t10 = t9 * t1 + t8;
          if (t10 < 0 || t10 >= t7)
            return H.ioore(t6, t10);
          t10 = t6[t10].type != $.$get$Tiles_unformedWet();
        } else
          t10 = false;
        if (t10)
          C.JSArray_methods.$indexSet(t2, t9 * t5 + t8, H.assertSubtypeOfRuntimeType(architecture, t4));
      }
    },
    _canCarve$2: function(architecture, pos) {
      var t1, t2, t3, t4, t5, t6, t7, _i, here, t8, t9, t10, t11, owner;
      t1 = this.stage.tiles;
      t2 = t1.bounds;
      if (!t2.contains$1(0, pos))
        return false;
      t3 = this._owners;
      if (t3.$index(0, pos) != null)
        return false;
      if (t1.$index(0, pos).type == $.$get$Tiles_unformedWet())
        return false;
      for (t4 = pos.get$neighbors(), t5 = t4.length, t6 = t3._elements, t3 = t3.bounds.size.x, t7 = t6.length, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
        here = t4[_i];
        if (!t2.contains$1(0, here))
          continue;
        t8 = t1._elements;
        t9 = here.y;
        t10 = here.x;
        t11 = t9 * t2.size.x + t10;
        if (t11 < 0 || t11 >= t8.length)
          return H.ioore(t8, t11);
        if (t8[t11].type == $.$get$Tiles_unformedWet())
          continue;
        t8 = t9 * t3 + t10;
        if (t8 < 0 || t8 >= t7)
          return H.ioore(t6, t8);
        owner = t6[t8];
        if (owner != null && owner !== architecture)
          return false;
      }
      return true;
    },
    _fillPassages$1: function(unownedPassages) {
      return this._fillPassages$body$Architect(H.assertSubtype(unownedPassages, "$isList", [L.Vec], "$asList"));
    },
    _fillPassages$body$Architect: function($async$unownedPassages) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var unownedPassages = $async$unownedPassages;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, unformed, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, openCount, start, startDistance, t12, t13, pos, tile, distance, reachability, count, _i, count0;
        return function $async$_fillPassages$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = [L.Vec];
                  unformed = H.setRuntimeTypeInfo([], t1);
                  for (t2 = $async$self.stage, t3 = t2.tiles, t4 = t3.bounds, t5 = X.RectIterator$(t4.inflate$1(-1)), t3 = t3._elements, t6 = t4.size, t7 = t6.x, t8 = t3.length, t4 = t4.pos, t9 = t4.x, t10 = t9 + t7, t4 = t4.y, t6 = t6.y, t11 = t4 + t6, openCount = 0, start = C.Vec_0_0, startDistance = 99999; t5.moveNext$0();) {
                    t12 = t5._x;
                    t13 = t5._y;
                    pos = new L.Vec(t12, t13);
                    t12 = t13 * t7 + t12;
                    if (t12 < 0 || t12 >= t8) {
                      H.ioore(t3, t12);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    tile = t3[t12].type;
                    if (tile == $.$get$Tiles_open()) {
                      ++openCount;
                      t12 = pos.$sub(0, new L.Vec(C.JSInt_methods._tdivFast$1(Math.min(t9, t10) + Math.max(t9, t10), 2), C.JSInt_methods._tdivFast$1(Math.min(t4, t11) + Math.max(t4, t11), 2)));
                      distance = Math.abs(t12.x) + Math.abs(t12.y);
                      if (distance < startDistance) {
                        startDistance = distance;
                        start = pos;
                      }
                    } else if (!(tile != $.$get$Tiles_unformed() && tile != $.$get$Tiles_unformedWet()))
                      C.JSArray_methods.add$1(unformed, pos);
                  }
                  t4 = $.$get$rng();
                  t4.toString;
                  C.JSArray_methods.shuffle$1(H.assertSubtype(unformed, "$isList", t1, "$asList"), t4._random);
                  t4 = P.int;
                  t5 = M.Array2D$(t7, t6, -2, t4);
                  reachability = new D.Reachability(t2, start, t5, new U.VecSet(M.Array2D$(t7, t6, 0, t4), t7, 0, t6, 0));
                  reachability._setDistance$2(start, 0);
                  reachability._reachability$_process$1(H.setRuntimeTypeInfo([start], t1));
                  t1 = unformed.length, t4 = t5._elements, t5 = t5.bounds.size.x, t6 = t4.length, count = 0, _i = 0;
                case 3:
                  // for condition
                  if (!(_i < unformed.length)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  pos = unformed[_i];
                  t2.toString;
                  H.interceptedTypeCheck(pos, "$isVec");
                  t9 = pos.y;
                  t10 = pos.x;
                  t11 = t9 * t7 + t10;
                  if (t11 < 0 || t11 >= t8) {
                    H.ioore(t3, t11);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t11 = t3[t11];
                  t12 = t11.type;
                  t13 = t12 == $.$get$Tiles_unformed();
                  if (!t13 && t12 != $.$get$Tiles_unformedWet()) {
                    // goto for update
                    $async$goto = 4;
                    break;
                  }
                  if (t13)
                    t11.type = $.$get$Tiles_solid();
                  else if (t12 == $.$get$Tiles_unformedWet())
                    t11.type = $.$get$Tiles_solidWet();
                  t9 = t9 * t5 + t10;
                  if (t9 < 0 || t9 >= t6) {
                    H.ioore(t4, t9);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  if (!J.$ge$n(t4[t9], 0)) {
                    // goto for update
                    $async$goto = 4;
                    break;
                  }
                  reachability.fill$1(0, pos);
                  if (reachability._reachedOpenCount !== openCount) {
                    $async$self._makePassage$2(unownedPassages, pos);
                    reachability.undoFill$0();
                  }
                  count0 = count + 1;
                  $async$goto = C.JSInt_methods.$mod(count, 20) === 0 ? 6 : 7;
                  break;
                case 6:
                  // then
                  $async$goto = 8;
                  return H.S(pos);
                case 8:
                // after yield
                case 7:
                  // join
                  count = count0;
                case 4:
                  // for update
                  unformed.length === t1 || (0, H.throwConcurrentModificationError)(unformed), ++_i;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _addShortcuts$1: function(unownedPassages) {
      return this._addShortcuts$body$Architect(H.assertSubtype(unownedPassages, "$isList", [L.Vec], "$asList"));
    },
    _addShortcuts$body$Architect: function($async$unownedPassages) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var unownedPassages = $async$unownedPassages;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, possibleStarts, t2, t3, t4, t5, t6, t7, pos, type, _i, dir, t8, maxShortcuts, shortcuts, path;
        return function $async$_addShortcuts$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = [X._Path];
                  possibleStarts = H.setRuntimeTypeInfo([], t1);
                  for (t2 = $async$self.stage.tiles, t3 = t2.bounds, t4 = X.RectIterator$(t3.inflate$1(-1)), t2 = t2._elements, t3 = t3.size.x, t5 = t2.length; t4.moveNext$0();) {
                    t6 = t4._x;
                    t7 = t4._y;
                    pos = new L.Vec(t6, t7);
                    t6 = t7 * t3 + t6;
                    if (t6 < 0 || t6 >= t5) {
                      H.ioore(t2, t6);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    type = t2[t6].type;
                    t6 = $.$get$Tiles_open();
                    if (!(type == t6 || type == $.$get$Tiles_passage() || type == $.$get$Tiles_passageWet()))
                      continue;
                    for (_i = 0; _i < 4; ++_i) {
                      dir = C.List_aAW[_i];
                      t7 = pos.$add(0, dir.get$rotateLeft90());
                      t7 = t7.y * t3 + t7.x;
                      if (t7 < 0 || t7 >= t5) {
                        H.ioore(t2, t7);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      type = t2[t7].type;
                      if (!(type == t6 || type == $.$get$Tiles_passage() || type == $.$get$Tiles_passageWet()))
                        continue;
                      t7 = pos.$add(0, dir.get$rotateLeft45());
                      t7 = t7.y * t3 + t7.x;
                      if (t7 < 0 || t7 >= t5) {
                        H.ioore(t2, t7);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      type = t2[t7].type;
                      t7 = $.$get$Tiles_solid();
                      if (!(type == t7 || type == $.$get$Tiles_solidWet()))
                        continue;
                      t8 = pos.$add(0, dir);
                      t8 = t8.y * t3 + t8.x;
                      if (t8 < 0 || t8 >= t5) {
                        H.ioore(t2, t8);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      type = t2[t8].type;
                      if (!(type == t7 || type == $.$get$Tiles_solidWet()))
                        continue;
                      t8 = pos.$add(0, dir.get$rotateRight45());
                      t8 = t8.y * t3 + t8.x;
                      if (t8 < 0 || t8 >= t5) {
                        H.ioore(t2, t8);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      type = t2[t8].type;
                      if (!(type == t7 || type == $.$get$Tiles_solidWet()))
                        continue;
                      t7 = pos.$add(0, dir.get$rotateRight90());
                      t7 = t7.y * t3 + t7.x;
                      if (t7 < 0 || t7 >= t5) {
                        H.ioore(t2, t7);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      type = t2[t7].type;
                      if (!(type == t6 || type == $.$get$Tiles_passage() || type == $.$get$Tiles_passageWet()))
                        continue;
                      C.JSArray_methods.add$1(possibleStarts, new X._Path(pos, dir));
                    }
                  }
                  t2 = $.$get$rng();
                  t2.toString;
                  C.JSArray_methods.shuffle$1(H.assertSubtype(possibleStarts, "$isList", t1, "$asList"), t2._random);
                  maxShortcuts = t2.range$2(5, 40);
                  t1 = possibleStarts.length, shortcuts = 0, _i = 0;
                case 3:
                  // for condition
                  if (!(_i < possibleStarts.length)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  path = possibleStarts[_i];
                  if (!$async$self._tryShortcut$3(unownedPassages, path.pos, path.dir)) {
                    // goto for update
                    $async$goto = 4;
                    break;
                  }
                  $async$goto = 6;
                  return "Shortcut";
                case 6:
                  // after yield
                  ++shortcuts;
                  if (shortcuts >= maxShortcuts) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                case 4:
                  // for update
                  possibleStarts.length === t1 || (0, H.throwConcurrentModificationError)(possibleStarts), ++_i;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _tryShortcut$3: function(unownedPassages, start, heading) {
      var t1, tiles, pos, next, t2, t3, t4, t5, type, _i, t6;
      t1 = [L.Vec];
      H.assertSubtype(unownedPassages, "$isList", t1, "$asList");
      tiles = H.setRuntimeTypeInfo([], t1);
      pos = start.$add(0, heading);
      for (t1 = this.stage; true; pos = next) {
        C.JSArray_methods.add$1(tiles, pos);
        next = pos.$add(0, heading);
        t2 = t1.tiles;
        t3 = t2.bounds;
        if (!t3.contains$1(0, next))
          return false;
        t2 = t2._elements;
        t3 = t3.size.x;
        t4 = next.y * t3 + next.x;
        t5 = t2.length;
        if (t4 < 0 || t4 >= t5)
          return H.ioore(t2, t4);
        type = t2[t4].type;
        if (type == $.$get$Tiles_open() || type == $.$get$Tiles_passage() || type == $.$get$Tiles_passageWet()) {
          t2 = tiles.length;
          t3 = $.$get$rng();
          if (!new X._LengthPathfinder(t2 * 2 + (t3._random.nextInt$1(8) + 8), t1, start, next).search$0(0)) {
            for (t1 = tiles.length, _i = 0; _i < tiles.length; tiles.length === t1 || (0, H.throwConcurrentModificationError)(tiles), ++_i)
              this._makePassage$2(unownedPassages, tiles[_i]);
            return true;
          }
          return false;
        }
        t4 = next.$add(0, heading.get$rotateLeft90());
        t4 = t4.y * t3 + t4.x;
        if (t4 < 0 || t4 >= t5)
          return H.ioore(t2, t4);
        type = t2[t4].type;
        t4 = $.$get$Tiles_solid();
        if (!(type == t4 || type == $.$get$Tiles_solidWet()))
          return false;
        t6 = next.$add(0, heading.get$rotateRight90());
        t6 = t6.y * t3 + t6.x;
        if (t6 < 0 || t6 >= t5)
          return H.ioore(t2, t6);
        type = t2[t6].type;
        if (!(type == t4 || type == $.$get$Tiles_solidWet()))
          return false;
        t2 = $.$get$rng();
        t3 = tiles.length;
        if (t2._random.nextInt$1(100) < t3 * 10)
          return false;
      }
    },
    _makePassage$2: function(unownedPassages, pos) {
      var t1, t2, owner;
      H.assertSubtype(unownedPassages, "$isList", [L.Vec], "$asList");
      t1 = this.stage.tiles.$index(0, pos);
      t2 = t1.type;
      if (t2 == $.$get$Tiles_solid())
        t1.type = $.$get$Tiles_passage();
      else if (t2 == $.$get$Tiles_solidWet())
        t1.type = $.$get$Tiles_passageWet();
      owner = this._owners.$index(0, pos);
      if (owner == null)
        C.JSArray_methods.add$1(unownedPassages, pos);
      else
        this._claimNeighbors$2(pos, owner);
    },
    _claimPassages$1: function(unownedPassages) {
      return this._claimPassages$body$Architect(H.assertSubtype(unownedPassages, "$isList", [L.Vec], "$asList"));
    },
    _claimPassages$body$Architect: function($async$unownedPassages) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var unownedPassages = $async$unownedPassages;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, stillUnowned, t7, _i, pos, neighbors, t8, t9, _i0, neighbor, t10, owner, max;
        return function $async$_claimPassages$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self._owners, t2 = t1._elements, t3 = t1.bounds.size.x, t4 = t2.length, t5 = [X.Architecture], t1 = H.getTypeArgumentByIndex(t1, 0), t6 = [L.Vec];
                case 3:
                  // for condition
                  // trivial condition
                  stillUnowned = H.setRuntimeTypeInfo([], t6);
                  for (t7 = unownedPassages.length, _i = 0; _i < unownedPassages.length; unownedPassages.length === t7 || (0, H.throwConcurrentModificationError)(unownedPassages), ++_i) {
                    pos = unownedPassages[_i];
                    neighbors = H.setRuntimeTypeInfo([], t5);
                    for (t8 = pos.get$neighbors(), t9 = t8.length, _i0 = 0; _i0 < t8.length; t8.length === t9 || (0, H.throwConcurrentModificationError)(t8), ++_i0) {
                      neighbor = t8[_i0];
                      t10 = neighbor.y * t3 + neighbor.x;
                      if (t10 < 0 || t10 >= t4) {
                        H.ioore(t2, t10);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      owner = t2[t10];
                      if (owner != null)
                        C.JSArray_methods.add$1(neighbors, owner);
                    }
                    max = neighbors.length;
                    if (max !== 0) {
                      t8 = $.$get$rng();
                      t8.toString;
                      H.assertSubtype(neighbors, "$isList", t5, "$asList");
                      t8 = t8._random.nextInt$1(max - 0);
                      if (t8 < 0 || t8 >= neighbors.length) {
                        H.ioore(neighbors, t8);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      owner = neighbors[t8];
                      H.assertSubtypeOfRuntimeType(owner, t1);
                      C.JSArray_methods.$indexSet(t2, pos.y * t3 + pos.x, owner);
                      $async$self._claimNeighbors$2(pos, owner);
                    } else
                      C.JSArray_methods.add$1(stillUnowned, pos);
                  }
                  if (stillUnowned.length === 0) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  $async$goto = 6;
                  return "Claim";
                case 6:
                // after yield
                case 4:
                  // for update
                  unownedPassages = stillUnowned;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _claimNeighbors$2: function(pos, owner) {
      var t1, t2, t3, t4, t5, t6, _i, neighbor, t7;
      for (t1 = pos.get$neighbors(), t2 = t1.length, t3 = this._owners, t4 = t3._elements, t5 = t3.bounds.size.x, t6 = t4.length, t3 = H.getTypeArgumentByIndex(t3, 0), _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        neighbor = t1[_i];
        t7 = neighbor.y * t5 + neighbor.x;
        if (t7 < 0 || t7 >= t6)
          return H.ioore(t4, t7);
        if (t4[t7] == null)
          C.JSArray_methods.$indexSet(t4, t7, H.assertSubtypeOfRuntimeType(owner, t3));
      }
    },
    get$depth: function() {
      return this.depth;
    }
  };
  X._Path.prototype = {
    get$pos: function() {
      return this.pos;
    }
  };
  X.Architecture.prototype = {
    get$depth: function() {
      return this._architect.depth;
    },
    get$width: function(_) {
      return this._architect.stage.tiles.bounds.size.x;
    },
    get$height: function(_) {
      return this._architect.stage.tiles.bounds.size.y;
    },
    get$paintStyle: function() {
      return "rock";
    },
    spawnMonsters$1: function(painter) {
      return false;
    }
  };
  X._LengthPathfinder.prototype = {
    processStep$1: function(path) {
      if (path.length >= this._maxLength)
        return false;
      return;
    },
    reachedGoal$1: function(path) {
      return true;
    },
    stepCost$2: function(pos, tile) {
      var t1 = $.$get$Motility_doorAndWalk();
      if ((tile.type.motility._bitMask & t1._bitMask) !== 0)
        return 1;
      return;
    },
    unreachableGoal$0: function() {
      return false;
    }
  };
  F.ArchitecturalStyle.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  F.ArchitecturalStyle__initialize_addStyle.prototype = {
    call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency: function($name, canFill, create, decor, decorDensity, end, endFrequency, itemDensity, monsterDensity, monsters, start, startFrequency) {
      var t1, t2, t3, t4;
      H.functionTypeCheck(create, {func: 1, ret: X.Architecture});
      t1 = H.setRuntimeTypeInfo((monsters == null ? "monster" : monsters).split(" "), [P.String]);
      t2 = monsterDensity == null ? 1 : monsterDensity;
      t3 = itemDensity == null ? 1 : itemDensity;
      t4 = $.$get$ArchitecturalStyle__styles();
      t4.toString;
      t4._resource$_add$7(H.assertSubtypeOfRuntimeType(new F.ArchitecturalStyle($name, decor, decorDensity, t1, t2, t3, create, canFill !== false), H.getTypeArgumentByIndex(t4, 0)), null, start, end, startFrequency, endFrequency, null);
    },
    call$1: function($name) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, null, null, null, null, 100, null, null, null, null, 1, null);
    },
    call$5$create$decor$decorDensity$startFrequency: function($name, create, decor, decorDensity, startFrequency) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, null, create, decor, decorDensity, 100, null, null, null, null, 1, startFrequency);
    },
    call$7$create$decor$decorDensity$endFrequency$monsters$startFrequency: function($name, create, decor, decorDensity, endFrequency, monsters, startFrequency) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, null, create, decor, decorDensity, 100, endFrequency, null, null, monsters, 1, startFrequency);
    },
    call$7$canFill$create$decor$decorDensity$monsterDensity$monsters: function($name, canFill, create, decor, decorDensity, monsterDensity, monsters) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, canFill, create, decor, decorDensity, 100, null, null, monsterDensity, monsters, 1, null);
    },
    call$3$end$start: function($name, end, start) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, null, null, null, null, end, null, null, null, null, start, null);
    },
    call$11$canFill$create$decor$decorDensity$end$itemDensity$monsterDensity$monsters$start$startFrequency: function($name, canFill, create, decor, decorDensity, end, itemDensity, monsterDensity, monsters, start, startFrequency) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, canFill, create, decor, decorDensity, end, null, itemDensity, monsterDensity, monsters, start, startFrequency);
    },
    call$8$canFill$create$decor$decorDensity$end$start$startFrequency: function($name, canFill, create, decor, decorDensity, end, start, startFrequency) {
      return this.call$12$canFill$create$decor$decorDensity$end$endFrequency$itemDensity$monsterDensity$monsters$start$startFrequency($name, canFill, create, decor, decorDensity, end, null, null, null, null, start, startFrequency);
    },
    $signature: 64
  };
  F.ArchitecturalStyle__initialize_closure.prototype = {
    call$0: function() {
      return new Q.Dungeon(0.3);
    },
    $signature: 65
  };
  F.ArchitecturalStyle__initialize_closure0.prototype = {
    call$0: function() {
      return new D.Catacomb(0.3, 8, 32);
    },
    $signature: 66
  };
  F.ArchitecturalStyle__initialize_closure1.prototype = {
    call$0: function() {
      return new Q.Cavern();
    },
    $signature: 67
  };
  F.ArchitecturalStyle__initialize_closure2.prototype = {
    call$0: function() {
      return new F.Lake();
    },
    $signature: 68
  };
  F.ArchitecturalStyle__initialize_closure3.prototype = {
    call$0: function() {
      return new G.River();
    },
    $signature: 69
  };
  F.ArchitecturalStyle__initialize_pit.prototype = {
    call$3$end$start: function(monsterGroup, end, start) {
      this.addStyle.call$8$canFill$create$decor$decorDensity$end$start$startFrequency(monsterGroup + " pit", false, new F.ArchitecturalStyle__initialize_pit_closure(monsterGroup), "glowing-moss", 0.05, end, start, 0.2);
    },
    call$1: function(monsterGroup) {
      return this.call$3$end$start(monsterGroup, null, null);
    },
    $signature: 39
  };
  F.ArchitecturalStyle__initialize_pit_closure.prototype = {
    call$0: function() {
      var t1 = H.setRuntimeTypeInfo([], [L.Vec]);
      return new A.Pit(this.monsterGroup, 12, 24, t1);
    },
    $signature: 71
  };
  F.ArchitecturalStyle__initialize_keep.prototype = {
    call$3$end$start: function(monsters, end, start) {
      this.addStyle.call$11$canFill$create$decor$decorDensity$end$itemDensity$monsterDensity$monsters$start$startFrequency(monsters + " keep", false, new F.ArchitecturalStyle__initialize_keep_closure(), "keep", 0.07, end, 1.5, 0, monsters, start, 2);
    },
    call$1: function(monsters) {
      return this.call$3$end$start(monsters, null, null);
    },
    $signature: 39
  };
  F.ArchitecturalStyle__initialize_keep_closure.prototype = {
    call$0: function() {
      return Z.Keep_Keep(5);
    },
    $signature: 72
  };
  D.Catacomb.prototype = {
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, maxSize, minSize, failed, t2, t3, cave, placed, i, t4, t5, xMax, yMax, xMin, yMin;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._architect.stage.tiles.bounds.size;
                maxSize = Math.sqrt(Math.min(Math.min($async$self._catacomb$_maxSize, t1.y), t1.x));
                minSize = Math.min(Math.sqrt($async$self._catacomb$_minSize), maxSize);
                t1 = $async$self._catacomb$_density;
                failed = 0;
              case 2:
                // while condition
                t2 = $async$self._architect;
                t3 = t2.stage.tiles.bounds.size;
                if (!(t2._carvedTiles / ((t3.x - 2) * (t3.y - 2)) < t1 && failed < 100)) {
                  // goto after while
                  $async$goto = 3;
                  break;
                }
                cave = M.Blob_make(C.JSNumber_methods.toInt$0(Math.pow($.$get$rng().float$2(0, minSize, maxSize), 2)));
                t2 = cave.bounds.size;
                t3 = t2.x;
                t2 = t2.y;
                i = 0;
              case 4:
                // while condition
                if (!(i < 400)) {
                  placed = false;
                  // goto after while
                  $async$goto = 5;
                  break;
                }
                t4 = $async$self._architect.stage.tiles.bounds.size;
                t5 = t4.x;
                xMax = t5 - t3;
                t4 = t4.y;
                yMax = t4 - t2;
                switch ($async$self._region) {
                  case C.Region_everywhere:
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_n:
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_ne:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    yMin = 1;
                    break;
                  case C.Region_e:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMin = 1;
                    break;
                  case C.Region_se:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    break;
                  case C.Region_s:
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    xMin = 1;
                    break;
                  case C.Region_sw:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    xMin = 1;
                    break;
                  case C.Region_w:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_nw:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    xMin = 1;
                    yMin = 1;
                    break;
                  default:
                    xMin = 1;
                    yMin = 1;
                }
                if (xMin >= xMax) {
                  // goto break c$1
                  $async$goto = 6;
                  break;
                }
                if (yMin >= yMax) {
                  // goto break c$1
                  $async$goto = 6;
                  break;
                }
                t4 = $.$get$rng();
                t5 = t4._random.nextInt$1(xMax - xMin);
                $async$goto = $async$self._catacomb$_tryPlaceCave$3(cave, t5 + xMin, t4._random.nextInt$1(yMax - yMin) + yMin) ? 7 : 8;
                break;
              case 7:
                // then
                $async$goto = 9;
                return "cave";
              case 9:
                // after yield
                placed = true;
                // goto after while
                $async$goto = 5;
                break;
              case 8:
              // join
              case 6:
                // break c$1
                ++i;
                // goto while condition
                $async$goto = 4;
                break;
              case 5:
                // after while
                if (!placed)
                  ++failed;
                // goto while condition
                $async$goto = 2;
                break;
              case 3:
                // after while
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    _catacomb$_tryPlaceCave$3: function(cave, x, y) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      H.assertSubtype(cave, "$isArray2D", [P.bool], "$asArray2D");
      for (t1 = cave.bounds, t2 = X.RectIterator$(t1), t3 = cave._elements, t4 = t1.size.x, t5 = t3.length; t2.moveNext$0();) {
        t6 = t2._x;
        t7 = t2._y;
        t8 = t7 * t4 + t6;
        if (t8 < 0 || t8 >= t5)
          return H.ioore(t3, t8);
        if (t3[t8])
          if (!this._architect._canCarve$2(this, new L.Vec(t6 + x, t7 + y)))
            return false;
      }
      for (t1 = X.RectIterator$(t1); t1.moveNext$0();) {
        t2 = t1._x;
        t6 = t1._y;
        t7 = t6 * t4 + t2;
        if (t7 < 0 || t7 >= t5)
          return H.ioore(t3, t7);
        if (t3[t7])
          this._architect._carve$4(this, t2 + x, t6 + y, null);
      }
      return true;
    }
  };
  Q.Cavern.prototype = {
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, cells1, cells2, t3, t4, t5, t6, pos, i, t0, t7, t8, t9, t10, t11, t12, t13, walls, _i, here, t14;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self._architect.stage.tiles.bounds.size;
                  t2 = P.bool;
                  cells1 = M.Array2D$(t1.x, t1.y, null, t2);
                  t1 = $async$self._architect.stage.tiles.bounds.size;
                  cells2 = M.Array2D$(t1.x, t1.y, null, t2);
                  for (t1 = cells1.bounds, t2 = X.RectIterator$(t1), t3 = H.getTypeArgumentByIndex(cells1, 0), t4 = cells1._elements, t1 = t1.size.x; t2.moveNext$0();) {
                    t5 = t2._x;
                    t6 = t2._y;
                    pos = new L.Vec(t5, t6);
                    if (!$async$self._architect._canCarve$2($async$self, pos))
                      continue;
                    C.JSArray_methods.$indexSet(t4, t6 * t1 + t5, H.assertSubtypeOfRuntimeType($.$get$rng().float$1(0, 1) < $async$self._cavern$_density$2($async$self._region, pos), t3));
                  }
                  i = 0;
                case 3:
                  // for condition
                  if (!(i < 4)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  for (t1 = cells1.bounds, t2 = new X.RectIterator(t1), t3 = t1.pos, t2._x = t3.x - 1, t2._y = t3.y, t3 = H.getTypeArgumentByIndex(cells2, 0), t4 = cells2._elements, t5 = cells2.bounds.size.x, t6 = cells1._elements, t7 = t1.size.x, t8 = t6.length; t2.moveNext$0();) {
                    t9 = t2._x;
                    t10 = t2._y;
                    t11 = t10 * t7 + t9;
                    if (t11 < 0 || t11 >= t8) {
                      H.ioore(t6, t11);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (t6[t11] == null)
                      continue;
                    for (t12 = new L.Vec(t9, t10).get$neighbors(), t13 = t12.length, walls = 0, _i = 0; _i < t12.length; t12.length === t13 || (0, H.throwConcurrentModificationError)(t12), ++_i) {
                      here = t12[_i];
                      if (t1.contains$1(0, here)) {
                        t14 = here.y * t7 + here.x;
                        if (t14 < 0 || t14 >= t8) {
                          H.ioore(t6, t14);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        t14 = !J.$eq$(t6[t14], false);
                      } else
                        t14 = true;
                      if (t14)
                        ++walls;
                    }
                    t9 = t10 * t5 + t9;
                    if (t6[t11])
                      C.JSArray_methods.$indexSet(t4, t9, H.assertSubtypeOfRuntimeType(walls >= 3, t3));
                    else
                      C.JSArray_methods.$indexSet(t4, t9, H.assertSubtypeOfRuntimeType(walls >= 5, t3));
                  }
                  $async$goto = 6;
                  return "Round";
                case 6:
                // after yield
                case 4:
                  // for update
                  ++i, t0 = cells2, cells2 = cells1, cells1 = t0;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                  // after for
                  for (t1 = cells1.bounds, t2 = X.RectIterator$(t1), t3 = cells1._elements, t1 = t1.size.x, t4 = t3.length; t2.moveNext$0();) {
                    t5 = t2._x;
                    t6 = t2._y;
                    t7 = t6 * t1 + t5;
                    if (t7 < 0 || t7 >= t4) {
                      H.ioore(t3, t7);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (J.$eq$(t3[t7], false))
                      $async$self._architect._carve$4($async$self, t5, t6, null);
                  }
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _cavern$_density$2: function(region, pos) {
      var t1, t2, distance;
      switch (region) {
        case C.Region_everywhere:
          return 0.45;
        case C.Region_n:
          return K.lerpDouble(pos.y, 0, this._architect.stage.tiles.bounds.size.y, 0.3, 0.7);
        case C.Region_ne:
          t1 = this._architect.stage.tiles.bounds.size;
          t2 = t1.x;
          return K.lerpDouble(Math.max(t2 - pos.x - 1, pos.y), 0, Math.min(t2, t1.y), 0.3, 0.7);
        case C.Region_e:
          return K.lerpDouble(pos.x, 0, this._architect.stage.tiles.bounds.size.x, 0.3, 0.7);
        case C.Region_se:
          t1 = this._architect.stage.tiles.bounds.size;
          t2 = t1.x;
          t1 = t1.y;
          return K.lerpDouble(Math.max(t2 - pos.x - 1, t1 - pos.y - 1), 0, Math.min(t2, t1), 0.3, 0.7);
        case C.Region_s:
          return K.lerpDouble(pos.y, 0, this._architect.stage.tiles.bounds.size.y, 0.7, 0.3);
        case C.Region_sw:
          t1 = this._architect.stage.tiles.bounds.size;
          t2 = t1.y;
          return K.lerpDouble(Math.max(pos.x, t2 - pos.y - 1), 0, Math.min(t1.x, t2), 0.3, 0.7);
        case C.Region_w:
          return K.lerpDouble(pos.x, 0, this._architect.stage.tiles.bounds.size.x, 0.7, 0.3);
        case C.Region_nw:
          distance = Math.max(pos.x, pos.y);
          t1 = this._architect.stage.tiles.bounds.size;
          return K.lerpDouble(distance, 0, Math.min(t1.x, t1.y), 0.3, 0.7);
      }
      throw H.wrapException("unreachable");
    }
  };
  S.Decorator.prototype = {
    decorate$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, stairCount, i, pos;
        return function $async$decorate$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$self._findDoorways$0();
                  for (t1 = $async$self._decorator$_architect, t2 = t1.stage, t3 = t2.tiles, t4 = t3.bounds, t5 = X.RectIterator$(t4), t1 = t1._owners, t6 = t1._elements, t1 = t1.bounds.size.x, t7 = t6.length, t8 = $async$self._tilesByArchitecture; t5.moveNext$0();) {
                    t9 = t5._x;
                    t10 = t5._y;
                    t11 = t10 * t1 + t9;
                    if (t11 < 0 || t11 >= t7) {
                      H.ioore(t6, t11);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    J.add$1$ax(t8.putIfAbsent$2(0, t6[t11], new S.Decorator_decorate_closure()), new L.Vec(t9, t10));
                  }
                  $async$self._paintTiles$0();
                  $async$goto = 3;
                  return P._IterationMarker_yieldStar($async$self._placeDecor$0());
                case 3:
                  // after yield
                  stairCount = $.$get$rng().range$2(2, 4);
                  for (i = 0; i < stairCount; ++i) {
                    pos = t2.findOpenTile$0();
                    t1 = t3._elements;
                    t5 = pos.y * t4.size.x + pos.x;
                    if (t5 < 0 || t5 >= t1.length) {
                      H.ioore(t1, t5);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t1[t5].type = $.$get$Tiles_stairs();
                  }
                  $async$self._heroPos = t2.findOpenTile$0();
                  $async$goto = 4;
                  return P._IterationMarker_yieldStar($async$self._spawnMonsters$0());
                case 4:
                  // after yield
                  $async$goto = 5;
                  return P._IterationMarker_yieldStar($async$self._dropItems$0());
                case 5:
                // after yield
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _findDoorways$0: function() {
      var t1, doorways, t2, t3, t4, t5, t6, t7, t8, pos, _i, dir, t9, behind, doorway, _i0, neighbor;
      t1 = [L.Vec];
      doorways = H.setRuntimeTypeInfo([], t1);
      for (t2 = this._decorator$_architect.stage, t3 = t2.tiles, t4 = t3.bounds, t5 = X.RectIterator$(t4.inflate$1(-1)), t3 = t3._elements, t4 = t4.size.x, t6 = t3.length; t5.moveNext$0();) {
        t7 = t5._x;
        t8 = t5._y;
        pos = new L.Vec(t7, t8);
        t7 = t8 * t4 + t7;
        if (t7 < 0 || t7 >= t6)
          return H.ioore(t3, t7);
        if (t3[t7].type != $.$get$Tiles_passage())
          continue;
        for (_i = 0; _i < 4; ++_i) {
          dir = C.List_aAW[_i];
          t8 = pos.$add(0, dir);
          t8 = t8.y * t4 + t8.x;
          if (t8 < 0 || t8 >= t6)
            return H.ioore(t3, t8);
          t8 = t3[t8].type;
          t9 = $.$get$Tiles_open();
          if (t8 != t9)
            continue;
          t8 = pos.$add(0, dir.get$rotate180());
          t8 = t8.y * t4 + t8.x;
          if (t8 < 0 || t8 >= t6)
            return H.ioore(t3, t8);
          behind = t3[t8].type;
          if (behind != t9 && behind != $.$get$Tiles_passage() && behind != $.$get$Tiles_doorway())
            continue;
          t8 = pos.$add(0, dir.get$rotateLeft90());
          t8 = t8.y * t4 + t8.x;
          if (t8 < 0 || t8 >= t6)
            return H.ioore(t3, t8);
          t8 = t3[t8].type;
          t9 = $.$get$Tiles_solid();
          if (t8 != t9)
            continue;
          t8 = pos.$add(0, dir.get$rotateRight90());
          t8 = t8.y * t4 + t8.x;
          if (t8 < 0 || t8 >= t6)
            return H.ioore(t3, t8);
          if (t3[t8].type != t9)
            continue;
          t3[t7].type = $.$get$Tiles_doorway();
          C.JSArray_methods.add$1(doorways, pos);
          break;
        }
      }
      t5 = $.$get$rng();
      t5.toString;
      C.JSArray_methods.shuffle$1(H.assertSubtype(doorways, "$isList", t1, "$asList"), t5._random);
      for (t1 = doorways.length, _i = 0; _i < doorways.length; doorways.length === t1 || (0, H.throwConcurrentModificationError)(doorways), ++_i) {
        doorway = doorways[_i];
        t2.toString;
        H.interceptedTypeCheck(doorway, "$isVec");
        t5 = doorway.y * t4 + doorway.x;
        if (t5 < 0 || t5 >= t6)
          return H.ioore(t3, t5);
        t5 = t3[t5].type;
        t7 = $.$get$Tiles_doorway();
        if (t5 != t7)
          continue;
        for (t5 = doorway.get$cardinalNeighbors(), t8 = t5.length, _i0 = 0; _i0 < t5.length; t5.length === t8 || (0, H.throwConcurrentModificationError)(t5), ++_i0) {
          neighbor = t5[_i0];
          t9 = neighbor.y * t4 + neighbor.x;
          if (t9 < 0 || t9 >= t6)
            return H.ioore(t3, t9);
          if (t3[t9].type == t7) {
            t9 = $.$get$rng();
            t9 = t9._random.nextInt$1(2) === 0 ? doorway : neighbor;
            t9 = t9.y * t4 + t9.x;
            if (t9 < 0 || t9 >= t6)
              return H.ioore(t3, t9);
            t3[t9].type = $.$get$Tiles_passage();
          }
        }
      }
    },
    _paintTiles$0: function() {
      var t1, t2, t3, t4, architecture, t5, paintStyle, painter, t6, t7, t8;
      for (t1 = this._tilesByArchitecture, t1 = t1.get$entries(t1), t1 = t1.get$iterator(t1), t2 = this._decorator$_architect, t3 = t2.stage; t1.moveNext$0();) {
        t4 = t1.get$current();
        architecture = t4.key;
        t5 = $.$get$PaintStyle__all();
        paintStyle = t5.$index(0, "rock");
        if (architecture != null)
          paintStyle = t5.$index(0, architecture.get$paintStyle());
        painter = new Q.Painter(this, t2, architecture);
        for (t4 = J.get$iterator$ax(t4.value); t4.moveNext$0();) {
          t5 = t4.get$current();
          t6 = paintStyle.paintTile$2(painter, t5);
          t7 = t3.tiles;
          t8 = t7._elements;
          t5 = t5.y * t7.bounds.size.x + t5.x;
          if (t5 < 0 || t5 >= t8.length)
            return H.ioore(t8, t5);
          t8[t5].type = t6;
          ++painter._painted;
        }
      }
    },
    _placeDecor$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, architecture, tiles, painter, t6, result, decorTiles, tries, tries0, decor, i, tile, max, j;
        return function $async$_placeDecor$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._tilesByArchitecture, t1 = t1.get$entries(t1), t1 = t1.get$iterator(t1), t2 = $async$self._decorator$_architect, t3 = t2.depth, t4 = [L.Vec];
              case 3:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                t5 = t1.get$current();
                architecture = t5.key;
                if (architecture == null) {
                  // goto for condition
                  $async$goto = 3;
                  break;
                }
                tiles = J.toList$0$ax(t5.value);
                t5 = $.$get$rng();
                t5.toString;
                C.JSArray_methods.shuffle$1(H.assertSubtype(tiles, "$isList", t4, "$asList"), t5._random);
                painter = new Q.Painter($async$self, t2, architecture);
                t6 = tiles.length * architecture._style.decorDensity;
                result = C.JSNumber_methods.floor$0(t6);
                if (t5.float$1(0, 1) < t6 - result)
                  ++result;
                decorTiles = C.JSNumber_methods.ceil$0(t5.float$2(0, result * 0.8, result * 1.2));
                tries = 0;
              case 5:
                // while condition
                tries0 = tries + 1;
                if (!(tries < decorTiles && painter._painted < decorTiles)) {
                  // goto after while
                  $async$goto = 6;
                  break;
                }
                decor = Y.Decor_choose(t3, architecture._style.decorTheme);
                if (decor == null) {
                  // goto break c$1
                  $async$goto = 7;
                  break;
                }
                i = 0;
              case 8:
                // for condition
                if (!(i < tiles.length)) {
                  // goto after for
                  $async$goto = 10;
                  break;
                }
                tile = tiles[i];
                if (!decor.canPlace$2(painter, tile)) {
                  // goto for update
                  $async$goto = 9;
                  break;
                }
                decor.place$2(painter, tile);
                t5 = $.$get$rng();
                max = tiles.length;
                j = t5._random.nextInt$1(max - i) + i;
                t5 = tiles.length;
                if (j < 0 || j >= t5) {
                  H.ioore(tiles, j);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t6 = tiles[j];
                if (i >= t5) {
                  H.ioore(tiles, i);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                tiles[i] = t6;
                C.JSArray_methods.$indexSet(tiles, j, tile);
                $async$goto = 11;
                return "Placed decor";
              case 11:
                // after yield
                // goto after for
                $async$goto = 10;
                break;
              case 9:
                // for update
                ++i;
                // goto for condition
                $async$goto = 8;
                break;
              case 10:
              // after for
              case 7:
                // break c$1
                tries = tries0;
                // goto while condition
                $async$goto = 5;
                break;
              case 6:
                // after while
                // goto for condition
                $async$goto = 3;
                break;
              case 4:
              // after for
              case 1:
                // return
                return P._IterationMarker_endOfIteration();
              case 2:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    _spawnMonsters$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, spawned, t1, t2, t3, t4, t5, t6, densityMap, flow, t7, t8, t9, pos, distance, goalExperience, totalExperience, t10, t11, max, t12, group, breed, experience;
        return function $async$_spawnMonsters$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  spawned = P.LinkedHashSet_LinkedHashSet(null, null, null, X.Architecture);
                  $async$self._tilesByArchitecture.forEach$1(0, new S.Decorator__spawnMonsters_closure($async$self, spawned));
                  t1 = $async$self._decorator$_architect;
                  t2 = t1.stage;
                  t3 = t2.tiles;
                  t4 = t3.bounds;
                  t5 = t4.size;
                  t6 = t5.x;
                  densityMap = new S.DensityMap(M.Array2D$(t6, t5.y, 0, P.int));
                  $.Debug_densityMap = densityMap;
                  flow = N.MotilityFlow$(t2, $async$self._heroPos, $.$get$Motility_all(), false, null, null);
                  for (t2 = X.RectIterator$(t4.inflate$1(-1)), t4 = t1._owners, t5 = t4._elements, t4 = t4.bounds.size.x, t7 = t5.length; t2.moveNext$0();) {
                    t8 = t2._x;
                    t9 = t2._y;
                    pos = new L.Vec(t8, t9);
                    t8 = t9 * t4 + t8;
                    if (t8 < 0 || t8 >= t7) {
                      H.ioore(t5, t8);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t8 = t5[t8];
                    if (t8 == null)
                      continue;
                    if (spawned.contains$1(0, t8))
                      continue;
                    distance = flow.costAt$1(pos);
                    if (distance == null)
                      continue;
                    if (distance < 10)
                      continue;
                    densityMap.$indexSet(0, pos, C.JSNumber_methods.toInt$0((4 + Math.sqrt(distance - 10)) * t8._style.monsterDensity));
                  }
                  t1 = t1.depth;
                  t2 = Math.pow(t1 - 1, 2);
                  goalExperience = densityMap._possibleTiles * (2 + t2 * 0.2);
                  t2 = $.$get$rng();
                  goalExperience += t2.float$1(0, goalExperience * 0.2);
                  t8 = [P.String], totalExperience = 0;
                case 3:
                  // for condition
                  if (!(totalExperience < goalExperience)) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  pos = densityMap.choose$0();
                  if (pos == null) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  t9 = pos.y;
                  t10 = pos.x;
                  t11 = t9 * t4 + t10;
                  if (t11 < 0 || t11 >= t7) {
                    H.ioore(t5, t11);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t11 = H.assertSubtype(t5[t11]._style.monsterGroups, "$isList", t8, "$asList");
                  max = t11.length;
                  t12 = t2._random.nextInt$1(max - 0);
                  if (t12 < 0 || t12 >= t11.length) {
                    H.ioore(t11, t12);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  group = t11[t12];
                  breed = $.$get$Monsters_breeds().tryChoose$2$tag(t1, group);
                  t11 = t3._elements;
                  t10 = t9 * t6 + t10;
                  if (t10 < 0 || t10 >= t11.length) {
                    H.ioore(t11, t10);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t10 = t11[t10];
                  t11 = breed.motility;
                  if ((t10.type.motility._bitMask & t11._bitMask) === 0) {
                    // goto for condition
                    $async$goto = 3;
                    break;
                  }
                  if (!$async$self._canSpawn$1(breed)) {
                    // goto for condition
                    $async$goto = 3;
                    break;
                  }
                  experience = $async$self._spawnMonster$3(densityMap, pos, breed);
                  $async$goto = 5;
                  return "Spawned monster";
                case 5:
                  // after yield
                  totalExperience += experience;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 4:
                  // after for
                  $.Debug_densityMap = null;
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    chooseBreed$3$includeParentTags$tag: function(depth, includeParentTags, tag) {
      var breed;
      for (; true;) {
        breed = $.$get$Monsters_breeds().tryChoose$3$includeParents$tag(depth, includeParentTags, tag);
        if (this._canSpawn$1(breed))
          return breed;
      }
    },
    _canSpawn$1: function(breed) {
      if (!breed.flags.unique)
        return true;
      if (this._decorator$_architect.lore.slain$1(breed) > 0)
        return false;
      if (this._spawnedUniques.contains$1(0, breed))
        return false;
      return true;
    },
    _spawnMonster$3: function(density, pos, breed) {
      var _box_0, isCorpse, spawn, breeds, t1, t2, t3, t4, t5, t6, t7, flow, here;
      _box_0 = {};
      isCorpse = !breed.flags.unique && $.$get$rng().range$1(10) === 0;
      _box_0.experience = 0;
      spawn = new S.Decorator__spawnMonster_spawn(_box_0, this, isCorpse, density);
      breeds = breed.spawnAll$0();
      if (0 >= breeds.length)
        return H.ioore(breeds, 0);
      spawn.call$2(breeds[0], pos);
      for (t1 = H.SubListIterable$(breeds, 1, null, H.getTypeArgumentByIndex(breeds, 0)), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getTypeArgumentByIndex(t1, 0)]), t2 = L.Vec, t3 = [[P.Queue, L.Vec]], t4 = [t2], t2 = [t2], t5 = this._decorator$_architect.stage; t1.moveNext$0();) {
        t6 = t1._current;
        t7 = t6.motility;
        flow = new N.MotilityFlow(t7, true, false, t5, pos, null, new B.BucketQueue(H.setRuntimeTypeInfo([], t3), t4), H.setRuntimeTypeInfo([], t2));
        flow.Flow$3$maxDistance(t5, pos, null);
        here = flow.get$reachable().firstWhere$2$orElse(0, new S.Decorator__spawnMonster_closure(), new S.Decorator__spawnMonster_closure0());
        if (here == null)
          break;
        spawn.call$2(t6, here);
      }
      return _box_0.experience;
    },
    _dropItems$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, densityMap, flow, t7, t8, t9, t10, pos, t11, distance, t12, goalPrice, totalPrice, items, _i;
        return function $async$_dropItems$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self._decorator$_architect;
                  t2 = t1.stage;
                  t3 = t2.tiles;
                  t4 = t3.bounds;
                  t5 = t4.size;
                  t6 = t5.x;
                  densityMap = new S.DensityMap(M.Array2D$(t6, t5.y, 0, P.int));
                  $.Debug_densityMap = densityMap;
                  flow = N.MotilityFlow$(t2, $async$self._heroPos, $.$get$Motility_doorAndWalk(), false, null, null);
                  for (t4 = X.RectIterator$(t4.inflate$1(-1)), t5 = t1._owners, t7 = t5._elements, t5 = t5.bounds.size.x, t8 = t7.length; t4.moveNext$0();) {
                    t9 = t4._x;
                    t10 = t4._y;
                    pos = new L.Vec(t9, t10);
                    t11 = t10 * t5 + t9;
                    if (t11 < 0 || t11 >= t8) {
                      H.ioore(t7, t11);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t11 = t7[t11];
                    if (t11 == null)
                      continue;
                    distance = flow.costAt$1(pos);
                    if (distance == null)
                      continue;
                    t12 = t3._elements;
                    t9 = t10 * t6 + t9;
                    if (t9 < 0 || t9 >= t12.length) {
                      H.ioore(t12, t9);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t9 = t12[t9].type;
                    t9.toString;
                    t12 = $.$get$Motility_walk();
                    if ((t9.motility._bitMask & t12._bitMask) === 0)
                      continue;
                    densityMap.$indexSet(0, pos, C.JSNumber_methods.toInt$0((10 + Math.sqrt(distance + 1)) * t11._style.itemDensity));
                  }
                  t1 = t1.depth;
                  goalPrice = densityMap._possibleTiles * (0.05 + (t1 - 1) * 0.05);
                  goalPrice += $.$get$rng().float$1(0, goalPrice * 0.2);
                  totalPrice = 0;
                case 3:
                  // for condition
                  if (!(totalPrice < goalPrice)) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  pos = densityMap.choose$0();
                  if (pos == null) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  t3 = $.$get$_floorDrops().tryChoose$1(t1);
                  items = t2.placeDrops$3(pos, $.$get$Motility_walk(), t3.drop);
                  for (t3 = items.length, _i = 0; _i < items.length; items.length === t3 || (0, H.throwConcurrentModificationError)(items), ++_i)
                    totalPrice += Math.max(items[_i].get$price(), 1);
                  densityMap.reduceAround$4(t2, pos, $.$get$Motility_doorAndWalk(), 3);
                  $async$goto = 5;
                  return "Spawned item";
                case 5:
                  // after yield
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 4:
                  // after for
                  $.Debug_densityMap = null;
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    }
  };
  S.Decorator_decorate_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [L.Vec]);
    },
    $signature: 33
  };
  S.Decorator__spawnMonsters_closure.prototype = {
    call$2: function(architecture, tiles) {
      var t1;
      H.interceptedTypeCheck(architecture, "$isArchitecture");
      H.assertSubtype(tiles, "$isList", [L.Vec], "$asList");
      if (architecture == null)
        return;
      t1 = this.$this;
      if (architecture.spawnMonsters$1(new Q.Painter(t1, t1._decorator$_architect, architecture)))
        this.spawned.add$1(0, architecture);
    },
    $signature: 73
  };
  S.Decorator__spawnMonster_spawn.prototype = {
    call$2: function(breed, pos) {
      var t1, t2, monster;
      t1 = this.$this;
      t2 = t1._decorator$_architect.stage;
      if (t2._actorsByTile.$index(0, pos) != null)
        return;
      if (!t1._canSpawn$1(breed))
        return;
      if (breed.flags.unique)
        t1._spawnedUniques.add$1(0, breed);
      if (this.isCorpse)
        t2.placeDrops$3(pos, breed.motility, breed.drop);
      else {
        monster = breed.spawn$2(t2.game, pos);
        t2.addActor$1(monster);
        t1 = this._box_0;
        t1.experience = t1.experience + monster._breed.get$experience();
        t1 = this.density;
        if (t1 != null)
          t1.reduceAround$4(t2, pos, $.$get$Motility_all(), 5);
      }
    },
    $signature: 74
  };
  S.Decorator__spawnMonster_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isVec");
      return true;
    },
    $signature: 0
  };
  S.Decorator__spawnMonster_closure0.prototype = {
    call$0: function() {
      return;
    },
    $signature: 2
  };
  S.DensityMap.prototype = {
    $index: function(_, pos) {
      return this._density.$index(0, H.interceptedTypeCheck(pos, "$isVec"));
    },
    $indexSet: function(_, pos, value) {
      var t1, old, t2;
      t1 = this._density;
      old = t1.$index(0, pos);
      t2 = this._total;
      if (typeof old !== "number")
        return H.iae(old);
      this._total = t2 - old + value;
      t1.$indexSet(0, pos, value);
      if (old === 0 && value > 0)
        ++this._possibleTiles;
      if (old > 0 && value === 0)
        --this._possibleTiles;
    },
    choose$0: function() {
      var t1, n, t2, t3, t4, t5, t6, pos, density;
      t1 = this._total;
      if (t1 === 0)
        return;
      n = $.$get$rng().range$1(t1);
      for (t1 = this._density, t2 = t1.bounds, t3 = X.RectIterator$(t2), t1 = t1._elements, t2 = t2.size.x, t4 = t1.length; t3.moveNext$0();) {
        t5 = t3._x;
        t6 = t3._y;
        pos = new L.Vec(t5, t6);
        t5 = t6 * t2 + t5;
        if (t5 < 0 || t5 >= t4)
          return H.ioore(t1, t5);
        density = t1[t5];
        if (typeof density !== "number")
          return H.iae(density);
        if (n < density)
          return pos;
        n -= density;
      }
      throw H.wrapException("unreachable");
    },
    reduceAround$4: function(stage, start, motility, range) {
      var flow, t1, t2, t3, t4, t5, t6, t7;
      this.$indexSet(0, start, 0);
      flow = N.MotilityFlow$(stage, start, motility, null, null, range);
      for (t1 = flow.get$reachable(), t1 = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]), t2 = this._density, t3 = t2._elements, t2 = t2.bounds.size.x, t4 = t3.length; t1.moveNext$0();) {
        t5 = t1.get$current();
        t6 = flow.costAt$1(t5);
        if (typeof t6 !== "number")
          return t6.$div();
        t7 = t5.y * t2 + t5.x;
        if (t7 < 0 || t7 >= t4)
          return H.ioore(t3, t7);
        t7 = t3[t7];
        if (typeof t7 !== "number")
          return t7.$mul();
        this.$indexSet(0, t5, C.JSNumber_methods.toInt$0(t7 * (t6 / range)));
      }
    }
  };
  Q.Dungeon.prototype = {
    get$paintStyle: function() {
      return "stone";
    },
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, failed, t2, t3, room, placed, i, t4, t5, xMax, yMax, xMin, yMin;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._dungeon$_density;
                failed = 0;
              case 2:
                // while condition
                t2 = $async$self._architect;
                t3 = t2.stage.tiles.bounds.size;
                if (!(t2._carvedTiles / ((t3.x - 2) * (t3.y - 2)) < t1 && failed < 100)) {
                  // goto after while
                  $async$goto = 3;
                  break;
                }
                room = R.Room_create(t2.depth);
                t2 = room.bounds.size;
                t3 = t2.x;
                t2 = t2.y;
                i = 0;
              case 4:
                // while condition
                if (!(i < 400)) {
                  placed = false;
                  // goto after while
                  $async$goto = 5;
                  break;
                }
                t4 = $async$self._architect.stage.tiles.bounds.size;
                t5 = t4.x;
                xMax = t5 - t3;
                t4 = t4.y;
                yMax = t4 - t2;
                switch ($async$self._region) {
                  case C.Region_everywhere:
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_n:
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_ne:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    yMin = 1;
                    break;
                  case C.Region_e:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMin = 1;
                    break;
                  case C.Region_se:
                    xMin = C.JSInt_methods._tdivFast$1(t5, 2);
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    break;
                  case C.Region_s:
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    xMin = 1;
                    break;
                  case C.Region_sw:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    yMin = C.JSInt_methods._tdivFast$1(t4, 2);
                    xMin = 1;
                    break;
                  case C.Region_w:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    xMin = 1;
                    yMin = 1;
                    break;
                  case C.Region_nw:
                    xMax = C.JSInt_methods._tdivFast$1(t5, 2) - t3;
                    yMax = C.JSInt_methods._tdivFast$1(t4, 2) - t2;
                    xMin = 1;
                    yMin = 1;
                    break;
                  default:
                    xMin = 1;
                    yMin = 1;
                }
                t4 = $.$get$rng();
                t5 = t4._random.nextInt$1(xMax - xMin);
                $async$goto = $async$self._dungeon$_tryPlaceRoom$3(room, t5 + xMin, t4._random.nextInt$1(yMax - yMin) + yMin) ? 6 : 7;
                break;
              case 6:
                // then
                $async$goto = 8;
                return "room";
              case 8:
                // after yield
                placed = true;
                // goto after while
                $async$goto = 5;
                break;
              case 7:
                // join
                ++i;
                // goto while condition
                $async$goto = 4;
                break;
              case 5:
                // after while
                if (!placed)
                  ++failed;
                // goto while condition
                $async$goto = 2;
                break;
              case 3:
                // after while
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    _dungeon$_tryPlaceRoom$3: function(room, x, y) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, tile;
      H.assertSubtype(room, "$isArray2D", [R.RoomTile], "$asArray2D");
      for (t1 = room.bounds, t2 = X.RectIterator$(t1), t3 = room._elements, t4 = t1.size.x, t5 = t3.length; t2.moveNext$0();) {
        t6 = t2._x;
        t7 = t2._y;
        t8 = t6 + x;
        t9 = t7 + y;
        t6 = t7 * t4 + t6;
        if (t6 < 0 || t6 >= t5)
          return H.ioore(t3, t6);
        tile = t3[t6];
        t6 = tile.tile;
        t7 = t6 == null;
        if (!(t7 && tile.direction === C.Direction_0_0) && !this._architect.stage.tiles.bounds.contains$1(0, new L.Vec(t8, t9)))
          return false;
        if (!(t7 && tile.direction === C.Direction_0_0) && t6 != $.$get$Tiles_solid() && tile.direction === C.Direction_0_0 && !this._architect._canCarve$2(this, new L.Vec(t8, t9)))
          return false;
      }
      for (t1 = X.RectIterator$(t1); t1.moveNext$0();) {
        t2 = t1._x;
        t6 = t1._y;
        t7 = t2 + x;
        t8 = t6 + y;
        t2 = t6 * t4 + t2;
        if (t2 < 0 || t2 >= t5)
          return H.ioore(t3, t2);
        tile = t3[t2];
        t2 = tile.tile;
        if (!(t2 == null && tile.direction === C.Direction_0_0) && t2 != $.$get$Tiles_solid() && tile.direction === C.Direction_0_0)
          this._architect._carve$4(this, t7, t8, t2);
        else {
          t6 = $.$get$Tiles_solid();
          if (t2 == t6) {
            t2 = this._architect.stage.tiles;
            t9 = t2._elements;
            t7 = t8 * t2.bounds.size.x + t7;
            if (t7 < 0 || t7 >= t9.length)
              return H.ioore(t9, t7);
            if (t9[t7].type == $.$get$Tiles_unformed())
              t9[t7].type = t6;
          }
        }
      }
      return true;
    }
  };
  Z.Keep.prototype = {
    get$paintStyle: function() {
      return "stone";
    },
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, startingRooms, i;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $.Keep_debugJunctions = $async$self._junctions;
                startingRooms = $async$self._region === C.Region_everywhere && $async$self._maxRooms == null ? 20 : 1;
                i = 0;
              case 2:
                // for condition
                if (!(i < startingRooms)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return P._IterationMarker_yieldStar($async$self._growRooms$0());
              case 5:
              // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    spawnMonsters$1: function(painter) {
      var t1, t2, tiles, t3, t4, t5, _i, pos, t6, max, t7, breed;
      t1 = painter._decorator;
      t2 = J.where$1$ax(t1._tilesByArchitecture.$index(0, painter._architecture), new Z.Keep_spawnMonsters_closure(painter));
      tiles = P.List_List$from(t2, true, H.getTypeArgumentByIndex(t2, 0));
      t2 = $.$get$rng();
      t2.toString;
      C.JSArray_methods.shuffle$1(H.assertSubtype(tiles, "$isList", [L.Vec], "$asList"), t2._random);
      for (t3 = tiles.length, t4 = painter._painter$_architect.depth, t5 = [P.String], _i = 0; _i < tiles.length; tiles.length === t3 || (0, H.throwConcurrentModificationError)(tiles), ++_i) {
        pos = tiles[_i];
        if (t2._random.nextInt$1(20) !== 0)
          continue;
        t6 = H.assertSubtype(this._style.monsterGroups, "$isList", t5, "$asList");
        max = t6.length;
        t7 = t2._random.nextInt$1(max - 0);
        if (t7 < 0 || t7 >= t6.length)
          return H.ioore(t6, t7);
        breed = t1.chooseBreed$3$includeParentTags$tag(t4, null, t6[t7]);
        t1._spawnMonster$3(null, H.interceptedTypeCheck(pos, "$isVec"), breed);
      }
      return true;
    },
    _growRooms$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, t7, junction, t8;
        return function $async$_growRooms$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  if (!$async$self._tryPlaceStartingRoom$0()) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t1 = $async$self._junctions, t2 = t1._junctions, t3 = Z.Junction, t4 = t1._byPosition, t5 = $async$self._maxRooms, t6 = t5 != null;
                case 3:
                  // for condition
                  if (!(t7 = t2.length, t7 !== 0)) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  switch (t1._takeFrom) {
                    case C.TakeFrom_0:
                      if (0 >= t7) {
                        H.ioore(t2, -1);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      junction = t2.pop();
                      break;
                    case C.TakeFrom_1:
                      junction = C.JSArray_methods.removeAt$1(t2, 0);
                      break;
                    case C.TakeFrom_2:
                      junction = $.$get$rng().take$1$1(0, t2, t3);
                      break;
                    default:
                      junction = null;
                  }
                  t7 = junction.position;
                  t4.remove$1(0, t7);
                  ++junction.tries;
                  t8 = t7.$add(0, junction.direction);
                  if (!$async$self._architect._canCarve$2($async$self, t8)) {
                    // goto for condition
                    $async$goto = 3;
                    break;
                  }
                  $async$goto = $async$self._tryAttachRoom$1(junction) ? 5 : 7;
                  break;
                case 5:
                  // then
                  $async$goto = 8;
                  return "Room";
                case 8:
                  // after yield
                  t7 = ++$async$self._placedRooms;
                  if (t6 && t7 >= t5) {
                    // goto after for
                    $async$goto = 4;
                    break;
                  }
                  // goto join
                  $async$goto = 6;
                  break;
                case 7:
                  // else
                  if (junction.tries < 5) {
                    t4.$indexSet(0, t7, junction);
                    C.JSArray_methods.add$1(t2, junction);
                  }
                case 6:
                  // join
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 4:
                // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    _tryPlaceStartingRoom$0: function() {
      var room, t1, i, t2, t3, t4, xMax, yMax, yMin, xMin;
      room = R.Room_create(this._architect.depth);
      for (t1 = [R.RoomTile], i = 0; i < 100; ++i) {
        H.assertSubtype(room, "$isArray2D", t1, "$asArray2D");
        t2 = this._architect.stage.tiles.bounds.size;
        t3 = room.bounds.size;
        t4 = t3.x;
        xMax = t2.x - t4 - 1;
        t2 = t2.y;
        t3 = t3.y;
        yMax = t2 - t3 - 1;
        switch (this._region) {
          case C.Region_nw:
          case C.Region_n:
          case C.Region_ne:
            yMax = Math.max(1, C.JSNumber_methods.toInt$0(t2 * 0.25) - t3);
            yMin = 1;
            break;
          case C.Region_sw:
          case C.Region_s:
          case C.Region_se:
            yMin = C.JSNumber_methods.toInt$0(t2 * 0.75);
            break;
          default:
            yMin = 1;
        }
        switch (this._region) {
          case C.Region_nw:
          case C.Region_w:
          case C.Region_sw:
            xMax = Math.max(1, C.JSNumber_methods.toInt$0(this._architect.stage.tiles.bounds.size.x * 0.25) - t4);
            xMin = 1;
            break;
          case C.Region_ne:
          case C.Region_e:
          case C.Region_se:
            xMin = C.JSNumber_methods.toInt$0(this._architect.stage.tiles.bounds.size.x * 0.75);
            break;
          default:
            xMin = 1;
        }
        if (xMax < xMin)
          xMax = xMin;
        if (yMax < yMin)
          yMax = yMin;
        t2 = $.$get$rng();
        t3 = t2._random.nextInt$1(xMax - xMin);
        if (this._tryPlaceRoom$3(room, t3 + xMin, t2._random.nextInt$1(yMax - yMin) + yMin))
          return true;
      }
      return false;
    },
    _regionContains$1: function(pos) {
      var diagonal, density, t1;
      diagonal = new Z.Keep__regionContains_diagonal(this);
      switch (this._region) {
        case C.Region_everywhere:
          return true;
        case C.Region_n:
          density = K.lerpDouble(pos.y, 0, this._architect.stage.tiles.bounds.size.y, 2, -3);
          break;
        case C.Region_ne:
          density = diagonal.call$2(this._architect.stage.tiles.bounds.size.x - pos.x - 1, pos.y);
          break;
        case C.Region_e:
          density = K.lerpDouble(pos.x, 0, this._architect.stage.tiles.bounds.size.x, -3, 2);
          break;
        case C.Region_se:
          t1 = this._architect.stage.tiles.bounds.size;
          density = diagonal.call$2(t1.x - pos.x - 1, t1.y - pos.y - 1);
          break;
        case C.Region_s:
          density = K.lerpDouble(pos.y, 0, this._architect.stage.tiles.bounds.size.y, -3, 2);
          break;
        case C.Region_sw:
          density = diagonal.call$2(pos.x, this._architect.stage.tiles.bounds.size.y - pos.y - 1);
          break;
        case C.Region_w:
          density = K.lerpDouble(pos.x, 0, this._architect.stage.tiles.bounds.size.x, 2, -3);
          break;
        case C.Region_nw:
          density = diagonal.call$2(pos.x, pos.y);
          break;
        default:
          density = 0;
      }
      t1 = $.$get$rng().float$1(0, 1);
      if (typeof density !== "number")
        return H.iae(density);
      return t1 < density;
    },
    _tryAttachRoom$1: function(junction) {
      var room, t1, t2, junctions, _i, pos, roomPos;
      room = R.Room_create(this._architect.depth);
      t1 = room.bounds;
      t2 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
      junctions = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new Z.Keep__tryAttachRoom_closure(room, junction.direction.get$rotate180()), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
      t2 = $.$get$rng();
      t2.toString;
      C.JSArray_methods.shuffle$1(H.assertSubtype(junctions, "$isList", [L.Vec], "$asList"), t2._random);
      for (t1 = junctions.length, _i = 0; _i < junctions.length; junctions.length === t1 || (0, H.throwConcurrentModificationError)(junctions), ++_i) {
        pos = junctions[_i];
        roomPos = junction.position.$sub(0, pos);
        if (this._tryPlaceRoom$3(room, roomPos.x, roomPos.y))
          return true;
      }
      return false;
    },
    _tryPlaceRoom$3: function(room, x, y) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, tile, junctions, t10, t11, here, t12, junction, _i, junction0;
      H.assertSubtype(room, "$isArray2D", [R.RoomTile], "$asArray2D");
      for (t1 = room.bounds, t2 = X.RectIterator$(t1), t3 = room._elements, t4 = t1.size.x, t5 = t3.length; t2.moveNext$0();) {
        t6 = t2._x;
        t7 = t2._y;
        t8 = t6 + x;
        t9 = t7 + y;
        t6 = t7 * t4 + t6;
        if (t6 < 0 || t6 >= t5)
          return H.ioore(t3, t6);
        tile = t3[t6];
        t6 = tile.tile;
        t7 = t6 == null;
        if (!(t7 && tile.direction === C.Direction_0_0) && !this._architect.stage.tiles.bounds.contains$1(0, new L.Vec(t8, t9)))
          return false;
        if (!(t7 && tile.direction === C.Direction_0_0) && t6 != $.$get$Tiles_solid() && tile.direction === C.Direction_0_0 && !this._architect._canCarve$2(this, new L.Vec(t8, t9)))
          return false;
      }
      t2 = [Z.Junction];
      junctions = H.setRuntimeTypeInfo([], t2);
      for (t1 = X.RectIterator$(t1), t6 = this._junctions, t7 = t6._byPosition, t6 = t6._junctions; t1.moveNext$0();) {
        t8 = t1._x;
        t9 = t1._y;
        t10 = t8 + x;
        t11 = t9 + y;
        here = new L.Vec(t10, t11);
        t8 = t9 * t4 + t8;
        if (t8 < 0 || t8 >= t5)
          return H.ioore(t3, t8);
        tile = t3[t8];
        t8 = tile.direction;
        if (t8 !== C.Direction_0_0) {
          if (this._regionContains$1(here))
            C.JSArray_methods.add$1(junctions, new Z.Junction(here, t8));
        } else {
          t8 = tile.tile;
          if (!(t8 == null && true) && t8 != $.$get$Tiles_solid() && true)
            this._architect._carve$4(this, t10, t11, t8);
          else {
            t9 = $.$get$Tiles_solid();
            if (t8 == t9) {
              t8 = this._architect.stage.tiles;
              t12 = t8._elements;
              t10 = t11 * t8.bounds.size.x + t10;
              if (t10 < 0 || t10 >= t12.length)
                return H.ioore(t12, t10);
              if (t12[t10].type == $.$get$Tiles_unformed())
                t12[t10].type = t9;
              junction = t7.remove$1(0, here);
              if (junction != null)
                C.JSArray_methods.remove$1(t6, junction);
            }
          }
        }
      }
      t1 = $.$get$rng();
      t1.toString;
      C.JSArray_methods.shuffle$1(H.assertSubtype(junctions, "$isList", t2, "$asList"), t1._random);
      for (t1 = junctions.length, _i = 0; _i < junctions.length; junctions.length === t1 || (0, H.throwConcurrentModificationError)(junctions), ++_i) {
        junction = junctions[_i];
        t2 = junction.position;
        junction0 = t7.remove$1(0, t2);
        if (junction0 != null)
          C.JSArray_methods.remove$1(t6, junction0);
        H.interceptedTypeCheck(junction, "$isJunction");
        t7.$indexSet(0, t2, junction);
        C.JSArray_methods.add$1(t6, junction);
      }
      return true;
    }
  };
  Z.Keep_spawnMonsters_closure.prototype = {
    call$1: function(pos) {
      var t1, t2;
      H.interceptedTypeCheck(pos, "$isVec");
      t1 = this.painter._painter$_architect.stage.tiles.$index(0, pos).type;
      t1.toString;
      t2 = $.$get$Motility_walk();
      return (t1.motility._bitMask & t2._bitMask) !== 0;
    },
    $signature: 0
  };
  Z.Keep__regionContains_diagonal.prototype = {
    call$2: function(xDistance, yDistance) {
      var t1 = this.$this._architect.stage.tiles.bounds.size;
      return K.lerpDouble(xDistance + yDistance, 0, t1.x + t1.y, 2, -3);
    },
    $signature: 75
  };
  Z.Keep__tryAttachRoom_closure.prototype = {
    call$1: function(pos) {
      return this.room.$index(0, H.interceptedTypeCheck(pos, "$isVec")).direction === this.direction;
    },
    $signature: 0
  };
  Z.Junction.prototype = {};
  Z.TakeFrom.prototype = {
    toString$0: function(_) {
      return this._keep$_name;
    }
  };
  Z.JunctionSet.prototype = {
    $index: function(_, pos) {
      return this._byPosition.$index(0, H.interceptedTypeCheck(pos, "$isVec"));
    },
    add$1: function(_, junction) {
      this._byPosition.$indexSet(0, junction.position, junction);
      C.JSArray_methods.add$1(this._junctions, junction);
    }
  };
  F.Lake.prototype = {
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, lakeCount, i;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $.$get$rng();
                lakeCount = t1.inclusive$2(1, 2);
                i = 0;
              case 2:
                // for condition
                if (!(i < lakeCount)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$self._placeLake$1(M.Blob_make(t1._random.nextInt$1(16) + 16));
                $async$goto = 5;
                return "Placing lake";
              case 5:
              // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    _placeLake$1: function(lake) {
      var t1, t2, t3, t4, x, y, t5, t6, t7, t8, t9;
      H.assertSubtype(lake, "$isArray2D", [P.bool], "$asArray2D");
      t1 = $.$get$rng();
      t2 = lake.bounds;
      t3 = t2.size;
      t4 = t3.x;
      x = t1.range$2(0, this._architect.stage.tiles.bounds.size.x - t4);
      y = t1.range$2(0, this._architect.stage.tiles.bounds.size.y - t3.y);
      for (t1 = X.RectIterator$(t2), t2 = lake._elements, t3 = t2.length; t1.moveNext$0();) {
        t5 = t1._x;
        t6 = t1._y;
        t7 = t6 * t4 + t5;
        if (t7 < 0 || t7 >= t3)
          return H.ioore(t2, t7);
        if (t2[t7]) {
          t5 += x;
          t6 += y;
          t7 = this._architect;
          t8 = t7.stage.tiles;
          t9 = t8._elements;
          t8 = t6 * t8.bounds.size.x + t5;
          if (t8 < 0 || t8 >= t9.length)
            return H.ioore(t9, t8);
          t9[t8].type = $.$get$Tiles_unformedWet();
          t7 = t7._owners;
          C.JSArray_methods.$indexSet(t7._elements, t6 * t7.bounds.size.x + t5, H.assertSubtypeOfRuntimeType(this, H.getTypeArgumentByIndex(t7, 0)));
        }
      }
    }
  };
  Q.Painter.prototype = {
    get$depth: function() {
      return this._painter$_architect.depth;
    }
  };
  Q.PaintStyle.prototype = {
    paintTile$2: function(painter, pos) {
      var tile, t1;
      tile = painter._painter$_architect.stage.tiles.$index(0, pos).type;
      t1 = this._types;
      if (t1.containsKey$1(0, tile))
        return t1.$index(0, tile);
      if ($.$get$PaintStyle__defaultTypes().containsKey$1(0, tile))
        return $.$get$PaintStyle__defaultTypes().$index(0, tile);
      return tile;
    }
  };
  Q._DoorPaintStyle.prototype = {
    paintTile$2: function(painter, pos) {
      if (painter._painter$_architect.stage.tiles.$index(0, pos).type == $.$get$Tiles_doorway())
        switch ($.$get$rng().range$1(6)) {
          case 0:
            return $.$get$Tiles_openDoor();
          case 1:
            return $.$get$Tiles_floor();
          default:
            return $.$get$Tiles_closedDoor();
        }
      return this.super$PaintStyle$paintTile(painter, pos);
    }
  };
  A.Pit.prototype = {
    get$paintStyle: function() {
      return "stone-jail";
    },
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, max, t1, i, t2, cave, bounds, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  max = $async$self._minSize, t1 = $async$self._maxSize - max, i = 0;
                case 3:
                  // for condition
                  if (!(i < 20)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  t2 = $.$get$rng();
                  cave = M.Blob_make(t2._random.nextInt$1(t1) + max);
                  bounds = $async$self._tryPlaceCave$2(cave, $async$self._architect.stage.tiles.bounds);
                  $async$goto = bounds != null ? 6 : 7;
                  break;
                case 6:
                  // then
                  $async$goto = 8;
                  return "pit";
                case 8:
                  // after yield
                  for (t1 = cave.bounds, t2 = new X.RectIterator(t1), t3 = t1.pos, t2._x = t3.x - 1, t2._y = t3.y, t3 = cave._elements, t1 = t1.size.x, t4 = t3.length, t5 = $async$self._monsterTiles, t6 = bounds.pos, t7 = t6.x, t8 = bounds.size, t9 = t7 + t8.x, t6 = t6.y, t8 = t6 + t8.y; t2.moveNext$0();) {
                    t10 = t2._x;
                    t11 = t2._y;
                    t12 = t11 * t1 + t10;
                    if (t12 < 0 || t12 >= t4) {
                      H.ioore(t3, t12);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (t3[t12])
                      C.JSArray_methods.add$1(t5, new L.Vec(t10, t11).$add(0, new L.Vec(Math.min(t7, t9), Math.min(t6, t8))));
                  }
                  $async$goto = 9;
                  return P._IterationMarker_yieldStar($async$self._placeAntechambers$1(bounds));
                case 9:
                  // after yield
                  // goto return
                  $async$goto = 1;
                  break;
                case 7:
                // join
                case 4:
                  // for update
                  ++i;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    spawnMonsters$1: function(painter) {
      var t1, depth, t2, t3, t4, t5, _i, pos, t6, t7, t8, t9, t10, t11, t12, openNeighbors, t13, _i0, neighbor, t14;
      t1 = painter._painter$_architect;
      depth = C.JSNumber_methods.ceil$0(t1.depth * $.$get$rng().float$2(0, 1, 1.4));
      for (t2 = this._monsterTiles, t3 = t2.length, t4 = this._monsterGroup, t5 = painter._decorator, t1 = t1.stage, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        pos = t2[_i];
        t6 = t1.tiles;
        t7 = t6._elements;
        t8 = pos.y;
        t6 = t6.bounds.size.x;
        t9 = pos.x;
        t10 = t8 * t6 + t9;
        t11 = t7.length;
        if (t10 < 0 || t10 >= t11)
          return H.ioore(t7, t10);
        t10 = t7[t10].type;
        t10.toString;
        t12 = $.$get$Motility_walk();
        t10 = t10.motility._bitMask;
        t12 = t12._bitMask;
        if ((t10 & t12) === 0)
          continue;
        t10 = pos.get$neighbors();
        t13 = t10.length;
        _i0 = 0;
        while (true) {
          if (!(_i0 < t13)) {
            openNeighbors = true;
            break;
          }
          neighbor = t10[_i0];
          t14 = neighbor.y * t6 + neighbor.x;
          if (t14 < 0 || t14 >= t11)
            return H.ioore(t7, t14);
          if ((t7[t14].type.motility._bitMask & t12) === 0) {
            openNeighbors = false;
            break;
          }
          ++_i0;
        }
        if (!openNeighbors)
          continue;
        t6 = t1._actorsByTile;
        t7 = t6._elements;
        t9 = t8 * t6.bounds.size.x + t9;
        if (t9 < 0 || t9 >= t7.length)
          return H.ioore(t7, t9);
        if (t7[t9] != null)
          continue;
        t5._spawnMonster$3(null, pos, t5.chooseBreed$3$includeParentTags$tag(depth, false, t4));
      }
      return true;
    },
    _tryPlaceCave$2: function(cave, bounds) {
      var t1, t2, t3, t4, t5, t6, j, t7, t8, t9, x, y;
      H.assertSubtype(cave, "$isArray2D", [P.bool], "$asArray2D");
      t1 = bounds.size;
      t2 = t1.x;
      t3 = cave.bounds.size;
      t4 = t3.x;
      if (t2 < t4)
        return;
      t1 = t1.y;
      t3 = t3.y;
      if (t1 < t3)
        return;
      for (t5 = bounds.pos, t6 = t5.y, t1 = t6 + t1, t5 = t5.x, t2 = t5 + t2, j = 0; j < 200; ++j) {
        t7 = $.$get$rng();
        t8 = Math.min(t5, t2);
        t9 = Math.max(t5, t2);
        x = t7._random.nextInt$1(t9 - t4 - t8) + t8;
        t8 = Math.min(t6, t1);
        t9 = Math.max(t6, t1);
        y = t7._random.nextInt$1(t9 - t3 - t8) + t8;
        if (this._tryPlaceCaveAt$3(cave, x, y))
          return new X.Rect(new L.Vec(x, y), new L.Vec(t4, t3));
      }
      return;
    },
    _tryPlaceCaveAt$3: function(cave, x, y) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      H.assertSubtype(cave, "$isArray2D", [P.bool], "$asArray2D");
      for (t1 = cave.bounds, t2 = X.RectIterator$(t1), t3 = cave._elements, t4 = t1.size.x, t5 = t3.length; t2.moveNext$0();) {
        t6 = t2._x;
        t7 = t2._y;
        t8 = t7 * t4 + t6;
        if (t8 < 0 || t8 >= t5)
          return H.ioore(t3, t8);
        if (t3[t8])
          if (!this._architect._canCarve$2(this, new L.Vec(t6 + x, t7 + y)))
            return false;
      }
      for (t1 = X.RectIterator$(t1); t1.moveNext$0();) {
        t2 = t1._x;
        t6 = t1._y;
        t7 = t6 * t4 + t2;
        if (t7 < 0 || t7 >= t5)
          return H.ioore(t3, t7);
        if (t3[t7])
          this._architect._carve$4(this, t2 + x, t6 + y, null);
      }
      return true;
    },
    _placeAntechambers$1: function($async$pitBounds) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var pitBounds = $async$pitBounds;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, t4, i, t5, cave, t6, t7, t8;
        return function $async$_placeAntechambers$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = pitBounds.pos, t2 = t1.x, t3 = pitBounds.size, t4 = t2 + t3.x, t1 = t1.y, t3 = t1 + t3.y, i = 0;
              case 2:
                // for condition
                if (!(i < 8)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                t5 = $.$get$rng();
                cave = M.Blob_make(t5._random.nextInt$1(4) + 6);
                t5 = cave.bounds.size;
                t6 = t5.x;
                t7 = Math.min(t2, t4) - t6;
                t5 = t5.y;
                t8 = Math.min(t1, t3) - t5;
                $async$goto = $async$self._tryPlaceCave$2(cave, X.Rect_intersect(new X.Rect(new L.Vec(t7, t8), new L.Vec(Math.max(t2, t4) + t6 - t7, Math.max(t1, t3) + t5 - t8)), $async$self._architect.stage.tiles.bounds.inflate$1(-1))) != null ? 5 : 6;
                break;
              case 5:
                // then
                $async$goto = 7;
                return "antechamber";
              case 7:
              // after yield
              case 6:
              // join
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    }
  };
  D.Reachability.prototype = {
    fill$1: function(_, pos) {
      var queue, t1, t2, t3, t4, t5, t6, t7, t8, pos0, t9, distance, t10, _i, neighbor, t11, t12, t13, neighborDistance, border;
      queue = P.ListQueue$(null, L.Vec);
      t1 = this._affected;
      ++t1._sentinel;
      t2 = t1._values;
      t3 = t2.bounds.size;
      t4 = t3.x;
      t1._xMin = t4;
      t1._xMax = 0;
      t1._yMin = t3.y;
      t1._yMax = 0;
      t3 = H.getTypeArgumentByIndex(queue, 0);
      queue._add$1(H.assertSubtypeOfRuntimeType(pos, t3));
      t1.add$1(0, pos);
      t5 = this._distances;
      this.set$_beforeFill(H.setRuntimeTypeInfo([new D._FillStep(pos, t5.$index(0, pos))], [D._FillStep]));
      for (t2 = t2._elements, t6 = t2.length, t7 = t5._elements, t5 = t5.bounds.size.x, t8 = t7.length; !queue.get$isEmpty(queue);) {
        pos0 = queue.removeFirst$0();
        t9 = pos0.y * t5 + pos0.x;
        if (t9 < 0 || t9 >= t8)
          return H.ioore(t7, t9);
        distance = t7[t9];
        for (t9 = pos0.get$cardinalNeighbors(), t10 = t9.length, _i = 0; _i < t9.length; t9.length === t10 || (0, H.throwConcurrentModificationError)(t9), ++_i) {
          neighbor = t9[_i];
          t11 = neighbor.y;
          t12 = neighbor.x;
          t13 = t11 * t5 + t12;
          if (t13 < 0 || t13 >= t8)
            return H.ioore(t7, t13);
          neighborDistance = t7[t13];
          if (neighborDistance === -1)
            continue;
          if (typeof distance !== "number")
            return distance.$add();
          if (neighborDistance !== distance + 1)
            continue;
          t11 = t11 * t4 + t12;
          if (t11 < 0 || t11 >= t6)
            return H.ioore(t2, t11);
          if (J.$eq$(t2[t11], t1._sentinel))
            continue;
          if (this._hasOtherPath$1(neighbor))
            continue;
          queue._add$1(H.assertSubtypeOfRuntimeType(neighbor, t3));
          t1.add$1(0, neighbor);
          t11 = this._beforeFill;
          (t11 && C.JSArray_methods).add$1(t11, new D._FillStep(neighbor, neighborDistance));
        }
      }
      this._setDistance$2(pos, -1);
      border = this._findBorder$1(pos);
      if (border._collection$_length === 0)
        for (t1 = t1.get$iterator(t1); t1.moveNext$0();)
          this._setDistance$2(t1.__interceptors$_current, -1);
      else {
        for (t1 = t1.get$iterator(t1); t1.moveNext$0();)
          this._setDistance$2(t1.__interceptors$_current, -2);
        this._setDistance$2(pos, -1);
        this._reachability$_process$1(border);
      }
    },
    undoFill$0: function() {
      var t1, t2, _i, step;
      for (t1 = this._beforeFill, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        step = t1[_i];
        this._setDistance$2(step.pos, step.distance);
      }
      this.set$_beforeFill(null);
    },
    _hasOtherPath$1: function(pos) {
      var t1, distance, t2, t3, t4, t5, t6, t7, t8, t9, t10, _i, neighbor, t11, t12, t13;
      t1 = this._distances;
      distance = t1.$index(0, pos);
      for (t2 = pos.get$cardinalNeighbors(), t3 = t2.length, t4 = this._affected, t5 = t4._values, t6 = t5._elements, t5 = t5.bounds.size.x, t7 = t6.length, t8 = this.stage, t9 = t1._elements, t1 = t1.bounds.size.x, t10 = t9.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        neighbor = t2[_i];
        if (!t8.tiles.bounds.contains$1(0, neighbor))
          continue;
        t11 = neighbor.y;
        t12 = neighbor.x;
        t13 = t11 * t5 + t12;
        if (t13 < 0 || t13 >= t7)
          return H.ioore(t6, t13);
        if (!J.$eq$(t6[t13], t4._sentinel)) {
          t11 = t11 * t1 + t12;
          if (t11 < 0 || t11 >= t10)
            return H.ioore(t9, t11);
          t11 = t9[t11];
          if (typeof distance !== "number")
            return distance.$sub();
          t11 = J.$eq$(t11, distance - 1);
        } else
          t11 = false;
        if (t11)
          return true;
      }
      return false;
    },
    _findBorder$1: function(start) {
      var border, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, _i, neighbor, t11, t12, t13;
      border = P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec);
      for (t1 = this._affected, t2 = t1.get$iterator(t1), t3 = this._distances, t4 = t3._elements, t3 = t3.bounds.size.x, t5 = t4.length, t6 = t1._values, t7 = t6._elements, t6 = t6.bounds.size.x, t8 = t7.length; t2.moveNext$0();) {
        t9 = t2.__interceptors$_current;
        if (J.$eq$(t9, start))
          continue;
        for (t9 = t9.get$cardinalNeighbors(), t10 = t9.length, _i = 0; _i < t9.length; t9.length === t10 || (0, H.throwConcurrentModificationError)(t9), ++_i) {
          neighbor = t9[_i];
          t11 = neighbor.y;
          t12 = neighbor.x;
          t13 = t11 * t3 + t12;
          if (t13 < 0 || t13 >= t5)
            return H.ioore(t4, t13);
          if (J.$ge$n(t4[t13], 0)) {
            t11 = t11 * t6 + t12;
            if (t11 < 0 || t11 >= t8)
              return H.ioore(t7, t11);
            t11 = !J.$eq$(t7[t11], t1._sentinel);
          } else
            t11 = false;
          if (t11)
            border.add$1(0, neighbor);
        }
      }
      return border;
    },
    _reachability$_process$1: function(starting) {
      var t1, frontier, t2, t3, t4, t5, t6, t7, pos, parentDistance, _i, here, t8, t9, t10, t11, distance;
      t1 = L.Vec;
      H.assertSubtype(starting, "$isIterable", [t1], "$asIterable");
      frontier = new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]), [t1]);
      for (t1 = J.get$iterator$ax(starting), t2 = this._distances, t3 = t2._elements, t2 = t2.bounds, t4 = t2.size.x, t5 = t3.length; t1.moveNext$0();) {
        t6 = t1.get$current();
        t7 = t6.y * t4 + t6.x;
        if (t7 < 0 || t7 >= t5)
          return H.ioore(t3, t7);
        frontier.add$2(0, t6, t3[t7]);
      }
      for (t1 = this.stage; true;) {
        pos = frontier.removeNext$0();
        if (pos == null)
          break;
        t6 = pos.y * t4 + pos.x;
        if (t6 < 0 || t6 >= t5)
          return H.ioore(t3, t6);
        parentDistance = t3[t6];
        for (t6 = pos.get$cardinalNeighbors(), t7 = t6.length, _i = 0; _i < t6.length; t6.length === t7 || (0, H.throwConcurrentModificationError)(t6), ++_i) {
          here = t6[_i];
          if (!t2.contains$1(0, here))
            continue;
          t8 = here.y;
          t9 = here.x;
          t10 = t8 * t4 + t9;
          if (t10 < 0 || t10 >= t5)
            return H.ioore(t3, t10);
          if (!J.$eq$(t3[t10], -2))
            continue;
          t10 = t1.tiles;
          t11 = t10._elements;
          t9 = t8 * t10.bounds.size.x + t9;
          if (t9 < 0 || t9 >= t11.length)
            return H.ioore(t11, t9);
          t9 = t11[t9].type;
          t9.toString;
          t11 = $.$get$Motility_walk();
          if ((t9.motility._bitMask & t11._bitMask) !== 0) {
            if (typeof parentDistance !== "number")
              return parentDistance.$add();
            distance = parentDistance + 1;
            this._setDistance$2(here, distance);
            frontier.add$2(0, here, distance);
          } else
            this._setDistance$2(here, -1);
        }
      }
    },
    _setDistance$2: function(pos, distance) {
      if (this.stage.tiles.$index(0, pos).type == $.$get$Tiles_open()) {
        if (J.$ge$n(this._distances.$index(0, pos), 0))
          --this._reachedOpenCount;
        if (typeof distance !== "number")
          return distance.$ge();
        if (distance >= 0)
          ++this._reachedOpenCount;
      }
      this._distances.$indexSet(0, pos, distance);
    },
    set$_beforeFill: function(_beforeFill) {
      this._beforeFill = H.assertSubtype(_beforeFill, "$isList", [D._FillStep], "$asList");
    }
  };
  D._FillStep.prototype = {
    get$pos: function() {
      return this.pos;
    }
  };
  G.River.prototype = {
    build$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, startSide, endSide, mid;
        return function $async$build$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $.$get$rng();
                t1.toString;
                t2 = [Z.Direction];
                H.assertSubtype(C.List_aAW, "$isList", t2, "$asList");
                t3 = C.List_aAW.length;
                t4 = t1.range$1(t3);
                if (t4 < 0 || t4 >= t3) {
                  H.ioore(C.List_aAW, t4);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                startSide = C.List_aAW[t4];
                t3 = H.setRuntimeTypeInfo(C.List_aAW.slice(0), [H.getTypeArgumentByIndex(C.List_aAW, 0)]);
                C.JSArray_methods.remove$1(t3, startSide);
                H.assertSubtype(t3, "$isList", t2, "$asList");
                t1 = t1.range$1(t3.length);
                if (t1 < 0 || t1 >= t3.length) {
                  H.ioore(t3, t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                endSide = t3[t1];
                mid = $async$self._makePoint$1(C.Direction_0_0);
                $async$self._displace$2($async$self._makePoint$1(startSide), mid);
                $async$self._displace$2(mid, $async$self._makePoint$1(endSide));
              case 1:
                // return
                return P._IterationMarker_endOfIteration();
              case 2:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    _makePoint$1: function(side) {
      var t1, t2, x, y;
      t1 = $.$get$rng();
      t2 = this._architect.stage.tiles.bounds.size.x;
      x = t1.float$2(0, t2 * 0.25, t2 * 0.75);
      t2 = this._architect.stage.tiles.bounds.size.y;
      y = t1.float$2(0, t2 * 0.25, t2 * 0.75);
      switch (side) {
        case C.Direction_0_0:
          return G._RiverPoint$(x, y, null);
        case C.Direction_0_m1:
          return G._RiverPoint$(x, -2, null);
        case C.Direction_0_1:
          return G._RiverPoint$(x, this._architect.stage.tiles.bounds.size.y + 2, null);
        case C.Direction_1_0:
          return G._RiverPoint$(this._architect.stage.tiles.bounds.size.x + 2, y, null);
        case C.Direction_m1_0:
          return G._RiverPoint$(-2, y, null);
      }
      throw H.wrapException("unreachable");
    },
    _displace$2: function(start, end) {
      var t1, t2, h, t3, t4, v, $length, t5, t6, t7, mid, x1, y1, x2, y2, radiusSquared, y, yy, x, xx;
      t1 = start.x;
      t2 = end.x;
      h = t1 - t2;
      t3 = start.y;
      t4 = end.y;
      v = t3 - t4;
      $length = Math.sqrt(h * h + v * v);
      if ($length > 1) {
        t5 = $.$get$rng();
        t6 = $length / 2;
        t7 = $length / 4;
        mid = G._RiverPoint$((t1 + t2) / 2 + t5.float$1(0, t6) - t7, (t3 + t4) / 2 + t5.float$1(0, t6) - t7, (start.radius + end.radius) / 2);
        this._displace$2(start, mid);
        this._displace$2(mid, end);
        return;
      }
      t2 = start.radius;
      x1 = C.JSNumber_methods.floor$0(t1 - t2);
      y1 = C.JSNumber_methods.floor$0(t3 - t2);
      x2 = C.JSNumber_methods.ceil$0(t1 + t2);
      y2 = C.JSNumber_methods.ceil$0(t3 + t2);
      x1 = H.intTypeCheck(C.JSInt_methods.clamp$2(x1, 1, this._architect.stage.tiles.bounds.size.x - 2));
      y1 = H.intTypeCheck(C.JSInt_methods.clamp$2(y1, 1, this._architect.stage.tiles.bounds.size.y - 2));
      x2 = H.intTypeCheck(C.JSInt_methods.clamp$2(x2, 1, this._architect.stage.tiles.bounds.size.x - 2));
      y2 = H.intTypeCheck(C.JSInt_methods.clamp$2(y2, 1, this._architect.stage.tiles.bounds.size.y - 2));
      radiusSquared = t2 * t2;
      for (y = y1; y <= y2; ++y)
        for (yy = t3 - y, t2 = yy * yy, x = x1; x <= x2; ++x) {
          xx = t1 - x;
          if (xx * xx + t2 <= radiusSquared) {
            t4 = this._architect;
            t5 = t4.stage.tiles;
            t6 = t5._elements;
            t5 = y * t5.bounds.size.x + x;
            if (t5 < 0 || t5 >= t6.length)
              return H.ioore(t6, t5);
            t6[t5].type = $.$get$Tiles_unformedWet();
            t4 = t4._owners;
            C.JSArray_methods.$indexSet(t4._elements, y * t4.bounds.size.x + x, H.assertSubtypeOfRuntimeType(this, H.getTypeArgumentByIndex(t4, 0)));
          }
        }
    }
  };
  G._RiverPoint.prototype = {
    toString$0: function(_) {
      return H.S(this.x) + "," + H.S(this.y) + " (" + H.S(this.radius) + ")";
    }
  };
  R.Room__calculateEdges_isFloor.prototype = {
    call$1: function(dir) {
      var here, t1;
      here = this.pos.$add(0, H.interceptedTypeCheck(dir, "$isDirection"));
      t1 = this.room;
      if (!t1.bounds.contains$1(0, here))
        return false;
      t1 = t1.$index(0, here);
      return !t1.get$isUnused() && t1.tile != $.$get$Tiles_solid() && t1.direction === C.Direction_0_0;
    },
    $signature: 8
  };
  R.RoomTile.prototype = {
    get$isUnused: function() {
      return this.tile == null && this.direction === C.Direction_0_0;
    }
  };
  D.Town.prototype = {
    buildStage$1: function(placeHero) {
      return this.buildStage$body$Town(H.functionTypeCheck(placeHero, {func: 1, args: [L.Vec]}));
    },
    buildStage$body$Town: function($async$placeHero) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var placeHero = $async$placeHero;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, entrances, i, x, y, rect, t7, t8, t9, door;
        return function $async$buildStage$1($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  for (t1 = $async$self.stage.tiles, t2 = t1.bounds, t3 = X.RectIterator$(t2), t1 = t1._elements, t4 = t2.size.x, t5 = t1.length; t3.moveNext$0();) {
                    t6 = t3._x;
                    t6 = t3._y * t4 + t6;
                    if (t6 < 0 || t6 >= t5) {
                      H.ioore(t1, t6);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t1[t6].type = $.$get$Tiles_floor();
                  }
                  for (t3 = J.get$iterator$ax(t2.trace$0()); t3.moveNext$0();) {
                    t6 = t3.get$current();
                    t6 = t6.y * t4 + t6.x;
                    if (t6 < 0 || t6 >= t5) {
                      H.ioore(t1, t6);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t1[t6].type = $.$get$Tiles_wall();
                  }
                  entrances = [$.$get$Tiles_dungeonEntrance(), $.$get$Tiles_home(), $.$get$Tiles_shop1(), $.$get$Tiles_shop2(), $.$get$Tiles_shop3(), $.$get$Tiles_shop4(), $.$get$Tiles_shop5(), $.$get$Tiles_shop6()];
                  for (i = 0; i < 8; ++i) {
                    x = i % 4 * 13 + 5;
                    t3 = C.JSInt_methods._tdivFast$1(i, 4);
                    y = t3 * 14 + 6;
                    rect = new X.Rect(new L.Vec(x, y), new L.Vec(11, 8));
                    for (t6 = new X.RectIterator(rect), t6._x = x - 1, t6._y = y; t6.moveNext$0();) {
                      t7 = t6._x;
                      t7 = t6._y * t4 + t7;
                      if (t7 < 0 || t7 >= t5) {
                        H.ioore(t1, t7);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t1[t7].type = $.$get$Tiles_wall();
                    }
                    t6 = rect.pos;
                    t7 = rect.size;
                    t8 = t6.x;
                    t9 = t7.x;
                    t6 = t6.y;
                    t7 = t7.y;
                    if ((t3 & 1) === 1) {
                      t3 = t8 + t9;
                      t9 = Math.min(t8, t3);
                      t7 = Math.min(t6, t6 + t7);
                      t7 = new L.Vec(t9, t7).$add(0, new L.Vec(Math.max(t8, t3), t7));
                      door = new L.Vec(C.JSInt_methods._tdivFast$1(t7.x, 2), C.JSInt_methods._tdivFast$1(t7.y, 2));
                    } else {
                      t3 = t8 + t9;
                      t9 = Math.min(t8, t3);
                      t7 = Math.max(t6, t6 + t7);
                      t7 = new L.Vec(t9, t7).$add(0, new L.Vec(Math.max(t8, t3), t7));
                      door = new L.Vec(C.JSInt_methods._tdivFast$1(t7.x, 2), C.JSInt_methods._tdivFast$1(t7.y, 2) + -1);
                    }
                    t3 = door.y * t4;
                    t6 = door.x;
                    t7 = t3 + t6;
                    if (t7 < 0 || t7 >= t5) {
                      H.ioore(t1, t7);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t1[t7].type = entrances[i];
                    t7 = t3 + (t6 + -1);
                    if (t7 < 0 || t7 >= t5) {
                      H.ioore(t1, t7);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t7 = t1[t7];
                    t8 = $.$get$Tiles_wallTorch();
                    t7.type = t8;
                    t6 = t3 + (t6 + 1);
                    if (t6 < 0 || t6 >= t5) {
                      H.ioore(t1, t6);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t1[t6].type = t8;
                  }
                  for (t3 = X.RectIterator$(t2); t3.moveNext$0();) {
                    t6 = t3._x;
                    t6 = t3._y * t4 + t6;
                    if (t6 < 0 || t6 >= t5) {
                      H.ioore(t1, t6);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    t6 = t1[t6];
                    t6.updateExplored$1$force(true);
                    t7 = $.$get$Motility_fly();
                    if ((t6.type.motility._bitMask & t7._bitMask) !== 0)
                      t6._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t6._appliedEmanation + 64, 0, 192));
                  }
                  placeHero.call$1(t2.get$center());
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    }
  };
  Z.Tiles_closure.prototype = {
    call$2: function(tile, n) {
      tile._emanation = 192 - n * 12;
      return tile._tiles$_motility$1($.$get$Motility_fly());
    },
    $signature: 76
  };
  Z.Tiles_closure0.prototype = {
    call$1: function(pos) {
      return new Q.OpenChestAction(H.interceptedTypeCheck(pos, "$isVec"));
    },
    $signature: 77
  };
  Z.Tiles_closure1.prototype = {
    call$1: function(pos) {
      return new Q.OpenBarrelAction(H.interceptedTypeCheck(pos, "$isVec"));
    },
    $signature: 78
  };
  Z._TileBuilder.prototype = {
    animate$4: function(_, count, maxMix, fore, $back) {
      var t1, glyph, i, mixedFore, mixedBack, t2;
      t1 = this.glyphs;
      glyph = C.JSArray_methods.get$first(t1);
      for (i = 1; i < count; ++i) {
        mixedFore = glyph.fore.blend$2(fore, K.lerpDouble(i, 0, count, 0, maxMix));
        mixedBack = glyph.back.blend$2($back, K.lerpDouble(i, 0, count, 0, maxMix));
        t2 = glyph.char;
        C.JSArray_methods.add$1(t1, new L.Glyph(t2, mixedFore, mixedBack));
      }
      return this;
    },
    emanate$1: function(emanation) {
      this._emanation = emanation;
      return this;
    },
    to$1: function(portal) {
      this._portal = portal;
      return this;
    },
    onClose$1: function(onClose) {
      this.set$_onClose(H.functionTypeCheck(onClose, {func: 1, ret: V.Action, args: [L.Vec]}));
      return this;
    },
    onOpen$1: function(onOpen) {
      this.set$_onOpen(H.functionTypeCheck(onOpen, {func: 1, ret: V.Action, args: [L.Vec]}));
      return this;
    },
    obstacle$0: function() {
      return this._tiles$_motility$1($.$get$Motility_fly());
    },
    open$0: function(_) {
      return this._tiles$_motility$1($.$get$Motility_flyAndWalk());
    },
    solid$0: function() {
      return this._tiles$_motility$1($.$get$Motility_none());
    },
    _tiles$_motility$1: function(motility) {
      var t1, t2, t3, t4, t5;
      t1 = this.glyphs;
      if (t1.length === 1)
        t1 = C.JSArray_methods.get$first(t1);
      t2 = this._portal;
      t3 = this._emanation;
      t4 = this._onClose;
      t5 = this._onOpen;
      return new Q.TileType(this.name, t2, t3, t1, motility, t4, t5);
    },
    set$_onClose: function(_onClose) {
      this._onClose = H.functionTypeCheck(_onClose, {func: 1, ret: V.Action, args: [L.Vec]});
    },
    set$_onOpen: function(_onOpen) {
      this._onOpen = H.functionTypeCheck(_onOpen, {func: 1, ret: V.Action, args: [L.Vec]});
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  E._MonsterLog.prototype = {};
  V.Action.prototype = {
    get$isImmediate: function() {
      return true;
    },
    _bind$4: function(actor, pos, game, consumesEnergy) {
      this._actor = actor;
      this._action$_pos = pos == null ? actor._pos : pos;
      this._action$_game = game;
      this._consumesEnergy = consumesEnergy !== false;
    },
    addAction$2: function(action, actor) {
      var t1 = actor == null ? this._actor : actor;
      action._bind$4(t1, this._action$_pos, this._action$_game, false);
      t1 = this._action$_game;
      t1.toString;
      if (action.get$isImmediate())
        C.JSArray_methods.add$1(t1._reactions, action);
      else {
        t1 = t1._actions;
        t1._add$1(H.assertSubtypeOfRuntimeType(action, H.getTypeArgumentByIndex(t1, 0)));
      }
    },
    addAction$1: function(action) {
      return this.addAction$2(action, null);
    },
    addEvent$6$actor$dir$element$other$pos: function(type, actor, dir, element, other, pos) {
      C.JSArray_methods.add$1(this._action$_game._events, new D.Event0(type, actor, element, other, pos, dir));
    },
    addEvent$3$actor$pos: function(type, actor, pos) {
      return this.addEvent$6$actor$dir$element$other$pos(type, actor, null, null, null, pos);
    },
    addEvent$1: function(type) {
      return this.addEvent$6$actor$dir$element$other$pos(type, null, null, null, null, null);
    },
    addEvent$3$element$pos: function(type, element, pos) {
      return this.addEvent$6$actor$dir$element$other$pos(type, null, null, element, null, pos);
    },
    addEvent$4$actor$element$other: function(type, actor, element, other) {
      return this.addEvent$6$actor$dir$element$other$pos(type, actor, null, element, other, null);
    },
    addEvent$2$actor: function(type, actor) {
      return this.addEvent$6$actor$dir$element$other$pos(type, actor, null, null, null, null);
    },
    addEvent$3$dir$pos: function(type, dir, pos) {
      return this.addEvent$6$actor$dir$element$other$pos(type, null, dir, null, null, pos);
    },
    addEvent$4$dir$element$pos: function(type, dir, element, pos) {
      return this.addEvent$6$actor$dir$element$other$pos(type, null, dir, element, null, pos);
    },
    addEvent$3$other$pos: function(type, other, pos) {
      return this.addEvent$6$actor$dir$element$other$pos(type, null, null, null, other, pos);
    },
    addEvent$2$pos: function(type, pos) {
      return this.addEvent$6$actor$dir$element$other$pos(type, null, null, null, null, pos);
    },
    addEvent$3$actor$other: function(type, actor, other) {
      return this.addEvent$6$actor$dir$element$other$pos(type, actor, null, null, other, null);
    },
    get$noise: function() {
      return 0.25;
    },
    error$4: function(_, message, noun1, noun2, noun3) {
      var t1, t2;
      t1 = this._action$_game._stage;
      t2 = this._action$_pos;
      t2 = t1.tiles.$index(0, t2);
      if (!(!t2._isOccluded && t2.illumination - t2._fallOff > 0))
        return;
      this._action$_game.log.add$5(0, C.LogType_error, message, noun1, noun2, noun3);
    },
    log$4: function(message, noun1, noun2, noun3) {
      var t1, t2;
      t1 = this._action$_game._stage;
      t2 = this._action$_pos;
      t2 = t1.tiles.$index(0, t2);
      if (!(!t2._isOccluded && t2.illumination - t2._fallOff > 0))
        return;
      this._action$_game.log.add$5(0, C.LogType_message, message, noun1, noun2, noun3);
    },
    log$2: function(message, noun1) {
      return this.log$4(message, noun1, null, null);
    },
    log$1: function(message) {
      return this.log$4(message, null, null, null);
    },
    log$3: function(message, noun1, noun2) {
      return this.log$4(message, noun1, noun2, null);
    },
    succeed$4: function(message, noun1, noun2, noun3) {
      if (message != null)
        this.log$4(message, noun1, noun2, noun3);
      return C.ActionResult_null_true_true;
    },
    succeed$2: function(message, noun1) {
      return this.succeed$4(message, noun1, null, null);
    },
    succeed$0: function() {
      return this.succeed$4(null, null, null, null);
    },
    succeed$3: function(message, noun1, noun2) {
      return this.succeed$4(message, noun1, noun2, null);
    },
    fail$4: function(message, noun1, noun2, noun3) {
      this.error$4(0, message, noun1, noun2, noun3);
      return C.ActionResult_null_false_true;
    },
    fail$2: function(message, noun1) {
      return this.fail$4(message, noun1, null, null);
    },
    fail$1: function(message) {
      return this.fail$4(message, null, null, null);
    },
    fail$3: function(message, noun1, noun2) {
      return this.fail$4(message, noun1, noun2, null);
    },
    alternate$1: function(action) {
      var t1, t2;
      t1 = this._actor;
      t2 = this._consumesEnergy;
      action.toString;
      action._bind$4(t1, null, t1.game, t2);
      return new V.ActionResult(action, false, true);
    }
  };
  V.ActionResult.prototype = {};
  V.FocusAction.prototype = {
    onPerform$0: function() {
      var t1, t2, t3, t4;
      t1 = H.interceptedTypeCast(this._actor, "$isHero");
      t2 = t1._focus;
      t3 = this._action$_focus;
      if (t2 < t3)
        return this.fail$1("You don't have enough focus to cast the spell.");
      t4 = t1.save.intellect;
      t1._focus = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 - t3, 0, C.JSNumber_methods.ceil$0(Math.pow(t4._modify$1(t4._value), 1.3) * 2)));
      return this.alternate$1(this._action);
    }
  };
  V.GeneratorActionMixin.prototype = {
    onPerform$0: function() {
      if (this.GeneratorActionMixin__iterator == null) {
        var t1 = this.onGenerate$0();
        this.set$_action$_iterator(new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]));
      }
      if (!this.GeneratorActionMixin__iterator.moveNext$0())
        return C.ActionResult_null_true_true;
      return this.GeneratorActionMixin__iterator.get$current();
    },
    wait$1: function($frames) {
      return P.List_List$generate($frames, new V.GeneratorActionMixin_wait_closure(), true, V.ActionResult);
    },
    set$_action$_iterator: function(_iterator) {
      this.GeneratorActionMixin__iterator = H.assertSubtype(_iterator, "$isIterator", [V.ActionResult], "$asIterator");
    }
  };
  V.GeneratorActionMixin_wait_closure.prototype = {
    call$1: function(_) {
      return C.ActionResult_null_true_false;
    },
    $signature: 79
  };
  S.AttackAction.prototype = {
    onPerform$0: function() {
      var t1, t2, t3, _i, t4;
      for (t1 = this.defender, t2 = this._actor.createMeleeHits$1(t1), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        t2[_i].perform$3(this, this._actor, t1);
        t4 = t1._health;
        if (typeof t4 !== "number")
          return t4.$gt();
        if (t4 <= 0)
          break;
      }
      return C.ActionResult_null_true_true;
    },
    get$noise: function() {
      return 1;
    },
    toString$0: function(_) {
      return H.S(this._actor) + " attacks " + this.defender.toString$0(0);
    }
  };
  E.ConditionAction.prototype = {
    getIntensity$0: function() {
      return 1;
    },
    onIntensify$0: function() {
    },
    onPerform$0: function() {
      var intensity, duration, t1, oldDuration;
      intensity = this.getIntensity$0();
      duration = this.getDuration$0();
      if (this.get$condition()._turnsRemaining <= 0) {
        t1 = this.get$condition();
        t1._turnsRemaining = duration;
        t1._intensity = intensity;
        this.onActivate$0(0);
        return C.ActionResult_null_true_true;
      }
      if (this.get$condition()._intensity >= intensity) {
        duration = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$tdiv(duration * intensity, this.get$condition()._intensity), 2);
        if (duration === 0)
          return this.succeed$0();
        this.get$condition()._turnsRemaining += duration;
        this.onExtend$0();
        return C.ActionResult_null_true_true;
      }
      oldDuration = C.JSInt_methods.$tdiv(this.get$condition()._turnsRemaining * this.get$condition()._intensity, intensity);
      t1 = this.get$condition();
      t1._turnsRemaining = oldDuration + C.JSInt_methods._tdivFast$1(duration, 2);
      t1._intensity = intensity;
      this.onIntensify$0();
      return C.ActionResult_null_true_true;
    }
  };
  R.ItemAction.prototype = {
    removeItem$0: function() {
      switch (this.location) {
        case C.ItemLocation_46y:
          this._action$_game._stage.removeItem$2(this.item, this._actor._pos);
          break;
        case C.ItemLocation_wMy:
          C.JSArray_methods.remove$1(H.interceptedTypeCast(this._actor, "$isHero").save._inventory._items, this.item);
          break;
        case C.ItemLocation_A8D:
          var t1 = this.item;
          H.interceptedTypeCast(this._actor, "$isHero").save._equipment.remove$1(0, t1);
          if (t1.type.emanationLevel > 0)
            this._action$_game._stage._lighting._actorLightDirty = true;
          break;
        default:
          throw H.wrapException(P.StateError$("Invalid location."));
      }
    },
    countChanged$0: function() {
      switch (this.location) {
        case C.ItemLocation_46y:
          break;
        case C.ItemLocation_wMy:
          H.interceptedTypeCast(this._actor, "$isHero").save._inventory.countChanged$0();
          break;
        case C.ItemLocation_A8D:
          H.interceptedTypeCast(this._actor, "$isHero").save._equipment;
          break;
        default:
          throw H.wrapException(P.StateError$("Invalid location."));
      }
    }
  };
  R.PickUpAction.prototype = {
    onPerform$0: function() {
      var t1, result, t2, t3;
      t1 = this.item;
      result = H.interceptedTypeCast(this._actor, "$isHero").save._inventory.tryAdd$1(t1);
      t2 = result.added;
      if (t2 === 0)
        return this.fail$3("{1} [don't|doesn't] have room for {2}.", this._actor, t1);
      this.log$3("{1} pick[s] up {2}.", this._actor, t1.clone$1(0, t2));
      t2 = result.remaining;
      t3 = this._actor;
      if (t2 === 0)
        this._action$_game._stage.removeItem$2(t1, t3._pos);
      else
        this.log$3("{1} [don't|doesn't] have room for {2}.", t3, t1.clone$1(0, t2));
      H.interceptedTypeCast(this._actor, "$isHero").pickUp$1(t1);
      return C.ActionResult_null_true_true;
    }
  };
  R.DropAction.prototype = {
    onPerform$0: function() {
      var t1, dropped;
      t1 = this._item$_count;
      dropped = this.item;
      if (t1 == dropped._count)
        this.removeItem$0();
      else {
        dropped = dropped.splitStack$1(t1);
        this.countChanged$0();
      }
      t1 = this._actor;
      if (this.location === C.ItemLocation_A8D) {
        this.log$3("{1} take[s] off and drop[s] {2}.", t1, dropped);
        H.interceptedTypeCast(this._actor, "$isHero").refreshProperties$0();
      } else
        this.log$3("{1} drop[s] {2}.", t1, dropped);
      this._action$_game._stage.addItem$2(dropped, this._actor._pos);
      return C.ActionResult_null_true_true;
    }
  };
  R.EquipAction.prototype = {
    onPerform$0: function() {
      var t1, equipped, equipped0, unequipped, _i, unequippedItem, t2, t3, t4, t5, result, t6;
      t1 = this.location;
      if (t1 === C.ItemLocation_A8D)
        return this.alternate$1(new R.UnequipAction(t1, this.item));
      equipped = this.item;
      if (!H.interceptedTypeCast(this._actor, "$isHero").save._equipment.canEquip$1(equipped))
        return this.fail$3("{1} cannot equip {2}.", this._actor, equipped);
      if (equipped._count === 1) {
        this.removeItem$0();
        equipped0 = equipped;
      } else {
        equipped0 = equipped.splitStack$1(1);
        this.countChanged$0();
      }
      unequipped = H.interceptedTypeCast(this._actor, "$isHero").save._equipment.equip$1(equipped0);
      for (t1 = unequipped.length, _i = 0; _i < unequipped.length; unequipped.length === t1 || (0, H.throwConcurrentModificationError)(unequipped), ++_i) {
        unequippedItem = unequipped[_i];
        t2 = unequippedItem.type;
        t3 = unequippedItem._count;
        t4 = unequippedItem.prefix;
        t5 = unequippedItem.suffix;
        result = H.interceptedTypeCast(this._actor, "$isHero").save._inventory.tryAdd$2$wasUnequipped(unequippedItem, true);
        t6 = this._actor;
        if (result.remaining === 0)
          this.log$3("{1} unequip[s] {2}.", t6, new R.Item(t2, t4, t5, t3));
        else {
          this._action$_game._stage.addItem$2(unequippedItem, t6._pos);
          this.log$3("{1} [don't|doesn't] have room for {2} and {2 he} drops to the ground.", this._actor, unequippedItem);
        }
      }
      this.log$3("{1} equip[s] {2}.", this._actor, equipped0);
      if (equipped.type.emanationLevel > 0)
        this._action$_game._stage._lighting._actorLightDirty = true;
      H.interceptedTypeCast(this._actor, "$isHero").refreshProperties$0();
      return C.ActionResult_null_true_true;
    }
  };
  R.UnequipAction.prototype = {
    onPerform$0: function() {
      var t1, copy, result, t2;
      t1 = this.item;
      copy = t1.clone$0(0);
      this.removeItem$0();
      result = H.interceptedTypeCast(this._actor, "$isHero").save._inventory.tryAdd$2$wasUnequipped(t1, true);
      t2 = this._actor;
      if (result.remaining === 0)
        this.log$3("{1} unequip[s] {2}.", t2, copy);
      else {
        this._action$_game._stage.addItem$2(t1, t2._pos);
        this.log$3("{1} [don't|doesn't] have room for {2} and {2 he} drops to the ground.", this._actor, t1);
      }
      H.interceptedTypeCast(this._actor, "$isHero").refreshProperties$0();
      return C.ActionResult_null_true_true;
    }
  };
  R.UseAction.prototype = {
    onPerform$0: function() {
      var t1, t2, t3;
      t1 = this.item;
      t2 = t1.type.use;
      if (t2 == null)
        return this.fail$2("{1} can't be used.", t1);
      t3 = t1._count;
      if (typeof t3 !== "number")
        return t3.$sub();
      t1._count = t3 - 1;
      t2 = t2.createAction.call$0();
      if (t1._count === 0)
        this.removeItem$0();
      else
        this.countChanged$0();
      if (this.location === C.ItemLocation_46y)
        H.interceptedTypeCast(this._actor, "$isHero").pickUp$1(t1);
      H.interceptedTypeCast(this._actor, "$isHero").save._lore.useItem$1(t1);
      return this.alternate$1(t2);
    }
  };
  R.DestroyActionMixin.prototype = {
    _destroy$4: function(element, items, isHeld, removeItem) {
      var t1, t2, fuel, _i, item, t3, chance, destroyedCount, i, t4, t5;
      H.assertSubtype(items, "$isIterable", [R.Item], "$asIterable");
      H.functionTypeCheck(removeItem, {func: 1, ret: -1, args: [R.Item]});
      for (t1 = items.toList$0(0), t2 = t1.length, fuel = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        item = t1[_i];
        t3 = item.type;
        chance = t3.destroyChance.$index(0, element);
        if (chance == null)
          chance = 0;
        if (isHeld)
          chance = Math.min(30, C.JSInt_methods._tdivFast$1(chance, 2));
        if (chance === 0)
          continue;
        destroyedCount = 0;
        i = 0;
        while (true) {
          t4 = item._count;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          t4 = $.$get$rng();
          if (t4._random.nextInt$1(100) < chance)
            ++destroyedCount;
          ++i;
        }
        if (destroyedCount === t4) {
          this.log$2("{1} " + element.destroyMessage + "!", item);
          removeItem.call$1(item);
        } else if (destroyedCount > 0) {
          item._count = t4 - destroyedCount;
          t4 = item.prefix;
          t5 = item.suffix;
          this.log$2("{1} " + element.destroyMessage + "!", new R.Item(t3, t4, t5, destroyedCount));
        }
        fuel += t3.fuel * destroyedCount;
      }
      return fuel;
    },
    destroyFloorItems$2: function(pos, element) {
      return this._destroy$4(element, this._action$_game._stage.itemsAt$1(pos), false, new R.DestroyActionMixin_destroyFloorItems_closure(this, pos));
    },
    destroyHeldItems$1: function(element) {
      var t1, t2, fuel;
      t1 = {};
      t2 = this._actor;
      if (!(t2 instanceof G.Hero))
        return 0;
      if (t2.resistance$1(element) > 0)
        return 0;
      fuel = this._destroy$4(element, H.interceptedTypeCast(this._actor, "$isHero").save._inventory, true, new R.DestroyActionMixin_destroyHeldItems_closure(this));
      t1.anyEquipmentDestroyed = false;
      t2 = this._destroy$4(element, H.interceptedTypeCast(this._actor, "$isHero").save._equipment, true, new R.DestroyActionMixin_destroyHeldItems_closure0(t1, this));
      if (t1.anyEquipmentDestroyed)
        H.interceptedTypeCast(this._actor, "$isHero").refreshProperties$0();
      return fuel + t2;
    }
  };
  R.DestroyActionMixin_destroyFloorItems_closure.prototype = {
    call$1: function(item) {
      this.$this._action$_game._stage.removeItem$2(item, this.pos);
    },
    $signature: 10
  };
  R.DestroyActionMixin_destroyHeldItems_closure.prototype = {
    call$1: function(item) {
      C.JSArray_methods.remove$1(H.interceptedTypeCast(this.$this._actor, "$isHero").save._inventory._items, item);
    },
    $signature: 10
  };
  R.DestroyActionMixin_destroyHeldItems_closure0.prototype = {
    call$1: function(item) {
      H.interceptedTypeCast(this.$this._actor, "$isHero").save._equipment.remove$1(0, item);
      this._box_0.anyEquipmentDestroyed = true;
    },
    $signature: 10
  };
  F.LosAction.prototype = {
    get$isImmediate: function() {
      return false;
    },
    onPerform$0: function() {
      var pos, t1, t2;
      if (this._los == null) {
        this.set$_los(G._LineIterator$(this._actor._pos, this._los$_target));
        this._los.moveNext$0();
        this._lastPos = this._actor._pos;
      }
      pos = this._los._line$_current;
      t1 = this._action$_game._stage.tiles.$index(0, pos);
      t1.toString;
      t2 = $.$get$Motility_fly();
      if ((t1.type.motility._bitMask & t2._bitMask) === 0 || pos.$sub(0, this._actor._pos).$gt(0, this.get$range())) {
        this.onEnd$1(this._lastPos);
        return this.succeed$0();
      }
      this.onStep$2(this._lastPos, pos);
      t1 = this._action$_game._stage._actorsByTile.$index(0, pos);
      if (t1 != null && t1 !== this._actor)
        if (this.onHitActor$2(pos, t1))
          return C.ActionResult_null_true_true;
      if (J.$eq$(pos, this._los$_target))
        if (this.onTarget$1(pos))
          return C.ActionResult_null_true_true;
      this._lastPos = pos;
      this._los.moveNext$0();
      return C.ActionResult_null_true_false;
    },
    onEnd$1: function(pos) {
    },
    onTarget$1: function(pos) {
      return false;
    },
    set$_los: function(_los) {
      this._los = H.assertSubtype(_los, "$isIterator", [L.Vec], "$asIterator");
    }
  };
  B.TossAction.prototype = {
    onPerform$0: function() {
      var tossed = this.item;
      if (tossed.type.toss == null)
        return this.fail$2("{1} can't be thrown.", tossed);
      if (tossed._count === 1)
        this.removeItem$0();
      else {
        tossed = tossed.splitStack$1(1);
        this.countChanged$0();
      }
      return this.alternate$1(new B.TossLosAction(tossed, this._toss$_hit, this._toss$_target));
    }
  };
  B.TossLosAction.prototype = {
    get$range: function() {
      return this._toss$_hit.get$range();
    },
    onStep$2: function(previous, pos) {
      this.addEvent$3$other$pos(C.EventType_toss, this._toss$_item, pos);
    },
    onHitActor$2: function(pos, target) {
      this._toss$_hit.perform$3(this, this._actor, target);
      this._endThrow$1(pos);
      return true;
    },
    onEnd$1: function(pos) {
      this._endThrow$1(pos);
    },
    onTarget$1: function(pos) {
      if (this._missed)
        return false;
      this._endThrow$1(pos);
      return true;
    },
    _endThrow$1: function(pos) {
      var t1, t2, t3;
      t1 = this._toss$_item;
      t2 = t1.type.toss;
      t3 = t2.use;
      if (t3 != null) {
        this.addAction$1(t3.call$1(pos));
        return;
      }
      t3 = $.$get$rng();
      t2 = t2.breakage;
      if (t3.range$1(100) < t2) {
        this.log$2("{1} breaks!", t1);
        return;
      }
      this._action$_game._stage.addItem$2(t1, pos);
    }
  };
  B.WalkAction.prototype = {
    onPerform$0: function() {
      var t1, pos, tile, t2, _i, item, t3, min, max, value, t4;
      t1 = this.dir;
      if (t1 === C.Direction_0_0)
        return this.alternate$1(new B.RestAction());
      pos = this._actor._pos.$add(0, t1);
      t1 = this._action$_game._stage._actorsByTile.$index(0, pos);
      if (t1 != null && t1 !== this._actor)
        return this.alternate$1(new S.AttackAction(t1));
      tile = this._action$_game._stage.tiles.$index(0, pos).type;
      t1 = tile.onOpen;
      if (t1 != null)
        return this.alternate$1(t1.call$1(pos));
      if (!this._actor.canOccupy$1(pos)) {
        if (this._actor instanceof G.Hero)
          this._action$_game._stage.exploreAt$3$force(pos.x, pos.y, true);
        return this.fail$2("{1} hit[s] the " + tile.name + ".", this._actor);
      }
      this._actor.set$pos(pos);
      if (this._actor instanceof G.Hero) {
        for (t1 = this._action$_game._stage.itemsAt$1(pos), t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableMixin", 0)), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          item = t1[_i];
          t3 = H.interceptedTypeCast(this._actor, "$isHero");
          if (!(t3._behavior instanceof X.ActionBehavior))
            t3._behavior = null;
          if (item.type.isTreasure) {
            min = C.JSNumber_methods.ceil$0(item.get$price() * 0.5);
            max = C.JSNumber_methods.ceil$0(item.get$price() * 1.5);
            t3 = $.$get$rng();
            value = t3._random.nextInt$1(max - min) + min;
            t3 = H.interceptedTypeCast(this._actor, "$isHero").save;
            t4 = t3.gold;
            if (typeof t4 !== "number")
              return t4.$add();
            t3.gold = t4 + value;
            this.log$3("{1} pick[s] up {2} worth " + value + " gold.", H.interceptedTypeCast(this._actor, "$isHero"), item);
            this._action$_game._stage.removeItem$2(item, pos);
            t4 = this._actor;
            t3 = t4._pos;
            C.JSArray_methods.add$1(this._action$_game._events, new D.Event0(C.EventType_gold, t4, null, item, t3, null));
          } else
            this.log$3("{1} [are|is] standing on {2}.", t3, item);
        }
        t1 = H.interceptedTypeCast(this._actor, "$isHero");
        t2 = t1._focus;
        t3 = t1.save.intellect;
        t1._focus = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + 2, 0, C.JSNumber_methods.ceil$0(Math.pow(t3._modify$1(t3._value), 1.3) * 2)));
      }
      return this.succeed$0();
    },
    toString$0: function(_) {
      return H.S(this._actor) + " walks " + H.S(this.dir);
    }
  };
  B.OpenDoorAction.prototype = {
    onPerform$0: function() {
      this._action$_game._stage.tiles.$index(0, this.pos).type = this.openDoor;
      this._action$_game._stage.tileOpacityChanged$0();
      return this.succeed$2("{1} open[s] the door.", this._actor);
    },
    get$pos: function() {
      return this.pos;
    }
  };
  B.CloseDoorAction.prototype = {
    onPerform$0: function() {
      var t1, t2;
      t1 = this.doorPos;
      t2 = this._action$_game._stage._actorsByTile.$index(0, t1);
      if (t2 != null)
        return this.fail$2("{1} [are|is] in the way!", t2);
      this._action$_game._stage.tiles.$index(0, t1).type = this.closedDoor;
      this._action$_game._stage.tileOpacityChanged$0();
      return this.succeed$2("{1} close[s] the door.", this._actor);
    }
  };
  B.RestAction.prototype = {
    onPerform$0: function() {
      var t1, t2, t3;
      t1 = this._actor;
      if (t1 instanceof G.Hero) {
        if (t1._stomach > 0 && t1.poison._turnsRemaining <= 0) {
          t2 = t1._health;
          if (typeof t2 !== "number")
            return t2.$add();
          t1._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + 1, 0, t1.get$maxHealth()));
        }
        t1 = H.interceptedTypeCast(this._actor, "$isHero");
        t2 = t1._focus;
        t3 = t1.save.intellect;
        t1._focus = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + 10, 0, C.JSNumber_methods.ceil$0(Math.pow(t3._modify$1(t3._value), 1.3) * 2)));
      } else {
        t2 = t1.game._stage;
        t1 = t1._pos;
        t1 = t2.tiles.$index(0, t1);
        if (!(!t1._isOccluded && t1.illumination - t1._fallOff > 0)) {
          t1 = this._actor;
          t2 = t1._health;
          if (typeof t2 !== "number")
            return t2.$add();
          t1._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + 1, 0, t1.get$maxHealth()));
        }
      }
      return this.succeed$0();
    },
    get$noise: function() {
      return 0.05;
    }
  };
  S.Actor.prototype = {
    get$conditions: function() {
      var t1, t2;
      t1 = H.setRuntimeTypeInfo([this.haste, this.cold, this.poison, this.blindness, this.dazzle], [E.Condition]);
      t2 = this.resistances;
      C.JSArray_methods.addAll$1(t1, t2.get$values(t2));
      return t1;
    },
    get$pos: function() {
      return this._pos;
    },
    set$pos: function(value) {
      if (!J.$eq$(value, this._pos)) {
        this.changePosition$2(this._pos, value);
        this._pos = value;
      }
    },
    Actor$3: function(game, x, y) {
      var t1, t2, _i, element;
      for (this.game.content, t1 = $.$get$Elements_all(), t2 = this.resistances, _i = 0; _i < 12; ++_i) {
        element = t1[_i];
        t2.$indexSet(0, element, new E.ResistCondition(element));
      }
      C.JSArray_methods.forEach$1(this.get$conditions(), new S.Actor_closure(this));
    },
    get$pronoun: function() {
      return C.Pronoun_it_it_its;
    },
    get$needsInput: function() {
      return false;
    },
    get$defenses: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, dodge;
        return function $async$get$defenses($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                dodge = $async$self.get$baseDodge();
                if ($async$self.blindness._turnsRemaining > 0 || $async$self.dazzle._turnsRemaining > 0)
                  dodge = C.JSInt_methods._tdivFast$1(dodge, 2);
                $async$goto = dodge !== 0 ? 2 : 3;
                break;
              case 2:
                // then
                $async$goto = 4;
                return new U.Defense(dodge, "{1} dodge[s] {2}.");
              case 4:
              // after yield
              case 3:
                // join
                $async$goto = 5;
                return P._IterationMarker_yieldStar($async$self.onGetDefenses$0());
              case 5:
                // after yield
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, U.Defense);
    },
    changePosition$2: function(from, to) {
      var t1, t2, actor;
      t1 = this.game;
      t2 = t1._stage._actorsByTile;
      actor = t2.$index(0, from);
      t2.$indexSet(0, from, null);
      t2.$indexSet(0, to, actor);
      if (this.get$emanationLevel() > 0)
        t1._stage._lighting._actorLightDirty = true;
    },
    createMeleeHits$1: function(defender) {
      var hits, t1, _i;
      hits = this.onCreateMeleeHits$1(defender);
      for (t1 = hits.length, _i = 0; _i < hits.length; hits.length === t1 || (0, H.throwConcurrentModificationError)(hits), ++_i)
        this.modifyHit$2(hits[_i], C.HitType_0);
      return hits;
    },
    modifyHit$2: function(hit, type) {
      if (this.blindness._turnsRemaining > 0 || this.dazzle._turnsRemaining > 0)
        switch (type) {
          case C.HitType_0:
            hit._strikeScale *= 0.5;
            break;
          case C.HitType_1:
            hit._strikeScale *= 0.3;
            break;
          case C.HitType_2:
            hit._strikeScale *= 0.2;
            break;
        }
      this.onModifyHit$2(hit, type);
    },
    onModifyHit$2: function(hit, type) {
    },
    resistance$1: function(element) {
      var result, resistance;
      result = this.onGetResistance$1(element);
      resistance = this.resistances.$index(0, element);
      return resistance._turnsRemaining > 0 ? result + resistance._intensity : result;
    },
    takeDamage$4: function(action, damage, attackNoun, attacker) {
      var t1 = this._health;
      if (typeof t1 !== "number")
        return t1.$sub();
      this._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t1 - damage, 0, this.get$maxHealth()));
      this.onTakeDamage$3(action, attacker, damage);
      t1 = this._health;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        return false;
      action.addEvent$2$actor(C.EventType_die, this);
      action.log$3("{1} kill[s] {2}.", attackNoun, this);
      if (attacker != null)
        attacker.onKilled$2(action, this);
      this.onDied$1(attackNoun);
      return true;
    },
    takeDamage$3: function(action, damage, attackNoun) {
      return this.takeDamage$4(action, damage, attackNoun, null);
    },
    onGiveDamage$3: function(action, defender, damage) {
    },
    onKilled$2: function(action, defender) {
    },
    onFinishTurn$1: function(action) {
    },
    canOccupy$1: function(pos) {
      var t1, t2, t3;
      t1 = pos.x;
      if (t1 < 0)
        return false;
      t2 = this.game._stage.tiles;
      t3 = t2.bounds.size;
      if (t1 >= t3.x)
        return false;
      t1 = pos.y;
      if (t1 < 0)
        return false;
      if (t1 >= t3.y)
        return false;
      t1 = t2.$index(0, pos);
      t2 = this.get$motility();
      return (t1.type.motility._bitMask & t2._bitMask) !== 0;
    },
    canEnter$1: function(pos) {
      return this.canOccupy$1(pos) && this.game._stage._actorsByTile.$index(0, pos) == null;
    },
    willEnter$1: function(pos) {
      return this.canEnter$1(pos) && this.game._stage.tiles.$index(0, pos).substance === 0;
    },
    finishTurn$1: function(action) {
      var t1;
      this.energy.energy -= 240;
      C.JSArray_methods.forEach$1(this.get$conditions(), new S.Actor_finishTurn_closure(action));
      t1 = this._health;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        this.onFinishTurn$1(action);
    },
    log$4: function(message, noun1, noun2, noun3) {
      var t1, t2, t3;
      t1 = this.game;
      t2 = t1._stage;
      t3 = this._pos;
      t3 = t2.tiles.$index(0, t3);
      if (!(!t3._isOccluded && t3.illumination - t3._fallOff > 0))
        return;
      t1.log.add$5(0, C.LogType_message, message, noun1, noun2, noun3);
    },
    log$2: function(message, noun1) {
      return this.log$4(message, noun1, null, null);
    },
    log$1: function(message) {
      return this.log$4(message, null, null, null);
    },
    log$3: function(message, noun1, noun2) {
      return this.log$4(message, noun1, noun2, null);
    },
    toString$0: function(_) {
      return this.get$nounText();
    },
    $isNoun: 1
  };
  S.Actor_closure.prototype = {
    call$1: function(condition) {
      H.interceptedTypeCheck(condition, "$isCondition")._condition$_actor = this.$this;
      return;
    },
    $signature: 25
  };
  S.Actor_finishTurn_closure.prototype = {
    call$1: function(condition) {
      var t1;
      H.interceptedTypeCheck(condition, "$isCondition");
      t1 = condition._turnsRemaining;
      if (t1 > 0) {
        --t1;
        condition._turnsRemaining = t1;
        if (t1 > 0)
          condition.onUpdate$1(this.action);
        else {
          condition.onDeactivate$0();
          condition._intensity = 0;
        }
      }
      return;
    },
    $signature: 25
  };
  U.Attack.prototype = {
    toString$0: function(_) {
      var result, t1;
      result = C.JSInt_methods.toString$0(this.damage);
      t1 = this.element;
      if (t1 != $.$get$Element_none())
        result = H.S(t1) + " " + result;
      t1 = this.range;
      return t1 > 0 ? result + ("@" + t1) : result;
    }
  };
  U.HitType.prototype = {
    toString$0: function(_) {
      return this._combat$_name;
    }
  };
  U.Hit.prototype = {
    get$range: function() {
      var t1 = this._attack.range;
      if (t1 === 0)
        return 0;
      return Math.max(1, C.JSNumber_methods.round$0(t1 * this._rangeScale));
    },
    get$element: function() {
      var t1 = this._brand;
      if (t1 != $.$get$Element_none())
        return t1;
      return this._attack.element;
    },
    get$averageDamage: function() {
      return this._attack.damage * this._damageScale + this._damageBonus;
    },
    perform$4$canMiss: function(action, attacker, defender, canMiss) {
      var t1, attackNoun, t2, strike, t3, defenses, _i, defense, armor, resistance, damageCents, damage, sideEffect;
      H.interceptedTypeCheck(action, "$isAction");
      t1 = this._attack;
      attackNoun = t1.noun;
      if (attackNoun == null)
        attackNoun = attacker;
      if (!!defender.$isHero)
        if (!(defender._behavior instanceof X.ActionBehavior))
          defender._behavior = null;
      if (canMiss !== false) {
        t2 = $.$get$rng();
        strike = t2.inclusive$2(1, 100) * this._strikeScale + this._strikeBonus;
        t3 = defender.get$defenses();
        defenses = P.List_List$from(t3, true, H.getTypeArgumentByIndex(t3, 0));
        C.JSArray_methods.shuffle$1(H.assertSubtype(defenses, "$isList", [U.Defense], "$asList"), t2._random);
        for (t2 = defenses.length, _i = 0; _i < t2; ++_i) {
          defense = defenses[_i];
          strike -= defense.amount;
          if (strike < 0) {
            action.log$3(defense.message, defender, attackNoun);
            return 0;
          }
        }
      }
      armor = defender.get$armor();
      resistance = defender.resistance$1(this.get$element());
      damageCents = C.JSNumber_methods.toInt$0((t1.damage * this._damageScale + this._damageBonus) * (1 / (1 + resistance)) * 100);
      damage = C.JSDouble_methods.round$0($.$get$rng().triangleInt$2(damageCents, C.JSInt_methods._tdivFast$1(damageCents, 2)) * U.getArmorMultiplier(armor) / 100);
      if (damage === 0) {
        action.log$3("{1} do[es] no damage to {2}.", attackNoun, defender);
        return 0;
      }
      if (attacker != null)
        attacker.onGiveDamage$3(action, defender, damage);
      if (defender.takeDamage$4(action, damage, attackNoun, attacker))
        return damage;
      if (resistance <= 0) {
        sideEffect = this.get$element().attackAction.call$1(damage);
        if (sideEffect != null)
          action.addAction$2(sideEffect, defender);
      }
      action.addEvent$4$actor$element$other(C.EventType_hit, defender, this.get$element(), damage);
      action.log$3("{1} " + H.S(t1.verb) + " {2} for " + damage + " damage.", attackNoun, defender);
      return damage;
    },
    perform$3: function(action, attacker, defender) {
      return this.perform$4$canMiss(action, attacker, defender, null);
    }
  };
  U.Defense.prototype = {};
  E.Condition.prototype = {
    onUpdate$1: function(action) {
    }
  };
  E.HasteCondition.prototype = {
    onDeactivate$0: function() {
      var t1 = this._condition$_actor;
      t1.log$2("{1} slow[s] back down.", t1);
    }
  };
  E.ColdCondition.prototype = {
    onDeactivate$0: function() {
      var t1 = this._condition$_actor;
      t1.log$2("{1} warm[s] back up.", t1);
    }
  };
  E.PoisonCondition.prototype = {
    onUpdate$1: function(action) {
      var t1;
      if (!this._condition$_actor.takeDamage$3(action, this._intensity, new O.Noun("the poison"))) {
        t1 = this._condition$_actor;
        t1.log$2("{1} [are|is] hurt by poison!", t1);
      }
    },
    onDeactivate$0: function() {
      var t1 = this._condition$_actor;
      t1.log$2("{1} [are|is] no longer poisoned.", t1);
    }
  };
  E.BlindnessCondition.prototype = {
    onDeactivate$0: function() {
      var t1, t2;
      t1 = this._condition$_actor;
      t1.log$2("{1} can see clearly again.", t1);
      t1 = this._condition$_actor;
      t2 = t1.game;
      if (t1 == t2.hero)
        t2._stage._lighting._visibilityDirty = true;
    }
  };
  E.ResistCondition.prototype = {
    onDeactivate$0: function() {
      this._condition$_actor.log$2("{1} feel[s] susceptible to " + H.S(this._condition$_element) + ".", this._condition$_actor);
    }
  };
  G.Element.prototype = {
    toString$0: function(_) {
      return this.name;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  G.Element_closure.prototype = {
    call$1: function(_) {
      H.intTypeCheck(_);
      return;
    },
    $signature: 17
  };
  G.Element_closure0.prototype = {
    call$4: function(_, __, ___, ____) {
      H.interceptedTypeCheck(_, "$isVec");
      H.interceptedTypeCheck(__, "$isHit");
      H.numTypeCheck(___);
      H.intTypeCheck(____);
      return;
    },
    "call*": "call$4",
    $requiredArgCount: 4,
    $signature: 83
  };
  Y.Energy.prototype = {};
  D.Game.prototype = {
    generate$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2;
        return function $async$generate$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = {};
                t1.heroPos = null;
                t2 = $async$self._save;
                $async$goto = 2;
                return P._IterationMarker_yieldStar($async$self.content.buildStage$4(t2._lore, $async$self._stage, $async$self.depth, new D.Game_generate_closure(t1)));
              case 2:
                // after yield
                t2 = G.Hero$($async$self, t1.heroPos, t2);
                $async$self.hero = t2;
                $async$self._stage.addActor$1(t2);
                $async$goto = 3;
                return "Calculating visibility";
              case 3:
                // after yield
                $async$self._stage._lighting.refresh$0();
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, P.String);
    },
    update$0: function(_) {
      var t1, t2, t3, t4, t5, madeProgress, t6, t7, action, result, action0, result0, actor, speed;
      for (t1 = this._actions, t2 = this._substanceEnergy, t3 = this._events, t4 = this._reactions, t5 = H.getTypeArgumentByIndex(t1, 0), madeProgress = false; true;) {
        for (; !t1.get$isEmpty(t1); madeProgress = true) {
          t6 = t1._head;
          if (t6 === t1._tail)
            H.throwExpression(H.IterableElementError_noElement());
          t7 = t1._table;
          if (t6 >= t7.length)
            return H.ioore(t7, t6);
          action = t7[t6];
          result = action.onPerform$0();
          for (; action0 = result.alternative, action0 != null; action = action0) {
            t1.removeFirst$0();
            H.assertSubtypeOfRuntimeType(action0, t5);
            t6 = t1._head;
            t7 = t1._table;
            t6 = (t6 - 1 & t7.length - 1) >>> 0;
            t1._head = t6;
            C.JSArray_methods.$indexSet(t7, t6, action0);
            if (t1._head === t1._tail)
              t1._grow$0();
            ++t1._modificationCount;
            result = action0.onPerform$0();
          }
          for (; t6 = t4.length, t6 !== 0;) {
            if (0 >= t6)
              return H.ioore(t4, -1);
            result0 = t4.pop().onPerform$0();
            for (; t6 = result0.alternative, t6 != null;)
              result0 = t6.onPerform$0();
          }
          this._stage._lighting.refresh$0();
          if (result.done) {
            t1.removeFirst$0();
            if (result.succeeded && action._consumesEnergy) {
              action._actor.finishTurn$1(action);
              t6 = this._stage;
              t6._currentActorIndex = C.JSInt_methods.$mod(t6._currentActorIndex + 1, t6._actors.length);
            }
            if (action._actor == this.hero) {
              t1 = H.setRuntimeTypeInfo([], [D.Event0]);
              C.JSArray_methods.addAll$1(t1, t3);
              C.JSArray_methods.set$length(t3, 0);
              return new D.GameResult(t1, true);
            }
          }
          if (t3.length !== 0) {
            t1 = H.setRuntimeTypeInfo([], [D.Event0]);
            C.JSArray_methods.addAll$1(t1, t3);
            C.JSArray_methods.set$length(t3, 0);
            return new D.GameResult(t1, true);
          }
        }
        if (this._substanceIndex != null)
          this._updateSubstances$0();
        for (; t1._head === t1._tail;) {
          t6 = this._stage;
          t7 = t6._actors;
          t6 = t6._currentActorIndex;
          if (t6 < 0 || t6 >= t7.length)
            return H.ioore(t7, t6);
          actor = t7[t6];
          t6 = actor.energy;
          if (t6.energy >= 240 && actor.get$needsInput()) {
            t1 = H.setRuntimeTypeInfo([], [D.Event0]);
            C.JSArray_methods.addAll$1(t1, t3);
            C.JSArray_methods.set$length(t3, 0);
            return new D.GameResult(t1, madeProgress);
          }
          if (t6.energy < 240) {
            speed = actor.get$baseSpeed() + actor.haste._intensity - actor.cold._intensity;
            t7 = t6.energy;
            if (speed < 0 || speed >= 13)
              return H.ioore(C.List_mC8, speed);
            t7 += C.List_mC8[speed];
            t6.energy = t7;
            t7 = t7 >= 240;
            t6 = t7;
          } else
            t6 = true;
          if (t6) {
            if (actor.get$needsInput()) {
              t1 = H.setRuntimeTypeInfo([], [D.Event0]);
              C.JSArray_methods.addAll$1(t1, t3);
              C.JSArray_methods.set$length(t3, 0);
              return new D.GameResult(t1, madeProgress);
            }
            action = actor.onGetAction$0();
            if (action != null)
              action._bind$4(actor, null, actor.game, null);
            t1._add$1(H.assertSubtypeOfRuntimeType(action, t5));
          } else {
            t6 = this._stage;
            t6._currentActorIndex = C.JSInt_methods.$mod(t6._currentActorIndex + 1, t6._actors.length);
          }
          if (actor == this.hero) {
            t6 = t2.energy += 60;
            if (t6 >= 240) {
              t2.energy = t6 - 240;
              this._substanceIndex = 0;
              this._updateSubstances$0();
            }
          }
        }
      }
    },
    _updateSubstances$0: function() {
      var t1, t2, t3, t4, pos, action;
      t1 = this._substanceUpdateOrder;
      t2 = this.content;
      while (true) {
        t3 = this._substanceIndex;
        t4 = t1.length;
        if (typeof t3 !== "number")
          return t3.$lt();
        if (!(t3 < t4))
          break;
        if (t3 < 0 || t3 >= t1.length)
          return H.ioore(t1, t3);
        pos = t1[t3];
        action = t2.updateSubstance$2(this._stage, pos);
        t3 = this._substanceIndex;
        if (typeof t3 !== "number")
          return t3.$add();
        this._substanceIndex = t3 + 1;
        if (action != null) {
          action._bind$4(null, pos, this, false);
          t1 = this._actions;
          t1._add$1(H.assertSubtypeOfRuntimeType(action, H.getTypeArgumentByIndex(t1, 0)));
          return;
        }
      }
      this._substanceIndex = null;
    },
    get$depth: function() {
      return this.depth;
    }
  };
  D.Game_generate_closure.prototype = {
    call$1: function(pos) {
      this._box_0.heroPos = pos;
    },
    $signature: 11
  };
  D.GameResult.prototype = {};
  D.Event0.prototype = {
    get$pos: function() {
      return this.pos;
    }
  };
  D.EventType.prototype = {
    toString$0: function(_) {
      return this._game$_name;
    }
  };
  O.Log.prototype = {
    add$5: function(_, type, message, noun1, noun2, noun3) {
      var t1, last;
      message = this._format$4(message, noun1, noun2, noun3);
      t1 = this.messages;
      if (t1.length > 0) {
        last = C.JSArray_methods.get$last(t1);
        if (last.text === message) {
          ++last.count;
          return;
        }
      }
      C.JSArray_methods.add$1(t1, new O.Message(type, message));
      if (t1.length > 20)
        C.JSArray_methods.removeAt$1(t1, 0);
    },
    _format$4: function(text, noun1, noun2, noun3) {
      var nouns, result, i, noun, t1, t2;
      nouns = [noun1, noun2, noun3];
      for (result = text, i = 1; i <= 3; ++i) {
        noun = nouns[i - 1];
        if (noun != null) {
          t1 = "{" + i + "}";
          t2 = noun.get$nounText();
          result = H.stringReplaceAllUnchecked(result, t1, t2);
          t1 = "{" + i + " he}";
          t2 = noun.get$pronoun();
          result = H.stringReplaceAllUnchecked(result, t1, t2.subjective);
          t1 = "{" + i + " him}";
          t2 = noun.get$pronoun();
          result = H.stringReplaceAllUnchecked(result, t1, t2.objective);
          t1 = "{" + i + " his}";
          t2 = noun.get$pronoun();
          result = H.stringReplaceAllUnchecked(result, t1, t2.possessive);
        }
      }
      if (noun1 != null)
        result = O.Log_conjugate(result, noun1.get$pronoun());
      if (0 >= result.length)
        return H.ioore(result, 0);
      return result[0].toUpperCase() + C.JSString_methods.substring$1(result, 1);
    }
  };
  O.Noun.prototype = {
    get$pronoun: function() {
      return C.Pronoun_it_it_its;
    },
    toString$0: function(_) {
      return this.nounText;
    },
    get$nounText: function() {
      return this.nounText;
    }
  };
  O.Pronoun.prototype = {};
  O.LogType.prototype = {
    toString$0: function(_) {
      return this._log$_name;
    }
  };
  O.Message.prototype = {};
  K.hashPoint_hashInt.prototype = {
    call$1: function(n) {
      n = ((C.JSInt_methods._shrOtherPositive$1(n, 16) ^ n) >>> 0) * 73244475 & 4294967295;
      n = ((n >>> 16 ^ n) >>> 0) * 73244475 & 4294967295;
      return (n >>> 16 ^ n) >>> 0;
    },
    $signature: 85
  };
  Y.ResourceSet.prototype = {
    get$all: function() {
      var t1, t2, t3;
      t1 = this._resources;
      t1 = t1.get$values(t1);
      t2 = H.getTypeArgumentByIndex(this, 0);
      t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
      return H.MappedIterable_MappedIterable(t1, H.functionTypeCheck(new Y.ResourceSet_all_closure(this), {func: 1, ret: t2, args: [t3]}), t3, t2);
    },
    add$5$depth$frequency$name$tags: function(_, object, depth, frequency, $name, tags) {
      this._resource$_add$7(H.assertSubtypeOfRuntimeType(object, H.getTypeArgumentByIndex(this, 0)), $name, depth, depth, frequency, frequency, tags);
    },
    add$1: function($receiver, object) {
      return this.add$5$depth$frequency$name$tags($receiver, object, null, null, null, null);
    },
    _resource$_add$7: function(object, $name, startDepth, endDepth, startFrequency, endFrequency, tags) {
      var t1, t2, t3, t4, _i, tagName, tag;
      t1 = H.getTypeArgumentByIndex(this, 0);
      H.assertSubtypeOfRuntimeType(object, t1);
      if ($name == null) {
        t2 = this._resources;
        $name = C.JSInt_methods.toString$0(t2.get$length(t2));
      }
      if (startDepth == null)
        startDepth = 1;
      if (endDepth == null)
        endDepth = startDepth;
      if (startFrequency == null)
        startFrequency = 1;
      if (endFrequency == null)
        endFrequency = startFrequency;
      t2 = this._resources;
      if (t2.containsKey$1(0, $name))
        throw H.wrapException(P.ArgumentError$('Already have a resource named "' + $name + '".'));
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, [Y._Tag, t1]);
      t2.$indexSet(0, $name, new Y._Resource(object, startDepth, endDepth, startFrequency, endFrequency, t1, this.$ti));
      if (tags != null && tags !== "")
        for (t2 = tags.split(" "), t3 = t2.length, t4 = this._tags, _i = 0; _i < t3; ++_i) {
          tagName = t2[_i];
          tag = t4.$index(0, tagName);
          if (tag == null)
            throw H.wrapException(P.ArgumentError$('Unknown tag "' + H.S(tagName) + '".'));
          t1.add$1(0, tag);
        }
    },
    defineTags$1: function(paths) {
      var t1, t2, t3, t4, _i, t5, t6, $parent, _i0, $name, tag;
      for (t1 = paths.split(" "), t2 = t1.length, t3 = this._tags, t4 = this.$ti, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        for (t5 = J.split$1$s(t1[_i], "/"), t6 = t5.length, $parent = null, _i0 = 0; _i0 < t5.length; t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i0, $parent = tag) {
          $name = t5[_i0];
          tag = t3.$index(0, $name);
          if (tag == null) {
            tag = new Y._Tag($name, $parent, t4);
            t3.$indexSet(0, $name, tag);
          }
        }
    },
    find$1: function(_, $name) {
      var resource = this._resources.$index(0, $name);
      if (resource == null)
        throw H.wrapException(P.ArgumentError$('Unknown resource "' + H.S($name) + '".'));
      return resource.object;
    },
    tryFind$1: function($name) {
      var resource = this._resources.$index(0, $name);
      if (resource == null)
        return;
      return resource.object;
    },
    hasTag$2: function($name, tagName) {
      var resource, tag;
      resource = this._resources.$index(0, $name);
      if (resource == null)
        throw H.wrapException(P.ArgumentError$('Unknown resource "' + H.S($name) + '".'));
      tag = this._tags.$index(0, tagName);
      if (tag == null)
        throw H.wrapException(P.ArgumentError$('Unknown tag "' + tagName + '".'));
      return resource._tags.any$1(0, new Y.ResourceSet_hasTag_closure(this, tag));
    },
    getTags$1: function($name) {
      var resource, t1, t2, t3;
      resource = this._resources.$index(0, $name);
      if (resource == null)
        throw H.wrapException(P.ArgumentError$('Unknown resource "' + H.S($name) + '".'));
      t1 = resource._tags;
      t2 = P.String;
      t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(new Y.ResourceSet_getTags_closure(this), {func: 1, ret: t2, args: [t3]}), [t3, t2]);
    },
    tryChoose$3$includeParents$tag: function(depth, includeParents, tag) {
      var t1, t2, goalTag, label;
      t1 = {};
      t1.includeParents = includeParents;
      if (includeParents == null) {
        t1.includeParents = true;
        t2 = true;
      } else
        t2 = includeParents;
      if (tag == null)
        return this._runQuery$3("", depth, new Y.ResourceSet_tryChoose_closure(this));
      goalTag = this._tags.$index(0, tag);
      label = goalTag.name;
      if (!t2)
        label = J.$add$ansx(label, " (only)");
      return this._runQuery$3(label, depth, new Y.ResourceSet_tryChoose_closure0(t1, this, goalTag));
    },
    tryChoose$1: function(depth) {
      return this.tryChoose$3$includeParents$tag(depth, null, null);
    },
    tryChoose$2$tag: function(depth, tag) {
      return this.tryChoose$3$includeParents$tag(depth, null, tag);
    },
    tryChooseMatching$2: function(depth, tags) {
      var t1, t2, tagObjects, tagNames;
      H.assertSubtype(tags, "$isIterable", [P.String], "$asIterable");
      t1 = [Y._Tag, H.getTypeArgumentByIndex(this, 0)];
      t2 = H.getRuntimeTypeArgument(tags, "Iterable", 0);
      tagObjects = H.MappedIterable_MappedIterable(tags, H.functionTypeCheck(new Y.ResourceSet_tryChooseMatching_closure(this), {func: 1, ret: t1, args: [t2]}), t2, t1);
      tagNames = P.List_List$from(tags, true, t2);
      C.JSArray_methods.sort$0(tagNames);
      return this._runQuery$3(C.JSArray_methods.join$1(tagNames, "|") + " (match)", depth, new Y.ResourceSet_tryChooseMatching_closure0(this, tagObjects));
    },
    _runQuery$3: function($name, depth, scale) {
      var t1, key, t2, query, resources, chances, totalChance, t3, chance, t4, t5;
      t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(scale, {func: 1, ret: P.double, args: [[Y._Resource, t1]]});
      key = new Y._QueryKey($name, depth);
      t2 = this._queries;
      query = t2.$index(0, key);
      if (query == null) {
        resources = H.setRuntimeTypeInfo([], [[Y._Resource, t1]]);
        chances = H.setRuntimeTypeInfo([], [P.double]);
        for (t1 = this._resources, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), totalChance = 0; t1.moveNext$0();) {
          t3 = t1.get$current();
          chance = scale.call$1(t3);
          if (chance === 0)
            continue;
          t4 = t3.frequencyAtDepth$1(depth);
          t5 = t3.chanceAtDepth$1(depth);
          if (typeof chance !== "number")
            return chance.$mul();
          totalChance += Math.max(1e-7, chance * (t4 * t5));
          C.JSArray_methods.add$1(resources, t3);
          C.JSArray_methods.add$1(chances, totalChance);
        }
        query = new Y._ResourceQuery(depth, resources, chances, totalChance, this.$ti);
        t2.$indexSet(0, key, query);
      }
      return query.choose$0();
    }
  };
  Y.ResourceSet_all_closure.prototype = {
    call$1: function(resource) {
      return H.assertSubtype(resource, "$is_Resource", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Resource").object;
    },
    $signature: function() {
      var t1 = H.getTypeArgumentByIndex(this.$this, 0);
      return {func: 1, ret: t1, args: [[Y._Resource, t1]]};
    }
  };
  Y.ResourceSet_hasTag_closure.prototype = {
    call$1: function(thisTag) {
      return H.assertSubtype(thisTag, "$is_Tag", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Tag").contains$1(0, this.tag);
    },
    $signature: function() {
      return {func: 1, ret: P.bool, args: [[Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y.ResourceSet_getTags_closure.prototype = {
    call$1: function(tag) {
      return H.assertSubtype(tag, "$is_Tag", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Tag").name;
    },
    $signature: function() {
      return {func: 1, ret: P.String, args: [[Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y.ResourceSet_tryChoose_closure.prototype = {
    call$1: function(_) {
      H.assertSubtype(_, "$is_Resource", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Resource");
      return 1;
    },
    $signature: function() {
      return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y.ResourceSet_tryChoose_closure0.prototype = {
    call$1: function(resource) {
      var thisTag, t1, scale, t2, t3;
      H.assertSubtype(resource, "$is_Resource", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Resource");
      for (thisTag = this.goalTag, t1 = this._box_0, scale = 1; thisTag != null; thisTag = thisTag.parent) {
        for (t2 = resource._tags, t3 = new P._LinkedHashSetIterator(t2, t2._collection$_modifications, [H.getTypeArgumentByIndex(t2, 0)]), t3._collection$_cell = t2._collection$_first; t3.moveNext$0();)
          if (t3._collection$_current.contains$1(0, thisTag))
            return scale;
        if (!t1.includeParents)
          break;
        scale /= 10;
      }
      return 0;
    },
    $signature: function() {
      return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y.ResourceSet_tryChooseMatching_closure.prototype = {
    call$1: function($name) {
      var tag;
      H.stringTypeCheck($name);
      tag = this.$this._tags.$index(0, $name);
      if (tag == null)
        throw H.wrapException(P.ArgumentError$('Unknown tag "' + H.S($name) + '".'));
      return tag;
    },
    $signature: function() {
      return {func: 1, ret: [Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)], args: [P.String]};
    }
  };
  Y.ResourceSet_tryChooseMatching_closure0.prototype = {
    call$1: function(resource) {
      var t1, t2, t3;
      t1 = this.$this;
      for (t2 = H.assertSubtype(resource, "$is_Resource", [H.getTypeArgumentByIndex(t1, 0)], "$as_Resource")._tags, t2 = P._LinkedHashSetIterator$(t2, t2._collection$_modifications, H.getTypeArgumentByIndex(t2, 0)), t3 = this.tagObjects; t2.moveNext$0();)
        if (t3.any$1(0, new Y.ResourceSet_tryChooseMatching__closure(t1, t2._collection$_current)))
          return 1;
      return 0;
    },
    $signature: function() {
      return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y.ResourceSet_tryChooseMatching__closure.prototype = {
    call$1: function(tag) {
      return H.assertSubtype(tag, "$is_Tag", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Tag").contains$1(0, this.resourceTag);
    },
    $signature: function() {
      return {func: 1, ret: P.bool, args: [[Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  Y._Resource.prototype = {
    frequencyAtDepth$1: function(depth) {
      var t1, t2;
      t1 = this.startDepth;
      t2 = this.endDepth;
      if (t1 === t2)
        return this.startFrequency;
      return K.lerpDouble(depth, t1, t2, this.startFrequency, this.endFrequency);
    },
    chanceAtDepth$1: function(depth) {
      var t1, relative, deviation;
      t1 = this.startDepth;
      if (depth < t1) {
        relative = t1 - depth;
        deviation = 0.6 + depth * 0.2;
        return Math.exp(-0.5 * relative * relative / (deviation * deviation));
      } else {
        t1 = this.endDepth;
        if (depth > t1) {
          relative = depth - t1;
          deviation = 1 + depth * 0.1;
          return Math.exp(-0.5 * relative * relative / (deviation * deviation));
        } else
          return 1;
      }
    }
  };
  Y._Tag.prototype = {
    contains$1: function(_, tag) {
      var thisTag;
      H.assertSubtype(tag, "$is_Tag", this.$ti, "$as_Tag");
      for (thisTag = this; thisTag != null; thisTag = thisTag.parent)
        if (tag === thisTag)
          return true;
      return false;
    },
    toString$0: function(_) {
      var t1 = this.parent;
      if (t1 == null)
        return this.name;
      return t1.toString$0(0) + "/" + H.S(this.name);
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Y._QueryKey.prototype = {
    get$hashCode: function(_) {
      return J.get$hashCode$(this.name) ^ C.JSInt_methods.get$hashCode(this.depth);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.name == J.get$name$x(other) && this.depth === other.get$depth();
    },
    toString$0: function(_) {
      return H.S(this.name) + " (" + this.depth + ")";
    },
    get$name: function(receiver) {
      return this.name;
    },
    get$depth: function() {
      return this.depth;
    }
  };
  Y._ResourceQuery.prototype = {
    choose$0: function() {
      var t1, t, t2, last, t3, t4, first, middle, t5;
      t1 = this.resources;
      if (t1.length === 0)
        return;
      t = $.$get$rng().float$1(0, this.totalChance);
      t2 = t1.length;
      last = t2 - 1;
      for (t3 = this.chances, t4 = t3.length, first = 0; true;) {
        middle = C.JSInt_methods._tdivFast$1(first + last, 2);
        if (middle > 0) {
          t5 = middle - 1;
          if (t5 >= t4)
            return H.ioore(t3, t5);
          t5 = t < t3[t5];
        } else
          t5 = false;
        if (t5)
          last = middle - 1;
        else {
          if (middle < 0 || middle >= t4)
            return H.ioore(t3, middle);
          if (t < t3[middle]) {
            if (middle >= t2)
              return H.ioore(t1, middle);
            return t1[middle].object;
          } else
            first = middle + 1;
        }
      }
    },
    get$depth: function() {
      return this.depth;
    }
  };
  U.VecSet.prototype = {
    get$iterator: function(_) {
      var result, y, t1, t2, t3, x, t4, t5;
      result = H.setRuntimeTypeInfo([], [L.Vec]);
      for (y = this._yMin, t1 = this._values, t2 = t1._elements, t1 = t1.bounds.size.x, t3 = t2.length; y <= this._yMax; ++y)
        for (x = this._xMin, t4 = y * t1; x <= this._xMax; ++x) {
          t5 = t4 + x;
          if (t5 < 0 || t5 >= t3)
            return H.ioore(t2, t5);
          if (J.$eq$(t2[t5], this._sentinel))
            C.JSArray_methods.add$1(result, new L.Vec(x, y));
        }
      return new J.ArrayIterator(result, result.length, 0, [H.getTypeArgumentByIndex(result, 0)]);
    },
    add$1: function(_, pos) {
      var t1, t2;
      this._values.$indexSet(0, pos, this._sentinel);
      t1 = this._xMin;
      t2 = pos.x;
      this._xMin = H.intTypeCheck(Math.min(t1, t2));
      this._xMax = H.intTypeCheck(Math.max(this._xMax, t2));
      t2 = this._yMin;
      t1 = pos.y;
      this._yMin = H.intTypeCheck(Math.min(t2, t1));
      this._yMax = H.intTypeCheck(Math.max(this._yMax, t1));
    },
    $asIterable: function() {
      return [L.Vec];
    }
  };
  X.Behavior.prototype = {};
  X.ActionBehavior.prototype = {
    canPerform$1: function(hero) {
      return true;
    },
    getAction$1: function(hero) {
      hero._behavior = null;
      return this.action;
    }
  };
  X.RestBehavior.prototype = {
    canPerform$1: function(hero) {
      if (hero._health === hero.save.fortitude.get$maxHealth())
        return false;
      if (hero._stomach === 0) {
        hero.game.log.add$5(0, C.LogType_message, "You must eat before you can rest.", null, null, null);
        return false;
      }
      return true;
    },
    getAction$1: function(hero) {
      return new B.RestAction();
    }
  };
  X.RunBehavior.prototype = {
    canPerform$1: function(hero) {
      var t1, t2, dirs, openDirs, nextLeft, nextRight;
      if (this.firstStep)
        return true;
      t1 = this.openLeft;
      if (t1 == null) {
        t1 = this.direction.get$rotateLeft45();
        t2 = this.direction;
        dirs = H.setRuntimeTypeInfo([t1, t2, t2.get$rotateRight45()], [Z.Direction]);
        if (C.JSArray_methods.contains$1(C.List_aAW, this.direction)) {
          C.JSArray_methods.add$1(dirs, this.direction.get$rotateLeft90());
          C.JSArray_methods.add$1(dirs, this.direction.get$rotateRight90());
        }
        t1 = H.getTypeArgumentByIndex(dirs, 0);
        openDirs = new H.WhereIterable(dirs, H.functionTypeCheck(new X.RunBehavior_canPerform_closure(this, hero), {func: 1, ret: P.bool, args: [t1]}), [t1]);
        if (!openDirs.get$iterator(openDirs).moveNext$0())
          return false;
        if (openDirs.get$length(openDirs) === 1) {
          this.openLeft = false;
          this.openRight = false;
          this.direction = H.interceptedTypeCheck(openDirs.get$first(openDirs), "$isDirection");
        } else {
          this.openLeft = this._isOpen$2(hero, this.direction.get$rotateLeft90());
          this.openRight = this._isOpen$2(hero, this.direction.get$rotateRight90());
        }
      } else if (!t1 && !this.openRight) {
        if (!this._runInPassage$1(hero))
          return false;
      } else {
        nextLeft = this._isOpen$2(hero, this.direction.get$rotateLeft45());
        nextRight = this._isOpen$2(hero, this.direction.get$rotateRight45());
        if (!(this.openLeft === nextLeft && this.openRight === nextRight))
          return false;
      }
      return this._shouldKeepRunning$1(hero);
    },
    getAction$1: function(hero) {
      this.firstStep = false;
      return new B.WalkAction(this.direction);
    },
    _runInPassage$1: function(hero) {
      var t1, t2, t3, openDirs;
      t1 = this.direction.get$rotateLeft90();
      t2 = this.direction.get$rotateLeft45();
      t3 = this.direction;
      t3 = H.setRuntimeTypeInfo([t1, t2, t3, t3.get$rotateRight45(), this.direction.get$rotateRight90()], [Z.Direction]);
      t2 = H.getTypeArgumentByIndex(t3, 0);
      openDirs = P.LinkedHashSet_LinkedHashSet$from(new H.WhereIterable(t3, H.functionTypeCheck(new X.RunBehavior__runInPassage_closure(this, hero), {func: 1, ret: P.bool, args: [t2]}), [t2]), t2);
      t1 = openDirs._collection$_length;
      if (t1 === 1) {
        this.direction = H.interceptedTypeCheck(openDirs.get$first(openDirs), "$isDirection");
        return true;
      }
      if (t1 !== 2)
        return false;
      if (!openDirs.contains$1(0, this.direction))
        return false;
      if (!openDirs.contains$1(0, this.direction.get$rotateLeft45()) && !openDirs.contains$1(0, this.direction.get$rotateRight45()))
        return false;
      t1 = hero.game._stage;
      t2 = hero._pos.$add(0, this.direction.$mul(0, 2));
      t2 = t1.tiles.$index(0, t2).type;
      t2.toString;
      t1 = $.$get$Motility_doorAndWalk();
      if ((t2.motility._bitMask & t1._bitMask) !== 0)
        return false;
      return true;
    },
    _shouldKeepRunning$1: function(hero) {
      var pos, stage, t1, t2;
      pos = hero._pos.$add(0, this.direction);
      stage = hero.game._stage;
      if (!hero.canEnter$1(pos))
        return false;
      t1 = stage.tiles;
      if (J.$eq$(t1.$index(0, pos).type.motility, $.$get$Motility_door()))
        return false;
      t2 = new X.RunBehavior__shouldKeepRunning_actorAt(stage);
      if (t2.call$1(pos))
        return false;
      if (t2.call$1(pos.$add(0, this.direction.get$rotateLeft90())))
        return false;
      if (t2.call$1(pos.$add(0, this.direction.get$rotateLeft45())))
        return false;
      if (t2.call$1(pos.$add(0, this.direction)))
        return false;
      if (t2.call$1(pos.$add(0, this.direction.get$rotateRight45())))
        return false;
      if (t2.call$1(pos.$add(0, this.direction.get$rotateRight90())))
        return false;
      if (t1.$index(0, pos).substance > 0)
        return false;
      return true;
    },
    _isOpen$2: function(hero, dir) {
      var t1, t2;
      t1 = hero.game._stage;
      t2 = hero._pos.$add(0, dir);
      t2 = t1.tiles.$index(0, t2).type;
      t2.toString;
      t1 = $.$get$Motility_doorAndWalk();
      return (t2.motility._bitMask & t1._bitMask) !== 0;
    }
  };
  X.RunBehavior_canPerform_closure.prototype = {
    call$1: function(dir) {
      return this.$this._isOpen$2(this.hero, H.interceptedTypeCheck(dir, "$isDirection"));
    },
    $signature: 8
  };
  X.RunBehavior__runInPassage_closure.prototype = {
    call$1: function(dir) {
      return this.$this._isOpen$2(this.hero, H.interceptedTypeCheck(dir, "$isDirection"));
    },
    $signature: 8
  };
  X.RunBehavior__shouldKeepRunning_actorAt.prototype = {
    call$1: function(pos) {
      var t1, t2;
      t1 = this.stage;
      t2 = t1.tiles.$index(0, pos);
      return !t2._isOccluded && t2.illumination - t2._fallOff > 0 && t1._actorsByTile.$index(0, pos) != null;
    },
    $signature: 0
  };
  G.Hero.prototype = {
    get$nounText: function() {
      return "you";
    },
    get$pronoun: function() {
      return C.Pronoun_you_you_your;
    },
    get$maxHealth: function() {
      return this.save.fortitude.get$maxHealth();
    },
    get$motility: function() {
      return $.$get$Motility_doorAndWalk();
    },
    get$emanationLevel: function() {
      return this.save.get$emanationLevel();
    },
    Hero$3: function(game, pos, save) {
      var t1;
      this.energy.energy = 240;
      this.refreshProperties$0();
      t1 = this.save;
      this._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t1.fortitude.get$maxHealth(), 0, this.get$maxHealth()));
      for (t1 = t1._inventory._items, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        this._gainItemSkills$1(t1.__interceptors$_current);
    },
    get$appearance: function(_) {
      return "hero";
    },
    get$needsInput: function() {
      var t1 = this._behavior;
      if (t1 != null && !t1.canPerform$1(this))
        this._behavior = null;
      return this._behavior == null;
    },
    get$armor: function() {
      return this.save.get$armor();
    },
    _gainItemSkills$1: function(item) {
      var t1, t2, t3, t4, _i, skill, t5, level;
      for (t1 = item.type.skills, t2 = t1.length, t3 = this.save, t4 = this.game, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        skill = t1[_i];
        t5 = t3.heroClass;
        t5.toString;
        H.interceptedTypeCheck(skill, "$isSkill");
        t5 = t5._proficiency.$index(0, skill);
        if ((t5 == null ? 1 : t5) !== 0 && t3.skills.discover$1(skill)) {
          skill.toString;
          t5 = t3.skills._points.$index(0, skill);
          level = skill.onCalculateLevel$2(t3, t5 == null ? 0 : t5);
          if (t3.skills.gain$2(skill, level))
            t4.log.add$5(0, C.LogType_gain, skill.gainMessage$1(level), this, null, null);
          else
            t4.log.add$5(0, C.LogType_gain, skill.get$discoverMessage(), this, null, null);
        }
      }
    },
    get$baseSpeed: function() {
      return 6;
    },
    get$baseDodge: function() {
      return 20 + this.save.agility.get$dodgeBonus();
    },
    onGetDefenses$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, defense, t4, t5;
        return function $async$onGetDefenses$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.save, t2 = t1._equipment, t2 = t2.get$iterator(t2), t3 = t2._iterator;
              case 2:
                // for condition
                if (!t2.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                defense = t3.get$current().type.defense;
                $async$goto = defense != null ? 4 : 5;
                break;
              case 4:
                // then
                $async$goto = 6;
                return defense;
              case 6:
              // after yield
              case 5:
                // join
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                t2 = t1.skills.get$acquired(), t3 = J.get$iterator$ax(t2._iterable), t2 = new H.WhereIterator(t3, t2._f, [H.getTypeArgumentByIndex(t2, 0)]);
              case 7:
                // for condition
                if (!t2.moveNext$0()) {
                  // goto after for
                  $async$goto = 8;
                  break;
                }
                t4 = t3.get$current();
                t5 = t1.skills._levels.$index(0, t4);
                defense = t4.getDefense$2($async$self, t5 == null ? 0 : t5);
                $async$goto = defense != null ? 9 : 10;
                break;
              case 9:
                // then
                $async$goto = 11;
                return defense;
              case 11:
              // after yield
              case 10:
                // join
                // goto for condition
                $async$goto = 7;
                break;
              case 8:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, U.Defense);
    },
    onGetAction$0: function() {
      return this._behavior.getAction$1(this);
    },
    onCreateMeleeHits$1: function(defender) {
      var hits, t1, t2, weapons, i, weapon, t3, t4, hit, t5, _i, t6;
      hits = H.setRuntimeTypeInfo([], [U.Hit]);
      t1 = this.save;
      t2 = t1._equipment.get$weapons();
      weapons = P.List_List$from(t2, true, H.getTypeArgumentByIndex(t2, 0));
      for (t2 = this._heftScales, i = 0; i < weapons.length; ++i) {
        weapon = weapons[i];
        t3 = weapon.type.attack;
        if (t3.range > 0)
          continue;
        t3.toString;
        t4 = $.$get$Element_none();
        hit = new U.Hit(t3, 1, 1, t4, 1);
        hit._strikeBonus = weapon.get$strikeBonus();
        t3 = weapon.get$damageScale();
        hit._damageScale = t3;
        hit._damageBonus = weapon.get$damageBonus();
        t5 = weapon.get$element();
        if (t5 != t4)
          hit._brand = t5;
        if (i >= 2)
          return H.ioore(t2, i);
        t4 = t2[i];
        t4 = t4._modify$1(t4._value);
        if (typeof t4 !== "number")
          return H.iae(t4);
        hit._damageScale = t3 * t4;
        C.JSArray_methods.add$1(hits, hit);
      }
      if (hits.length === 0)
        C.JSArray_methods.add$1(hits, new U.Hit(U.Attack$(this, "punch[es]", 3, null, null), 1, 1, $.$get$Element_none(), 1));
      for (t2 = hits.length, _i = 0; _i < hits.length; hits.length === t2 || (0, H.throwConcurrentModificationError)(hits), ++_i) {
        hit = hits[_i];
        hit._strikeBonus += t1.agility.get$strikeBonus();
        for (t3 = t1.skills.get$acquired(), t4 = J.get$iterator$ax(t3._iterable), t3 = new H.WhereIterator(t4, t3._f, [H.getTypeArgumentByIndex(t3, 0)]); t3.moveNext$0();) {
          t5 = t4.get$current();
          H.interceptedTypeCast(defender, "$isMonster");
          t6 = t1.skills._levels.$index(0, t5);
          t5.modifyAttack$4(this, defender, hit, t6 == null ? 0 : t6);
        }
      }
      return hits;
    },
    createRangedHit$0: function() {
      var t1, weapons, i, hit;
      t1 = this.save._equipment.get$weapons();
      weapons = P.List_List$from(t1, true, H.getTypeArgumentByIndex(t1, 0));
      i = C.JSArray_methods.indexWhere$1(weapons, new G.Hero_createRangedHit_closure());
      if (i < 0 || i >= weapons.length)
        return H.ioore(weapons, i);
      t1 = weapons[i].type.attack;
      t1.toString;
      hit = new U.Hit(t1, 1, 1, $.$get$Element_none(), 1);
      t1 = this._heftScales;
      if (i >= 2)
        return H.ioore(t1, i);
      t1 = t1[i];
      t1 = t1._modify$1(t1._value);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hit._damageScale = t1;
      this.modifyHit$2(hit, C.HitType_1);
      return hit;
    },
    onModifyHit$2: function(hit, type) {
      var t1, t2, t3;
      switch (type) {
        case C.HitType_0:
          break;
        case C.HitType_1:
          break;
        case C.HitType_2:
          hit._rangeScale *= this.save.strength.get$tossRangeScale();
          break;
      }
      for (t1 = this.save._equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator; t1.moveNext$0();) {
        t3 = t2.get$current();
        if (t3.type.weaponType == null) {
          hit._strikeBonus += t3.get$strikeBonus();
          hit._damageScale *= t3.get$damageScale();
          hit._damageBonus += t3.get$damageBonus();
          t3 = t3.get$element();
          hit.toString;
          if (t3 != $.$get$Element_none())
            hit._brand = t3;
        }
      }
    },
    onGetResistance$1: function(element) {
      return this.save.equipmentResistance$1(element);
    },
    onTakeDamage$3: function(action, attacker, damage) {
      var t1, t2, t3, _i;
      t1 = this._focus;
      t2 = this.save;
      t3 = t2.intellect;
      this._focus = H.intTypeCheck(C.JSInt_methods.clamp$2(t1 - C.JSInt_methods.$tdiv(C.JSNumber_methods.ceil$0(Math.pow(t3._modify$1(t3._value), 1.3) * 2) * damage * 2, t2.fortitude.get$maxHealth()), 0, C.JSNumber_methods.ceil$0(Math.pow(t3._modify$1(t3._value), 1.3) * 2)));
      for (this.game.content, t1 = $.$get$Skills_all(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].takeDamage$2(this, damage);
    },
    onKilled$2: function(action, defender) {
      var t1, t2, t3, _i;
      H.interceptedTypeCast(defender, "$isMonster");
      if (!this._seenMonsters.contains$1(0, defender))
        return;
      t1 = this.save;
      t1._lore.slay$1(defender._breed);
      for (t2 = t1.skills.get$discovered(), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
        t2[_i].killMonster$3(this, action, defender);
      t2 = t1.experience;
      t3 = defender._breed.get$experience();
      if (typeof t2 !== "number")
        return t2.$add();
      t1.experience = t2 + t3;
      this.refreshProperties$0();
    },
    onDied$1: function(attackNoun) {
      this.game.log.add$5(0, C.LogType_message, "you were slain by {1}.", attackNoun, null, null);
    },
    onFinishTurn$1: function(action) {
      var t1;
      this._lastNoise = action.get$noise();
      t1 = this._stomach;
      if (t1 > 0) {
        t1 = H.intTypeCheck(C.JSInt_methods.clamp$2(t1 - 1, 0, 400));
        this._stomach = t1;
        if (t1 === 0)
          this.game.log.add$5(0, C.LogType_message, "You are getting hungry.", null, null, null);
      }
    },
    changePosition$2: function(from, to) {
      this.super$Actor$changePosition(from, to);
      this.game._stage._lighting._visibilityDirty = true;
    },
    rest$0: function() {
      if (this.poison._turnsRemaining > 0) {
        this.game.log.add$5(0, C.LogType_error, "You cannot rest while poison courses through your veins!", null, null, null);
        return false;
      }
      if (this._health === this.save.fortitude.get$maxHealth()) {
        this.game.log.add$5(0, C.LogType_message, "You are fully rested.", null, null, null);
        return false;
      }
      if (this._stomach === 0) {
        this.game.log.add$5(0, C.LogType_error, "You are too hungry to rest.", null, null, null);
        return false;
      }
      this._behavior = new X.RestBehavior();
      return true;
    },
    seeMonster$1: function(monster) {
      var t1, t2, _i;
      if (this._seenMonsters.add$1(0, monster)) {
        t1 = this.save;
        t1._lore.seeBreed$1(monster._breed);
        if (t1._lore.seenBreed$1(monster._breed) === 1)
          for (this.game.content, t1 = $.$get$Skills_all(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
            t1[_i].seeBreed$2(this, monster._breed);
      }
    },
    refreshProperties$0: function() {
      var t1, level, t2, t3, t4, weapons, i, t5, weapon, t6, _i, heftModifier, t7, t8, heftScale;
      t1 = this.save;
      level = G.experienceLevel(t1.experience);
      this._level.update$2(0, level, new G.Hero_refreshProperties_closure(this, level));
      t2 = t1.strength;
      t3 = this.game;
      t2.refresh$1(t3);
      t1.agility.refresh$1(t3);
      t1.fortitude.refresh$1(t3);
      t1.intellect.refresh$1(t3);
      t1.will.refresh$1(t3);
      t4 = t1._equipment.get$weapons();
      weapons = P.List_List$from(t4, true, H.getTypeArgumentByIndex(t4, 0));
      for (t4 = this._heftScales, i = 0; t5 = weapons.length, i < t5; ++i) {
        weapon = weapons[i];
        if (t5 === 2) {
          for (t3.content, t5 = $.$get$Skills_all(), t6 = t5.length, _i = 0; _i < t5.length; t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i)
            t5[_i].dualWield$1(this);
          heftModifier = 1.3;
        } else
          heftModifier = 1;
        for (t5 = t1.skills.get$acquired(), t6 = J.get$iterator$ax(t5._iterable), t5 = new H.WhereIterator(t6, t5._f, [H.getTypeArgumentByIndex(t5, 0)]); t5.moveNext$0();) {
          t7 = t6.get$current();
          t8 = t1.skills._levels.$index(0, t7);
          heftModifier = t7.modifyHeft$3(this, t8 == null ? 0 : t8, heftModifier);
        }
        heftScale = t2.heftScale$1(C.JSNumber_methods.round$0(weapon.get$heft() * heftModifier));
        if (i >= 2)
          return H.ioore(t4, i);
        t4[i].update$2(0, heftScale, new G.Hero_refreshProperties_closure0(this, heftScale, weapon));
      }
      C.JSArray_methods.forEach$1(t1.skills.get$discovered(), this.get$refreshSkill());
    },
    pickUp$1: function(item) {
      this.save._lore.findItem$1(item);
      this._gainItemSkills$1(item);
      this.refreshProperties$0();
    },
    discoverSkill$1: function(skill) {
      var t1 = this.save;
      if (t1.heroClass.proficiency$1(skill) === 0)
        return;
      if (!t1.skills.discover$1(skill))
        return;
      this.game.log.add$5(0, C.LogType_gain, skill.get$discoverMessage(), this, null, null);
    },
    refreshSkill$1: function(skill) {
      var t1, level;
      H.interceptedTypeCheck(skill, "$isSkill");
      t1 = this.save;
      skill.toString;
      level = skill.onCalculateLevel$2(t1, t1.skills.points$1(0, skill));
      if (t1.skills.gain$2(skill, level))
        this.game.log.add$5(0, C.LogType_gain, skill.gainMessage$1(level), this, null, null);
    }
  };
  G.Hero_createRangedHit_closure.prototype = {
    call$1: function(weapon) {
      return H.interceptedTypeCheck(weapon, "$isItem").type.attack.range > 0;
    },
    $signature: 7
  };
  G.Hero_refreshProperties_closure.prototype = {
    call$1: function(previous) {
      H.intTypeCheck(previous);
      this.$this.game.log.add$5(0, C.LogType_gain, "You have reached level " + this.level + ".", null, null, null);
    },
    $signature: 17
  };
  G.Hero_refreshProperties_closure0.prototype = {
    call$1: function(previous) {
      var t1 = this.heftScale;
      if (t1 < 1 && previous >= 1)
        this.$this.game.log.add$5(0, C.LogType_error, "You are too weak to effectively wield " + H.S(this.weapon) + ".", null, null, null);
      else if (t1 >= 1 && previous < 1)
        this.$this.game.log.add$5(0, C.LogType_message, "You feel comfortable wielding " + H.S(this.weapon) + ".", null, null, null);
    },
    $signature: 87
  };
  T.HeroClass.prototype = {
    proficiency$1: function(skill) {
      var t1 = this._proficiency.$index(0, skill);
      return t1 == null ? 1 : t1;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  K.HeroSave.prototype = {
    get$emanationLevel: function() {
      var t1, t2, level;
      for (t1 = this._equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, level = 0; t1.moveNext$0();)
        level += t2.get$current().type.emanationLevel;
      return level;
    },
    get$armor: function() {
      var t1, t2, total, t3, t4;
      for (t1 = this._equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, total = 0; t1.moveNext$0();) {
        t3 = t2.get$current();
        total += t3.type.armor + t3.get$armorModifier();
      }
      for (t1 = this.skills.get$acquired(), t2 = J.get$iterator$ax(t1._iterable), t1 = new H.WhereIterator(t2, t1._f, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        t3 = t2.get$current();
        t4 = this.skills._levels.$index(0, t3);
        total = t3.modifyArmor$3(this, t4 == null ? 0 : t4, total);
      }
      return total;
    },
    get$weight: function() {
      var t1, t2, total;
      for (t1 = this._equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, total = 0; t1.moveNext$0();)
        total += t2.get$current().get$weight();
      return total;
    },
    equipmentResistance$1: function(element) {
      var t1, t2, resistance;
      for (t1 = this._equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, resistance = 0; t1.moveNext$0();)
        resistance += t2.get$current().resistance$1(element);
      return resistance;
    },
    statBonus$1: function(stat) {
      var t1, t2, bonus, t3, t4;
      for (t1 = this._equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, bonus = 0; t1.moveNext$0();) {
        t3 = t2.get$current();
        t4 = t3.prefix;
        if (t4 != null) {
          t4 = t4._statBonuses.$index(0, stat);
          bonus += t4 == null ? 0 : t4;
        }
        t3 = t3.suffix;
        if (t3 != null) {
          t3 = t3._statBonuses.$index(0, stat);
          bonus += t3 == null ? 0 : t3;
        }
      }
      return bonus;
    },
    _bindStats$0: function() {
      this.strength.bindHero$1(this);
      this.agility.bindHero$1(this);
      this.fortitude.bindHero$1(this);
      this.intellect.bindHero$1(this);
      this.will.bindHero$1(this);
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  V.Lore.prototype = {
    get$allSlain: function() {
      var t1 = this._slainBreeds;
      return t1.get$values(t1).fold$1$2(0, 0, new V.Lore_allSlain_closure(), P.int);
    },
    seeBreed$1: function(breed) {
      var t1 = this._seenBreeds;
      t1.putIfAbsent$2(0, breed, new V.Lore_seeBreed_closure());
      t1.$indexSet(0, breed, J.$add$ansx(t1.$index(0, breed), 1));
    },
    slay$1: function(breed) {
      var t1 = this._slainBreeds;
      t1.putIfAbsent$2(0, breed, new V.Lore_slay_closure());
      t1.$indexSet(0, breed, J.$add$ansx(t1.$index(0, breed), 1));
    },
    findItem$1: function(item) {
      var t1, t2;
      t1 = this._foundItems;
      t2 = item.type;
      t1.putIfAbsent$2(0, t2, new V.Lore_findItem_closure());
      t1.$indexSet(0, t2, J.$add$ansx(t1.$index(0, t2), 1));
      t2 = new V.Lore_findItem_findAffix(this);
      t2.call$1(item.prefix);
      t2.call$1(item.suffix);
    },
    useItem$1: function(item) {
      var t1, t2;
      t1 = this._usedItems;
      t2 = item.type;
      t1.putIfAbsent$2(0, t2, new V.Lore_useItem_closure());
      t1.$indexSet(0, t2, J.$add$ansx(t1.$index(0, t2), 1));
    },
    seenBreed$1: function(breed) {
      var t1 = this._seenBreeds.$index(0, breed);
      return t1 == null ? 0 : t1;
    },
    slain$1: function(breed) {
      var t1 = this._slainBreeds.$index(0, breed);
      return t1 == null ? 0 : t1;
    },
    foundItems$1: function(type) {
      var t1 = this._foundItems.$index(0, type);
      return t1 == null ? 1 : t1;
    }
  };
  V.Lore_allSlain_closure.prototype = {
    call$2: function(a, b) {
      H.intTypeCheck(a);
      H.intTypeCheck(b);
      if (typeof a !== "number")
        return a.$add();
      if (typeof b !== "number")
        return H.iae(b);
      return a + b;
    },
    $signature: 21
  };
  V.Lore_seeBreed_closure.prototype = {
    call$0: function() {
      return 0;
    },
    $signature: 4
  };
  V.Lore_slay_closure.prototype = {
    call$0: function() {
      return 0;
    },
    $signature: 4
  };
  V.Lore_findItem_closure.prototype = {
    call$0: function() {
      return 0;
    },
    $signature: 4
  };
  V.Lore_findItem_findAffix.prototype = {
    call$1: function(affix) {
      var t1;
      if (affix == null)
        return;
      t1 = this.$this._foundAffixes;
      t1.putIfAbsent$2(0, affix, new V.Lore_findItem_findAffix_closure());
      t1.$indexSet(0, affix, J.$add$ansx(t1.$index(0, affix), 1));
    },
    $signature: 88
  };
  V.Lore_findItem_findAffix_closure.prototype = {
    call$0: function() {
      return 0;
    },
    $signature: 4
  };
  V.Lore_useItem_closure.prototype = {
    call$0: function() {
      return 0;
    },
    $signature: 4
  };
  N.Race.prototype = {
    rollStats$0: function() {
      var rolled, t1, t2, t3, base, t4, value, t5;
      rolled = P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, P.int);
      for (t1 = this.stats, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current();
        base = t1.$index(0, t3);
        t4 = $.$get$rng();
        t4 = t4._random.nextInt$1(4);
        if (typeof base !== "number")
          return base.$add();
        value = base + t4;
        t4 = (base / 2 | 0) + 30;
        while (true) {
          if (value < 50) {
            t5 = $.$get$rng();
            t5 = t5._random.nextInt$1(100) < t4;
          } else
            t5 = false;
          if (!t5)
            break;
          ++value;
        }
        rolled.$indexSet(0, t3, value);
      }
      return N.RaceStats$(this, rolled, $.$get$rng().range$1(100000));
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  N.RaceStats.prototype = {
    RaceStats$3: function(_race, _max, seed) {
      var t1, t2, min, current, t3, t4, totalMin, totalMax, t5, t6, random, previous, level, lerp, points, gained, point, worstStats, worstError, t7, ideal, t8, error, max, stat;
      t1 = D.Stat;
      t2 = P.int;
      min = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      current = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      for (t3 = this._max, t4 = t3.get$keys(t3), t4 = t4.get$iterator(t4), totalMin = 0, totalMax = 0; t4.moveNext$0();) {
        t5 = t4.get$current();
        t6 = t3.$index(0, t5);
        if (typeof t6 !== "number")
          return t6.$tdiv();
        min.$indexSet(0, t5, 10 + C.JSInt_methods._tdivFast$1(t6, 15));
        t6 = min.$index(0, t5);
        if (typeof t6 !== "number")
          return H.iae(t6);
        totalMin += t6;
        t6 = t3.$index(0, t5);
        if (typeof t6 !== "number")
          return H.iae(t6);
        totalMax += t6;
        current.$indexSet(0, t5, 0);
      }
      random = new N.Rng();
      t4 = P._Random$(this.seed);
      random._random = t4;
      for (t4 = this._stats, t5 = [t1], previous = 0, level = 0; level < 50; ++level, previous = points) {
        lerp = new N.RaceStats_lerp(level);
        points = J.toInt$0$n(lerp.call$2(totalMin, totalMax));
        gained = points - previous;
        for (point = 0; point < gained; ++point) {
          worstStats = H.setRuntimeTypeInfo([], t5);
          for (t6 = t3.get$keys(t3), t6 = t6.get$iterator(t6), worstError = -100; t6.moveNext$0();) {
            t7 = t6.get$current();
            ideal = lerp.call$2(min.$index(0, t7), t3.$index(0, t7));
            t8 = current.$index(0, t7);
            if (typeof ideal !== "number")
              return ideal.$sub();
            if (typeof t8 !== "number")
              return H.iae(t8);
            error = ideal - t8;
            if (error > worstError) {
              worstStats = H.setRuntimeTypeInfo([t7], t5);
              worstError = error;
            } else if (error === worstError)
              C.JSArray_methods.add$1(worstStats, t7);
          }
          H.assertSubtype(worstStats, "$isList", t5, "$asList");
          max = worstStats.length;
          t6 = random._random.nextInt$1(max - 0);
          if (t6 < 0 || t6 >= worstStats.length)
            return H.ioore(worstStats, t6);
          stat = worstStats[t6];
          current.$indexSet(0, stat, J.$add$ansx(current.$index(0, stat), 1));
        }
        C.JSArray_methods.add$1(t4, P.LinkedHashMap_LinkedHashMap$from(current, t1, t2));
      }
    },
    get$name: function(_) {
      return this._race.name;
    }
  };
  N.RaceStats_lerp.prototype = {
    call$2: function(from, to) {
      var t = this.level / 49;
      if (typeof from !== "number")
        return H.iae(from);
      if (typeof to !== "number")
        return H.iae(to);
      return (1 - t) * from + t * to;
    },
    $signature: 89
  };
  M.Skill.prototype = {
    get$useName: function() {
      return this.get$name(this);
    },
    takeDamage$2: function(hero, damage) {
    },
    seeBreed$2: function(hero, breed) {
    },
    killMonster$3: function(hero, action, monster) {
    },
    dualWield$1: function(hero) {
    },
    modifyAttack$4: function(hero, monster, hit, level) {
    },
    modifyArmor$3: function(hero, level, armor) {
      return armor;
    },
    getDefense$2: function(hero, level) {
      return;
    },
    modifyHeft$3: function(hero, level, heftModifier) {
      return heftModifier;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._sortOrder, H.interceptedTypeCheck(other, "$isSkill")._sortOrder);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [M.Skill];
    }
  };
  M.UsableSkill.prototype = {
    unusableReason$1: function(game) {
      return;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [M.Skill];
    },
    $isSkill: 1
  };
  M.TargetSkill.prototype = {};
  M.Discipline.prototype = {
    gainMessage$1: function(level) {
      return "You have reached level " + level + " in " + this.get$name(this) + ".";
    },
    get$discoverMessage: function() {
      return "{1} can begin training in " + this.get$name(this) + ".";
    },
    onCalculateLevel$2: function(hero, points) {
      var training, level, t1;
      training = hero.skills.points$1(0, this);
      for (level = 1; level <= this.get$maxLevel(); ++level) {
        t1 = this.trainingNeeded$2(hero.heroClass, level);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (training < t1)
          return level - 1;
      }
      return this.get$maxLevel();
    },
    percentUntilNext$1: function(hero) {
      var level, points, t1, current, next;
      level = this.onCalculateLevel$2(hero, hero.skills.points$1(0, this));
      if (level === this.get$maxLevel())
        return;
      points = hero.skills.points$1(0, this);
      t1 = hero.heroClass;
      current = this.trainingNeeded$2(t1, level);
      next = this.trainingNeeded$2(t1, level + 1);
      if (typeof current !== "number")
        return H.iae(current);
      if (typeof next !== "number")
        return next.$sub();
      return C.JSInt_methods.$tdiv(100 * (points - current), next - current);
    },
    trainingNeeded$2: function(heroClass, level) {
      var profiency = heroClass.proficiency$1(this);
      if (profiency === 0)
        return;
      return C.JSDouble_methods.ceil$0(this.baseTrainingNeeded$1(level) / profiency);
    }
  };
  M.Spell.prototype = {
    gainMessage$1: function(level) {
      return "{1} have learned the spell " + this.get$name(this) + ".";
    },
    get$discoverMessage: function() {
      return "{1} are not wise enough to cast " + this.get$name(this) + ".";
    },
    get$maxLevel: function() {
      return 1;
    },
    get$damage: function() {
      return;
    },
    get$range: function() {
      return;
    },
    onCalculateLevel$2: function(hero, points) {
      var t1, t2;
      t1 = hero.heroClass;
      if (t1.proficiency$1(this) === 0)
        return 0;
      t2 = hero.intellect;
      return t2._modify$1(t2._value) >= this.complexity$1(t1) ? 1 : 0;
    },
    focusCost$1: function(hero) {
      return C.JSDouble_methods.round$0(this.get$baseFocusCost() / hero.heroClass.proficiency$1(this));
    },
    complexity$1: function(heroClass) {
      return C.JSDouble_methods.round$0((this.get$baseComplexity() - 9) / heroClass.proficiency$1(this)) + 9;
    },
    getRange$1: function(_, game) {
      return this.get$range();
    },
    getTargetAction$3: function(game, level, target) {
      var action = this.onGetTargetAction$2(game, target);
      return new V.FocusAction(this.focusCost$1(game.hero.save), action);
    },
    onGetTargetAction$2: function(game, target) {
      return;
    },
    getAction$2: function(game, level) {
      var action = this.onGetAction$1(game);
      return new V.FocusAction(this.focusCost$1(game.hero.save), action);
    },
    onGetAction$1: function(game) {
      return;
    }
  };
  M.SkillSet.prototype = {
    get$discovered: function() {
      var t1 = this._levels;
      t1 = t1.get$keys(t1);
      t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
      C.JSArray_methods.sort$0(t1);
      return t1;
    },
    get$acquired: function() {
      var t1, t2;
      t1 = this._levels;
      t1 = t1.get$keys(t1);
      t2 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
      return new H.WhereIterable(t1, H.functionTypeCheck(new M.SkillSet_acquired_closure(this), {func: 1, ret: P.bool, args: [t2]}), [t2]);
    },
    level$1: function(skill) {
      var t1 = this._levels.$index(0, skill);
      return t1 == null ? 0 : t1;
    },
    points$1: function(_, skill) {
      var t1 = this._points.$index(0, skill);
      return t1 == null ? 0 : t1;
    },
    earnPoints$2: function(skill, points) {
      this._points.$indexSet(0, skill, points + this.points$1(0, skill));
    },
    discover$1: function(skill) {
      var t1 = this._levels;
      if (t1.containsKey$1(0, skill))
        return false;
      t1.$indexSet(0, skill, 0);
      return true;
    },
    gain$2: function(skill, level) {
      var t1;
      level = Math.min(level, skill.get$maxLevel());
      t1 = this._levels;
      if (J.$eq$(t1.$index(0, skill), level))
        return false;
      if (level === 0 && !t1.containsKey$1(0, skill))
        return false;
      t1.$indexSet(0, skill, level);
      return true;
    },
    isAcquired$1: function(skill) {
      var t1;
      H.interceptedTypeCheck(skill, "$isSkill");
      t1 = this._levels;
      return t1.containsKey$1(0, skill) && J.$gt$n(t1.$index(0, skill), 0);
    }
  };
  M.SkillSet_acquired_closure.prototype = {
    call$1: function(skill) {
      return J.$gt$n(this.$this._levels.$index(0, H.interceptedTypeCheck(skill, "$isSkill")), 0);
    },
    $signature: 90
  };
  M._Spell_Skill_UsableSkill.prototype = {};
  D.Property.prototype = {
    _modify$1: function(base) {
      return H.assertSubtypeOfRuntimeType(base, H.getRuntimeTypeArgument(this, "Property", 0));
    },
    update$2: function(_, value, onChange) {
      var t1 = H.getRuntimeTypeArgument(this, "Property", 0);
      H.assertSubtypeOfRuntimeType(value, t1);
      H.functionTypeCheck(onChange, {func: 1, args: [t1]});
      t1 = this._value;
      if (t1 === value)
        return;
      this.set$_value(value);
      if (t1 != null)
        onChange.call$1(t1);
    },
    set$_value: function(_value) {
      this._value = H.assertSubtypeOfRuntimeType(_value, H.getRuntimeTypeArgument(this, "Property", 0));
    }
  };
  D.Stat.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  D.StatBase.prototype = {
    get$name: function(_) {
      return this.get$_stat().name;
    },
    _modify$1: function(base) {
      var t1;
      H.intTypeCheck(base);
      t1 = this.get$_statOffset();
      if (typeof base !== "number")
        return base.$add();
      return H.intTypeCheck(C.JSInt_methods.clamp$2(base + t1 + this._hero.statBonus$1(this.get$_stat()), 1, 60));
    },
    get$_statOffset: function() {
      return 0;
    },
    bindHero$1: function(hero) {
      var t1, t2, t3;
      this._hero = hero;
      t1 = this.get$_stat();
      t2 = hero.race._stats;
      t3 = G.experienceLevel(this._hero.experience) - 1;
      if (t3 < 0 || t3 >= t2.length)
        return H.ioore(t2, t3);
      this.set$_value(H.intTypeCheck(J.clamp$2$n(t2[t3].$index(0, t1), 1, 60)));
    },
    refresh$1: function(game) {
      var t1, t2, t3;
      t1 = this._hero.race;
      t2 = this.get$_stat();
      t1 = t1._stats;
      t3 = G.experienceLevel(this._hero.experience) - 1;
      if (t3 < 0 || t3 >= t1.length)
        return H.ioore(t1, t3);
      t2 = H.intTypeCheck(J.clamp$2$n(t1[t3].$index(0, t2), 1, 60));
      this.update$2(0, t2, new D.StatBase_refresh_closure(this, t2, game));
    },
    $asProperty: function() {
      return [P.int];
    }
  };
  D.StatBase_refresh_closure.prototype = {
    call$1: function(previous) {
      var gain, t1, t2;
      gain = this.newValue - H.intTypeCheck(previous);
      t1 = this.game;
      t2 = this.$this;
      if (gain > 0)
        t1.log.add$5(0, C.LogType_gain, "You feel " + t2.get$_gainAdjective() + "! Your " + t2.get$_stat().name + " increased by " + H.S(gain) + ".", null, null, null);
      else
        t1.log.add$5(0, C.LogType_error, "You feel " + t2.get$_loseAdjective() + "! Your " + t2.get$_stat().name + " decreased by " + H.S(-gain) + ".", null, null, null);
    },
    $signature: 17
  };
  D.Strength.prototype = {
    get$_stat: function() {
      return C.Stat_Strength;
    },
    get$_gainAdjective: function() {
      return "mighty";
    },
    get$_loseAdjective: function() {
      return "weak";
    },
    get$_statOffset: function() {
      return -this._hero.get$weight();
    },
    get$tossRangeScale: function() {
      if (this._modify$1(this._value) <= 20)
        return K.lerpDouble(this._modify$1(this._value), 1, 20, 0.1, 1);
      if (this._modify$1(this._value) <= 30)
        return K.lerpDouble(this._modify$1(this._value), 20, 30, 1, 1.5);
      if (this._modify$1(this._value) <= 40)
        return K.lerpDouble(this._modify$1(this._value), 30, 40, 1.5, 1.8);
      if (this._modify$1(this._value) <= 50)
        return K.lerpDouble(this._modify$1(this._value), 40, 50, 1.8, 2);
      return K.lerpDouble(this._modify$1(this._value), 50, 60, 2, 2.1);
    },
    heftScale$1: function(heft) {
      var relative, scale;
      relative = C.JSInt_methods.clamp$2(this._modify$1(this._value) - heft, -20, 50);
      if (relative < -10)
        scale = K.lerpDouble(relative, -20, -10, 0.05, 0.3);
      else if (relative < 0)
        scale = K.lerpDouble(relative, -10, -1, 0.3, 0.8);
      else
        scale = relative < 30 ? K.lerpDouble(relative, 0, 30, 1, 2) : K.lerpDouble(relative, 30, 50, 2, 3);
      return scale;
    }
  };
  D.Agility.prototype = {
    get$_stat: function() {
      return C.Stat_Agility;
    },
    get$_gainAdjective: function() {
      return "dextrous";
    },
    get$_loseAdjective: function() {
      return "clumsy";
    },
    get$dodgeBonus: function() {
      if (this._modify$1(this._value) <= 10)
        return C.JSNumber_methods.round$0(K.lerpDouble(this._modify$1(this._value), 1, 10, -50, 0));
      if (this._modify$1(this._value) <= 30)
        return C.JSNumber_methods.round$0(K.lerpDouble(this._modify$1(this._value), 10, 30, 0, 20));
      return C.JSNumber_methods.round$0(K.lerpDouble(this._modify$1(this._value), 30, 60, 20, 60));
    },
    get$strikeBonus: function() {
      if (this._modify$1(this._value) <= 10)
        return C.JSNumber_methods.round$0(K.lerpDouble(this._modify$1(this._value), 1, 10, -30, 0));
      if (this._modify$1(this._value) <= 30)
        return C.JSNumber_methods.round$0(K.lerpDouble(this._modify$1(this._value), 10, 30, 0, 20));
      return C.JSNumber_methods.round$0(K.lerpDouble(this._modify$1(this._value), 30, 60, 20, 50));
    }
  };
  D.Fortitude.prototype = {
    get$_stat: function() {
      return C.Stat_Fortitude;
    },
    get$_gainAdjective: function() {
      return "tough";
    },
    get$_loseAdjective: function() {
      return "sickly";
    },
    get$maxHealth: function() {
      return C.JSNumber_methods.toInt$0(Math.pow(this._modify$1(this._value), 1.4) + 1.23 * this._modify$1(this._value) + 18);
    }
  };
  D.Intellect.prototype = {
    get$_stat: function() {
      return C.Stat_Intellect;
    },
    get$_gainAdjective: function() {
      return "smart";
    },
    get$_loseAdjective: function() {
      return "stupid";
    }
  };
  D.Will.prototype = {
    get$_stat: function() {
      return C.Stat_Will;
    },
    get$_gainAdjective: function() {
      return "invincible";
    },
    get$_loseAdjective: function() {
      return "foolish";
    }
  };
  L.Affix.prototype = {
    resistance$1: function(element) {
      var t1 = this._resists.$index(0, element);
      return t1 == null ? 0 : t1;
    },
    resist$2: function(element, power) {
      this._resists.$indexSet(0, H.interceptedTypeCheck(element, "$isElement"), H.intTypeCheck(power));
    },
    setStatBonus$2: function(stat, bonus) {
      this._statBonuses.$indexSet(0, H.interceptedTypeCheck(stat, "$isStat"), H.intTypeCheck(bonus));
    },
    toString$0: function(_) {
      return this.name;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  E.Equipment.prototype = {
    get$location: function(_) {
      return C.ItemLocation_A8D;
    },
    get$weapons: function() {
      var t1, t2;
      t1 = this.slots;
      t2 = H.getTypeArgumentByIndex(t1, 0);
      return new H.WhereIterable(t1, H.functionTypeCheck(new E.Equipment_weapons_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]);
    },
    get$length: function(_) {
      return C.JSArray_methods.fold$1$2(this.slots, 0, new E.Equipment_length_closure(), P.int);
    },
    $index: function(_, index) {
      var t1, i, t2;
      H.intTypeCheck(index);
      for (t1 = this.slots, i = 0; i < 9; ++i) {
        t2 = t1[i];
        if (t2 != null) {
          if (index === 0)
            return t2;
          if (typeof index !== "number")
            return index.$sub();
          --index;
        }
      }
      throw H.wrapException("unreachable");
    },
    clone$0: function(_) {
      var equipment, t1, t2, i, t3, t4, t5;
      equipment = E.Equipment$();
      for (t1 = this.slots, t2 = equipment.slots, i = 0; i < 9; ++i) {
        t3 = t1[i];
        if (t3 != null) {
          t4 = t3.type;
          t5 = t3._count;
          C.JSArray_methods.$indexSet(t2, i, new R.Item(t4, t3.prefix, t3.suffix, t5));
        }
      }
      return equipment;
    },
    canEquip$1: function(item) {
      return C.JSArray_methods.any$1(this.slotTypes, new E.Equipment_canEquip_closure(item));
    },
    countChanged$0: function() {
    },
    equip$1: function(item) {
      var t1, t2, handSlots, heldSlots, t3, i, t4, unequipped, _i, slot, usedSlot;
      t1 = item.type;
      t2 = t1.equipSlot;
      if (t2 === "hand") {
        t2 = [P.int];
        handSlots = H.setRuntimeTypeInfo([], t2);
        heldSlots = H.setRuntimeTypeInfo([], t2);
        for (t2 = this.slotTypes, t3 = this.slots, i = 0; i < 9; ++i)
          if (t2[i] === "hand") {
            C.JSArray_methods.add$1(handSlots, i);
            if (t3[i] != null)
              C.JSArray_methods.add$1(heldSlots, i);
          }
        t2 = heldSlots.length;
        if (t2 === 0) {
          if (0 >= handSlots.length)
            return H.ioore(handSlots, 0);
          C.JSArray_methods.$indexSet(t3, handSlots[0], item);
          return C.List_empty1;
        }
        if (t2 === 1) {
          if (0 >= t2)
            return H.ioore(heldSlots, 0);
          t4 = heldSlots[0];
          if (t4 >= 9)
            return H.ioore(t3, t4);
          t4 = t3[t4].type.isTwoHanded;
        } else
          t4 = false;
        if (t4) {
          if (0 >= t2)
            return H.ioore(heldSlots, 0);
          t1 = heldSlots[0];
          if (t1 >= 9)
            return H.ioore(t3, t1);
          unequipped = t3[t1];
          if (0 >= handSlots.length)
            return H.ioore(handSlots, 0);
          C.JSArray_methods.$indexSet(t3, handSlots[0], item);
          return H.setRuntimeTypeInfo([unequipped], [R.Item]);
        }
        if (t1.isTwoHanded) {
          unequipped = H.setRuntimeTypeInfo([], [R.Item]);
          for (t1 = heldSlots.length, _i = 0; _i < heldSlots.length; heldSlots.length === t1 || (0, H.throwConcurrentModificationError)(heldSlots), ++_i) {
            slot = heldSlots[_i];
            if (slot >= 9)
              return H.ioore(t3, slot);
            C.JSArray_methods.add$1(unequipped, t3[slot]);
            C.JSArray_methods.$indexSet(t3, slot, null);
          }
          if (0 >= handSlots.length)
            return H.ioore(handSlots, 0);
          C.JSArray_methods.$indexSet(t3, handSlots[0], item);
          return unequipped;
        }
        if (t2 === 2) {
          if (0 >= t2)
            return H.ioore(heldSlots, 0);
          t1 = heldSlots[0];
          if (t1 >= 9)
            return H.ioore(t3, t1);
          unequipped = t3[t1];
          C.JSArray_methods.$indexSet(t3, t1, item);
          return H.setRuntimeTypeInfo([unequipped], [R.Item]);
        }
        if (0 >= t2)
          return H.ioore(heldSlots, 0);
        t1 = heldSlots[0];
        t2 = handSlots.length;
        if (0 >= t2)
          return H.ioore(handSlots, 0);
        t4 = handSlots[0];
        if (t1 === t4) {
          if (1 >= t2)
            return H.ioore(handSlots, 1);
          C.JSArray_methods.$indexSet(t3, handSlots[1], item);
        } else
          C.JSArray_methods.$indexSet(t3, t4, item);
        return C.List_empty1;
      }
      for (t1 = this.slotTypes, t3 = this.slots, usedSlot = -1, i = 0; i < 9; ++i)
        if (t1[i] === t2) {
          if (t3[i] == null) {
            C.JSArray_methods.$indexSet(t3, i, item);
            return C.List_empty1;
          }
          usedSlot = i;
        }
      if (usedSlot < 0 || usedSlot >= 9)
        return H.ioore(t3, usedSlot);
      unequipped = H.setRuntimeTypeInfo([t3[usedSlot]], [R.Item]);
      C.JSArray_methods.$indexSet(t3, usedSlot, item);
      return unequipped;
    },
    remove$1: function(_, item) {
      var t1, i;
      for (t1 = this.slots, i = 0; i < 9; ++i)
        if (J.$eq$(t1[i], item)) {
          C.JSArray_methods.$indexSet(t1, i, null);
          break;
        }
    },
    get$iterator: function(_) {
      var t1, t2, t3;
      t1 = this.slots;
      t2 = H.getTypeArgumentByIndex(t1, 0);
      t3 = H.functionTypeCheck(new E.Equipment_iterator_closure(), {func: 1, ret: P.bool, args: [t2]});
      return new H.WhereIterator(C.JSArray_methods.get$iterator(t1), t3, [t2]);
    },
    $asIterable: function() {
      return [R.Item];
    },
    get$slotTypes: function() {
      return this.slotTypes;
    },
    get$slots: function() {
      return this.slots;
    }
  };
  E.Equipment_weapons_closure.prototype = {
    call$1: function(item) {
      H.interceptedTypeCheck(item, "$isItem");
      return item != null && item.type.weaponType != null;
    },
    $signature: 7
  };
  E.Equipment_length_closure.prototype = {
    call$2: function(count, item) {
      var t1;
      H.intTypeCheck(count);
      t1 = H.interceptedTypeCheck(item, "$isItem") == null ? 0 : 1;
      if (typeof count !== "number")
        return count.$add();
      return count + t1;
    },
    $signature: 93
  };
  E.Equipment_canEquip_closure.prototype = {
    call$1: function(slot) {
      H.stringTypeCheck(slot);
      return this.item.type.equipSlot == slot;
    },
    $signature: 16
  };
  E.Equipment_iterator_closure.prototype = {
    call$1: function(item) {
      return H.interceptedTypeCheck(item, "$isItem") != null;
    },
    $signature: 7
  };
  E._Equipment_IterableBase_ItemCollection.prototype = {};
  O.ItemLocation.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  O.ItemCollection.prototype = {
    get$name: function(_) {
      return this.get$location(this).name;
    },
    get$slotTypes: function() {
      return C.List_empty0;
    },
    get$slots: function() {
      return this;
    }
  };
  O.Inventory.prototype = {
    get$length: function(_) {
      return this._items.length;
    },
    $index: function(_, index) {
      return C.JSArray_methods.$index(this._items, H.intTypeCheck(index));
    },
    clone$0: function(_) {
      var t1, t2, t3;
      t1 = this._items;
      t2 = R.Item;
      t3 = H.getTypeArgumentByIndex(t1, 0);
      return O.Inventory$(this.location, this._capacity, new H.MappedListIterable(t1, H.functionTypeCheck(new O.Inventory_clone_closure(), {func: 1, ret: t2, args: [t3]}), [t3, t2]));
    },
    remove$1: function(_, item) {
      C.JSArray_methods.remove$1(this._items, item);
    },
    canAdd$1: function(item) {
      var t1, remaining, t2, _i, existing, t3, t4;
      t1 = this._capacity;
      if (t1 == null || this._items.length < t1)
        return true;
      remaining = item._count;
      for (t1 = this._items, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        existing = t1[_i];
        if (existing.canStack$1(item)) {
          t3 = existing.type.maxStack;
          t4 = existing._count;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (typeof remaining !== "number")
            return remaining.$sub();
          remaining -= t3 - t4;
          if (remaining <= 0)
            return true;
        }
      }
      return false;
    },
    tryAdd$2$wasUnequipped: function(item, wasUnequipped) {
      var adding, t1, t2, t3, _i, t4;
      adding = item._count;
      for (t1 = this._items, t2 = t1.length, t3 = adding, _i = 0; t4 = t1.length, _i < t4; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        t1[_i].stack$1(item);
        t3 = item._count;
        if (t3 === 0)
          return new O.AddItemResult(adding, 0);
      }
      t2 = this._capacity;
      if (t2 != null && t4 >= t2) {
        if (typeof adding !== "number")
          return adding.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        return new O.AddItemResult(adding - t3, t3);
      }
      C.JSArray_methods.add$1(t1, item);
      C.JSArray_methods.sort$0(t1);
      if (wasUnequipped)
        this._lastUnequipped = item;
      return new O.AddItemResult(adding, 0);
    },
    tryAdd$1: function(item) {
      return this.tryAdd$2$wasUnequipped(item, false);
    },
    countChanged$0: function() {
      var t1, items, _i;
      t1 = this._items;
      items = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      C.JSArray_methods.set$length(t1, 0);
      for (t1 = items.length, _i = 0; _i < items.length; items.length === t1 || (0, H.throwConcurrentModificationError)(items), ++_i)
        this.tryAdd$1(items[_i]);
    },
    get$iterator: function(_) {
      var t1 = this._items;
      return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    $asIterableMixin: function() {
      return [R.Item];
    },
    $asIterable: function() {
      return [R.Item];
    },
    get$location: function(receiver) {
      return this.location;
    }
  };
  O.Inventory_clone_closure.prototype = {
    call$1: function(item) {
      return H.interceptedTypeCheck(item, "$isItem").clone$0(0);
    },
    $signature: 95
  };
  O.AddItemResult.prototype = {};
  O._Inventory_IterableMixin_ItemCollection.prototype = {};
  R.Item.prototype = {
    get$element: function() {
      var result, t1, result0;
      result = $.$get$Element_none();
      t1 = this.type.attack;
      result0 = t1 != null ? t1.element : result;
      t1 = this.prefix;
      if (t1 != null && t1.brand != result)
        result0 = t1.brand;
      t1 = this.suffix;
      return t1 != null && t1.brand != result ? t1.brand : result0;
    },
    get$strikeBonus: function() {
      var t1, result;
      t1 = this.prefix;
      result = t1 != null ? t1.strikeBonus : 0;
      t1 = this.suffix;
      return t1 != null ? result + t1.strikeBonus : result;
    },
    get$damageScale: function() {
      var t1, result;
      t1 = this.prefix;
      result = t1 != null ? t1.damageScale : 1;
      t1 = this.suffix;
      return t1 != null ? result * t1.damageScale : result;
    },
    get$damageBonus: function() {
      var t1, result;
      t1 = this.prefix;
      result = t1 != null ? t1.damageBonus : 0;
      t1 = this.suffix;
      return t1 != null ? result + t1.damageBonus : result;
    },
    get$armorModifier: function() {
      var t1, result;
      t1 = this.prefix;
      result = t1 != null ? t1.armor : 0;
      t1 = this.suffix;
      return t1 != null ? result + t1.armor : result;
    },
    get$nounText: function() {
      var $name, t1, t2, text, quantity;
      $name = this.type.quantifiableName;
      t1 = this.prefix;
      if (t1 != null)
        $name = t1.displayName + " " + H.S($name);
      t1 = this.suffix;
      if (t1 != null)
        $name = H.S($name) + " " + t1.displayName;
      t1 = this._count;
      t2 = t1 === 1;
      if (t2)
        if (J.getInterceptor$s($name).startsWith$1($name, "(a) ")) {
          text = C.JSString_methods.substring$1($name, 4);
          quantity = "a";
        } else {
          if (0 >= $name.length)
            return H.ioore($name, 0);
          quantity = C.JSString_methods.contains$1("aeiouAEIOU", $name[0]) ? "an" : "a";
          text = $name;
        }
      else {
        quantity = J.toString$0$(t1);
        text = $name;
      }
      return quantity + " " + H.S(O.Log__categorize(text, true, t2));
    },
    get$pronoun: function() {
      return C.Pronoun_it_it_its;
    },
    get$price: function() {
      var price, t1, t2, affixScale, t3, t4, t5;
      price = this.type.price;
      price.toString;
      t1 = this.prefix;
      t2 = t1 != null;
      affixScale = t2 && this.suffix != null ? 1.5 : 1;
      if (t2) {
        t3 = t1.priceScale;
        if (typeof price !== "number")
          return price.$mul();
        price *= t3 * affixScale;
      }
      t3 = this.suffix;
      t4 = t3 != null;
      if (t4) {
        t5 = t3.priceScale;
        if (typeof price !== "number")
          return price.$mul();
        price *= t5 * affixScale;
      }
      if (t2) {
        t1 = t1.priceBonus;
        if (typeof price !== "number")
          return price.$add();
        price += t1 * affixScale;
      }
      if (t4) {
        t1 = t3.priceBonus;
        if (typeof price !== "number")
          return price.$add();
        price += t1 * affixScale;
      }
      return J.ceil$0$n(price);
    },
    get$weight: function() {
      var result, t1;
      result = this.type.weight;
      t1 = this.prefix;
      if (t1 != null)
        result += t1.weightBonus;
      t1 = this.suffix;
      if (t1 != null)
        result += t1.weightBonus;
      return Math.max(0, result);
    },
    get$heft: function() {
      var result, t1;
      result = this.type.heft;
      t1 = this.prefix;
      if (t1 != null)
        result *= t1.heftScale;
      t1 = this.suffix;
      return C.JSNumber_methods.round$0(t1 != null ? result * t1.heftScale : result);
    },
    resistance$1: function(element) {
      var t1, resistance;
      t1 = this.prefix;
      resistance = t1 != null ? t1.resistance$1(element) : 0;
      t1 = this.suffix;
      return t1 != null ? resistance + t1.resistance$1(element) : resistance;
    },
    compareTo$1: function(_, other) {
      var t1, t2;
      H.interceptedTypeCheck(other, "$isItem");
      t1 = this.type.sortIndex;
      t2 = other.type.sortIndex;
      if (t1 !== t2)
        return C.JSInt_methods.compareTo$1(t1, t2);
      t1 = this._count;
      t2 = other._count;
      if (t1 != t2)
        return J.compareTo$1$ns(t2, t1);
      return 0;
    },
    clone$1: function(_, count) {
      var t1 = count == null ? this._count : count;
      return new R.Item(this.type, this.prefix, this.suffix, t1);
    },
    clone$0: function($receiver) {
      return this.clone$1($receiver, null);
    },
    canStack$1: function(item) {
      if (this.type != item.type)
        return false;
      if (this.prefix != null || item.prefix != null)
        return false;
      if (this.suffix != null || item.suffix != null)
        return false;
      return true;
    },
    stack$1: function(item) {
      var t1, t2, total;
      if (!this.canStack$1(item))
        return;
      t1 = this._count;
      t2 = item._count;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      total = t1 + t2;
      t1 = this.type.maxStack;
      if (total <= t1) {
        this._count = total;
        item._count = 0;
      } else {
        this._count = t1;
        item._count = total - t1;
      }
    },
    splitStack$1: function(count) {
      var t1 = this._count;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof count !== "number")
        return H.iae(count);
      this._count = t1 - count;
      return this.clone$1(0, count);
    },
    toString$0: function(_) {
      return this.get$nounText();
    },
    $isComparable: 1,
    $asComparable: function() {
      return [R.Item];
    },
    $isNoun: 1
  };
  L.Drop.prototype = {};
  L.ItemUse.prototype = {};
  L.Toss.prototype = {};
  L.ItemType.prototype = {
    get$name: function(_) {
      return O.Log__categorize(this.quantifiableName, false, true);
    },
    toString$0: function(_) {
      return O.Log__categorize(this.quantifiableName, false, true);
    },
    get$depth: function() {
      return this.depth;
    }
  };
  O.Shop.prototype = {
    create$0: function() {
      var inventory = O.Inventory$(new O.ItemLocation(this.name, "All sold out!"), 26, null);
      this.update$1(0, inventory);
      return inventory;
    },
    update$1: function(_, inventory) {
      var t1, remainCount, t2, max, t3, item, count, tries, tries0, i, t4, t5;
      t1 = $.$get$rng();
      remainCount = C.JSNumber_methods.toInt$0(t1.float$2(0, 5.2, 10.4));
      for (t2 = inventory._items; max = t2.length, max > remainCount;) {
        t3 = t1._random.nextInt$1(max - 0);
        if (t3 < 0 || t3 >= t2.length)
          return H.ioore(t2, t3);
        item = t2[t3];
        C.JSArray_methods.removeAt$1(t2, t3);
        if (inventory._lastUnequipped == item)
          inventory._lastUnequipped = null;
      }
      count = C.JSNumber_methods.toInt$0(t1.float$2(0, 7.8, 18.2));
      t1 = this._shop$_drop;
      tries = 0;
      while (true) {
        if (t2.length < count) {
          tries0 = tries + 1;
          t3 = tries < 100;
          tries = tries0;
        } else
          t3 = false;
        if (!t3)
          break;
        t1.dropItem$2(1, inventory.get$tryAdd());
        for (i = 1; t3 = t2.length, i < t3; ++i) {
          t4 = i - 1;
          if (t4 < 0)
            return H.ioore(t2, t4);
          t5 = t2[t4];
          if (i < 0)
            return H.ioore(t2, i);
          t3 = t2[i];
          if (t5.type == t3.type && t5.prefix == t3.prefix && t5.suffix == t3.suffix) {
            C.JSArray_methods.removeAt$1(t2, i);
            if (inventory._lastUnequipped == t3)
              inventory._lastUnequipped = null;
            i = t4;
          }
        }
      }
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  B.BreedRef.prototype = {};
  B.Breed.prototype = {
    get$name: function(_) {
      return O.Log__categorize(this._breed$_name, false, true);
    },
    get$experience: function() {
      var totalDodge, t1, t2, _i, t3, attackTotal, attack, t4, moveTotal, moveRateTotal, move, t5, scale;
      totalDodge = this.dodge;
      for (t1 = this.defenses, t2 = t1.length, _i = 0; _i < t2; ++_i)
        totalDodge += t1[_i].amount;
      t1 = 6 + this.speed;
      if (t1 < 0 || t1 >= 13)
        return H.ioore(C.List_mC8, t1);
      t1 = C.List_mC8[t1];
      for (t2 = this.attacks, t3 = t2.length, attackTotal = 0, _i = 0; _i < t3; ++_i) {
        attack = t2[_i];
        attackTotal += attack.damage * attack.element.experience;
      }
      for (t2 = this.moves, t4 = t2.length, moveTotal = 0, moveRateTotal = 0, _i = 0; _i < t2.length; t2.length === t4 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        move = t2[_i];
        t5 = move.rate;
        moveTotal += move.get$experience() / t5;
        moveRateTotal += 1 / t5;
      }
      t2 = this.flags;
      scale = t2.berzerk ? 1.1 : 1;
      if (t2.cowardly)
        scale *= 0.9;
      if (t2.fearless)
        scale *= 1.05;
      if (t2.immobile)
        scale *= 0.7;
      if (t2.protective)
        scale *= 1.1;
      return C.JSDouble_methods.ceil$0(this.maxHealth * (1 + totalDodge / 100) * t1 * (attackTotal / t3 * (1 - moveRateTotal) + moveTotal) * scale * K.lerpDouble(this.meander, 0, 100, 1, 0.7) / 40);
    },
    spawn$3: function(game, pos, $parent) {
      var generation = $parent != null ? $parent.generation + 1 : 1;
      return B.Monster$(game, this, pos.x, pos.y, generation);
    },
    spawn$2: function(game, pos) {
      return this.spawn$3(game, pos, null);
    },
    spawnAll$0: function() {
      var breeds, count, i, t1;
      breeds = H.setRuntimeTypeInfo([], [B.Breed]);
      count = $.$get$rng().inclusive$2(this.countMin, this.countMax);
      for (i = 0; i < count; ++i)
        C.JSArray_methods.add$1(breeds, this);
      t1 = this.minions;
      if (t1 != null)
        t1.spawnBreed$2(C.JSNumber_methods.floor$0(this.depth * 0.9), C.JSArray_methods.get$add(breeds));
      return breeds;
    },
    toString$0: function(_) {
      return O.Log__categorize(this._breed$_name, false, true);
    },
    get$depth: function() {
      return this.depth;
    }
  };
  B.SpawnLocation.prototype = {
    toString$0: function(_) {
      return this._breed$_name;
    }
  };
  B.Spawn.prototype = {};
  B.BreedFlags.prototype = {
    toString$0: function(_) {
      var names = [];
      if (this.berzerk)
        names.push("berzerk");
      if (this.cowardly)
        names.push("cowardly");
      if (this.fearless)
        names.push("fearless");
      if (this.immobile)
        names.push("immobile");
      if (this.protective)
        names.push("protective");
      if (this.unique)
        names.push("unique");
      return C.JSArray_methods.join$1(names, " ");
    }
  };
  B.Monster.prototype = {
    get$motility: function() {
      return this._breed.motility;
    },
    get$appearance: function(_) {
      return this._breed.appearance;
    },
    get$nounText: function() {
      return "the " + H.S(O.Log__categorize(this._breed._breed$_name, false, true));
    },
    get$pronoun: function() {
      return this._breed.pronoun;
    },
    get$maxHealth: function() {
      return this._breed.maxHealth;
    },
    get$armor: function() {
      return 0;
    },
    get$emanationLevel: function() {
      return this._breed.emanationLevel;
    },
    get$sightReliance: function() {
      var t1, t2, senses;
      t1 = this._breed;
      t2 = t1.vision;
      senses = t2 + t1.hearing;
      if (senses === 0)
        return 0;
      return t2 / senses;
    },
    Monster$5: function(game, _breed, x, y, generation) {
      var t1, t2, t3, _i;
      this._health = H.intTypeCheck(C.JSInt_methods.clamp$2(this._breed.maxHealth, 0, this.get$maxHealth()));
      t1 = new M.AsleepState();
      this._monster$_state = t1;
      t1._monster = this;
      t1 = $.$get$rng().range$2(60, 200);
      this._frightenThreshold = t1;
      t2 = this._breed;
      if (t2.flags.cowardly)
        this._frightenThreshold = t1 * 0.7;
      for (t1 = t2.moves, t2 = t1.length, t3 = this._recharges, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t3.$indexSet(0, t1[_i], 0);
    },
    useMove$1: function(move) {
      var t1, t2, t3;
      t1 = this._recharges;
      t2 = t1.$index(0, move);
      t3 = move.rate;
      t3 = $.$get$rng().float$2(0, t3, t3 * 1.3);
      if (typeof t2 !== "number")
        return t2.$add();
      t1.$indexSet(0, move, t2 + t3);
    },
    canView$1: function(target) {
      var t1, t2, step, t3, t4;
      for (t1 = G._LineIterator$(this._pos, target), t2 = this.game; t1.moveNext$0(), true;) {
        step = t1._line$_current;
        if (J.$eq$(step, target))
          return true;
        t3 = t2._stage.tiles;
        t4 = t3._elements;
        t3 = step.y * t3.bounds.size.x + step.x;
        if (t3 < 0 || t3 >= t4.length)
          return H.ioore(t4, t3);
        t3 = t4[t3];
        t3.toString;
        t4 = $.$get$Motility_fly();
        if ((t3.type.motility._bitMask & t4._bitMask) === 0)
          return false;
      }
      throw H.wrapException("unreachable");
    },
    canTarget$1: function(target) {
      var t1, t2, step, t3, t4, t5, t6, t7;
      for (t1 = G._LineIterator$(this._pos, target), t2 = this.game; t1.moveNext$0(), true;) {
        step = t1._line$_current;
        if (J.$eq$(step, target))
          return true;
        t3 = t2._stage;
        t4 = t3._actorsByTile;
        t5 = t4._elements;
        t6 = step.y;
        t7 = step.x;
        t4 = t6 * t4.bounds.size.x + t7;
        if (t4 < 0 || t4 >= t5.length)
          return H.ioore(t5, t4);
        if (t5[t4] != null)
          return false;
        t3 = t3.tiles;
        t4 = t3._elements;
        t7 = t6 * t3.bounds.size.x + t7;
        if (t7 < 0 || t7 >= t4.length)
          return H.ioore(t4, t7);
        t7 = t4[t7];
        t7.toString;
        t4 = $.$get$Motility_fly();
        if ((t7.type.motility._bitMask & t4._bitMask) === 0)
          return false;
      }
      throw H.wrapException("unreachable");
    },
    get$baseSpeed: function() {
      return 6 + this._breed.speed;
    },
    get$baseDodge: function() {
      return this._breed.dodge;
    },
    onGetDefenses$0: function() {
      return this._breed.defenses;
    },
    onGetAction$0: function() {
      var t1, t2, t3, _i, move, t4, awareness, fearDecay, notice;
      for (t1 = this._breed.moves, t2 = t1.length, t3 = this._recharges, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        move = t1[_i];
        t4 = t3.$index(0, move);
        if (typeof t4 !== "number")
          return t4.$sub();
        t3.$indexSet(0, move, Math.max(0, t4 - 1));
      }
      awareness = 0 + this._seeHero$0() + this._hearHero$0();
      t1 = this._alertness * 0.75 + awareness * 0.2;
      this._alertness = t1;
      this._alertness = C.JSNumber_methods.clamp$2(t1, 0, 1);
      t1 = this.game;
      fearDecay = 5 + this._pos.$sub(0, t1.hero._pos).get$kingLength();
      t2 = t1._stage;
      t3 = this._pos;
      t3 = t2.tiles.$index(0, t3);
      if (!(!t3._isOccluded && t3.illumination - t3._fallOff > 0))
        fearDecay = 5 + fearDecay * 2;
      t2 = this._health;
      if (typeof t2 !== "number")
        return H.iae(t2);
      this._modifyFear$1(-(2 + fearDecay * t2 / this._breed.maxHealth));
      this._fear = C.JSNumber_methods.clamp$2(this._fear, 0, this._frightenThreshold);
      notice = Math.max(awareness, this._alertness);
      E.Debug_monsterStat(this, "aware", awareness, null);
      E.Debug_monsterStat(this, "alert", this._alertness, null);
      E.Debug_monsterStat(this, "notice", notice, null);
      t2 = this._fear;
      t3 = this._frightenThreshold;
      if (typeof t3 !== "number")
        return H.iae(t3);
      E.Debug_monsterStat(this, "fear", t2 / t3, null);
      t2 = J.getInterceptor$(this._monster$_state);
      if (!!t2.$isAsleepState) {
        t2 = this._fear;
        t3 = this._frightenThreshold;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (t2 > t3) {
          this.log$2("{1} is afraid!", this);
          C.JSArray_methods.add$1(t1._events, new D.Event0(C.EventType_frighten, this, null, null, null, null));
          this._resetCharges$0();
          t1 = new M.AfraidState();
          this._monster$_state = t1;
          t1._monster = this;
        } else {
          t2 = $.$get$rng();
          t3 = this._awakenPercent$1(notice);
          if (t2.range$1(100) < t3) {
            t2 = t1._stage;
            t3 = this._pos;
            t3 = t2.tiles.$index(0, t3);
            if (!t3._isOccluded && t3.illumination - t3._fallOff > 0)
              this.log$2("{1} wakes up!", this);
            else
              this.log$1("Something stirs in the darkness.");
            C.JSArray_methods.add$1(t1._events, new D.Event0(C.EventType_awaken, this, null, null, null, null));
            this._alertness = 1;
            this._resetCharges$0();
            t1 = new M.AwakeState();
            this._monster$_state = t1;
            t1._monster = this;
          }
        }
      } else if (!!t2.$isAwakeState) {
        t2 = this._fear;
        t3 = this._frightenThreshold;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (t2 > t3) {
          this.log$2("{1} is afraid!", this);
          C.JSArray_methods.add$1(t1._events, new D.Event0(C.EventType_frighten, this, null, null, null, null));
          t1 = new M.AfraidState();
          this._monster$_state = t1;
          t1._monster = this;
        } else if (notice < 0.01) {
          t1 = t1._stage;
          t2 = this._pos;
          t2 = t1.tiles.$index(0, t2);
          if (!t2._isOccluded && t2.illumination - t2._fallOff > 0)
            this.log$2("{1} falls asleep!", this);
          this._alertness = 0;
          t1 = new M.AsleepState();
          this._monster$_state = t1;
          t1._monster = this;
        }
      } else if (!!t2.$isAfraidState)
        if (this._fear <= 0) {
          this.log$2("{1} grows courageous!", this);
          t1 = new M.AwakeState();
          this._monster$_state = t1;
          t1._monster = this;
        }
      return this._monster$_state.getAction$0();
    },
    _awakenPercent$1: function(notice) {
      var normal;
      if (notice < 0.1)
        return 0;
      if (notice > 0.8)
        return 100;
      normal = K.lerpDouble(notice, 0.1, 0.8, 0, 1);
      return C.JSNumber_methods.round$0(K.lerpDouble(normal * normal * normal, 0, 1, 5, 100));
    },
    _seeHero$0: function() {
      var t1, heroPos, illumination, distance;
      if (this._breed.vision === 0) {
        E.Debug_monsterStat(this, "see", 0, "sightless");
        return 0;
      }
      t1 = this.game;
      heroPos = t1.hero._pos;
      if (!this.canView$1(heroPos)) {
        E.Debug_monsterStat(this, "see", 0, "out of sight");
        return 0;
      }
      illumination = t1._stage.tiles.$index(0, heroPos).illumination / 255;
      if (illumination === 0) {
        E.Debug_monsterStat(this, "see", 0, "hero in dark");
        return 0;
      }
      distance = heroPos.$sub(0, this._pos).get$kingLength();
      t1 = this._breed.vision;
      if (distance >= t1) {
        E.Debug_monsterStat(this, "see", 0, "too far");
        return 0;
      }
      t1 = illumination * ((t1 - distance) / t1);
      E.Debug_monsterStat(this, "see", t1, null);
      return t1;
    },
    _hearHero$0: function() {
      var t1, t2, t3, volume;
      if (this._breed.hearing === 0) {
        E.Debug_monsterStat(this, "hear", 0, "deaf");
        return 0;
      }
      t1 = this.game;
      t2 = t1._stage;
      t3 = this._pos;
      t2 = t2._sound;
      t3 = t2._volume$1(t2._heroAuditoryDistance$1(t3));
      t1 = t1.hero._lastNoise;
      volume = t3 * t1 * this._breed.hearing / 10;
      E.Debug_monsterStat(this, "hear", volume, "noise " + H.S(t1) + ", volume " + H.S(volume));
      return volume;
    },
    _modifyFear$1: function(offset) {
      var t1 = this._health;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 <= 0)
        return;
      t1 = this._breed.flags;
      if (t1.fearless)
        return;
      if (t1.immobile)
        return;
      this._fear = Math.max(0, this._fear + offset);
    },
    onCreateMeleeHits$1: function(defender) {
      var t1, t2;
      t1 = $.$get$rng();
      t2 = this._breed.attacks;
      t1.toString;
      H.assertSubtype(t2, "$isList", [U.Attack], "$asList");
      t1 = t1.range$1(t2.length);
      if (t1 < 0 || t1 >= t2.length)
        return H.ioore(t2, t1);
      return H.setRuntimeTypeInfo([new U.Hit(t2[t1], 1, 1, $.$get$Element_none(), 1)], [U.Hit]);
    },
    onGetResistance$1: function(element) {
      return 0;
    },
    onGiveDamage$3: function(action, defender, damage) {
      var t1, fear;
      t1 = this.game;
      fear = 100 * damage / t1.hero.save.fortitude.get$maxHealth();
      this._modifyFear$1(-fear);
      E.Debug_monsterReason(this, "fear", "hit for " + damage + "/" + t1.hero.save.fortitude.get$maxHealth() + " decrease by " + H.S(fear));
      this._updateWitnesses$1(new B.Monster_onGiveDamage_closure(action, damage));
    },
    _viewHeroDamage$2: function(action, damage) {
      var fear;
      if (this._monster$_state instanceof M.AsleepState)
        return;
      fear = 50 * damage / this._breed.maxHealth;
      this._modifyFear$1(-fear);
      E.Debug_monsterReason(this, "fear", "witness " + damage + "/" + this._breed.maxHealth + " decrease by " + H.S(fear));
    },
    onTakeDamage$3: function(action, attacker, damage) {
      var t1, fear, t2, moves;
      this._alertness = 1;
      t1 = this._breed;
      fear = 100 * damage / t1.maxHealth;
      if (t1.flags.berzerk)
        fear *= -3;
      this._modifyFear$1(fear);
      E.Debug_monsterReason(this, "fear", "hit for " + damage + "/" + this._breed.maxHealth + " increases by " + H.S(fear));
      this._updateWitnesses$1(new B.Monster_onTakeDamage_closure(this, action, damage));
      t1 = this._breed.moves;
      t2 = H.getTypeArgumentByIndex(t1, 0);
      moves = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new B.Monster_onTakeDamage_closure0(this, damage), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
      t1 = moves.length;
      if (t1 !== 0) {
        t2 = $.$get$rng();
        t2.toString;
        H.assertSubtype(moves, "$isList", [O.Move], "$asList");
        t1 = t2.range$1(t1);
        if (t1 < 0 || t1 >= moves.length)
          return H.ioore(moves, t1);
        t1 = moves[t1];
        t1.toString;
        this.useMove$1(t1);
        action.addAction$2(t1.onGetAction$1(this), this);
      }
    },
    _viewMonsterDamage$3: function(action, monster, damage) {
      var t1, fear, t2;
      if (this._monster$_state instanceof M.AsleepState)
        return;
      t1 = this._breed;
      fear = 50 * damage / t1.maxHealth;
      t2 = t1.flags;
      if (t2.protective && monster._breed == t1)
        fear *= -2;
      else if (t2.berzerk)
        fear *= -1;
      this._modifyFear$1(fear);
      E.Debug_monsterReason(this, "fear", "witness " + damage + "/" + this._breed.maxHealth + " increase by " + H.S(fear));
    },
    onDied$1: function(attackNoun) {
      var t1, t2, t3, t4, items, _i, index;
      t1 = this.game;
      t2 = t1._stage;
      t3 = this._pos;
      t4 = this._breed;
      items = t2.placeDrops$3(t3, t4.motility, t4.drop);
      for (t2 = items.length, _i = 0; _i < items.length; items.length === t2 || (0, H.throwConcurrentModificationError)(items), ++_i)
        this.log$3("{1} drop[s] {2}.", this, items[_i]);
      t1 = t1._stage;
      t2 = t1._actors;
      index = C.JSArray_methods.indexOf$1(t2, this);
      t3 = t1._currentActorIndex;
      if (t3 > index)
        t1._currentActorIndex = t3 - 1;
      C.JSArray_methods.removeAt$1(t2, index);
      if (t1._currentActorIndex >= t2.length)
        t1._currentActorIndex = 0;
      t1._actorsByTile.$indexSet(0, this._pos, null);
    },
    changePosition$2: function(from, to) {
      var t1, t2;
      this.super$Actor$changePosition(from, to);
      t1 = this.game;
      t2 = t1._stage.tiles.$index(0, from);
      if (!(!t2._isOccluded && t2.illumination - t2._fallOff > 0)) {
        t2 = t1._stage.tiles.$index(0, to);
        t2 = !t2._isOccluded && t2.illumination - t2._fallOff > 0;
      } else
        t2 = true;
      if (t2) {
        t2 = t1.hero;
        if (!(t2._behavior instanceof X.ActionBehavior))
          t2._behavior = null;
      }
      t2 = t1._stage.tiles.$index(0, from);
      if (!(!t2._isOccluded && t2.illumination - t2._fallOff > 0)) {
        t2 = t1._stage.tiles.$index(0, to);
        t2 = !t2._isOccluded && t2.illumination - t2._fallOff > 0;
      } else
        t2 = false;
      if (t2)
        t1.hero.seeMonster$1(this);
    },
    _updateWitnesses$1: function(callback) {
      var t1, t2, _i, other, t3;
      H.functionTypeCheck(callback, {func: 1, args: [B.Monster]});
      for (t1 = this.game._stage._actors, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        other = t1[_i];
        if (other === this)
          continue;
        if (!(other instanceof B.Monster))
          continue;
        t3 = other._pos.$sub(0, this._pos);
        if (Math.max(Math.abs(t3.x), Math.abs(t3.y)) > 20)
          continue;
        if (other.canView$1(this._pos))
          callback.call$1(other);
      }
    },
    _resetCharges$0: function() {
      var t1, t2, t3, _i, move;
      for (t1 = this._breed.moves, t2 = t1.length, t3 = this._recharges, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        move = t1[_i];
        t3.$indexSet(0, move, $.$get$rng().float$1(0, move.rate / 2));
      }
    }
  };
  B.Monster_onGiveDamage_closure.prototype = {
    call$1: function(witness) {
      witness._viewHeroDamage$2(this.action, this.damage);
    },
    $signature: 34
  };
  B.Monster_onTakeDamage_closure.prototype = {
    call$1: function(witness) {
      witness._viewMonsterDamage$3(this.action, this.$this, this.damage);
    },
    $signature: 34
  };
  B.Monster_onTakeDamage_closure0.prototype = {
    call$1: function(move) {
      return H.interceptedTypeCheck(move, "$isMove").shouldUseOnDamage$2(this.$this, this.damage);
    },
    $signature: 28
  };
  K.MonsterPathfinder.prototype = {
    processStep$1: function(path) {
      var t1;
      if (this._nearest != null) {
        t1 = this.end;
        t1 = this.heuristic$2(path.pos, t1) < this.heuristic$2(this._nearest.pos, t1);
      } else
        t1 = true;
      if (t1)
        this._nearest = path;
      if (path.length >= this._monster_pathfinder$_monster._breed.tracking)
        return this._nearest.startDirection;
      return;
    },
    heuristic$2: function(pos, end) {
      var t1, t2, diagonal;
      t1 = end.$sub(0, pos);
      t2 = Math.abs(t1.x);
      t1 = Math.abs(t1.y);
      diagonal = Math.min(t2, t1);
      return (Math.max(t2, t1) - diagonal) * 10 + diagonal * 11;
    },
    stepCost$2: function(pos, tile) {
      var firstStep, t1, t2;
      if (tile.substance !== 0)
        return;
      firstStep = pos.$sub(0, this.start).get$kingLength() === 1;
      if (this.stage._actorsByTile.$index(0, pos) != null) {
        if (firstStep)
          return;
        return 60;
      }
      t1 = tile.type.motility;
      t2 = $.$get$Motility_door();
      if (J.$eq$(t1, t2))
        if ((this._monster_pathfinder$_monster._breed.motility._bitMask & t2._bitMask) !== 0)
          return 20;
        else if (firstStep)
          return;
        else
          return 80;
      t1 = this._monster_pathfinder$_monster._breed.motility;
      if ((tile.type.motility._bitMask & t1._bitMask) !== 0)
        return 10;
      return;
    },
    reachedGoal$1: function(path) {
      return path.startDirection;
    },
    unreachableGoal$0: function() {
      var t1 = this._nearest;
      if (t1 == null)
        return;
      return t1.startDirection;
    }
  };
  M.MonsterState.prototype = {
    get$pos: function() {
      return this._monster._pos;
    },
    _monster_states$_meander$1: function(dir) {
      var t1, meander, dirs, i, t2;
      t1 = this._monster;
      meander = t1._breed.meander;
      if (t1.blindness._turnsRemaining > 0 || t1.dazzle._turnsRemaining > 0)
        meander += C.JSNumber_methods.toInt$0(t1.get$sightReliance() * 50);
      else if (t1._pos.$add(0, dir).$eq(0, this._monster.game.hero._pos))
        meander = meander / 4 | 0;
      meander = Math.min(meander, 90);
      if (!($.$get$rng().range$1(100) < meander))
        return dir;
      if (dir === C.Direction_0_0)
        dirs = C.List_slV;
      else {
        dirs = H.setRuntimeTypeInfo([], [Z.Direction]);
        for (i = 0; i < 3; ++i) {
          C.JSArray_methods.add$1(dirs, dir.get$rotateLeft45());
          C.JSArray_methods.add$1(dirs, dir.get$rotateRight45());
        }
        for (i = 0; i < 2; ++i) {
          C.JSArray_methods.add$1(dirs, dir.get$rotateLeft90());
          C.JSArray_methods.add$1(dirs, dir.get$rotateRight90());
        }
        C.JSArray_methods.add$1(dirs, dir.get$rotateLeft90().get$rotateLeft45());
        C.JSArray_methods.add$1(dirs, dir.get$rotateRight90().get$rotateRight45());
      }
      t1 = H.getTypeArgumentByIndex(dirs, 0);
      dirs = P.List_List$from(new H.WhereIterable(dirs, H.functionTypeCheck(new M.MonsterState__meander_closure(this), {func: 1, ret: P.bool, args: [t1]}), [t1]), true, t1);
      t1 = dirs.length;
      if (t1 === 0)
        return dir;
      t2 = $.$get$rng();
      t2.toString;
      H.assertSubtype(dirs, "$isList", [Z.Direction], "$asList");
      t1 = t2.range$1(t1);
      if (t1 < 0 || t1 >= dirs.length)
        return H.ioore(dirs, t1);
      return dirs[t1];
    }
  };
  M.MonsterState__meander_closure.prototype = {
    call$1: function(dir) {
      var t1, here, t2;
      H.interceptedTypeCheck(dir, "$isDirection");
      t1 = this.$this;
      here = t1._monster._pos.$add(0, dir);
      t2 = t1._monster;
      if (!(t2.canOccupy$1(here) && t2.game._stage.tiles.$index(0, here).substance === 0))
        return false;
      t2 = t1._monster.game._stage._actorsByTile.$index(0, here);
      return t2 == null || t2 === t1._monster.game.hero;
    },
    $signature: 8
  };
  M.AsleepState.prototype = {
    getAction$0: function() {
      return new B.RestAction();
    }
  };
  M.AwakeState.prototype = {
    getAction$0: function() {
      var $escape, t1, t2, moves, toHero, t3, t4, rangedDamage, rangedAttacks, _i, move, meleeDamage, meleeAttacks, caution, meleeDir, rangedDir, walkDir;
      $escape = this._escapeSubstance$0();
      if ($escape !== C.Direction_0_0)
        return new B.WalkAction($escape);
      t1 = this._monster._breed.moves;
      t2 = H.getTypeArgumentByIndex(t1, 0);
      moves = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new M.AwakeState_getAction_closure(this), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
      t1 = moves.length;
      if (t1 !== 0) {
        t2 = $.$get$rng();
        t2.toString;
        H.assertSubtype(moves, "$isList", [O.Move], "$asList");
        t1 = t2.range$1(t1);
        if (t1 < 0 || t1 >= moves.length)
          return H.ioore(moves, t1);
        t1 = moves[t1];
        t2 = this._monster;
        t1.toString;
        t2.useMove$1(t1);
        return t1.onGetAction$1(t2);
      }
      t1 = this._monster;
      t2 = t1._breed;
      if (t2.flags.immobile) {
        toHero = t1.game.hero._pos.$sub(0, t1._pos);
        if (toHero.get$kingLength() !== 1)
          return new B.RestAction();
        return new B.WalkAction(toHero.get$nearestDirection());
      }
      t1.wantsToMelee = true;
      for (t3 = t2.moves, t4 = t3.length, rangedDamage = 0, rangedAttacks = 0, _i = 0; _i < t4; ++_i) {
        move = t3[_i];
        if (!move.$isRangedMove)
          continue;
        rangedDamage += move.attack.damage / move.rate;
        ++rangedAttacks;
      }
      if (rangedAttacks !== 0) {
        for (t3 = t2.attacks, t4 = t3.length, meleeDamage = 0, meleeAttacks = 0, _i = 0; _i < t4; ++_i) {
          meleeDamage += t3[_i].damage;
          ++meleeAttacks;
        }
        if (meleeAttacks > 0)
          meleeDamage /= meleeAttacks;
        rangedDamage /= rangedAttacks;
        t3 = t1._fear;
        t4 = t1._health;
        t2 = t2.maxHealth;
        if (typeof t4 !== "number")
          return t4.$div();
        caution = 100 * rangedDamage / (rangedDamage + meleeDamage) + t3 + 100 * (1 - t4 / t2);
        t1 = t1._pos.$sub(0, t1.game.hero._pos).$le(0, 1);
        t2 = this._monster;
        if (t1)
          t2.wantsToMelee = caution < 60;
        else
          t2.wantsToMelee = caution < 30;
      }
      meleeDir = this._findMeleePath$0();
      rangedDir = rangedAttacks > 0 ? this._findRangedPath$0() : null;
      if (this._monster.wantsToMelee)
        walkDir = meleeDir == null ? rangedDir : meleeDir;
      else
        walkDir = rangedDir == null ? meleeDir : rangedDir;
      return new B.WalkAction(this._monster_states$_meander$1(walkDir == null ? C.Direction_0_0 : walkDir));
    },
    _escapeSubstance$0: function() {
      var t1, t2;
      t1 = this._monster;
      t2 = t1.game._stage;
      t1 = t1._pos;
      if (t2.tiles.$index(0, t1).substance === 0)
        return C.Direction_0_0;
      t1 = this._monster;
      return N.MotilityFlow$(t1.game._stage, t1._pos, t1._breed.motility, null, true, null).directionToBestWhere$1(new M.AwakeState__escapeSubstance_closure(this));
    },
    _findRangedPath$0: function() {
      var _box_0, t1, t2, _i, move, isValidRangedPosition, bestDistance, best, dir, pos, t3, bestDistance0;
      _box_0 = {};
      _box_0.maxRange = 9999;
      for (t1 = this._monster._breed.moves, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        move = t1[_i];
        if (move.get$range() > 0 && move.get$range() < _box_0.maxRange)
          _box_0.maxRange = move.get$range();
      }
      isValidRangedPosition = new M.AwakeState__findRangedPath_isValidRangedPosition(_box_0, this);
      if (isValidRangedPosition.call$1(this._monster._pos)) {
        t1 = this._monster;
        bestDistance = t1._pos.$sub(0, t1.game.hero._pos).get$kingLength();
        best = C.Direction_0_0;
      } else {
        best = null;
        bestDistance = 0;
      }
      for (_i = 0; _i < 8; ++_i) {
        dir = C.List_slV[_i];
        pos = this._monster._pos.$add(0, dir);
        t1 = this._monster;
        if (t1.canOccupy$1(pos)) {
          t2 = t1.game._stage._actorsByTile;
          t3 = t2._elements;
          t2 = pos.y * t2.bounds.size.x + pos.x;
          if (t2 < 0 || t2 >= t3.length)
            return H.ioore(t3, t2);
          t2 = t3[t2] == null;
        } else
          t2 = false;
        if (t2) {
          t1 = t1.game._stage.tiles;
          t2 = t1._elements;
          t1 = pos.y * t1.bounds.size.x + pos.x;
          if (t1 < 0 || t1 >= t2.length)
            return H.ioore(t2, t1);
          t1 = t2[t1].substance === 0;
        } else
          t1 = false;
        if (!t1)
          continue;
        if (!isValidRangedPosition.call$1(pos))
          continue;
        t1 = pos.$sub(0, this._monster.game.hero._pos);
        bestDistance0 = Math.max(Math.abs(t1.x), Math.abs(t1.y));
        if (bestDistance0 > bestDistance) {
          bestDistance = bestDistance0;
          best = dir;
        }
      }
      if (best != null)
        return best;
      t1 = this._monster;
      dir = N.MotilityFlow$(t1.game._stage, t1._pos, t1._breed.motility, null, true, _box_0.maxRange).directionToBestWhere$1(isValidRangedPosition);
      if (dir !== C.Direction_0_0) {
        E.Debug_monsterLog(this._monster, "ranged position " + H.S(dir));
        return dir;
      }
      E.Debug_monsterLog(this._monster, "no good ranged position");
      return;
    },
    _findMeleePath$0: function() {
      var losDir, t1, t2;
      losDir = this._findLosWalkPath$0();
      if (losDir != null)
        return losDir;
      t1 = this._monster;
      t2 = t1.game._stage;
      return new K.MonsterPathfinder(t1, t2, t1._pos, t2.game.hero._pos).search$0(0);
    },
    _findLosWalkPath$0: function() {
      var t1, first, $length, pos, t2, t3, t4, t5, t6, t7, step;
      for (t1 = this._monster, t1 = G._LineIterator$(t1._pos, t1.game.hero._pos), first = null, $length = 1; t1.moveNext$0(), true;) {
        pos = t1._line$_current;
        if (first == null)
          first = pos;
        t2 = this._monster;
        t3 = t2.game._stage.tiles;
        t4 = t3._elements;
        t5 = pos.y;
        t6 = pos.x;
        t3 = t5 * t3.bounds.size.x + t6;
        if (t3 < 0 || t3 >= t4.length)
          return H.ioore(t4, t3);
        if (t4[t3].substance > 0)
          return;
        if (!t2.canOccupy$1(pos))
          return;
        t2 = this._monster;
        t3 = t2.game;
        t4 = t3._stage._actorsByTile;
        t7 = t4._elements;
        t6 = t5 * t4.bounds.size.x + t6;
        if (t6 < 0 || t6 >= t7.length)
          return H.ioore(t7, t6);
        t6 = t7[t6];
        if (t6 != null && !t6.$isHero)
          return;
        ++$length;
        if ($length >= t2._breed.tracking)
          return;
        if (J.$eq$(pos, t3.hero._pos))
          break;
      }
      step = first.$sub(0, this._monster._pos);
      t1 = step.y;
      if (t1 === -1) {
        t1 = step.x;
        if (t1 === -1)
          return C.Direction_m1_m1;
        else if (t1 === 0)
          return C.Direction_0_m1;
        else
          return C.Direction_1_m1;
      } else if (t1 === 0)
        if (step.x === -1)
          return C.Direction_m1_0;
        else
          return C.Direction_1_0;
      else {
        t1 = step.x;
        if (t1 === -1)
          return C.Direction_m1_1;
        else if (t1 === 0)
          return C.Direction_0_1;
        else
          return C.Direction_1_1;
      }
    },
    _hasLosFrom$1: function(from) {
      var t1, step, t2, t3, t4, t5, t6;
      for (t1 = G._LineIterator$(from, this._monster.game.hero._pos); t1.moveNext$0(), true;) {
        step = t1._line$_current;
        if (J.$eq$(step, this._monster.game.hero._pos))
          return true;
        t2 = this._monster.game._stage;
        t3 = t2.tiles;
        t4 = t3._elements;
        t5 = step.y;
        t6 = step.x;
        t3 = t5 * t3.bounds.size.x + t6;
        if (t3 < 0 || t3 >= t4.length)
          return H.ioore(t4, t3);
        t3 = t4[t3];
        t3.toString;
        t4 = $.$get$Motility_fly();
        if ((t3.type.motility._bitMask & t4._bitMask) === 0)
          return false;
        t2 = t2._actorsByTile;
        t3 = t2._elements;
        t6 = t5 * t2.bounds.size.x + t6;
        if (t6 < 0 || t6 >= t3.length)
          return H.ioore(t3, t6);
        if (t3[t6] != null && true)
          return false;
      }
      throw H.wrapException("unreachable");
    }
  };
  M.AwakeState_getAction_closure.prototype = {
    call$1: function(move) {
      var t1;
      H.interceptedTypeCheck(move, "$isMove");
      t1 = this.$this;
      return t1._monster._recharges.$index(0, move) === 0 && move.shouldUse$1(t1._monster);
    },
    $signature: 28
  };
  M.AwakeState__escapeSubstance_closure.prototype = {
    call$1: function(pos) {
      return this.$this._monster.game._stage.tiles.$index(0, pos).substance === 0;
    },
    $signature: 0
  };
  M.AwakeState__findRangedPath_isValidRangedPosition.prototype = {
    call$1: function(pos) {
      var t1, toHero, t2;
      t1 = this.$this;
      toHero = pos.$sub(0, t1._monster.game.hero._pos);
      if (toHero.$gt(0, this._box_0.maxRange))
        return false;
      if (toHero.get$kingLength() <= 2)
        return false;
      t2 = t1._monster.game._stage._actorsByTile.$index(0, pos);
      if (t2 != null && t2 !== t1._monster)
        return false;
      return t1._hasLosFrom$1(pos);
    },
    $signature: 0
  };
  M.AfraidState.prototype = {
    getAction$0: function() {
      var t1, t2, t3, dir, heroDistance, farther, state;
      t1 = this._monster;
      t2 = t1.game._stage;
      t1 = t1._pos;
      if (t2.tiles.$index(0, t1)._isOccluded)
        return new B.RestAction();
      t1 = this._monster;
      t2 = t1.game._stage;
      t3 = t1._pos;
      t1 = t1._breed;
      dir = N.MotilityFlow$(t2, t3, t1.motility, null, true, t1.tracking).directionToBestWhere$1(new M.AfraidState_getAction_closure(this));
      if (dir !== C.Direction_0_0) {
        E.Debug_monsterLog(this._monster, "fleeing " + H.S(dir) + " out of sight");
        return new B.WalkAction(this._monster_states$_meander$1(dir));
      }
      t1 = this._monster;
      heroDistance = t1._pos.$sub(0, t1.game.hero._pos).get$kingLength();
      t1 = this._monster._pos.get$neighbors();
      t2 = H.getTypeArgumentByIndex(t1, 0);
      farther = new H.WhereIterable(t1, H.functionTypeCheck(new M.AfraidState_getAction_closure0(this, heroDistance), {func: 1, ret: P.bool, args: [t2]}), [t2]);
      if (!farther.get$isEmpty(farther)) {
        t1 = $.$get$rng();
        t3 = [Z.Direction];
        t2 = H.assertSubtype(P.List_List$from(farther, true, t2), "$isList", t3, "$asList");
        t1.toString;
        H.assertSubtype(t2, "$isList", t3, "$asList");
        t1 = t1.range$1(t2.length);
        if (t1 < 0 || t1 >= t2.length)
          return H.ioore(t2, t1);
        dir = t2[t1];
        E.Debug_monsterLog(this._monster, "fleeing " + H.S(dir) + " away from hero");
        return new B.WalkAction(this._monster_states$_meander$1(dir));
      }
      t1 = this._monster;
      state = new M.AwakeState();
      t1._monster$_state = state;
      state._monster = t1;
      return state.getAction$0();
    }
  };
  M.AfraidState_getAction_closure.prototype = {
    call$1: function(pos) {
      return this.$this._monster.game._stage.tiles.$index(0, pos)._isOccluded;
    },
    $signature: 0
  };
  M.AfraidState_getAction_closure0.prototype = {
    call$1: function(here) {
      var t1;
      H.interceptedTypeCheck(here, "$isVec");
      t1 = this.$this;
      if (!t1._monster.willEnter$1(here))
        return false;
      return here.$sub(0, t1._monster.game.hero._pos).get$kingLength() > this.heroDistance;
    },
    $signature: 0
  };
  O.Move.prototype = {
    get$range: function() {
      return 0;
    },
    shouldUse$1: function(monster) {
      return true;
    },
    shouldUseOnDamage$2: function(monster, damage) {
      return false;
    }
  };
  O.RangedMove.prototype = {
    get$range: function() {
      return this.attack.range;
    }
  };
  B.BucketQueue.prototype = {
    add$2: function(_, value, cost) {
      var t1, t2, t3, t4, bucket;
      t1 = H.getTypeArgumentByIndex(this, 0);
      H.assertSubtypeOfRuntimeType(value, t1);
      this._bucket = H.intTypeCheck(Math.min(this._bucket, H.checkNum(cost)));
      t2 = this._buckets;
      t3 = t2.length;
      if (typeof cost !== "number")
        return cost.$add();
      t4 = cost + 1;
      if (t3 <= t4)
        C.JSArray_methods.set$length(t2, t4);
      if (cost < 0 || cost >= t2.length)
        return H.ioore(t2, cost);
      bucket = t2[cost];
      if (bucket == null) {
        bucket = P.ListQueue$(null, t1);
        C.JSArray_methods.$indexSet(t2, cost, bucket);
      }
      bucket._add$1(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(bucket, 0)));
    },
    removeNext$0: function() {
      var t1, t2, t3, t4;
      t1 = this._buckets;
      while (true) {
        t2 = this._bucket;
        t3 = t1.length;
        if (t2 < t3) {
          if (t2 < 0)
            return H.ioore(t1, t2);
          t4 = t1[t2];
          t4 = t4 == null || t4._head === t4._tail;
        } else
          t4 = false;
        if (!t4)
          break;
        this._bucket = t2 + 1;
      }
      if (t2 >= t3)
        return;
      if (t2 < 0)
        return H.ioore(t1, t2);
      return t1[t2].removeFirst$0();
    }
  };
  N.Flow.prototype = {
    Flow$3$maxDistance: function(stage, _start, maxDistance) {
      var t1, t2, width, height, t3, t4, left, $top, right, bottom, start;
      t1 = this._maxDistance;
      t2 = this.stage;
      if (t1 == null) {
        this._offset = new L.Vec(1, 1);
        t1 = t2.tiles.bounds.size;
        width = t1.x - 2;
        height = t1.y - 2;
      } else {
        t3 = this._flow$_start;
        t4 = t3.x;
        left = Math.max(1, t4 - t1);
        t3 = t3.y;
        $top = Math.max(1, t3 - t1);
        t2 = t2.tiles.bounds.size;
        right = Math.min(t2.x - 1, t4 + t1 + 1);
        bottom = Math.min(t2.y - 1, t3 + t1 + 1);
        this._offset = new L.Vec(left, $top);
        width = right - left;
        height = bottom - $top;
      }
      this.set$_costs(M.Array2D$(width, height, -2, P.int));
      start = this._flow$_start.$sub(0, this._offset);
      this._open.add$2(0, start, 0);
      this._costs.$indexSet(0, start, 0);
    },
    get$reachable: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, i;
        return function $async$get$reachable($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self._found, i = 0;
                case 3:
                  // for condition
                  // trivial condition
                  for (; i >= t1.length;)
                    if (!$async$self._processNext$0()) {
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                  $async$goto = 6;
                  return t1[i].$add(0, $async$self._offset);
                case 6:
                // after yield
                case 4:
                  // for update
                  ++i;
                  // goto for condition
                  $async$goto = 3;
                  break;
                case 5:
                // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, L.Vec);
    },
    bestWhere$1: function(predicate) {
      var results, t1, t2;
      results = this._findAllBestWhere$1(H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [L.Vec]}));
      t1 = results.length;
      if (t1 === 0)
        return;
      t2 = $.$get$rng();
      t2.toString;
      H.assertSubtype(results, "$isList", [L.Vec], "$asList");
      t1 = t2.range$1(t1);
      if (t1 < 0 || t1 >= results.length)
        return H.ioore(results, t1);
      return results[t1].$add(0, this._offset);
    },
    costAt$1: function(pos) {
      var t1, t2, t3, t4, distance;
      pos = pos.$sub(0, this._offset);
      if (!this._costs.bounds.contains$1(0, pos))
        return;
      t1 = pos.y;
      t2 = pos.x;
      while (true) {
        t3 = this._costs;
        t4 = t3._elements;
        t3 = t1 * t3.bounds.size.x + t2;
        if (t3 < 0 || t3 >= t4.length)
          return H.ioore(t4, t3);
        if (!(J.$eq$(t4[t3], -2) && this._processNext$0()))
          break;
      }
      distance = this._costs.$index(0, pos);
      if (distance === -2 || distance === -1)
        return;
      return distance;
    },
    directionToBestWhere$1: function(predicate) {
      var directions, t1, t2;
      directions = this.directionsToBestWhere$1(H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [L.Vec]}));
      t1 = directions.length;
      if (t1 === 0)
        return C.Direction_0_0;
      t2 = $.$get$rng();
      t2.toString;
      H.assertSubtype(directions, "$isList", [Z.Direction], "$asList");
      t1 = t2.range$1(t1);
      if (t1 < 0 || t1 >= directions.length)
        return H.ioore(directions, t1);
      return directions[t1];
    },
    directionsToBestWhere$1: function(predicate) {
      var goals = this._findAllBestWhere$1(H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [L.Vec]}));
      return this._directionsTo$1(goals);
    },
    _findAllBestWhere$1: function(predicate) {
      var goals, t1, lowestCost, i, pos, t2, t3, cost;
      H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [L.Vec]});
      goals = H.setRuntimeTypeInfo([], [L.Vec]);
      for (t1 = this._found, lowestCost = null, i = 0; true; ++i) {
        for (; i >= t1.length;)
          if (!this._processNext$0())
            return goals;
        pos = t1[i];
        if (!predicate.call$1(pos.$add(0, this._offset)))
          continue;
        t2 = this._costs;
        t3 = t2._elements;
        t2 = pos.y * t2.bounds.size.x + pos.x;
        if (t2 < 0 || t2 >= t3.length)
          return H.ioore(t3, t2);
        cost = t3[t2];
        if (lowestCost == null || cost === lowestCost)
          C.JSArray_methods.add$1(goals, pos);
        else
          break;
        lowestCost = cost;
      }
      return goals;
    },
    _directionsTo$1: function(goals) {
      var t1, walked, directions;
      t1 = L.Vec;
      H.assertSubtype(goals, "$isList", [t1], "$asList");
      walked = P.LinkedHashSet_LinkedHashSet(null, null, null, t1);
      directions = P.LinkedHashSet_LinkedHashSet(null, null, null, Z.Direction);
      C.JSArray_methods.forEach$1(goals, new N.Flow__directionsTo_walkBack(this, walked, directions));
      return directions.toList$0(0);
    },
    _processNext$0: function() {
      var start, t1;
      start = this._open.removeNext$0();
      if (start == null)
        return false;
      t1 = new N.Flow__processNext_processNeighbor(this, start, this._costs.$index(0, start));
      t1.call$2(C.Direction_0_m1, false);
      t1.call$2(C.Direction_0_1, false);
      t1.call$2(C.Direction_1_0, false);
      t1.call$2(C.Direction_m1_0, false);
      t1.call$2(C.Direction_m1_m1, true);
      t1.call$2(C.Direction_1_m1, true);
      t1.call$2(C.Direction_m1_1, true);
      t1.call$2(C.Direction_1_1, true);
      return true;
    },
    set$_costs: function(_costs) {
      this._costs = H.assertSubtype(_costs, "$isArray2D", [P.int], "$asArray2D");
    }
  };
  N.Flow__directionsTo_walkBack.prototype = {
    call$1: function(pos) {
      var t1, t2, t3, _i, dir, here, t4, t5, t6, t7;
      H.interceptedTypeCheck(pos, "$isVec");
      t1 = this.walked;
      if (t1.contains$1(0, pos))
        return;
      t1.add$1(0, pos);
      for (t1 = this.$this, t2 = t1._flow$_start, t3 = this.directions, _i = 0; _i < 8; ++_i) {
        dir = C.List_slV[_i];
        here = pos.$add(0, dir);
        if (!t1._costs.bounds.contains$1(0, here))
          continue;
        if (here.$eq(0, t2.$sub(0, t1._offset)))
          t3.add$1(0, dir.get$rotate180());
        else {
          t4 = t1._costs;
          t5 = t4._elements;
          t6 = here.y;
          t7 = here.x;
          t4 = t6 * t4.bounds.size.x + t7;
          if (t4 < 0 || t4 >= t5.length)
            return H.ioore(t5, t4);
          if (J.$ge$n(t5[t4], 0)) {
            t4 = t1._costs;
            t5 = t4._elements;
            t4 = t4.bounds.size.x;
            t7 = t6 * t4 + t7;
            t6 = t5.length;
            if (t7 < 0 || t7 >= t6)
              return H.ioore(t5, t7);
            t7 = t5[t7];
            t4 = pos.y * t4 + pos.x;
            if (t4 < 0 || t4 >= t6)
              return H.ioore(t5, t4);
            t4 = J.$lt$n(t7, t5[t4]);
          } else
            t4 = false;
          if (t4)
            this.call$1(here);
        }
      }
    },
    $signature: 11
  };
  N.Flow__processNext_processNeighbor.prototype = {
    call$2: function(dir, isDiagonal) {
      var here, t1, t2, t3, relative, total;
      here = this.start.$add(0, dir);
      t1 = this.$this;
      if (!t1._costs.bounds.contains$1(0, here))
        return;
      if (!J.$eq$(t1._costs.$index(0, here), -2))
        return;
      t2 = here.$add(0, t1._offset);
      t2 = t1.stage.tiles.$index(0, t2);
      t3 = this.parentCost;
      relative = t1.tileCost$4(t3, here.$add(0, t1._offset), t2, isDiagonal);
      t2 = t1._costs;
      if (relative == null)
        t2.$indexSet(0, here, -1);
      else {
        if (typeof t3 !== "number")
          return t3.$add();
        total = t3 + relative;
        t2.$indexSet(0, here, total);
        C.JSArray_methods.add$1(t1._found, here);
        t1._open.add$2(0, here, total);
      }
    },
    $signature: 98
  };
  N.MotilityFlow.prototype = {
    tileCost$4: function(parentCost, pos, tile, isDiagonal) {
      var t1;
      if ((tile.type.motility._bitMask & this._flow$_motility._bitMask) === 0)
        return;
      if (this._avoidSubstances && tile.substance > 0)
        return;
      if (this._avoidActors && this.stage._actorsByTile.$index(0, pos) != null)
        return;
      t1 = this._maxDistance;
      if (t1 != null) {
        if (typeof parentCost !== "number")
          return parentCost.$ge();
        t1 = parentCost >= t1;
      } else
        t1 = false;
      if (t1)
        return;
      return 1;
    }
  };
  B.Fov.prototype = {
    refresh$1: function(pos) {
      var t1, octant;
      t1 = this._fov$_stage;
      if (t1.game.hero.blindness._turnsRemaining > 0) {
        this._hideAll$0();
        return;
      }
      for (octant = 0; octant < 8; ++octant)
        this._refreshOctant$2(pos, octant);
      t1.setVisibility$3(pos, false, 0);
    },
    _hideAll$0: function() {
      var t1, t2;
      for (t1 = this._fov$_stage, t2 = X.RectIterator$(t1.tiles.bounds); t2.moveNext$0();)
        t1.setVisibility$3(new L.Vec(t2._x, t2._y), true, 0);
      t1.setVisibility$3(t1.game.hero._pos, false, 0);
    },
    _refreshOctant$2: function(start, octant) {
      var t1, rowInc, colInc, t2, bounds, t3, t4, t5, t6, fullShadow, row, pos, t7, row0, pastMaxDistance, col, t8, t9, distance, fallOff, normalized, projection;
      t1 = $.$get$Fov__octantCoordinates();
      if (octant >= 8)
        return H.ioore(t1, octant);
      t1 = t1[octant];
      rowInc = t1[0];
      colInc = t1[1];
      this.set$_shadows(H.setRuntimeTypeInfo([], [B._Shadow]));
      t1 = this._fov$_stage;
      t2 = t1.tiles;
      bounds = t2.bounds;
      for (t2 = t2._elements, t3 = bounds.size.x, t4 = t2.length, t5 = rowInc.x, t6 = rowInc.y, fullShadow = false, row = 1; true; row = row0) {
        pos = start.$add(0, new L.Vec(t5 * row, t6 * row));
        if (!bounds.contains$1(0, pos))
          break;
        for (t7 = row + 2, row0 = row + 1, pastMaxDistance = false, col = 0; col <= row; ++col) {
          if (fullShadow || pastMaxDistance)
            t1.setVisibility$3(pos, true, 255);
          else {
            t8 = start.$sub(0, pos);
            t9 = t8.x;
            t8 = t8.y;
            distance = Math.sqrt(t9 * t9 + t8 * t8);
            if (distance > 24) {
              pastMaxDistance = true;
              fallOff = 255;
            } else {
              normalized = distance / 24;
              fallOff = C.JSDouble_methods.toInt$0(normalized * normalized * 255);
            }
            projection = new B._Shadow(col / t7, (col + 1) / row0);
            t1.setVisibility$3(pos, this._isInShadow$1(projection), fallOff);
            t8 = pos.y * t3 + pos.x;
            if (t8 < 0 || t8 >= t4)
              return H.ioore(t2, t8);
            t8 = t2[t8];
            t8.toString;
            t9 = $.$get$Motility_fly();
            if ((t8.type.motility._bitMask & t9._bitMask) === 0)
              fullShadow = this._addShadow$1(projection);
          }
          pos = pos.$add(0, colInc);
          if (!bounds.contains$1(0, pos))
            break;
        }
      }
    },
    _isInShadow$1: function(projection) {
      var t1, t2, t3, t4, _i, shadow;
      for (t1 = this._shadows, t2 = t1.length, t3 = projection.start, t4 = projection.end, _i = 0; _i < t2; ++_i) {
        shadow = t1[_i];
        if (shadow.start <= t3 && shadow.end >= t4)
          return true;
      }
      return false;
    },
    _addShadow$1: function(shadow) {
      var t1, t2, t3, index, t4, t5, overlapsPrev;
      for (t1 = this._shadows, t2 = t1.length, t3 = shadow.start, index = 0; t4 = index < t2, t4; ++index)
        if (t1[index].start > t3)
          break;
      if (index > 0) {
        t5 = index - 1;
        if (t5 >= t2)
          return H.ioore(t1, t5);
        overlapsPrev = t1[t5].end > t3;
      } else
        overlapsPrev = false;
      if (t4 && t1[index].start < shadow.end)
        if (overlapsPrev) {
          t3 = index - 1;
          if (t3 < 0 || t3 >= t2)
            return H.ioore(t1, t3);
          t3 = t1[t3];
          t4 = t3.end;
          if (index >= t2)
            return H.ioore(t1, index);
          t3.end = Math.max(t4, t1[index].end);
          t1 = this._shadows;
          (t1 && C.JSArray_methods).removeAt$1(t1, index);
        } else {
          if (index >= t2)
            return H.ioore(t1, index);
          t1 = t1[index];
          t1.start = Math.min(t1.start, t3);
        }
      else if (overlapsPrev) {
        t3 = index - 1;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        t3 = t1[t3];
        t3.end = Math.max(t3.end, shadow.end);
      } else {
        t1.toString;
        H.assertSubtypeOfRuntimeType(shadow, H.getTypeArgumentByIndex(t1, 0));
        if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
          H.throwExpression(P.UnsupportedError$("insert"));
        if (index > t2)
          H.throwExpression(P.RangeError$value(index, null, null));
        t1.splice(index, 0, shadow);
      }
      t1 = this._shadows;
      t2 = t1.length;
      if (t2 === 1) {
        if (0 >= t2)
          return H.ioore(t1, 0);
        t1 = t1[0];
        t1 = t1.start === 0 && t1.end === 1;
      } else
        t1 = false;
      return t1;
    },
    set$_shadows: function(_shadows) {
      this._shadows = H.assertSubtype(_shadows, "$isList", [B._Shadow], "$asList");
    }
  };
  B._Shadow.prototype = {
    toString$0: function(_) {
      return "(" + H.S(this.start) + "-" + H.S(this.end) + ")";
    }
  };
  F.Lighting.prototype = {
    refresh$0: function() {
      if (this._floorLightDirty)
        this._lightFloor$0();
      if (this._actorLightDirty)
        this._lightActors$0();
      if (this._visibilityDirty)
        this._fov.refresh$1(this._lighting$_stage.game.hero._pos);
      if (this._floorLightDirty || this._actorLightDirty || this._visibilityDirty) {
        this._mergeLayers$0();
        this._lightWalls$0();
        this._updateExplored$0();
      }
      this._floorLightDirty = false;
      this._actorLightDirty = false;
      this._visibilityDirty = false;
    },
    _lightFloor$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, y, t12, t13, x, pos, t14, emanation, t15, itemEmanation;
      t1 = this._queue;
      C.JSArray_methods.set$length(t1._buckets, 0);
      for (t2 = this._lighting$_stage, t3 = t2.tiles, t4 = t3.bounds.size, t5 = t4.y, t4 = t4.x, t6 = this._floorLight, t7 = H.getTypeArgumentByIndex(t6, 0), t8 = t6._elements, t9 = t6.bounds.size.x, t2 = t2._itemsByTile, t3 = t3._elements, t10 = t3.length, t11 = [R.Item], y = 0; y < t5; ++y)
        for (t12 = y * t9, t13 = y * t4, x = 0; x < t4; ++x) {
          pos = new L.Vec(x, y);
          t14 = t13 + x;
          if (t14 < 0 || t14 >= t10)
            return H.ioore(t3, t14);
          t14 = t3[t14];
          emanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t14.type.emanation + t14._appliedEmanation, 0, 192));
          t15 = t2.$index(0, pos);
          if (t15 == null)
            t15 = new O.Inventory(C.ItemLocation_46y, H.setRuntimeTypeInfo([], t11), null);
          t15 = t15._items;
          t15 = new J.ArrayIterator(t15, t15.length, 0, [H.getTypeArgumentByIndex(t15, 0)]);
          itemEmanation = 0;
          for (; t15.moveNext$0();)
            itemEmanation = Math.max(itemEmanation, t15.__interceptors$_current.type.emanationLevel);
          emanation += F.Lighting_emanationForLevel(itemEmanation) / 2 | 0;
          if (t14.element.emanates && t14.substance > 0)
            emanation += F.Lighting_emanationForLevel(7);
          t14 = t12 + x;
          if (emanation > 0) {
            emanation = Math.min(emanation, 192);
            C.JSArray_methods.$indexSet(t8, t14, H.assertSubtypeOfRuntimeType(emanation, t7));
            t1.add$2(0, pos, 255 - emanation);
          } else
            C.JSArray_methods.$indexSet(t8, t14, H.assertSubtypeOfRuntimeType(0, t7));
        }
      this._process$2(t6, 21);
    },
    _lightActors$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, _i, actor, emanation, t8;
      t1 = this._actorLight;
      t2 = H.getTypeArgumentByIndex(t1, 0);
      t3 = t1._elements;
      C.JSArray_methods.fillRange$3(t3, 0, t3.length, H.assertSubtypeOfRuntimeType(0, t2));
      t4 = this._queue;
      C.JSArray_methods.set$length(t4._buckets, 0);
      for (t5 = this._lighting$_stage._actors, t6 = t5.length, t7 = t1.bounds.size.x, _i = 0; _i < t5.length; t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i) {
        actor = t5[_i];
        emanation = F.Lighting_emanationForLevel(actor.get$emanationLevel());
        if (emanation > 0) {
          t8 = actor._pos;
          H.assertSubtypeOfRuntimeType(emanation, t2);
          C.JSArray_methods.$indexSet(t3, t8.y * t7 + t8.x, emanation);
          t4.add$2(0, actor._pos, 255 - emanation);
        }
      }
      this._process$2(t1, 42);
    },
    _mergeLayers$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, y, t11, t12, t13, x, t14, t15, t16;
      for (t1 = this._lighting$_stage.tiles, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t4 = this._floorLight, t5 = t4._elements, t4 = t4.bounds.size.x, t6 = t5.length, t7 = this._actorLight, t8 = t7._elements, t7 = t7.bounds.size.x, t9 = t8.length, t1 = t1._elements, t10 = t1.length, y = 0; y < t3; ++y)
        for (t11 = y * t4, t12 = y * t7, t13 = y * t2, x = 0; x < t2; ++x) {
          t14 = t13 + x;
          if (t14 < 0 || t14 >= t10)
            return H.ioore(t1, t14);
          t14 = t1[t14];
          t14.toString;
          t15 = $.$get$Motility_fly();
          if ((t14.type.motility._bitMask & t15._bitMask) === 0)
            continue;
          t15 = t11 + x;
          if (t15 < 0 || t15 >= t6)
            return H.ioore(t5, t15);
          t15 = t5[t15];
          t16 = t12 + x;
          if (t16 < 0 || t16 >= t9)
            return H.ioore(t8, t16);
          t14.illumination = H.intTypeCheck(J.clamp$2$n(J.$add$ansx(t15, t8[t16]), 0, 255));
        }
    },
    _lightWalls$0: function() {
      var t1, t2, t3, t4, y, t5, x, _box_0, t6, t7, checkNeighbor, _i;
      for (t1 = this._lighting$_stage.tiles, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t1 = t1._elements, t4 = t1.length, y = 0; y < t3; ++y)
        for (t5 = y * t2, x = 0; x < t2; ++x) {
          _box_0 = {};
          t6 = t5 + x;
          if (t6 < 0 || t6 >= t4)
            return H.ioore(t1, t6);
          t6 = t1[t6];
          t6.toString;
          t7 = $.$get$Motility_fly();
          if ((t6.type.motility._bitMask & t7._bitMask) !== 0)
            continue;
          _box_0.illumination = 0;
          _box_0.openNeighbor = false;
          checkNeighbor = new F.Lighting__lightWalls_checkNeighbor(_box_0, this, x, y);
          for (_i = 0; _i < 4; ++_i)
            checkNeighbor.call$1(C.List_aAW[_i]);
          if (!_box_0.openNeighbor)
            for (_i = 0; _i < 4; ++_i)
              checkNeighbor.call$1(C.List_izR[_i]);
          t6.illumination = _box_0.illumination;
        }
    },
    _updateExplored$0: function() {
      var t1, t2, t3, y, x;
      for (t1 = this._lighting$_stage, t2 = t1.tiles.bounds.size, t3 = t2.y, t2 = t2.x, y = 0; y < t3; ++y)
        for (x = 0; x < t2; ++x)
          t1.exploreAt$2(x, y);
      t2 = t1.game.hero._pos;
      t1.exploreAt$3$force(t2.x, t2.y, true);
    },
    _process$2: function(tiles, attenuate) {
      var diagonalAttenuate, t1, t2, t3, t4, pos, t5;
      H.assertSubtype(tiles, "$isArray2D", [P.int], "$asArray2D");
      diagonalAttenuate = C.JSNumber_methods.ceil$0(attenuate * 1.5);
      for (t1 = tiles._elements, t2 = tiles.bounds.size.x, t3 = t1.length, t4 = this._queue; true;) {
        pos = t4.removeNext$0();
        if (pos == null)
          break;
        t5 = pos.y * t2 + pos.x;
        if (t5 < 0 || t5 >= t3)
          return H.ioore(t1, t5);
        t5 = new F.Lighting__process_checkNeighbor(this, pos, t1[t5], tiles, attenuate);
        t5.call$2(C.Direction_0_m1, attenuate);
        t5.call$2(C.Direction_0_1, attenuate);
        t5.call$2(C.Direction_1_0, attenuate);
        t5.call$2(C.Direction_m1_0, attenuate);
        t5.call$2(C.Direction_1_m1, diagonalAttenuate);
        t5.call$2(C.Direction_1_1, diagonalAttenuate);
        t5.call$2(C.Direction_m1_m1, diagonalAttenuate);
        t5.call$2(C.Direction_m1_1, diagonalAttenuate);
      }
    }
  };
  F.Lighting__lightWalls_checkNeighbor.prototype = {
    call$1: function(offset) {
      var neighborX, neighborY, t1, t2;
      neighborX = this.x + offset.x;
      neighborY = this.y + offset.y;
      if (neighborX < 0)
        return;
      t1 = this.$this._lighting$_stage.tiles;
      t2 = t1.bounds.size;
      if (neighborX >= t2.x)
        return;
      if (neighborY < 0)
        return;
      if (neighborY >= t2.y)
        return;
      t1 = t1.$get$2(neighborX, neighborY);
      if (t1._isOccluded)
        return;
      t1.toString;
      t2 = $.$get$Motility_fly();
      if ((t1.type.motility._bitMask & t2._bitMask) === 0)
        return;
      t2 = this._box_0;
      t2.openNeighbor = true;
      t2.illumination = Math.max(t2.illumination, t1.illumination);
    },
    $signature: 11
  };
  F.Lighting__process_checkNeighbor.prototype = {
    call$2: function(dir, attenuation) {
      var neighborPos, t1, t2, t3, illumination;
      neighborPos = this.pos.$add(0, dir);
      t1 = this.$this;
      t2 = t1._lighting$_stage.tiles;
      if (!t2.bounds.contains$1(0, neighborPos))
        return;
      t2 = t2.$index(0, neighborPos);
      t2.toString;
      t3 = $.$get$Motility_fly();
      if ((t2.type.motility._bitMask & t3._bitMask) === 0)
        return;
      t2 = this.parentLight;
      if (typeof t2 !== "number")
        return t2.$sub();
      illumination = t2 - attenuation;
      t2 = this.tiles;
      if (J.$ge$n(t2.$index(0, neighborPos), illumination))
        return;
      t2.$indexSet(0, neighborPos, illumination);
      if (illumination <= this.attenuate)
        return;
      t1._queue.add$2(0, neighborPos, 255 - illumination);
    },
    $signature: 99
  };
  Y.Path.prototype = {
    toString$0: function(_) {
      return H.S(this.startDirection) + " pos:" + H.S(this.pos) + " cost:" + this.cost;
    },
    get$pos: function() {
      return this.pos;
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  Y.Pathfinder.prototype = {
    search$0: function(_) {
      var paths, explored, t1, t2, path, result, t3, t4, t5, t6, t7, _i, dir, neighbor, t8, t9, cost;
      paths = new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, Y.Path]]), [Y.Path]);
      explored = P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec);
      t1 = this.start;
      t2 = this.end;
      paths.add$2(0, new Y.Path(C.Direction_0_0, t1, 0, 0), this.heuristic$2(t1, t2));
      for (; true;) {
        path = paths.removeNext$0();
        if (path == null)
          break;
        t1 = path.pos;
        if (J.$eq$(t1, t2))
          return this.reachedGoal$1(path);
        if (!explored.add$1(0, t1))
          continue;
        result = this.processStep$1(path);
        if (result != null)
          return result;
        for (t3 = path.length + 1, t4 = path.cost, t5 = path.startDirection, t6 = t5 === C.Direction_0_0, t7 = this.stage, _i = 0; _i < 8; ++_i) {
          dir = C.List_slV[_i];
          neighbor = t1.$add(0, dir);
          if (explored.contains$1(0, neighbor))
            continue;
          t8 = t7.tiles;
          t9 = t8.bounds;
          if (!t9.contains$1(0, neighbor))
            continue;
          t8 = t8._elements;
          t9 = neighbor.y * t9.size.x + neighbor.x;
          if (t9 < 0 || t9 >= t8.length)
            return H.ioore(t8, t9);
          cost = this.stepCost$2(neighbor, t8[t9]);
          if (cost == null)
            continue;
          t8 = t6 ? dir : t5;
          t9 = t4 + cost;
          paths.add$2(0, new Y.Path(t8, neighbor, t3, t9), t9 + this.heuristic$2(neighbor, t2));
        }
      }
      return this.unreachableGoal$0();
    },
    heuristic$2: function(pos, end) {
      return end.$sub(0, pos).get$kingLength();
    }
  };
  Z.Sound.prototype = {
    volumeBetween$2: function(from, to) {
      if (to.$sub(0, from).get$kingLength() > 16)
        return 0;
      return this._volume$1(new Z._SoundPathfinder(this._sound$_stage, from, to).search$0(0));
    },
    _heroAuditoryDistance$1: function(pos) {
      var t1;
      if (this._sound$_stage.game.hero._pos.$sub(0, pos).get$kingLength() > 16)
        return 16;
      this._refresh$0();
      t1 = this._sound$_flow.costAt$1(pos);
      return t1 == null ? 16 : t1;
    },
    _volume$1: function(auditoryDistance) {
      var volume;
      if (typeof auditoryDistance !== "number")
        return H.iae(auditoryDistance);
      volume = (16 - auditoryDistance) / 16;
      return volume * volume;
    },
    _refresh$0: function() {
      var t1, t2, t3;
      t1 = this._sound$_flow;
      if (t1 != null && J.$eq$(this._sound$_stage.game.hero._pos, t1._flow$_start))
        return;
      t1 = this._sound$_stage;
      t2 = t1.game.hero._pos;
      t3 = L.Vec;
      t3 = new Z._SoundFlow(t1, t2, null, new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]), [t3]), H.setRuntimeTypeInfo([], [t3]));
      t3.Flow$3$maxDistance(t1, t2, null);
      this._sound$_flow = t3;
    }
  };
  Z._SoundFlow.prototype = {
    tileCost$4: function(parentCost, pos, tile, isDiagonal) {
      var t1, t2;
      if (typeof parentCost !== "number")
        return parentCost.$ge();
      if (parentCost >= 16)
        return;
      t1 = pos.x;
      if (t1 < 1)
        return;
      t2 = this.stage.tiles.bounds.size;
      if (t1 >= t2.x - 1)
        return;
      t1 = pos.y;
      if (t1 < 1)
        return;
      if (t1 >= t2.y - 1)
        return;
      return Z._tileCost(tile);
    }
  };
  Z._SoundPathfinder.prototype = {
    processStep$1: function(path) {
      if (path.cost > 16)
        return 16;
      return;
    },
    stepCost$2: function(pos, tile) {
      return Z._tileCost(tile);
    },
    reachedGoal$1: function(path) {
      return path.cost;
    },
    unreachableGoal$0: function() {
      return 16;
    }
  };
  L.Stage.prototype = {
    get$width: function(_) {
      return this.tiles.bounds.size.x;
    },
    get$height: function(_) {
      return this.tiles.bounds.size.y;
    },
    $index: function(_, pos) {
      return this.tiles.$index(0, H.interceptedTypeCheck(pos, "$isVec"));
    },
    addActor$1: function(actor) {
      C.JSArray_methods.add$1(this._actors, actor);
      this._actorsByTile.$indexSet(0, actor._pos, actor);
    },
    placeDrops$3: function(pos, motility, drop) {
      var items = H.setRuntimeTypeInfo([], [R.Item]);
      drop.dropItem$2(this.game.depth, new L.Stage_placeDrops_closure(this, items, N.MotilityFlow$(this, pos, motility, false, null, null), pos));
      return items;
    },
    addItem$2: function(item, pos) {
      this._itemsByTile.putIfAbsent$2(0, pos, new L.Stage_addItem_closure()).tryAdd$1(item);
      if (item.type.emanationLevel > 0)
        this._lighting._floorLightDirty = true;
    },
    itemsAt$1: function(pos) {
      var t1 = this._itemsByTile.$index(0, pos);
      return t1 == null ? O.Inventory$(C.ItemLocation_46y, null, null) : t1;
    },
    removeItem$2: function(item, pos) {
      var t1, t2;
      t1 = this._itemsByTile;
      t2 = t1.$index(0, pos)._items;
      C.JSArray_methods.remove$1(t2, item);
      if (item.type.emanationLevel > 0)
        this._lighting._floorLightDirty = true;
      if (!new J.ArrayIterator(t2, t2.length, 0, [H.getTypeArgumentByIndex(t2, 0)]).moveNext$0())
        t1.remove$1(0, pos);
    },
    forEachItem$1: function(callback) {
      this._itemsByTile.forEach$1(0, new L.Stage_forEachItem_closure(H.functionTypeCheck(callback, {func: 1, args: [R.Item, L.Vec]})));
    },
    tileOpacityChanged$0: function() {
      var t1 = this._lighting;
      t1._floorLightDirty = true;
      t1._actorLightDirty = true;
      t1._visibilityDirty = true;
      this._sound._sound$_flow = null;
    },
    exploreAt$3$force: function(x, y, force) {
      var tile, t1;
      tile = this.tiles.$get$2(x, y);
      if (tile.updateExplored$1$force(force))
        if (!tile._isOccluded && tile.illumination - tile._fallOff > 0) {
          t1 = this._actorsByTile.$index(0, new L.Vec(x, y));
          if (t1 != null && !!t1.$isMonster)
            this.game.hero.seeMonster$1(t1);
        }
    },
    exploreAt$2: function(x, y) {
      return this.exploreAt$3$force(x, y, null);
    },
    setVisibility$3: function(pos, isOccluded, fallOff) {
      var tile, t1;
      tile = this.tiles.$index(0, pos);
      tile._isOccluded = isOccluded;
      tile._fallOff = fallOff;
      if (!isOccluded && tile.illumination - fallOff > 0) {
        t1 = this._actorsByTile.$index(0, pos);
        if (t1 != null && !!t1.$isMonster)
          this.game.hero.seeMonster$1(t1);
      }
    },
    findOpenTile$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, pos;
      for (t1 = this._actorsByTile, t2 = t1._elements, t1 = t1.bounds.size.x, t3 = t2.length, t4 = this.tiles, t5 = t4._elements, t4 = t4.bounds, t6 = t4.size, t7 = t6.x, t8 = t5.length, t4 = t4.pos, t9 = t4.x, t10 = t9 + t7; true;) {
        t11 = $.$get$rng();
        t11.toString;
        t12 = Math.min(t9, t10);
        t13 = Math.max(t9, t10);
        t12 = t11._random.nextInt$1(t13 - t12) + t12;
        t13 = t4.y;
        t14 = t13 + t6.y;
        t15 = Math.min(t13, t14);
        t14 = Math.max(t13, t14);
        t11 = t11._random.nextInt$1(t14 - t15) + t15;
        pos = new L.Vec(t12, t11);
        t13 = t11 * t7 + t12;
        if (t13 < 0 || t13 >= t8)
          return H.ioore(t5, t13);
        t13 = t5[t13].type;
        t13.toString;
        t14 = $.$get$Motility_walk();
        if ((t13.motility._bitMask & t14._bitMask) === 0)
          continue;
        t11 = t11 * t1 + t12;
        if (t11 < 0 || t11 >= t3)
          return H.ioore(t2, t11);
        if (t2[t11] != null)
          continue;
        return pos;
      }
    }
  };
  L.Stage_closure.prototype = {
    call$0: function() {
      return new Q.Tile($.$get$Element_none());
    },
    $signature: 100
  };
  L.Stage_placeDrops_closure.prototype = {
    call$1: function(item) {
      var t1, t2, itemPos, allowed, t3;
      C.JSArray_methods.add$1(this.items, item);
      t1 = this.flow;
      t2 = this.$this;
      itemPos = t1.bestWhere$1(new L.Stage_placeDrops__closure(t2));
      if (itemPos == null) {
        t1 = t1.get$reachable();
        t1.toString;
        t1 = H.TakeIterable_TakeIterable(t1, 10, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        allowed = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        t1 = allowed.length;
        if (t1 !== 0) {
          t3 = $.$get$rng();
          t3.toString;
          H.assertSubtype(allowed, "$isList", [L.Vec], "$asList");
          t1 = t3.range$1(t1);
          if (t1 < 0 || t1 >= allowed.length)
            return H.ioore(allowed, t1);
          itemPos = allowed[t1];
        } else
          itemPos = this.pos;
      }
      t2.addItem$2(item, itemPos);
    },
    $signature: 10
  };
  L.Stage_placeDrops__closure.prototype = {
    call$1: function(pos) {
      var t1;
      if ($.$get$rng().range$1(5) === 0)
        return true;
      t1 = this.$this;
      return t1._actorsByTile.$index(0, pos) == null && !t1._itemsByTile.containsKey$1(0, pos);
    },
    $signature: 0
  };
  L.Stage_addItem_closure.prototype = {
    call$0: function() {
      return O.Inventory$(C.ItemLocation_46y, null, null);
    },
    $signature: 101
  };
  L.Stage_forEachItem_closure.prototype = {
    call$2: function(pos, inventory) {
      var t1, t2;
      H.interceptedTypeCheck(pos, "$isVec");
      for (t1 = H.interceptedTypeCheck(inventory, "$isInventory")._items, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]), t2 = this.callback; t1.moveNext$0();)
        t2.call$2(t1.__interceptors$_current, pos);
    },
    $signature: 102
  };
  Q.Motility.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof Q.Motility)
        return this._bitMask === other._bitMask;
      return false;
    },
    $or: function(_, other) {
      return new Q.Motility(this._bitMask | other._bitMask);
    },
    toString$0: function(_) {
      return C.JSInt_methods.toString$0(this._bitMask);
    }
  };
  Q.TilePortal.prototype = {
    toString$0: function(_) {
      return this.name;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.TileType.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  Q.Tile.prototype = {
    addEmanation$1: function(offset) {
      this._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(this._appliedEmanation + offset, 0, 192));
    },
    updateExplored$1$force: function(force) {
      var t1;
      if (force !== true)
        t1 = !this._isOccluded && this.illumination - this._fallOff > 0;
      else
        t1 = true;
      if (t1 && !this._isExplored) {
        this._isExplored = true;
        return true;
      }
      return false;
    }
  };
  N.ConfirmPopup.prototype = {
    get$message: function(_) {
      return H.setRuntimeTypeInfo([this._confirm_popup$_message], [P.String]);
    },
    get$helpKeys: function() {
      return C.Map_DlRey;
    },
    handleInput$1: function(input) {
      if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
        this._ui.pop$1(null);
        return true;
      }
      return false;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      if (shift || alt)
        return false;
      switch (keyCode) {
        case 78:
          this._ui.pop$1(null);
          break;
        case 89:
          this._ui.pop$1(this._result);
          break;
      }
      return true;
    }
  };
  T.DirectionDialog.prototype = {
    get$isTransparent: function() {
      return true;
    },
    handleInput$1: function(input) {
      switch (H.interceptedTypeCheck(input, "$isInput")) {
        case C.Input_cancel:
          this._select$1(C.Direction_0_0);
          break;
        case C.Input_nw:
          this._select$1(C.Direction_m1_m1);
          break;
        case C.Input_n:
          this._select$1(C.Direction_0_m1);
          break;
        case C.Input_ne:
          this._select$1(C.Direction_1_m1);
          break;
        case C.Input_w:
          this._select$1(C.Direction_m1_0);
          break;
        case C.Input_e:
          this._select$1(C.Direction_1_0);
          break;
        case C.Input_sw:
          this._select$1(C.Direction_m1_1);
          break;
        case C.Input_s:
          this._select$1(C.Direction_0_1);
          break;
        case C.Input_se:
          this._select$1(C.Direction_1_1);
          break;
      }
      return true;
    },
    update$0: function(_) {
      var t1 = (this._animateOffset + 1) % 40;
      this._animateOffset = t1;
      if (C.JSInt_methods.$mod(t1, 5) === 0)
        this.dirty$0();
    },
    render$1: function(terminal) {
      var t1 = new T.DirectionDialog_render_draw(this, terminal);
      t1.call$3(0, C.Direction_0_m1, "|");
      t1.call$3(1, C.Direction_1_m1, "/");
      t1.call$3(2, C.Direction_1_0, "-");
      t1.call$3(3, C.Direction_1_1, "\\");
      t1.call$3(4, C.Direction_0_1, "|");
      t1.call$3(5, C.Direction_m1_1, "/");
      t1.call$3(6, C.Direction_m1_0, "-");
      t1.call$3(7, C.Direction_m1_m1, "\\");
      t1 = P.String;
      R.Draw_helpKeys(terminal, P.LinkedHashMap_LinkedHashMap$_literal(["\u2195\u2194", this.get$helpText(), "Esc", "Cancel"], t1, t1), this.get$query());
    },
    _select$1: function(dir) {
      var t1, t2;
      t1 = this.tryDirection$1(dir);
      t2 = this._ui;
      if (t1)
        t2.pop$1(dir);
      else
        t2.pop$1(C.Direction_0_0);
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  T.DirectionDialog_render_draw.prototype = {
    call$3: function(frame, dir, char) {
      var t1, t2, t3, pos, glyph, items;
      t1 = this.$this;
      t2 = t1._gameScreen;
      t3 = t2.game;
      pos = t3.hero._pos.$add(0, dir);
      if (!t1.canTarget$1(t3._stage.tiles.$index(0, pos)))
        return;
      if (C.JSInt_methods._tdivFast$1(t1._animateOffset, 5) === frame)
        glyph = L.Glyph$(char, C.Color_222_156_33, C.Color_64_31_36);
      else {
        t1 = t3._stage._actorsByTile.$index(0, pos);
        if (t1 != null)
          glyph = H.interceptedTypeCast(t1.get$appearance(t1), "$isGlyph");
        else {
          items = t3._stage.itemsAt$1(pos);
          t1 = items._items;
          if (new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]).moveNext$0())
            glyph = items.get$first(items).type.appearance;
          else {
            t1 = t3._stage.tiles.$index(0, pos);
            if (t1._isExplored)
              H.interceptedTypeCast(t1.type.appearance, "$isGlyph");
            else
              L.Glyph$fromCharCode(32, null, null);
            glyph = H.interceptedTypeCast(t3._stage.tiles.$index(0, pos).type.appearance, "$isGlyph");
          }
        }
        glyph = L.Glyph$fromCharCode(glyph.char, C.Color_222_156_33, C.Color_64_31_36);
      }
      t2._stagePanel.drawStageGlyph$4(this.terminal, pos.x, pos.y, glyph);
    }
  };
  T.SkillDirectionDialog.prototype = {
    get$query: function() {
      return "Which direction?";
    },
    get$helpText: function() {
      return "Choose direction";
    },
    canTarget$1: function(tile) {
      return true;
    },
    tryDirection$1: function(direction) {
      this._onSelect.call$1(direction);
      return true;
    }
  };
  T.CloseDialog.prototype = {
    get$query: function() {
      return "Close what?";
    },
    get$helpText: function() {
      return "Choose direction";
    },
    canTarget$1: function(tile) {
      return tile.type.onClose != null;
    },
    tryDirection$1: function(direction) {
      var t1, pos, t2;
      t1 = this._gameScreen.game;
      pos = t1.hero._pos.$add(0, direction);
      t2 = t1._stage.tiles.$index(0, pos).type.onClose;
      if (t2 != null) {
        t1 = t1.hero;
        t2 = t2.call$1(pos);
        t1.toString;
        t1._behavior = new X.ActionBehavior(H.interceptedTypeCheck(t2, "$isAction"));
        return true;
      } else {
        t1.log.add$5(0, C.LogType_error, "There is nothing to close there.", null, null, null);
        return false;
      }
    }
  };
  T.OpenDialog.prototype = {
    get$query: function() {
      return "Open what?";
    },
    get$helpText: function() {
      return "Choose direction";
    },
    canTarget$1: function(tile) {
      return tile.type.onOpen != null;
    },
    tryDirection$1: function(direction) {
      var t1, pos, t2;
      t1 = this._gameScreen.game;
      pos = t1.hero._pos.$add(0, direction);
      t2 = t1._stage.tiles.$index(0, pos).type.onOpen;
      if (t2 != null) {
        t1 = t1.hero;
        t2 = t2.call$1(pos);
        t1.toString;
        t1._behavior = new X.ActionBehavior(H.interceptedTypeCheck(t2, "$isAction"));
        return true;
      } else {
        t1.log.add$5(0, C.LogType_error, "There is nothing to open there.", null, null, null);
        return false;
      }
    }
  };
  R.Draw_helpKeys_closure.prototype = {
    call$2: function(key, text) {
      var t1, t2, helpTextLength;
      H.stringTypeCheck(key);
      H.stringTypeCheck(text);
      t1 = this._box_0;
      t2 = t1.helpTextLength;
      if (t2 > 0) {
        helpTextLength = t2 + 2;
        t1.helpTextLength = helpTextLength;
        t2 = helpTextLength;
      }
      t1.helpTextLength = t2 + (key.length + text.length + 3);
    },
    $signature: 29
  };
  R.Draw_helpKeys_closure0.prototype = {
    call$2: function(key, text) {
      var t1, t2, t3, t4, x;
      H.stringTypeCheck(key);
      H.stringTypeCheck(text);
      t1 = this._box_0;
      if (!t1.first) {
        t2 = this.terminal;
        t2.writeAt$4(t1.x, t2._display._glyphs.bounds.size.y - 1, ", ", C.Color_38_38_56);
        t1.x += 2;
      }
      t2 = this.terminal;
      t3 = t1.x;
      t4 = t2._display._glyphs.bounds.size.y - 1;
      t2.writeAt$4(t3, t4, "[", C.Color_38_38_56);
      t2.writeAt$4(++t1.x, t4, key, C.Color_222_156_33);
      x = t1.x + key.length;
      t1.x = x;
      t2.writeAt$4(x, t4, "] ", C.Color_38_38_56);
      t3 = t1.x += 2;
      t2.writeAt$4(t3, t4, text, C.Color_132_126_135);
      t1.x = t1.x + text.length;
      t1.first = false;
    },
    $signature: 29
  };
  K.Effect.prototype = {};
  K.ElementEffect.prototype = {
    update$1: function(_, game) {
      if ($.$get$rng().range$1(this._age + 2) === 0)
        ++this._age;
      return this._age < this._sequence.length;
    },
    render$2: function(game, drawGlyph) {
      var t1, t2, t3, t4, t5;
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
      t1 = this._effect$_pos;
      t2 = t1.x;
      t1 = t1.y;
      t3 = $.$get$rng();
      t4 = this._sequence;
      t5 = this._age;
      if (t5 >= t4.length)
        return H.ioore(t4, t5);
      t5 = t4[t5];
      t3.toString;
      H.assertSubtype(t5, "$isList", [L.Glyph], "$asList");
      t3 = t3.range$1(t5.length);
      if (t3 < 0 || t3 >= t5.length)
        return H.ioore(t5, t3);
      drawGlyph.call$3(t2, t1, t5[t3]);
    },
    $isEffect: 1
  };
  K.FrameEffect.prototype = {
    update$1: function(_, game) {
      var t1 = game._stage.tiles.$index(0, this.pos);
      if (!(!t1._isOccluded && t1.illumination - t1._fallOff > 0))
        return false;
      return --this.life >= 0;
    },
    render$2: function(game, drawGlyph) {
      var t1 = this.pos;
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]}).call$3(t1.x, t1.y, L.Glyph$(this.char, this.color, null));
    },
    $isEffect: 1,
    get$pos: function() {
      return this.pos;
    }
  };
  K.ItemEffect.prototype = {
    update$1: function(_, game) {
      var t1 = game._stage.tiles.$index(0, this.pos);
      if (!(!t1._isOccluded && t1.illumination - t1._fallOff > 0))
        return false;
      return --this._life >= 0;
    },
    render$2: function(game, drawGlyph) {
      var t1 = this.pos;
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]}).call$3(t1.x, t1.y, this.item.type.appearance);
    },
    $isEffect: 1,
    get$pos: function() {
      return this.pos;
    }
  };
  K.DamageEffect.prototype = {
    update$1: function(_, game) {
      var t1 = this._blinks;
      return ++this._effect$_frame < t1 * C.JSNumber_methods.round$0(K.lerpDouble(t1, 1, 10, 16, 8));
    },
    render$2: function(game, drawGlyph) {
      var t1;
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
      t1 = this._blinks;
      if (C.JSInt_methods.$mod(this._effect$_frame, C.JSNumber_methods.round$0(K.lerpDouble(t1, 1, 10, 16, 8))) < C.JSInt_methods._tdivFast$1(C.JSNumber_methods.round$0(K.lerpDouble(t1, 1, 10, 16, 8)), 2)) {
        t1 = this.actor._pos;
        drawGlyph.call$3(t1.x, t1.y, L.Glyph$("*", B.elementColor(this.element), null));
      }
    },
    $isEffect: 1
  };
  K.ParticleEffect.prototype = {
    update$1: function(_, game) {
      var t1, pos, t2;
      t1 = this.x + this.h;
      this.x = t1;
      this.y = this.y + this.v;
      pos = new L.Vec(C.JSNumber_methods.toInt$0(t1), C.JSNumber_methods.toInt$0(this.y));
      if (!game._stage.tiles.bounds.contains$1(0, pos))
        return false;
      t1 = game._stage.tiles.$index(0, pos);
      t1.toString;
      t2 = $.$get$Motility_fly();
      if ((t1.type.motility._bitMask & t2._bitMask) === 0)
        return false;
      return this.life-- > 0;
    },
    render$2: function(game, drawGlyph) {
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]}).call$3(C.JSNumber_methods.toInt$0(this.x), C.JSNumber_methods.toInt$0(this.y), L.Glyph$("\u2022", this.color, null));
    },
    $isEffect: 1
  };
  K.TeleportEffect.prototype = {
    update$1: function(_, game) {
      var t1, friction, t2, t3, pull, t4, t5, t6, t7;
      t1 = this.age;
      friction = 1 - t1 * 0.015;
      t2 = this.h *= friction;
      t3 = this.v *= friction;
      pull = t1 * 0.003;
      t4 = this.target;
      t5 = t4.x;
      t6 = this.x;
      t5 = t2 + (t5 - t6) * pull;
      this.h = t5;
      t2 = t4.y;
      t7 = this.y;
      t2 = t3 + (t2 - t7) * pull;
      this.v = t2;
      t5 = t6 + t5;
      this.x = t5;
      this.y = t7 + t2;
      this.age = t1 + 1;
      return new L.Vec(C.JSNumber_methods.toInt$0(t5), C.JSNumber_methods.toInt$0(this.y)).$sub(0, t4).$gt(0, 1);
    },
    render$2: function(game, drawGlyph) {
      var t1, t2, char, t3, t4;
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
      t1 = C.JSNumber_methods.toInt$0(this.x);
      t2 = C.JSNumber_methods.toInt$0(this.y);
      if (!game._stage.tiles.bounds.contains$1(0, new L.Vec(t1, t2)))
        return;
      char = this._getChar$2(this.h, this.v);
      t3 = $.$get$rng();
      t4 = $.$get$TeleportEffect__colors();
      t3.toString;
      H.assertSubtype(t4, "$isList", [L.Color], "$asList");
      t3 = t3.range$1(4);
      if (t3 < 0 || t3 >= 4)
        return H.ioore(t4, t3);
      drawGlyph.call$3(t1, t2, L.Glyph$fromCharCode(char, t4[t3], null));
    },
    _getChar$2: function(x, y) {
      if (new L.Vec(C.JSNumber_methods.toInt$0(x * 10), C.JSNumber_methods.toInt$0(y * 10)).$lt(0, 5))
        return 8226;
      return C.JSString_methods.codeUnitAt$1("|\\\\--//||\\\\--//||", C.JSDouble_methods.floor$0(Math.atan2(x, y) / 6.283185307179586 * 16 + 8));
    },
    $isEffect: 1
  };
  K.HealEffect.prototype = {
    update$1: function(_, game) {
      return this.frame++ < 24;
    },
    render$2: function(game, drawGlyph) {
      var t1, t2, $back;
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
      t1 = this.x;
      t2 = this.y;
      if (game._stage.tiles.$get$2(t1, t2)._isOccluded)
        return;
      switch (C.JSInt_methods.$mod(C.JSInt_methods._tdivFast$1(this.frame, 4), 4)) {
        case 0:
          $back = C.Color_19_17_28;
          break;
        case 1:
          $back = C.Color_9_95_112;
          break;
        case 2:
          $back = C.Color_64_163_229;
          break;
        case 3:
          $back = C.Color_129_231_235;
          break;
      }
      drawGlyph.call$3(t1 - 1, t2, L.Glyph$("-", $back, null));
      drawGlyph.call$3(t1 + 1, t2, L.Glyph$("-", $back, null));
      drawGlyph.call$3(t1, t2 - 1, L.Glyph$("|", $back, null));
      drawGlyph.call$3(t1, t2 + 1, L.Glyph$("|", $back, null));
    },
    $isEffect: 1
  };
  K.DetectEffect.prototype = {
    update$1: function(_, game) {
      return --this.life >= 0;
    },
    render$2: function(game, drawGlyph) {
      var radius, t1, glyph, t2, t3, pixel;
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
      radius = C.JSInt_methods._tdivFast$1(this.life, 4);
      t1 = $.$get$DetectEffect__colors();
      if (radius < 0 || radius >= 5)
        return H.ioore(t1, radius);
      glyph = L.Glyph$("*", t1[radius], null);
      t1 = Q._CircleIterator__CircleIterator(new Q.Circle(this.pos, radius), true);
      t2 = t1._boundsIterator;
      t3 = t1._circle.center;
      for (; t1.moveNext$0();) {
        pixel = new L.Vec(t2._x, t2._y).$add(0, t3);
        drawGlyph.call$3(pixel.x, pixel.y, glyph);
      }
    },
    $isEffect: 1,
    get$pos: function() {
      return this.pos;
    }
  };
  K.MapEffect.prototype = {
    update$1: function(_, game) {
      return --this.life >= 0;
    },
    render$2: function(game, drawGlyph) {
      var t1, glyph, t2;
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
      t1 = this.pos;
      glyph = H.interceptedTypeCast(game._stage.tiles.$index(0, t1).type.appearance, "$isGlyph");
      t2 = this._maxLife;
      glyph = L.Glyph$fromCharCode(glyph.char, glyph.fore.blend$2(C.Color_222_156_33, this.life / t2), glyph.back.blend$2(C.Color_142_82_55, this.life / t2));
      drawGlyph.call$3(t1.x, t1.y, glyph);
    },
    $isEffect: 1,
    get$pos: function() {
      return this.pos;
    }
  };
  K.TreasureEffect.prototype = {
    update$1: function(_, game) {
      var t1 = this._life;
      if (C.JSInt_methods.$mod(t1, 2) === 0)
        if (--this._effect$_y < 0)
          return false;
      --t1;
      this._life = t1;
      return t1 >= 0;
    },
    render$2: function(game, drawGlyph) {
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]}).call$3(this._effect$_x, this._effect$_y, this._item.type.appearance);
    },
    $isEffect: 1
  };
  K.HowlEffect.prototype = {
    update$1: function(_, game) {
      return ++this._age < 24;
    },
    render$2: function(game, drawGlyph) {
      var pos, t1, t2, t3, t4, t5, t6, t7;
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
      pos = this._effect$_actor._pos;
      if (C.JSInt_methods.$mod(C.JSInt_methods._tdivFast$1(this._age, 6), 2) === 0) {
        t1 = pos.x;
        t2 = pos.y;
        drawGlyph.call$3(t1, t2, $.$get$HowlEffect_bang());
        drawGlyph.call$3(t1 - 1, t2, $.$get$HowlEffect_greater());
        drawGlyph.call$3(t1 + 1, t2, $.$get$HowlEffect_less());
      } else {
        t1 = pos.x;
        t2 = t1 - 1;
        t3 = pos.y;
        t4 = t3 - 1;
        t5 = $.$get$HowlEffect_backslash();
        drawGlyph.call$3(t2, t4, t5);
        t6 = t3 + 1;
        t7 = $.$get$HowlEffect_slash();
        drawGlyph.call$3(t2, t6, t7);
        ++t1;
        drawGlyph.call$3(t1, t4, t7);
        drawGlyph.call$3(t1, t6, t5);
        t5 = $.$get$HowlEffect_dash();
        drawGlyph.call$3(t2, t3, t5);
        drawGlyph.call$3(t1, t3, t5);
      }
    },
    $isEffect: 1
  };
  K.BlinkEffect.prototype = {
    update$1: function(_, game) {
      return ++this._age < 24;
    },
    render$2: function(game, drawGlyph) {
      var pos;
      H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
      pos = this._effect$_actor._pos;
      if (C.JSInt_methods.$mod(C.JSInt_methods._tdivFast$1(this._age, 6), 2) === 1)
        drawGlyph.call$3(pos.x, pos.y, this._glyph);
    },
    $isEffect: 1
  };
  F.ExitPopup.prototype = {
    get$width: function(_) {
      return 38;
    },
    get$height: function(_) {
      return 19;
    },
    get$helpKeys: function() {
      var t1 = P.String;
      return P.LinkedHashMap_LinkedHashMap$_literal(["OK", "Return to town"], t1, t1);
    },
    ExitPopup$2: function(_save, _game) {
      var t1, hero, t2, t3, t4, t5, t6, slain;
      t1 = this._exit_popup$_game;
      hero = t1.hero;
      t2 = this._exit_popup$_values;
      t3 = hero.save;
      t4 = t3.gold;
      t5 = this._exit_popup$_save;
      t6 = t5.gold;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t6 !== "number")
        return H.iae(t6);
      C.JSArray_methods.add$1(t2, new F._AnimatedValue(5, "Gold", t4 - t6, C.Color_222_156_33, null, 0));
      t6 = t3.experience;
      t4 = t5.experience;
      if (typeof t6 !== "number")
        return t6.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      C.JSArray_methods.add$1(t2, new F._AnimatedValue(6, "Experience", t6 - t4, C.Color_22_117_38, null, 0));
      t4 = hero._level;
      t4 = t4._modify$1(t4._value);
      t6 = G.experienceLevel(t5.experience);
      if (typeof t4 !== "number")
        return t4.$sub();
      C.JSArray_methods.add$1(t2, new F._AnimatedValue(7, "Levels", t4 - t6, C.Color_129_231_235, null, 0));
      t6 = t3.strength;
      t6 = t6._modify$1(t6._value);
      t4 = t5.strength;
      C.JSArray_methods.add$1(t2, new F._AnimatedValue(9, "Strength", t6 - t4._modify$1(t4._value), C.Color_21_87_194, null, 0));
      t4 = t3.agility;
      t4 = t4._modify$1(t4._value);
      t6 = t5.agility;
      C.JSArray_methods.add$1(t2, new F._AnimatedValue(10, "Agility", t4 - t6._modify$1(t6._value), C.Color_21_87_194, null, 0));
      t6 = t3.fortitude;
      t6 = t6._modify$1(t6._value);
      t4 = t5.fortitude;
      C.JSArray_methods.add$1(t2, new F._AnimatedValue(11, "Fortitude", t6 - t4._modify$1(t4._value), C.Color_21_87_194, null, 0));
      t4 = t3.intellect;
      t4 = t4._modify$1(t4._value);
      t6 = t5.intellect;
      C.JSArray_methods.add$1(t2, new F._AnimatedValue(12, "Intellect", t4 - t6._modify$1(t6._value), C.Color_21_87_194, null, 0));
      t6 = t3.will;
      t6 = t6._modify$1(t6._value);
      t4 = t5.will;
      C.JSArray_methods.add$1(t2, new F._AnimatedValue(13, "Will", t6 - t4._modify$1(t4._value), C.Color_21_87_194, null, 0));
      t3 = t3._lore.get$allSlain();
      t5 = t5._lore.get$allSlain();
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t5 !== "number")
        return H.iae(t5);
      slain = t3 - t5;
      t1 = t1._stage._actors;
      t5 = H.getTypeArgumentByIndex(t1, 0);
      t5 = new H.WhereIterable(t1, H.functionTypeCheck(new F.ExitPopup_closure(), {func: 1, ret: P.bool, args: [t5]}), [t5]);
      C.JSArray_methods.add$1(t2, new F._AnimatedValue(17, "Monsters", slain, C.Color_204_35_57, slain + t5.get$length(t5), 0));
    },
    get$isTransparent: function() {
      return true;
    },
    handleInput$1: function(input) {
      var t1;
      if (H.interceptedTypeCheck(input, "$isInput") !== C.Input_ok)
        return false;
      t1 = this._exit_popup$_game;
      t1.hero.save.maxDepth = H.intTypeCheck(Math.max(this._exit_popup$_save.maxDepth, t1.depth));
      this._ui.pop$0();
      return true;
    },
    update$0: function(_) {
      var t1, t2, _i;
      for (t1 = this._exit_popup$_values, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        if (t1[_i].update$0(0))
          this.dirty$0();
    },
    renderPopup$1: function(terminal) {
      var t1, t2, t3, t4, _i, value, t5, t6, t7, number, t8, total, t9;
      terminal.writeAt$4(1, 1, "You survived depth " + this._exit_popup$_game.depth + "!", C.Color_132_126_135);
      terminal.writeAt$4(1, 3, "You gained:", C.Color_132_126_135);
      terminal.writeAt$4(1, 15, "You slayed:", C.Color_132_126_135);
      for (t1 = this._exit_popup$_values, t2 = t1.length, t3 = terminal.size.x, t4 = t3 - 1, t3 -= 4, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        value = t1[_i];
        t5 = value.y;
        terminal.writeAt$4(5, t5, "................................", C.Color_38_38_56);
        t6 = value.name + ":";
        t7 = value.value === 0;
        terminal.writeAt$4(5, t5, t6, t7 ? C.Color_38_38_56 : C.Color_226_223_240);
        number = C.JSInt_methods.toString$0(value.current);
        t6 = value.total;
        t8 = number.length;
        if (t6 != null) {
          total = C.JSInt_methods.toString$0(t6);
          t6 = total.length;
          t7 = t4 - t6;
          t9 = value.color;
          terminal.writeAt$4(t7, t5, total, t9);
          terminal.writeAt$4(t7 - 3, t5, " / ", t9);
          terminal.writeAt$4(t3 - t6 - t8, t5, number, t9);
        } else {
          t6 = t7 ? C.Color_38_38_56 : value.color;
          terminal.writeAt$4(t4 - t8, t5, number, t6);
        }
      }
    }
  };
  F.ExitPopup_closure.prototype = {
    call$1: function(actor) {
      return !(H.interceptedTypeCheck(actor, "$isActor") instanceof G.Hero);
    },
    $signature: 104
  };
  F._AnimatedValue.prototype = {
    update$0: function(_) {
      var t1, t2;
      t1 = this.current;
      t2 = this.value;
      if (t1 >= t2)
        return false;
      if (t2 > 200) {
        t1 += $.$get$rng().round$1(0, t2 / 200);
        this.current = t1;
        if (t1 > t2)
          this.current = t2;
      } else
        this.current = t1 + 1;
      return true;
    },
    get$name: function(receiver) {
      return this.name;
    }
  };
  T.ForfeitPopup.prototype = {
    get$message: function(_) {
      if (this._isTown)
        return C.List_Jeh;
      return C.List_6QF;
    },
    get$helpKeys: function() {
      return C.Map_DlRey;
    },
    handleInput$1: function(input) {
      if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
        this._ui.pop$1(false);
        return true;
      }
      return false;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      if (shift || alt)
        return false;
      switch (keyCode) {
        case 78:
          this._ui.pop$1(false);
          break;
        case 89:
          this._ui.pop$1(true);
          break;
      }
      return true;
    },
    update$0: function(_) {
      return false;
    }
  };
  E.GameOverScreen.prototype = {
    handleInput$1: function(input) {
      switch (H.interceptedTypeCheck(input, "$isInput")) {
        case C.Input_cancel:
          this._ui.pop$0();
          break;
      }
      return true;
    },
    render$1: function(terminal) {
      terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
      terminal.writeAt$3(0, 0, C.JSArray_methods.get$last(this.log.messages).text);
      terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, "[Esc] Try again", C.Color_132_126_135);
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  R.GameScreen.prototype = {
    targetActor$1: function(value) {
      if (this._targetActor != value)
        this.dirty$0();
      this._targetActor = value;
      this._game_screen$_target = null;
    },
    targetFloor$1: function(pos) {
      if (this._targetActor != null || !J.$eq$(this._game_screen$_target, pos))
        this.dirty$0();
      this._targetActor = null;
      this._game_screen$_target = pos;
    },
    get$currentTarget: function(_) {
      var t1, t2;
      if (this.get$currentTargetActor() != null)
        return this.get$currentTargetActor()._pos;
      t1 = this._game_screen$_target;
      if (t1 != null) {
        t1 = this.game._stage.tiles.$index(0, t1);
        if (t1._isExplored)
          if (!t1._isOccluded) {
            t1.toString;
            t2 = $.$get$Motility_fly();
            t2 = (t1.type.motility._bitMask & t2._bitMask) === 0;
            t1 = t2;
          } else
            t1 = true;
        else
          t1 = false;
        if (t1)
          this._game_screen$_target = null;
      }
      return this._game_screen$_target;
    },
    get$currentTargetActor: function() {
      var t1, t2;
      t1 = this._targetActor;
      if (t1 != null) {
        t2 = t1._health;
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > 0) {
          t2 = t1.game._stage;
          t1 = t1._pos;
          t1 = t2.tiles.$index(0, t1);
          t1 = !(!t1._isOccluded && t1.illumination - t1._fallOff > 0);
        } else
          t1 = true;
        if (t1)
          this._targetActor = null;
      }
      t1 = this._targetActor;
      if (t1 != null)
        return t1;
      t1 = this._game_screen$_target;
      if (t1 != null)
        return this.game._stage._actorsByTile.$index(0, t1);
      return;
    },
    get$heroColor: function() {
      var hero, t1, t2, t3;
      hero = this.game.hero;
      t1 = hero._health;
      t2 = hero.save.fortitude;
      t3 = t2.get$maxHealth();
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < t3 / 4)
        return C.Color_204_35_57;
      if (hero.poison._turnsRemaining > 0)
        return C.Color_22_117_38;
      if (hero.cold._turnsRemaining > 0)
        return C.Color_64_163_229;
      t1 = hero._health;
      t3 = t2.get$maxHealth();
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < t3 / 2)
        return C.Color_255_122_105;
      if (hero._stomach === 0) {
        t1 = hero._health;
        t2 = t2.get$maxHealth();
        if (typeof t1 !== "number")
          return t1.$lt();
        t2 = t1 < t2;
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        return C.Color_189_144_108;
      return C.Color_226_223_240;
    },
    handleInput$1: function(input) {
      var t1, t2, t3, action, t4, t5, t6, items;
      switch (H.interceptedTypeCheck(input, "$isInput")) {
        case C.Input_quit:
          t1 = this.game;
          t2 = t1._stage;
          t3 = t1.hero._pos;
          if (t2.tiles.$index(0, t3).type.portal === C.TilePortal_exit)
            this._ui.push$1(F.ExitPopup$(this._storageSave, t1));
          else {
            t1.log.add$5(0, C.LogType_error, "You are not standing on an exit.", null, null, null);
            this.dirty$0();
          }
          action = null;
          break;
        case C.Input_forfeit:
          t1 = this._ui;
          t2 = this.game.depth;
          t1.push$1(new T.ForfeitPopup(t2 === 0));
          action = null;
          break;
        case C.Input_selectSkill:
          this._ui.push$1(Z.SelectSkillDialog$(this));
          action = null;
          break;
        case C.Input_editSkills:
          this._ui.push$1(R.SkillDialog_SkillDialog(this.game.hero.save));
          action = null;
          break;
        case C.Input_heroInfo:
          t1 = this._ui;
          t2 = this.game;
          t3 = t2.content;
          t2 = t2.hero.save;
          t4 = $.$get$HeroInfoDialog__screens();
          if (t4.length === 0) {
            t5 = new Z.HeroMonsterLoreDialog(H.setRuntimeTypeInfo([], [B.Breed]), C._Sort_JQf, t3, t2);
            t5._listBreeds$0();
            t6 = new Q.HeroItemLoreDialog(H.setRuntimeTypeInfo([], [L.ItemType]), C._Sort_MQk, t3, t2);
            t6._listItems$0();
            C.JSArray_methods.addAll$1(t4, H.setRuntimeTypeInfo([new M.HeroEquipmentDialog(t3, t2), new Z.HeroResistancesDialog(t3, t2), t5, t6], [M.HeroInfoDialog]));
          }
          t1.push$1(C.JSArray_methods.get$first(t4));
          action = null;
          break;
        case C.Input_drop:
          this._ui.push$1(new D.ItemDialog(this, new D._DropItemCommand(), C.ItemLocation_wMy));
          action = null;
          break;
        case C.Input_use:
          this._ui.push$1(new D.ItemDialog(this, new D._UseItemCommand(), C.ItemLocation_wMy));
          action = null;
          break;
        case C.Input_toss:
          this._ui.push$1(new D.ItemDialog(this, new D._TossItemCommand(), C.ItemLocation_wMy));
          action = null;
          break;
        case C.Input_rest:
          if (!this.game.hero.rest$0())
            this.dirty$0();
          action = null;
          break;
        case C.Input_open:
          this._game_screen$_open$0();
          action = null;
          break;
        case C.Input_close:
          this._closeDoor$0();
          action = null;
          break;
        case C.Input_pickUp:
          t1 = this.game;
          items = t1._stage.itemsAt$1(t1.hero._pos);
          t2 = items._items.length;
          if (t2 > 1)
            this._ui.push$1(new D.ItemDialog(this, new D._PickUpItemCommand(), C.ItemLocation_46y));
          else if (t2 === 1)
            t1.hero._behavior = new X.ActionBehavior(new R.PickUpAction(items.get$first(items)));
          else {
            t1.log.add$5(0, C.LogType_error, "There is nothing here.", null, null, null);
            this.dirty$0();
          }
          action = null;
          break;
        case C.Input_equip:
          this._ui.push$1(new D.ItemDialog(this, new D._EquipItemCommand(), C.ItemLocation_wMy));
          action = null;
          break;
        case C.Input_nw:
          action = new B.WalkAction(C.Direction_m1_m1);
          break;
        case C.Input_n:
          action = new B.WalkAction(C.Direction_0_m1);
          break;
        case C.Input_ne:
          action = new B.WalkAction(C.Direction_1_m1);
          break;
        case C.Input_w:
          action = new B.WalkAction(C.Direction_m1_0);
          break;
        case C.Input_ok:
          action = new B.WalkAction(C.Direction_0_0);
          break;
        case C.Input_e:
          action = new B.WalkAction(C.Direction_1_0);
          break;
        case C.Input_sw:
          action = new B.WalkAction(C.Direction_m1_1);
          break;
        case C.Input_s:
          action = new B.WalkAction(C.Direction_0_1);
          break;
        case C.Input_se:
          action = new B.WalkAction(C.Direction_1_1);
          break;
        case C.Input_runNW:
          this.game.hero._behavior = new X.RunBehavior(C.Direction_m1_m1);
          action = null;
          break;
        case C.Input_runN:
          this.game.hero._behavior = new X.RunBehavior(C.Direction_0_m1);
          action = null;
          break;
        case C.Input_runNE:
          this.game.hero._behavior = new X.RunBehavior(C.Direction_1_m1);
          action = null;
          break;
        case C.Input_runW:
          this.game.hero._behavior = new X.RunBehavior(C.Direction_m1_0);
          action = null;
          break;
        case C.Input_runE:
          this.game.hero._behavior = new X.RunBehavior(C.Direction_1_0);
          action = null;
          break;
        case C.Input_runSW:
          this.game.hero._behavior = new X.RunBehavior(C.Direction_m1_1);
          action = null;
          break;
        case C.Input_runS:
          this.game.hero._behavior = new X.RunBehavior(C.Direction_0_1);
          action = null;
          break;
        case C.Input_runSE:
          this.game.hero._behavior = new X.RunBehavior(C.Direction_1_1);
          action = null;
          break;
        case C.Input_fireNW:
          this._fireTowards$1(C.Direction_m1_m1);
          action = null;
          break;
        case C.Input_fireN:
          this._fireTowards$1(C.Direction_0_m1);
          action = null;
          break;
        case C.Input_fireNE:
          this._fireTowards$1(C.Direction_1_m1);
          action = null;
          break;
        case C.Input_fireW:
          this._fireTowards$1(C.Direction_m1_0);
          action = null;
          break;
        case C.Input_fireE:
          this._fireTowards$1(C.Direction_1_0);
          action = null;
          break;
        case C.Input_fireSW:
          this._fireTowards$1(C.Direction_m1_1);
          action = null;
          break;
        case C.Input_fireS:
          this._fireTowards$1(C.Direction_0_1);
          action = null;
          break;
        case C.Input_fireSE:
          this._fireTowards$1(C.Direction_1_1);
          action = null;
          break;
        case C.Input_fire:
          t1 = this._lastSkill;
          t2 = J.getInterceptor$(t1);
          if (!!t2.$isTargetSkill)
            if (this.get$currentTargetActor() != null)
              this._fireAtTarget$1(H.interceptedTypeCast(this._lastSkill, "$isTargetSkill"));
            else
              this._openTargetDialog$1(t1);
          else if (!!t2.$isDirectionSkill)
            this._ui.push$1(new T.SkillDirectionDialog(this.get$_fireTowards(), this));
          else {
            t3 = this.game;
            if (!!t2.$isActionSkill) {
              t2 = t3.hero;
              t2._behavior = new X.ActionBehavior(t1.getAction$2(t3, t2.save.skills.level$1(t1)));
            } else {
              t3.log.add$5(0, C.LogType_error, "No skill selected.", null, null, null);
              this.dirty$0();
            }
          }
          action = null;
          break;
        case C.Input_swap:
          t1 = this.game;
          t2 = t1.hero.save._inventory._lastUnequipped;
          if (t2 == null) {
            t1.log.add$5(0, C.LogType_error, "You aren't holding an unequipped item to swap.", null, null, null);
            this.dirty$0();
            action = null;
          } else
            action = new R.EquipAction(C.ItemLocation_wMy, t2);
          break;
        case C.Input_wizard:
          this.game.log.add$5(0, C.LogType_cheat, "No cheating in non-debug builds. Cheater.", null, null, null);
          this.dirty$0();
          action = null;
          break;
        default:
          action = null;
      }
      if (action != null)
        this.game.hero._behavior = new X.ActionBehavior(action);
      return true;
    },
    activate$2: function(popped, result) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
      t1 = this.game;
      if (!t1.hero.get$needsInput())
        this._pause = 10;
      t2 = J.getInterceptor$(popped);
      if (!!t2.$isExitPopup) {
        t2 = this._storageSave;
        t3 = t1.hero;
        t2.toString;
        t3 = t3.save;
        t2._inventory = t3._inventory;
        t2._equipment = t3._equipment;
        t2.experience = t3.experience;
        t2.gold = t3.gold;
        t2.skills = t3.skills;
        t2._lore = t3._lore;
        t2.maxDepth = t3.maxDepth;
        t3.shops.forEach$1(0, new R.GameScreen_activate_closure());
        t3 = this._storage;
        t3.save$0(0);
        this._ui.goTo$1(R.GameScreen_GameScreen$town(t3, t1.content, t2));
      } else if (!!t2.$isSelectDepthPopup && typeof result === "number" && Math.floor(result) === result) {
        this._storage.save$0(0);
        t2 = this._ui;
        t3 = t1.hero.save;
        t1 = t1.content;
        t4 = t3.name;
        t5 = t3.race;
        t6 = t3.heroClass;
        t7 = t3._inventory.clone$0(0);
        t8 = t3._equipment.clone$0(0);
        t9 = t3._home;
        t10 = t3._crucible;
        t11 = t3.shops;
        t12 = t3.experience;
        t13 = t3.skills;
        t14 = M.Skill;
        t15 = P.int;
        t16 = P.LinkedHashMap_LinkedHashMap$from(t13._levels, t14, t15);
        t14 = P.LinkedHashMap_LinkedHashMap$from(t13._points, t14, t15);
        t13 = t3._lore;
        t17 = B.Breed;
        t18 = L.ItemType;
        t2.push$1(new F.LoadingDialog(D.Game$(t1, K.HeroSave$load(t4, t5, t6, t7, t8, t9, t10, t11, t12, new M.SkillSet(t16, t14), V.Lore$from(P.LinkedHashMap_LinkedHashMap$of(t13._seenBreeds, t17, t15), P.LinkedHashMap_LinkedHashMap$of(t13._slainBreeds, t17, t15), P.LinkedHashMap_LinkedHashMap$of(t13._foundItems, t18, t15), P.LinkedHashMap_LinkedHashMap$of(t13._foundAffixes, L.Affix, t15), P.LinkedHashMap_LinkedHashMap$of(t13._usedItems, t18, t15)), t3.gold, t3.maxDepth), result, null, null)));
      } else if (!!t2.$isLoadingDialog)
        this._ui.goTo$1(R.GameScreen$(this._storage, H.interceptedTypeCast(result, "$isGame"), t1.hero.save));
      else if (!!t2.$isForfeitPopup && J.$eq$(result, true)) {
        t2 = this._storage;
        if (t1.depth > 0)
          this._ui.goTo$1(R.GameScreen_GameScreen$town(t2, t1.content, this._storageSave));
        else {
          t2.save$0(0);
          this._ui.pop$0();
        }
      } else if (!!t2.$isItemScreen)
        this._storage.save$0(0);
      else if (!!t2.$isItemDialog) {
        if (t1.depth === 0)
          this._storage.save$0(0);
      } else if (!t2.$isSkillDialog)
        if (!!t2.$isSelectSkillDialog && result != null) {
          t2 = J.getInterceptor$(result);
          if (!!t2.$isTargetSkill)
            this._openTargetDialog$1(result);
          else if (!!t2.$isDirectionSkill)
            this._ui.push$1(new T.SkillDirectionDialog(new R.GameScreen_activate_closure0(this, result), this));
          else if (!!t2.$isActionSkill) {
            this._lastSkill = result;
            t2 = t1.hero;
            t2._behavior = new X.ActionBehavior(result.getAction$2(t1, t2.save.skills.level$1(result)));
          }
        }
    },
    update$0: function(_) {
      var t1, result, t2;
      if (this._enterPortal$0())
        return;
      t1 = this._pause;
      if (t1 > 0) {
        this._pause = t1 - 1;
        return;
      }
      t1 = this.game;
      result = t1.update$0(0);
      t2 = t1.hero._health;
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 <= 0) {
        this._ui.goTo$1(new E.GameOverScreen(t1.log));
        return;
      }
      t1 = this._stagePanel;
      t2 = result.events;
      if (t1.update$1(0, t2))
        this.dirty$0();
      if (result.madeProgress || t2.length > 0)
        this.dirty$0();
    },
    resize$1: function(_, size) {
      var leftWidth, t1, centerWidth, t2, width, logHeight;
      if (size.$gt(0, 160))
        leftWidth = 29;
      else
        leftWidth = size.$gt(0, 150) ? 25 : 21;
      t1 = size.x;
      centerWidth = t1 - leftWidth;
      t2 = this.itemPanel;
      t2.bounds = null;
      if (t1 >= 100) {
        width = Math.min(50, 20 + C.JSInt_methods._tdivFast$1(t1 - 100, 2));
        t2.bounds = new X.Rect(new L.Vec(t1 - width, 0), new L.Vec(width, size.y));
        centerWidth -= width;
      }
      t1 = size.y;
      this._sidebarPanel.bounds = new X.Rect(new L.Vec(0, 0), new L.Vec(leftWidth, t1));
      logHeight = Math.min(6 + C.JSInt_methods._tdivFast$1(t1 - 40, 2), 20);
      t1 -= logHeight;
      this._stagePanel.bounds = new X.Rect(new L.Vec(leftWidth, 0), new L.Vec(centerWidth, t1));
      this._logPanel.bounds = new X.Rect(new L.Vec(leftWidth, t1), new L.Vec(centerWidth, logHeight));
    },
    render$1: function(terminal) {
      terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
      this._stagePanel.render$1(terminal);
      this._logPanel.render$1(terminal);
      this._sidebarPanel.render$1(terminal);
      this.itemPanel.render$1(terminal);
    },
    _enterPortal$0: function() {
      var t1, t2, t3, portal;
      t1 = this.game;
      t2 = t1._stage;
      t3 = t1.hero._pos;
      portal = t2.tiles.$index(0, t3).type.portal;
      if (portal == this._game_screen$_portal)
        return false;
      this._game_screen$_portal = portal;
      switch (portal) {
        case C.TilePortal_dungeon:
          t2 = this._ui;
          t3 = t1.content;
          t1 = t1.hero.save;
          t3 = new G.SelectDepthPopup(t3, t1);
          t3._depth = H.intTypeCheck(Math.min(100, t1.maxDepth + 1));
          t2.push$1(t3);
          break;
        case C.TilePortal_home:
          this._ui.push$1(new F._HomeViewScreen(this));
          break;
        case C.TilePortal_T3V4:
          this._enterShop$1(0);
          break;
        case C.TilePortal_T3V3:
          this._enterShop$1(1);
          break;
        case C.TilePortal_T3V2:
          this._enterShop$1(2);
          break;
        case C.TilePortal_T3V1:
          this._enterShop$1(3);
          break;
        case C.TilePortal_T3V0:
          this._enterShop$1(4);
          break;
        case C.TilePortal_T3V:
          this._enterShop$1(5);
          break;
        case C.TilePortal_T3V5:
          this._enterShop$1(6);
          break;
        case C.TilePortal_T3V6:
          this._enterShop$1(7);
          break;
        case C.TilePortal_T3V7:
          this._enterShop$1(8);
          break;
      }
      return true;
    },
    _game_screen$_open$0: function() {
      var openable, t1, t2, t3, _i, pos, t4, t5;
      openable = H.setRuntimeTypeInfo([], [L.Vec]);
      for (t1 = this.game, t2 = t1.hero._pos.get$neighbors(), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        pos = t2[_i];
        t4 = t1._stage.tiles;
        t5 = t4._elements;
        t4 = pos.y * t4.bounds.size.x + pos.x;
        if (t4 < 0 || t4 >= t5.length)
          return H.ioore(t5, t4);
        if (t5[t4].type.onOpen != null)
          C.JSArray_methods.add$1(openable, pos);
      }
      t2 = openable.length;
      if (t2 === 0) {
        t1.log.add$5(0, C.LogType_error, "You are not next to anything to open.", null, null, null);
        this.dirty$0();
      } else if (t2 === 1) {
        pos = C.JSArray_methods.get$first(openable);
        t2 = t1.hero;
        t1 = t1._stage.tiles.$index(0, pos).type.onOpen.call$1(pos);
        t2.toString;
        t2._behavior = new X.ActionBehavior(H.interceptedTypeCheck(t1, "$isAction"));
      } else
        this._ui.push$1(new T.OpenDialog(this));
    },
    _closeDoor$0: function() {
      var closeable, t1, t2, t3, _i, pos, t4, t5;
      closeable = H.setRuntimeTypeInfo([], [L.Vec]);
      for (t1 = this.game, t2 = t1.hero._pos.get$neighbors(), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        pos = t2[_i];
        t4 = t1._stage.tiles;
        t5 = t4._elements;
        t4 = pos.y * t4.bounds.size.x + pos.x;
        if (t4 < 0 || t4 >= t5.length)
          return H.ioore(t5, t4);
        if (t5[t4].type.onClose != null)
          C.JSArray_methods.add$1(closeable, pos);
      }
      t2 = closeable.length;
      if (t2 === 0) {
        t1.log.add$5(0, C.LogType_error, "You are not next to an open door.", null, null, null);
        this.dirty$0();
      } else if (t2 === 1) {
        pos = C.JSArray_methods.get$first(closeable);
        t2 = t1.hero;
        t1 = t1._stage.tiles.$index(0, pos).type.onClose.call$1(pos);
        t2.toString;
        t2._behavior = new X.ActionBehavior(H.interceptedTypeCheck(t1, "$isAction"));
      } else
        this._ui.push$1(new T.CloseDialog(this));
    },
    _openTargetDialog$1: function(skill) {
      this._ui.push$1(X.TargetDialog$(this, skill.getRange$1(0, this.game), new R.GameScreen__openTargetDialog_closure(this, skill)));
    },
    _fireAtTarget$1: function(skill) {
      var t1, t2;
      t1 = this.game;
      if (J.$eq$(this.get$currentTarget(this), t1.hero._pos)) {
        skill.toString;
        t2 = true;
      } else
        t2 = false;
      if (t2) {
        t1.log.add$5(0, C.LogType_error, "You can't target yourself.", null, null, null);
        this.dirty$0();
        return;
      }
      this._lastSkill = skill;
      t2 = t1.hero;
      t2._behavior = new X.ActionBehavior(skill.getTargetAction$3(t1, t2.save.skills.level$1(skill), this.get$currentTarget(this)));
    },
    _fireTowards$1: function(dir) {
      var t1, t2, t3, pos, previous, step, t4, t5, t6, t7, t8, tile;
      if (dir === C.Direction_0_0)
        return;
      t1 = this._lastSkill;
      t2 = J.getInterceptor$(t1);
      if (!!t2.$isDirectionSkill) {
        t2 = this.game;
        t3 = t2.hero;
        t3._behavior = new X.ActionBehavior(t1.getDirectionAction$3(t2, t3.save.skills.level$1(t1), dir));
      } else if (!!t2.$isTargetSkill) {
        t2 = this.game;
        pos = t2.hero._pos.$add(0, dir);
        for (t3 = G._LineIterator$(t2.hero._pos, pos), previous = null; t3.moveNext$0(), true; previous = step) {
          step = t3._line$_current;
          t4 = t2._stage;
          t5 = t4._actorsByTile;
          t6 = t5._elements;
          t7 = step.y;
          t8 = step.x;
          t5 = t7 * t5.bounds.size.x + t8;
          if (t5 < 0 || t5 >= t6.length)
            return H.ioore(t6, t5);
          t5 = t6[t5];
          if (t5 != null) {
            if (this._targetActor !== t5)
              this.dirty$0();
            this._targetActor = t5;
            this._game_screen$_target = null;
            break;
          }
          t4 = t4.tiles;
          t5 = t4._elements;
          t8 = t7 * t4.bounds.size.x + t8;
          if (t8 < 0 || t8 >= t5.length)
            return H.ioore(t5, t8);
          t8 = t5[t8];
          t8.toString;
          t5 = $.$get$Motility_fly();
          if ((t8.type.motility._bitMask & t5._bitMask) === 0) {
            if (this._targetActor != null || !J.$eq$(this._game_screen$_target, previous))
              this.dirty$0();
            this._targetActor = null;
            this._game_screen$_target = previous;
            break;
          }
          if (step.$sub(0, t2.hero._pos).$ge(0, t1.getRange$1(0, t2))) {
            if (this._targetActor != null || !J.$eq$(this._game_screen$_target, step))
              this.dirty$0();
            this._targetActor = null;
            this._game_screen$_target = step;
            break;
          }
        }
        if (this.get$currentTarget(this) != null) {
          t3 = t2.hero;
          t3._behavior = new X.ActionBehavior(t1.getTargetAction$3(t2, t3.save.skills.level$1(t1), this.get$currentTarget(this)));
        } else {
          t1 = t2._stage;
          t3 = t2.hero._pos.$add(0, dir);
          tile = t1.tiles.$index(0, t3).type.name;
          t2.log.add$5(0, C.LogType_error, "There is a " + tile + " in the way.", null, null, null);
          this.dirty$0();
        }
      } else {
        t3 = this.game;
        if (!!t2.$isActionSkill) {
          t3.log.add$5(0, C.LogType_error, t1.get$useName() + " does not take a direction.", null, null, null);
          this.dirty$0();
        } else {
          t3.log.add$5(0, C.LogType_error, "No skill selected.", null, null, null);
          this.dirty$0();
        }
      }
    },
    _enterShop$1: function(index) {
      var t1, t2, shops;
      t1 = this.game;
      t2 = t1.hero.save.shops;
      t2 = t2.get$keys(t2);
      shops = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
      if (index >= shops.length)
        return;
      this._ui.push$1(new F._ShopViewScreen(t1.hero.save.shops.$index(0, shops[index]), this));
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  R.GameScreen_activate_closure.prototype = {
    call$2: function(shop, inventory) {
      H.interceptedTypeCheck(shop, "$isShop").update$1(0, H.interceptedTypeCheck(inventory, "$isInventory"));
    },
    $signature: 30
  };
  R.GameScreen_activate_closure0.prototype = {
    call$1: function(dir) {
      var t1 = this.$this;
      t1._lastSkill = this.result;
      t1._fireTowards$1(dir);
    },
    $signature: 107
  };
  R.GameScreen__openTargetDialog_closure.prototype = {
    call$1: function(_) {
      return this.$this._fireAtTarget$1(this.skill);
    },
    $signature: 24
  };
  M.HeroEquipmentDialog.prototype = {
    get$name: function(_) {
      return "Equipment";
    },
    render$1: function(terminal) {
      var writeLine, writeScale, writeBonus, element, t1, baseDamage, totalDamageScale, totalDamageBonus, totalStrikeBonus, totalArmor, totalArmorBonus, _i, item, t2, t3;
      this.super$HeroInfoDialog$render(terminal);
      writeLine = new M.HeroEquipmentDialog_render_writeLine(terminal);
      writeScale = new M.HeroEquipmentDialog_render_writeScale(terminal);
      writeBonus = new M.HeroEquipmentDialog_render_writeBonus(terminal);
      terminal.writeAt$4(48, 0, "\u2550\u2550\u2550\u2550\u2550\u2550 Attack \u2550\u2550\u2550\u2550\u2550 \u2550\u2550 Defend \u2550\u2550", C.Color_38_38_56);
      terminal.writeAt$4(48, 1, "El Damage      Hit  Dodge Armor", C.Color_63_64_114);
      this.drawEquipmentTable$2(terminal, new M.HeroEquipmentDialog_render_closure(writeLine, terminal, writeScale, writeBonus));
      element = $.$get$Element_none();
      for (t1 = this.hero._equipment.slots, baseDamage = 3, totalDamageScale = 1, totalDamageBonus = 0, totalStrikeBonus = 0, totalArmor = 0, totalArmorBonus = 0, _i = 0; _i < 9; ++_i) {
        item = t1[_i];
        if (item == null)
          continue;
        t2 = item.type;
        t3 = t2.attack;
        if (t3 != null) {
          element = t3.element;
          baseDamage = t3.damage;
        }
        totalDamageScale *= item.get$damageScale();
        totalDamageBonus += item.get$damageBonus();
        totalStrikeBonus += item.get$strikeBonus();
        totalArmor += t2.armor;
        totalArmorBonus += item.get$armorModifier();
      }
      terminal.writeAt$4(41, 21, "Totals", C.Color_63_64_114);
      writeLine.call$2(2, C.Color_38_38_56);
      writeLine.call$2(20, C.Color_38_38_56);
      terminal.writeAt$4(48, 21, element.abbreviation, B.elementColor(element));
      terminal.writeAt$3(51, 21, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(baseDamage), 2));
      writeScale.call$3(54, 21, totalDamageScale);
      writeBonus.call$3(59, 21, totalDamageBonus);
      writeBonus.call$3(64, 21, totalStrikeBonus);
      terminal.writeAt$4(74, 21, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(totalArmor), 2), C.Color_226_223_240);
      writeBonus.call$3(77, 21, totalArmorBonus);
    }
  };
  M.HeroEquipmentDialog_render_writeLine.prototype = {
    call$2: function(y, color) {
      this.terminal.writeAt$4(2, y, "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500", color);
    },
    $signature: 13
  };
  M.HeroEquipmentDialog_render_writeScale.prototype = {
    call$3: function(x, y, scale) {
      var string, t1;
      string = C.JSNumber_methods.toStringAsFixed$1(scale, 1);
      if (scale > 1) {
        t1 = this.terminal;
        t1.writeAt$4(x, y, "x", C.Color_0_64_39);
        t1.writeAt$4(x + 1, y, string, C.Color_22_117_38);
      } else if (scale < 1) {
        t1 = this.terminal;
        t1.writeAt$4(x, y, "x", C.Color_84_0_39);
        t1.writeAt$4(x + 1, y, string, C.Color_204_35_57);
      }
    }
  };
  M.HeroEquipmentDialog_render_writeBonus.prototype = {
    call$3: function(x, y, bonus) {
      var string, t1, t2;
      string = C.JSInt_methods.toString$0(Math.abs(bonus));
      if (bonus > 0) {
        t1 = this.terminal;
        t2 = string.length;
        t1.writeAt$4(x + 2 - t2, y, "+", C.Color_0_64_39);
        t1.writeAt$4(x + 3 - t2, y, string, C.Color_22_117_38);
      }
    }
  };
  M.HeroEquipmentDialog_render_closure.prototype = {
    call$2: function(item, y) {
      var t1, t2, t3, t4;
      this.writeLine.call$2(y - 1, C.Color_19_17_28);
      if (item == null)
        return;
      t1 = item.type;
      t2 = t1.attack;
      if (t2 != null) {
        t3 = this.terminal;
        t4 = t2.element;
        t3.writeAt$4(48, y, t4.abbreviation, B.elementColor(t4));
        t3.writeAt$4(51, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t2.damage), 2), C.Color_226_223_240);
      }
      this.writeScale.call$3(54, y, item.get$damageScale());
      t2 = this.writeBonus;
      t2.call$3(59, y, item.get$damageBonus());
      t2.call$3(64, y, item.get$strikeBonus());
      t1 = t1.armor;
      if (t1 !== 0)
        this.terminal.writeAt$4(74, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t1), 2), C.Color_226_223_240);
      t2.call$3(77, y, item.get$armorModifier());
    },
    $signature: 32
  };
  M.HeroInfoDialog.prototype = {
    get$extraHelp: function() {
      return;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      var t1, index, $screen;
      if (alt)
        return false;
      if (keyCode === 9) {
        t1 = $.$get$HeroInfoDialog__screens();
        index = C.JSArray_methods.indexOf$1(t1, this);
        index = shift ? index + (t1.length - 1) : index + 1;
        $screen = t1[C.JSInt_methods.$mod(index, t1.length)];
        this._ui.goTo$1($screen);
        return true;
      }
      return false;
    },
    handleInput$1: function(input) {
      if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
        this._ui.pop$0();
        return true;
      }
      return false;
    },
    render$1: function(terminal) {
      var t1, nextScreen, helpText;
      terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
      t1 = $.$get$HeroInfoDialog__screens();
      nextScreen = t1[C.JSInt_methods.$mod(C.JSArray_methods.indexOf$1(t1, this) + 1, t1.length)];
      helpText = "[Esc] Exit, [Tab] View " + nextScreen.get$name(nextScreen);
      if (this.get$extraHelp() != null)
        helpText += ", " + H.S(this.get$extraHelp());
      terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, helpText, C.Color_63_64_114);
    },
    drawEquipmentTable$2: function(terminal, callback) {
      var t1, t2, y, i, t3, item;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [R.Item, P.int]});
      terminal.writeAt$4(2, 1, "Equipment", C.Color_222_156_33);
      for (t1 = this.hero, t2 = terminal._display, y = 3, i = 0; t3 = t1._equipment, i < 9; ++i) {
        item = t3.slots[i];
        callback.call$2(item, y);
        if (item == null) {
          terminal.writeAt$4(2, y, "(" + t1._equipment.slotTypes[i] + ")", C.Color_38_38_56);
          y += 2;
          continue;
        }
        t2.setGlyph$3(0, y, item.type.appearance);
        terminal.writeAt$4(2, y, item.get$nounText(), C.Color_226_223_240);
        y += 2;
      }
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  Q.HeroItemLoreDialog.prototype = {
    get$name: function(_) {
      return "Item Lore";
    },
    get$extraHelp: function() {
      return "[\u2195] Scroll, [S] " + this._sort.get$next().helpText;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      if (!shift && !alt && keyCode === 83) {
        this._sort = this._sort.get$next();
        this._listItems$0();
        this.dirty$0();
        return true;
      }
      return this.super$HeroInfoDialog$keyDown(keyCode, alt, shift);
    },
    handleInput$1: function(input) {
      H.interceptedTypeCheck(input, "$isInput");
      switch (input) {
        case C.Input_n:
          this._hero_item_lore_dialog$_select$1(-1);
          return true;
        case C.Input_s:
          this._hero_item_lore_dialog$_select$1(1);
          return true;
        case C.Input_runN:
          this._hero_item_lore_dialog$_select$1(-10);
          return true;
        case C.Input_runS:
          this._hero_item_lore_dialog$_select$1(10);
          return true;
      }
      return this.super$HeroInfoDialog$handleInput(input);
    },
    render$1: function(terminal) {
      var writeLine, t1, t2, t3, i, y, index, t4, item, fore;
      this.super$HeroInfoDialog$render(terminal);
      writeLine = new Q.HeroItemLoreDialog_render_writeLine(terminal);
      terminal.writeAt$4(2, 1, "Items", C.Color_222_156_33);
      terminal.writeAt$4(20, 1, C.JSString_methods.padLeft$1("(" + this._sort.description + ")", 34), C.Color_38_38_56);
      terminal.writeAt$4(55, 1, "Depth   Price Found  Used", C.Color_63_64_114);
      for (t1 = this.hero, t2 = this._hero_item_lore_dialog$_items, t3 = terminal._display, i = 0; i < 11; ++i) {
        y = i * 2 + 3;
        writeLine.call$2(y + 1, C.Color_19_17_28);
        index = this._scroll + i;
        t4 = t2.length;
        if (index >= t4)
          continue;
        if (index < 0)
          return H.ioore(t2, index);
        item = t2[index];
        if (index === this._selection) {
          terminal.writeAt$4(1, y, "\u25ba", C.Color_222_156_33);
          fore = C.Color_222_156_33;
        } else
          fore = C.Color_132_126_135;
        t4 = t1._lore._foundItems.$index(0, item);
        if (t4 == null)
          t4 = 1;
        if (t4 > 0) {
          t3.setGlyph$3(0, y, item.appearance);
          terminal.writeAt$4(2, y, O.Log__categorize(item.quantifiableName, false, true), fore);
          terminal.writeAt$4(55, y, C.JSString_methods.padLeft$1(J.toString$0$(item.depth), 5), fore);
          terminal.writeAt$4(61, y, C.JSString_methods.padLeft$1(Y.formatMoney(item.price), 7), fore);
          terminal.writeAt$4(69, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t4), 5), fore);
          if (item.use != null) {
            t4 = t1._lore._usedItems.$index(0, item);
            terminal.writeAt$4(75, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t4 == null ? 0 : t4), 5), fore);
          } else
            terminal.writeAt$4(75, y, C.JSString_methods.padLeft$1("--", 5), fore);
        } else
          terminal.writeAt$4(2, y, "(undiscovered " + (this._scroll + i + 1) + ")", C.Color_38_38_56);
      }
      writeLine.call$2(2, C.Color_38_38_56);
      t1 = this._selection;
      if (t1 < 0 || t1 >= t2.length)
        return H.ioore(t2, t1);
      this._showItem$2(terminal, t2[t1]);
    },
    _showItem$2: function(terminal, item) {
      var t1 = terminal._display._glyphs.bounds.size;
      terminal.toString;
      terminal = new G.PortTerminal(new L.Vec(t1.x, 14), 0, t1.y - 15, terminal, C.Color_255_255_255, C.Color_0_0_0);
      R.Draw__box(terminal, 0, 1, 80, 13, null, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      terminal.writeAt$4(1, 0, "\u250c\u2500\u2510", C.Color_38_38_56);
      terminal.writeAt$4(1, 1, "\u2561 \u255e", C.Color_38_38_56);
      terminal.writeAt$4(1, 2, "\u2514\u2500\u2518", C.Color_38_38_56);
      if (this.hero._lore.foundItems$1(item) === 0) {
        terminal.writeAt$4(1, 3, "You have not found this item yet.", C.Color_38_38_56);
        return;
      }
      terminal.drawGlyph$3(2, 1, item.appearance);
      terminal.writeAt$4(4, 1, O.Log__categorize(item.quantifiableName, false, true), C.Color_222_156_33);
    },
    _hero_item_lore_dialog$_select$1: function(offset) {
      var t1 = H.intTypeCheck(C.JSInt_methods.clamp$2(this._selection + offset, 0, this._hero_item_lore_dialog$_items.length - 1));
      this._selection = t1;
      this._scroll = H.intTypeCheck(C.JSInt_methods.clamp$2(this._scroll, t1 - 11 + 1, t1));
      this.dirty$0();
    },
    _listItems$0: function() {
      var _box_0, t1, t2, t3, selectedItem, compareDepth;
      _box_0 = {};
      t1 = this._hero_item_lore_dialog$_items;
      t2 = t1.length;
      if (t2 !== 0) {
        t3 = this._selection;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        selectedItem = t1[t3];
      } else
        selectedItem = null;
      C.JSArray_methods.set$length(t1, 0);
      C.JSArray_methods.addAll$1(t1, $.$get$Items_types().get$all());
      compareDepth = new Q.HeroItemLoreDialog__listItems_compareDepth();
      t2 = [{func: 1, ret: P.int, args: [L.ItemType, L.ItemType]}];
      _box_0.comparisons = H.setRuntimeTypeInfo([], t2);
      switch (this._sort) {
        case C._Sort_MQk:
          _box_0.comparisons = H.setRuntimeTypeInfo([new Q.HeroItemLoreDialog__listItems_compareSort(), compareDepth], t2);
          break;
        case C._Sort_0CF:
          break;
        case C._Sort_Qu1:
          _box_0.comparisons = H.setRuntimeTypeInfo([compareDepth], t2);
          break;
        case C._Sort_0:
          _box_0.comparisons = H.setRuntimeTypeInfo([new Q.HeroItemLoreDialog__listItems_comparePrice()], t2);
          break;
      }
      C.JSArray_methods.sort$1(t1, new Q.HeroItemLoreDialog__listItems_closure(_box_0));
      this._selection = 0;
      if (selectedItem != null)
        this._selection = C.JSArray_methods.indexOf$1(t1, selectedItem);
      this._hero_item_lore_dialog$_select$1(0);
    }
  };
  Q.HeroItemLoreDialog_render_writeLine.prototype = {
    call$2: function(y, color) {
      this.terminal.writeAt$4(2, y, "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500", color);
    },
    $signature: 13
  };
  Q.HeroItemLoreDialog__listItems_compareSort.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isItemType");
      H.interceptedTypeCheck(b, "$isItemType");
      return C.JSInt_methods.compareTo$1(a.sortIndex, b.sortIndex);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 9
  };
  Q.HeroItemLoreDialog__listItems_compareDepth.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isItemType");
      H.interceptedTypeCheck(b, "$isItemType");
      return J.compareTo$1$ns(a.depth, b.depth);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 9
  };
  Q.HeroItemLoreDialog__listItems_comparePrice.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isItemType");
      H.interceptedTypeCheck(b, "$isItemType");
      return J.compareTo$1$ns(a.price, b.price);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 9
  };
  Q.HeroItemLoreDialog__listItems_closure.prototype = {
    call$2: function(a, b) {
      var t1, t2, _i, compare;
      H.interceptedTypeCheck(a, "$isItemType");
      H.interceptedTypeCheck(b, "$isItemType");
      for (t1 = this._box_0.comparisons, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        compare = t1[_i].call$2(a, b);
        if (compare !== 0)
          return compare;
      }
      return C.JSString_methods.compareTo$1(O.Log__categorize(a.quantifiableName, false, true).toLowerCase(), O.Log__categorize(b.quantifiableName, false, true).toLowerCase());
    },
    $signature: 9
  };
  Q._Sort.prototype = {
    get$next: function() {
      return C.List_KO9[C.JSInt_methods.$mod(C.JSArray_methods.indexOf$1(C.List_KO9, this) + 1, 4)];
    }
  };
  Z.HeroMonsterLoreDialog.prototype = {
    get$name: function(_) {
      return "Monster Lore";
    },
    get$extraHelp: function() {
      return "[\u2195] Scroll, [S] " + this._hero_monster_lore_dialog$_sort.get$next().helpText;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      if (!shift && !alt && keyCode === 83) {
        this._hero_monster_lore_dialog$_sort = this._hero_monster_lore_dialog$_sort.get$next();
        this._listBreeds$0();
        this.dirty$0();
        return true;
      }
      return this.super$HeroInfoDialog$keyDown(keyCode, alt, shift);
    },
    handleInput$1: function(input) {
      H.interceptedTypeCheck(input, "$isInput");
      switch (input) {
        case C.Input_n:
          this._hero_monster_lore_dialog$_select$1(-1);
          return true;
        case C.Input_s:
          this._hero_monster_lore_dialog$_select$1(1);
          return true;
        case C.Input_runN:
          this._hero_monster_lore_dialog$_select$1(-10);
          return true;
        case C.Input_runS:
          this._hero_monster_lore_dialog$_select$1(10);
          return true;
      }
      return this.super$HeroInfoDialog$handleInput(input);
    },
    render$1: function(terminal) {
      var writeLine, t1, t2, t3, i, y, index, t4, breed, fore, t5;
      this.super$HeroInfoDialog$render(terminal);
      writeLine = new Z.HeroMonsterLoreDialog_render_writeLine(terminal);
      terminal.writeAt$4(2, 1, "Monsters", C.Color_222_156_33);
      terminal.writeAt$4(20, 1, C.JSString_methods.padLeft$1("(" + this._hero_monster_lore_dialog$_sort.description + ")", 42), C.Color_38_38_56);
      terminal.writeAt$4(63, 1, "Depth Seen Slain", C.Color_63_64_114);
      for (t1 = this.hero, t2 = this._breeds, t3 = terminal._display, i = 0; i < 11; ++i) {
        y = i * 2 + 3;
        writeLine.call$2(y + 1, C.Color_19_17_28);
        index = this._hero_monster_lore_dialog$_scroll + i;
        t4 = t2.length;
        if (index >= t4)
          continue;
        if (index < 0)
          return H.ioore(t2, index);
        breed = t2[index];
        if (index === this._hero_monster_lore_dialog$_selection) {
          terminal.writeAt$4(1, y, "\u25ba", C.Color_222_156_33);
          fore = C.Color_222_156_33;
        } else
          fore = C.Color_132_126_135;
        t4 = t1._lore._seenBreeds.$index(0, breed);
        if (t4 == null)
          t4 = 0;
        t5 = t1._lore._slainBreeds.$index(0, breed);
        if (t5 == null)
          t5 = 0;
        if (t4 > 0) {
          t3.setGlyph$3(0, y, breed.appearance);
          terminal.writeAt$4(2, y, O.Log__categorize(breed._breed$_name, false, true), fore);
          terminal.writeAt$4(63, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(breed.depth), 5), fore);
          if (breed.flags.unique) {
            terminal.writeAt$4(69, y, C.JSString_methods.padLeft$1("Yes", 5), fore);
            terminal.writeAt$4(75, y, C.JSString_methods.padLeft$1(t5 > 0 ? "Yes" : "No", 5), fore);
          } else {
            terminal.writeAt$4(69, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t4), 5), fore);
            terminal.writeAt$4(75, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t5), 5), fore);
          }
        } else
          terminal.writeAt$4(2, y, "(undiscovered " + (this._hero_monster_lore_dialog$_scroll + i + 1) + ")", C.Color_38_38_56);
      }
      writeLine.call$2(2, C.Color_38_38_56);
      t1 = this._hero_monster_lore_dialog$_selection;
      if (t1 < 0 || t1 >= t2.length)
        return H.ioore(t2, t1);
      this._showMonster$2(terminal, t2[t1]);
    },
    _showMonster$2: function(terminal, breed) {
      var t1, t2, t3, y, _i;
      t1 = terminal._display._glyphs.bounds.size;
      t2 = t1.x;
      terminal.toString;
      t3 = new L.Vec(t2, 14);
      terminal = new G.PortTerminal(t3, 0, t1.y - 15, terminal, C.Color_255_255_255, C.Color_0_0_0);
      R.Draw__box(terminal, 0, 1, 80, 13, null, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      terminal.writeAt$4(1, 0, "\u250c\u2500\u2510", C.Color_38_38_56);
      terminal.writeAt$4(1, 1, "\u2561 \u255e", C.Color_38_38_56);
      terminal.writeAt$4(1, 2, "\u2514\u2500\u2518", C.Color_38_38_56);
      if (this.hero._lore.seenBreed$1(breed) === 0) {
        terminal.writeAt$4(1, 3, "You have not seen this breed yet.", C.Color_38_38_56);
        return;
      }
      terminal.drawGlyph$3(2, 1, breed.appearance);
      terminal.writeAt$4(4, 1, O.Log__categorize(breed._breed$_name, false, true), C.Color_222_156_33);
      t1 = breed.description;
      if (t1 != null) {
        for (t1 = O.Log_wordWrap(t2 - 2, t1), t2 = t1.length, y = 3, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          terminal.writeAt$4(1, y, t1[_i], C.Color_132_126_135);
          ++y;
        }
        ++y;
      } else
        y = 3;
      for (t1 = O.Log_wordWrap(t3.x - 2, this._describeBreed$1(breed)), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        terminal.writeAt$4(1, y, t1[_i], C.Color_132_126_135);
        ++y;
      }
    },
    _hero_monster_lore_dialog$_select$1: function(offset) {
      var t1 = H.intTypeCheck(C.JSInt_methods.clamp$2(this._hero_monster_lore_dialog$_selection + offset, 0, this._breeds.length - 1));
      this._hero_monster_lore_dialog$_selection = t1;
      this._hero_monster_lore_dialog$_scroll = H.intTypeCheck(C.JSInt_methods.clamp$2(this._hero_monster_lore_dialog$_scroll, t1 - 11 + 1, t1));
      this.dirty$0();
    },
    _describeBreed$1: function(breed) {
      var t1, sentences, pronoun, lore, t2, t3, noun;
      t1 = P.String;
      sentences = H.setRuntimeTypeInfo([], [t1]);
      pronoun = breed.pronoun.subjective;
      lore = this.hero._lore;
      t2 = breed.groups;
      if (t2.length !== 0) {
        t3 = H.getTypeArgumentByIndex(t2, 0);
        noun = new H.MappedListIterable(t2, H.functionTypeCheck(new Z.HeroMonsterLoreDialog__describeBreed_closure(), {func: 1, ret: t1, args: [t3]}), [t3, t1]).join$1(0, " ");
      } else
        noun = "monster";
      if (breed.flags.unique)
        if (lore.slain$1(breed) > 0)
          C.JSArray_methods.add$1(sentences, "You have slain this unique " + noun + ".");
        else
          C.JSArray_methods.add$1(sentences, "You have seen but not slain this unique " + noun + ".");
      else
        C.JSArray_methods.add$1(sentences, "You have seen " + lore.seenBreed$1(breed) + " and slain " + lore.slain$1(breed) + " of this " + noun + ".");
      C.JSArray_methods.add$1(sentences, pronoun + " is worth " + breed.get$experience() + " experience.");
      if (lore.slain$1(breed) > 0)
        C.JSArray_methods.add$1(sentences, pronoun + " has " + breed.maxHealth + " health.");
      t2 = H.getTypeArgumentByIndex(sentences, 0);
      return new H.MappedListIterable(sentences, H.functionTypeCheck(new Z.HeroMonsterLoreDialog__describeBreed_closure0(), {func: 1, ret: t1, args: [t2]}), [t2, t1]).join$1(0, " ");
    },
    _listBreeds$0: function() {
      var _box_0, t1, t2, t3, selectedBreed, compareDepth;
      _box_0 = {};
      t1 = this._breeds;
      t2 = t1.length;
      if (t2 !== 0) {
        t3 = this._hero_monster_lore_dialog$_selection;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        selectedBreed = t1[t3];
      } else
        selectedBreed = null;
      C.JSArray_methods.set$length(t1, 0);
      if (this._hero_monster_lore_dialog$_sort === C._Sort_gc6) {
        t2 = $.$get$Monsters_breeds().get$all();
        t3 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
        C.JSArray_methods.addAll$1(t1, new H.WhereIterable(t2, H.functionTypeCheck(new Z.HeroMonsterLoreDialog__listBreeds_closure(), {func: 1, ret: P.bool, args: [t3]}), [t3]));
      } else
        C.JSArray_methods.addAll$1(t1, $.$get$Monsters_breeds().get$all());
      compareDepth = new Z.HeroMonsterLoreDialog__listBreeds_compareDepth();
      t2 = [{func: 1, ret: P.int, args: [B.Breed, B.Breed]}];
      _box_0.comparisons = H.setRuntimeTypeInfo([], t2);
      switch (this._hero_monster_lore_dialog$_sort) {
        case C._Sort_JQf:
          _box_0.comparisons = H.setRuntimeTypeInfo([new Z.HeroMonsterLoreDialog__listBreeds_compareGlyph(), compareDepth], t2);
          break;
        case C._Sort_0CF0:
          break;
        case C._Sort_Qu10:
          _box_0.comparisons = H.setRuntimeTypeInfo([compareDepth], t2);
          break;
        case C._Sort_gc6:
          _box_0.comparisons = H.setRuntimeTypeInfo([compareDepth], t2);
          break;
      }
      C.JSArray_methods.sort$1(t1, new Z.HeroMonsterLoreDialog__listBreeds_closure0(_box_0));
      this._hero_monster_lore_dialog$_selection = 0;
      if (selectedBreed != null) {
        t1 = C.JSArray_methods.indexOf$1(t1, selectedBreed);
        this._hero_monster_lore_dialog$_selection = t1;
        if (t1 === -1)
          this._hero_monster_lore_dialog$_selection = 0;
      }
      this._hero_monster_lore_dialog$_select$1(0);
    }
  };
  Z.HeroMonsterLoreDialog_render_writeLine.prototype = {
    call$2: function(y, color) {
      this.terminal.writeAt$4(2, y, "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500", color);
    },
    $signature: 13
  };
  Z.HeroMonsterLoreDialog__describeBreed_closure.prototype = {
    call$1: function(group) {
      return H.stringTypeCheck(group);
    },
    $signature: 3
  };
  Z.HeroMonsterLoreDialog__describeBreed_closure0.prototype = {
    call$1: function(sentence) {
      H.stringTypeCheck(sentence);
      return J.getInterceptor$s(sentence).substring$2(sentence, 0, 1).toUpperCase() + C.JSString_methods.substring$1(sentence, 1);
    },
    $signature: 3
  };
  Z.HeroMonsterLoreDialog__listBreeds_closure.prototype = {
    call$1: function(breed) {
      return H.interceptedTypeCheck(breed, "$isBreed").flags.unique;
    },
    $signature: 111
  };
  Z.HeroMonsterLoreDialog__listBreeds_compareGlyph.prototype = {
    call$2: function(a, b) {
      var aChar, bChar, t1;
      H.interceptedTypeCheck(a, "$isBreed");
      H.interceptedTypeCheck(b, "$isBreed");
      aChar = a.appearance.char;
      bChar = b.appearance.char;
      t1 = new Z.HeroMonsterLoreDialog__listBreeds_compareGlyph_isUpper();
      if (t1.call$1(aChar) && !t1.call$1(bChar))
        return 1;
      if (!t1.call$1(aChar) && t1.call$1(bChar))
        return -1;
      return J.compareTo$1$ns(aChar, bChar);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 19
  };
  Z.HeroMonsterLoreDialog__listBreeds_compareGlyph_isUpper.prototype = {
    call$1: function(c) {
      if (typeof c !== "number")
        return c.$ge();
      return c >= 65 && c <= 90;
    },
    $signature: 113
  };
  Z.HeroMonsterLoreDialog__listBreeds_compareDepth.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isBreed");
      H.interceptedTypeCheck(b, "$isBreed");
      return C.JSInt_methods.compareTo$1(a.depth, b.depth);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 19
  };
  Z.HeroMonsterLoreDialog__listBreeds_closure0.prototype = {
    call$2: function(a, b) {
      var t1, t2, _i, compare;
      H.interceptedTypeCheck(a, "$isBreed");
      H.interceptedTypeCheck(b, "$isBreed");
      for (t1 = this._box_0.comparisons, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        compare = t1[_i].call$2(a, b);
        if (compare !== 0)
          return compare;
      }
      return C.JSString_methods.compareTo$1(O.Log__categorize(a._breed$_name, false, true).toLowerCase(), O.Log__categorize(b._breed$_name, false, true).toLowerCase());
    },
    $signature: 19
  };
  Z._Sort0.prototype = {
    get$next: function() {
      return C.List_WtG[C.JSInt_methods.$mod(C.JSArray_methods.indexOf$1(C.List_WtG, this) + 1, 4)];
    }
  };
  Z.HeroResistancesDialog.prototype = {
    get$name: function(_) {
      return "Resistances";
    },
    render$1: function(terminal) {
      var writeLine, t1, t2, i, _i, element, x, resistance, color;
      this.super$HeroInfoDialog$render(terminal);
      writeLine = new Z.HeroResistancesDialog_render_writeLine(terminal);
      terminal.writeAt$4(48, 0, "\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 Resistances \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550", C.Color_38_38_56);
      this.drawEquipmentTable$2(terminal, new Z.HeroResistancesDialog_render_closure(this, writeLine, terminal));
      terminal.writeAt$4(41, 21, "Totals", C.Color_63_64_114);
      writeLine.call$2(2, C.Color_38_38_56);
      writeLine.call$2(20, C.Color_38_38_56);
      for (t1 = $.$get$Elements_all(), t2 = this.hero, i = 0, _i = 0; _i < 12; ++_i) {
        element = t1[_i];
        if (element == $.$get$Element_none())
          continue;
        x = 48 + i * 3;
        terminal.writeAt$4(x, 1, element.abbreviation, B.elementColor(element));
        resistance = t2.equipmentResistance$1(element);
        if (resistance > 0)
          color = C.Color_22_117_38;
        else
          color = resistance < 0 ? C.Color_204_35_57 : C.Color_38_38_56;
        terminal.writeAt$4(x, 21, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(resistance), 2), color);
        ++i;
      }
    }
  };
  Z.HeroResistancesDialog_render_writeLine.prototype = {
    call$2: function(y, color) {
      this.terminal.writeAt$4(2, y, "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500", color);
    },
    $signature: 13
  };
  Z.HeroResistancesDialog_render_closure.prototype = {
    call$2: function(item, y) {
      var t1, t2, i, _i, element, x, resistance, string;
      this.writeLine.call$2(y - 1, C.Color_19_17_28);
      if (item == null)
        return;
      for (t1 = $.$get$Elements_all(), t2 = this.terminal, i = 0, _i = 0; _i < 12; ++_i) {
        element = t1[_i];
        if (element == $.$get$Element_none())
          continue;
        x = 48 + i * 3;
        resistance = item.resistance$1(element);
        string = C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(resistance), 2);
        if (resistance > 0)
          t2.writeAt$4(x, y, string, C.Color_22_117_38);
        else if (resistance < 0)
          t2.writeAt$4(x, y, string, C.Color_204_35_57);
        ++i;
      }
    },
    $signature: 32
  };
  Y.Input.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  D.ItemDialog.prototype = {
    get$isTransparent: function() {
      return true;
    },
    handleInput$1: function(input) {
      var t1, t2;
      switch (H.interceptedTypeCheck(input, "$isInput")) {
        case C.Input_ok:
          t1 = this._selectedItem;
          if (t1 != null) {
            this._command.selectItem$4(this, t1, this._item_dialog$_count, this._location);
            return true;
          }
          break;
        case C.Input_cancel:
          if (this._selectedItem != null) {
            this._selectedItem = null;
            this.dirty$0();
          } else
            this._ui.pop$0();
          return true;
        case C.Input_n:
          t1 = this._selectedItem;
          if (t1 != null) {
            t2 = this._item_dialog$_count;
            t1 = t1._count;
            if (typeof t2 !== "number")
              return t2.$lt();
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (t2 < t1) {
              this._item_dialog$_count = t2 + 1;
              this.dirty$0();
            }
            return true;
          }
          break;
        case C.Input_s:
          if (this._selectedItem != null) {
            t1 = this._item_dialog$_count;
            if (typeof t1 !== "number")
              return t1.$gt();
            if (t1 > 1) {
              this._item_dialog$_count = t1 - 1;
              this.dirty$0();
            }
            return true;
          }
          break;
      }
      return false;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      var t1, t2, index, count;
      if (keyCode === 16) {
        this._item_dialog$_shiftDown = true;
        this.dirty$0();
        return true;
      }
      if (alt)
        return false;
      if (this._selectedItem != null)
        return false;
      if (typeof keyCode !== "number")
        return keyCode.$ge();
      if (keyCode >= 65 && keyCode <= 90) {
        this._selectItem$1(keyCode - 65);
        return true;
      }
      if (keyCode === 9 && this._command.get$allowedLocations().length > 1) {
        t1 = shift ? -1 : 1;
        t2 = this._command;
        index = C.JSArray_methods.indexOf$1(t2.get$allowedLocations(), this._location);
        count = t2.get$allowedLocations().length;
        t2 = t2.get$allowedLocations();
        t1 = C.JSInt_methods.$mod(index + count + t1, count);
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        this._location = t2[t1];
        this.dirty$0();
        return true;
      }
      return false;
    },
    keyUp$3$alt$shift: function(keyCode, alt, shift) {
      if (keyCode === 16) {
        this._item_dialog$_shiftDown = false;
        this.dirty$0();
        return true;
      }
      return false;
    },
    render$1: function(terminal) {
      var t1, itemCount, t2, t3, t4, itemsTop, itemsWidth, itemsLeft, itemView, query, helpKeys;
      t1 = this._location;
      switch (t1) {
        case C.ItemLocation_wMy:
          itemCount = 24;
          break;
        case C.ItemLocation_A8D:
          this._item_dialog$_gameScreen.game.hero.save._equipment;
          itemCount = 9;
          break;
        case C.ItemLocation_46y:
          itemCount = 5;
          break;
        default:
          itemCount = 0;
      }
      t2 = this._item_dialog$_gameScreen;
      t3 = t2.itemPanel;
      t4 = t3.bounds;
      if (t4 != null) {
        switch (t1) {
          case C.ItemLocation_wMy:
            itemsTop = t3.get$inventoryTop();
            break;
          case C.ItemLocation_A8D:
            itemsTop = 0;
            break;
          case C.ItemLocation_46y:
            itemsTop = t4.size.y > 50 ? t3.get$onGroundTop() : 0;
            break;
          default:
            itemsTop = null;
        }
        itemsWidth = Math.max(46, t3.bounds.size.x + 2);
        itemsLeft = terminal._display._glyphs.bounds.size.x - itemsWidth;
      } else {
        t1 = t2._stagePanel.bounds;
        itemsLeft = t1.get$right(t1) - 46;
        itemsTop = t2._stagePanel.bounds.pos.y;
        itemsWidth = 46;
      }
      itemView = new D._ItemDialogItemView(this);
      t1 = itemCount + 2;
      terminal.toString;
      t3 = new G.PortTerminal(new L.Vec(itemsWidth, t1), itemsLeft, itemsTop, terminal, C.Color_255_255_255, C.Color_0_0_0);
      R.Draw__box(t3, 0, 0, itemsWidth, t1, C.Color_222_156_33, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      t4 = this._getItems$0();
      t3.writeAt$4(2, 0, " " + t4.get$location(t4).name + " ", C.Color_222_156_33);
      itemView.super$ItemView$render(t3.rect$4(0, 1, 1, itemsWidth - 2, t1 - 2));
      if (this._selectedItem == null)
        query = this._item_dialog$_shiftDown ? "Inspect which item?" : this._command.query$1(this._location);
      else
        query = J.$add$ansx(this._command.queryCount$1(this._location), " " + H.S(this._item_dialog$_count));
      t1 = P.String;
      helpKeys = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      if (this._selectedItem == null)
        if (this._item_dialog$_shiftDown)
          helpKeys.$indexSet(0, "A-Z", "Inspect item");
        else {
          helpKeys.$indexSet(0, "A-Z", "Select item");
          helpKeys.$indexSet(0, "Shift", "Inspect");
        }
      else
        helpKeys.$indexSet(0, "\u2195", "Change quantity");
      if (this._command.get$allowedLocations().length > 1)
        helpKeys.$indexSet(0, "Tab", "Switch view");
      R.Draw_helpKeys(terminal, helpKeys, query);
      t1 = this._item_dialog$_inspected;
      if (t1 != null) {
        t1 = itemView.itemY$1(t1);
        if (typeof itemsTop !== "number")
          return itemsTop.$add();
        Y.drawInspector(new G.PortTerminal(new L.Vec(34, 20), itemsLeft - 34, H.intTypeCheck(C.JSInt_methods.clamp$2(itemsTop + t1 + 1, 0, terminal._display._glyphs.bounds.size.y - 20)), terminal, C.Color_255_255_255, C.Color_0_0_0), t2.game.hero.save, this._item_dialog$_inspected);
      }
    },
    _item_dialog$_canSelect$1: function(item) {
      var t1;
      if (this._item_dialog$_shiftDown)
        return true;
      t1 = this._selectedItem;
      if (t1 != null)
        return item === t1;
      return this._command.canSelect$1(item);
    },
    _selectItem$1: function(index) {
      var items, t1, t2, t3;
      items = J.toList$0$ax(this._getItems$0().get$slots());
      t1 = items.length;
      if (index >= t1)
        return;
      if (index < 0)
        return H.ioore(items, index);
      t1 = items[index];
      if (t1 == null)
        return;
      if (this._item_dialog$_shiftDown) {
        this._item_dialog$_inspected = H.interceptedTypeCheck(t1, "$isItem");
        this.dirty$0();
      } else {
        t2 = this._command;
        if (!t2.canSelect$1(t1))
          return;
        if (index >= items.length)
          return H.ioore(items, index);
        t1 = items[index]._count;
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 1 && t2.get$needsCount();
        t3 = items.length;
        if (t1) {
          if (index >= t3)
            return H.ioore(items, index);
          t1 = H.interceptedTypeCheck(items[index], "$isItem");
          this._selectedItem = t1;
          this._item_dialog$_count = t1._count;
          this.dirty$0();
        } else {
          if (index >= t3)
            return H.ioore(items, index);
          t2.selectItem$4(this, items[index], 1, this._location);
        }
      }
    },
    _getItems$0: function() {
      switch (this._location) {
        case C.ItemLocation_wMy:
          return this._item_dialog$_gameScreen.game.hero.save._inventory;
        case C.ItemLocation_A8D:
          return this._item_dialog$_gameScreen.game.hero.save._equipment;
        case C.ItemLocation_46y:
          var t1 = this._item_dialog$_gameScreen.game;
          return t1._stage.itemsAt$1(t1.hero._pos);
      }
      throw H.wrapException("unreachable");
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  D._ItemDialogItemView.prototype = {
    get$items: function() {
      return this._dialog._getItems$0();
    },
    get$canSelectAny: function() {
      return true;
    },
    get$capitalize: function() {
      return this._dialog._item_dialog$_shiftDown;
    },
    get$showPrices: function() {
      return this._dialog._command.get$showPrices();
    },
    get$inspectedItem: function() {
      return this._dialog._item_dialog$_inspected;
    },
    canSelect$1: function(item) {
      return this._dialog._item_dialog$_canSelect$1(item);
    },
    getPrice$1: function(item) {
      return this._dialog._command.getPrice$1(item);
    }
  };
  D._ItemCommand.prototype = {
    get$allowedLocations: function() {
      return C.List_cdS;
    },
    get$showPrices: function() {
      return false;
    },
    queryCount$1: function($location) {
      return;
    },
    getPrice$1: function(item) {
      return item.get$price();
    },
    transfer$4: function(dialog, item, count, destination) {
      if (!destination.canAdd$1(item)) {
        dialog._item_dialog$_gameScreen.game.log.add$5(0, C.LogType_error, "Not enough room for " + item.clone$1(0, count).toString$0(0) + ".", null, null, null);
        dialog.dirty$0();
        return;
      }
      if (count == item._count) {
        destination.tryAdd$1(item);
        dialog._getItems$0().remove$1(0, item);
      } else {
        destination.tryAdd$1(item.splitStack$1(count));
        dialog._getItems$0().countChanged$0();
      }
      this.afterTransfer$3(dialog, item, count);
      dialog._ui.pop$0();
    },
    afterTransfer$3: function(dialog, item, count) {
    }
  };
  D._DropItemCommand.prototype = {
    get$allowedLocations: function() {
      return C.List_iDg;
    },
    get$needsCount: function() {
      return true;
    },
    query$1: function($location) {
      switch ($location) {
        case C.ItemLocation_wMy:
          return "Drop which item?";
        case C.ItemLocation_A8D:
          return "Unequip and drop which item?";
      }
      throw H.wrapException("unreachable");
    },
    queryCount$1: function($location) {
      return "Drop how many?";
    },
    canSelect$1: function(item) {
      return true;
    },
    selectItem$4: function(dialog, item, count, $location) {
      dialog._item_dialog$_gameScreen.game.hero._behavior = new X.ActionBehavior(new R.DropAction(count, $location, item));
      dialog._ui.pop$0();
    }
  };
  D._UseItemCommand.prototype = {
    get$needsCount: function() {
      return false;
    },
    query$1: function($location) {
      switch ($location) {
        case C.ItemLocation_wMy:
        case C.ItemLocation_A8D:
          return "Use which item?";
        case C.ItemLocation_46y:
          return "Pick up and use which item?";
      }
      throw H.wrapException("unreachable");
    },
    canSelect$1: function(item) {
      return item.type.use != null;
    },
    selectItem$4: function(dialog, item, count, $location) {
      dialog._item_dialog$_gameScreen.game.hero._behavior = new X.ActionBehavior(new R.UseAction($location, item));
      dialog._ui.pop$0();
    }
  };
  D._EquipItemCommand.prototype = {
    get$needsCount: function() {
      return false;
    },
    query$1: function($location) {
      switch ($location) {
        case C.ItemLocation_wMy:
          return "Equip which item?";
        case C.ItemLocation_A8D:
          return "Unequip which item?";
        case C.ItemLocation_46y:
          return "Pick up and equip which item?";
      }
      throw H.wrapException("unreachable");
    },
    canSelect$1: function(item) {
      return item.type.equipSlot != null;
    },
    selectItem$4: function(dialog, item, count, $location) {
      dialog._item_dialog$_gameScreen.game.hero._behavior = new X.ActionBehavior(new R.EquipAction($location, item));
      dialog._ui.pop$0();
    }
  };
  D._TossItemCommand.prototype = {
    get$needsCount: function() {
      return false;
    },
    query$1: function($location) {
      switch ($location) {
        case C.ItemLocation_wMy:
          return "Throw which item?";
        case C.ItemLocation_A8D:
          return "Unequip and throw which item?";
        case C.ItemLocation_46y:
          return "Pick up and throw which item?";
      }
      throw H.wrapException("unreachable");
    },
    canSelect$1: function(item) {
      return item.type.toss != null;
    },
    selectItem$4: function(dialog, item, count, $location) {
      var hit, t1;
      hit = new U.Hit(item.type.toss.attack, 1, 1, $.$get$Element_none(), 1);
      t1 = dialog._item_dialog$_gameScreen;
      t1.game.hero.modifyHit$2(hit, C.HitType_2);
      dialog._ui.goTo$1(X.TargetDialog$(t1, hit.get$range(), new D._TossItemCommand_selectItem_closure(dialog, $location, item, hit)));
    }
  };
  D._TossItemCommand_selectItem_closure.prototype = {
    call$1: function(target) {
      this.dialog._item_dialog$_gameScreen.game.hero._behavior = new X.ActionBehavior(new B.TossAction(this.hit, target, this.location, this.item));
    },
    $signature: 11
  };
  D._PickUpItemCommand.prototype = {
    get$allowedLocations: function() {
      return C.List_5uo;
    },
    get$needsCount: function() {
      return true;
    },
    query$1: function($location) {
      return "Pick up which item?";
    },
    queryCount$1: function($location) {
      return "Pick up how many?";
    },
    canSelect$1: function(item) {
      return true;
    },
    selectItem$4: function(dialog, item, count, $location) {
      dialog._item_dialog$_gameScreen.game.hero._behavior = new X.ActionBehavior(new R.PickUpAction(item));
      dialog._ui.pop$0();
    }
  };
  D._PutItemCommand.prototype = {
    get$allowedLocations: function() {
      return C.List_iDg;
    },
    get$needsCount: function() {
      return true;
    },
    query$1: function($location) {
      return "Put which item?";
    },
    queryCount$1: function($location) {
      return "Put how many?";
    },
    canSelect$1: function(item) {
      return true;
    },
    selectItem$4: function(dialog, item, count, $location) {
      this.transfer$4(dialog, item, count, dialog._item_dialog$_gameScreen.game.hero.save._home);
    },
    afterTransfer$3: function(dialog, item, count) {
      dialog._item_dialog$_gameScreen.game.log.add$5(0, C.LogType_message, "You put " + item.clone$1(0, count).toString$0(0) + " safely into your home.", null, null, null);
    }
  };
  D._SellItemCommand.prototype = {
    get$allowedLocations: function() {
      return C.List_iDg;
    },
    get$needsCount: function() {
      return true;
    },
    get$showPrices: function() {
      return true;
    },
    query$1: function($location) {
      return "Sell which item?";
    },
    queryCount$1: function($location) {
      return "Sell how many?";
    },
    canSelect$1: function(item) {
      return true;
    },
    getPrice$1: function(item) {
      return C.JSNumber_methods.floor$0(item.get$price() * 0.75);
    },
    selectItem$4: function(dialog, item, count, $location) {
      this.transfer$4(dialog, item, count, this._item_dialog$_shop);
    },
    afterTransfer$3: function(dialog, item, count) {
      var itemText, t1, price, t2;
      itemText = item.clone$1(0, count).get$nounText();
      t1 = C.JSNumber_methods.floor$0(item.get$price() * 0.75);
      if (typeof count !== "number")
        return H.iae(count);
      price = t1 * count;
      t1 = dialog._item_dialog$_gameScreen.game;
      t1.log.add$5(0, C.LogType_message, "You sell " + itemText + " for " + price + " gold.", null, null, null);
      t1 = t1.hero.save;
      t2 = t1.gold;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.gold = t2 + price;
    }
  };
  F.ItemScreen.prototype = {
    get$_destination: function() {
      return;
    },
    get$_verb: function() {
      return H.throwExpression("Subclass should implement");
    },
    get$isTransparent: function() {
      return true;
    },
    get$_canSelectAny: function() {
      return false;
    },
    get$_showPrices: function() {
      return false;
    },
    _canSelect$1: function(item) {
      if (this._shiftDown)
        return true;
      return this.canSelect$1(item);
    },
    canSelect$1: function(item) {
      return true;
    },
    handleInput$1: function(input) {
      H.interceptedTypeCheck(input, "$isInput");
      this._item_screen$_error = null;
      if (input === C.Input_cancel) {
        this._ui.pop$0();
        return true;
      }
      return false;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      var index, t1, item, t2;
      this._item_screen$_error = null;
      if (keyCode === 16) {
        this._shiftDown = true;
        this.dirty$0();
        return true;
      }
      if (alt)
        return false;
      if (typeof keyCode !== "number")
        return keyCode.$ge();
      if (keyCode >= 65 && keyCode <= 90) {
        index = keyCode - 65;
        t1 = this.get$_item_screen$_items();
        if (index >= t1.get$length(t1))
          return false;
        item = this.get$_item_screen$_items().elementAt$1(0, index);
        if (item == null)
          return false;
        if (this._shiftDown) {
          this._inspected = item;
          this.dirty$0();
        } else {
          if (!this.get$_canSelectAny() || !this.canSelect$1(item))
            return false;
          t1 = item._count;
          if (typeof t1 !== "number")
            return t1.$gt();
          if (t1 > 1) {
            this._isActive = false;
            t1 = this._ui;
            t2 = new F._CountScreen(this, item, this._item_screen$_gameScreen);
            t2._item_screen$_count = this._initialCount$1(item);
            t2._inspected = item;
            t1.push$1(t2);
            return true;
          }
          if (this._transfer$2(item, 1)) {
            this._ui.pop$0();
            return true;
          }
        }
      }
      return false;
    },
    keyUp$3$alt$shift: function(keyCode, alt, shift) {
      if (keyCode === 16) {
        this._shiftDown = false;
        this.dirty$0();
        return true;
      }
      return false;
    },
    activate$2: function(popped, result) {
      H.assertSubtype(popped, "$isScreen", [Y.Input], "$asScreen");
      this._isActive = true;
      this._inspected = null;
      if (popped instanceof F._CountScreen && result != null)
        if (this._transfer$2(popped._item_screen$_item, H.intTypeCheck(result)))
          this._ui.pop$0();
    },
    render$1: function(terminal) {
      var t1, t2, t3, t4, t5, t6, view;
      if (this._isActive) {
        if (this._shiftDown) {
          t1 = P.String;
          t1 = P.LinkedHashMap_LinkedHashMap$_literal(["A-Z", "Inspect item"], t1, t1);
        } else
          t1 = this.get$_helpKeys();
        R.Draw_helpKeys(terminal, t1, this._shiftDown ? "Inspect which item?" : this.get$_headerText());
      }
      t1 = this._item_screen$_gameScreen;
      t2 = t1._stagePanel.bounds;
      t3 = t2.pos;
      t2 = t2.size;
      t4 = t2.x;
      t2 = t2.y;
      terminal.toString;
      terminal = new G.PortTerminal(new L.Vec(t4, t2), t3.x, t3.y, terminal, C.Color_255_255_255, C.Color_0_0_0);
      t3 = t4 - 34;
      t5 = this.get$_item_screen$_items()._items.length;
      t6 = this.get$_canSelectAny() ? C.Color_222_156_33 : C.Color_38_38_56;
      R.Draw__box(terminal, 0, 0, t3, t5 + 2, t6, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      t6 = " " + this.get$_item_screen$_items().location.name + " ";
      terminal.writeAt$4(2, 0, t6, this.get$_canSelectAny() ? C.Color_222_156_33 : C.Color_132_126_135);
      view = new F._TownItemView(this);
      view.render$1(terminal.rect$4(0, 1, 1, t4 - 36, t2 - 5));
      t4 = this._inspected;
      if (t4 != null)
        Y.drawInspector(terminal.rect$4(0, t3, H.intTypeCheck(C.JSInt_methods.clamp$2(view.itemY$1(t4) + 1, 0, t2 - 20)), 34, 20), t1.game.hero.save, this._inspected);
      t1 = this._item_screen$_error;
      if (t1 != null)
        terminal.writeAt$4(0, 32, t1, C.Color_204_35_57);
    },
    _initialCount$1: function(item) {
      return item._count;
    },
    _maxCount$1: function(item) {
      return item._count;
    },
    _itemPrice$1: function(item) {
      return;
    },
    _transfer$2: function(item, count) {
      if (!this.get$_destination().canAdd$1(item)) {
        this._item_screen$_error = "Not enough room for " + item.clone$1(0, count).toString$0(0) + ".";
        this.dirty$0();
        return false;
      }
      if (count === item._count) {
        this.get$_destination().tryAdd$1(item);
        C.JSArray_methods.remove$1(this.get$_item_screen$_items()._items, item);
      } else {
        this.get$_destination().tryAdd$1(item.splitStack$1(count));
        this.get$_item_screen$_items().countChanged$0();
      }
      this._afterTransfer$2(item, count);
      return true;
    },
    _afterTransfer$2: function(item, count) {
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  F._TownItemView.prototype = {
    get$items: function() {
      return this._screen.get$_item_screen$_items();
    },
    get$capitalize: function() {
      return this._screen._shiftDown;
    },
    get$showPrices: function() {
      return this._screen.get$_showPrices();
    },
    get$inspectedItem: function() {
      return this._screen._inspected;
    },
    get$canSelectAny: function() {
      var t1 = this._screen;
      return t1._shiftDown || t1.get$_canSelectAny();
    },
    canSelect$1: function(item) {
      return this._screen._canSelect$1(item);
    },
    getPrice$1: function(item) {
      return this._screen._itemPrice$1(item);
    }
  };
  F._HomeViewScreen.prototype = {
    get$_item_screen$_items: function() {
      return this._item_screen$_gameScreen.game.hero.save._home;
    },
    get$_headerText: function() {
      return "Welcome home!";
    },
    get$_helpKeys: function() {
      var t1 = P.String;
      return P.LinkedHashMap_LinkedHashMap$_literal(["G", "Get item", "P", "Put item", "Shift", "Inspect item", "Esc", "Leave"], t1, t1);
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      var $screen;
      if (this.super$ItemScreen$keyDown(keyCode, alt, shift))
        return true;
      if (shift || alt)
        return false;
      switch (keyCode) {
        case 71:
          $screen = new F._HomeGetScreen(this._item_screen$_gameScreen);
          $screen._inspected = this._inspected;
          this._isActive = false;
          this._ui.push$1($screen);
          return true;
        case 80:
          this._isActive = false;
          this._ui.push$1(new D.ItemDialog(this._item_screen$_gameScreen, new D._PutItemCommand(), C.ItemLocation_wMy));
          return true;
      }
      return false;
    }
  };
  F._HomeGetScreen.prototype = {
    get$_headerText: function() {
      return "Get which item?";
    },
    get$_verb: function() {
      return "Get";
    },
    get$_helpKeys: function() {
      var t1 = P.String;
      return P.LinkedHashMap_LinkedHashMap$_literal(["A-Z", "Select item", "Shift", "Inspect item", "Esc", "Cancel"], t1, t1);
    },
    get$_item_screen$_items: function() {
      return this._item_screen$_gameScreen.game.hero.save._home;
    },
    get$_destination: function() {
      return this._item_screen$_gameScreen.game.hero.save._inventory;
    },
    get$_canSelectAny: function() {
      return true;
    },
    canSelect$1: function(item) {
      return true;
    },
    _afterTransfer$2: function(item, count) {
      var t1 = this._item_screen$_gameScreen.game;
      t1.log.add$5(0, C.LogType_message, "You get " + item.clone$1(0, count).toString$0(0) + ".", null, null, null);
      t1.hero.pickUp$1(item);
    }
  };
  F._ShopViewScreen.prototype = {
    get$_item_screen$_items: function() {
      return this._shop;
    },
    get$_headerText: function() {
      return "What can I interest you in?";
    },
    get$_showPrices: function() {
      return true;
    },
    get$_helpKeys: function() {
      var t1 = P.String;
      return P.LinkedHashMap_LinkedHashMap$_literal(["B", "Buy item", "S", "Sell item", "Shift", "Inspect item", "Esc", "Cancel"], t1, t1);
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      var $screen;
      if (this.super$ItemScreen$keyDown(keyCode, alt, shift))
        return true;
      if (shift || alt)
        return false;
      switch (keyCode) {
        case 66:
          $screen = new F._ShopBuyScreen(this._shop, this._item_screen$_gameScreen);
          $screen._inspected = this._inspected;
          this._isActive = false;
          this._ui.push$1($screen);
          break;
        case 83:
          this._isActive = false;
          this._ui.push$1(new D.ItemDialog(this._item_screen$_gameScreen, new D._SellItemCommand(this._shop), C.ItemLocation_wMy));
          return true;
      }
      return false;
    },
    _itemPrice$1: function(item) {
      return item.get$price();
    }
  };
  F._ShopBuyScreen.prototype = {
    get$_headerText: function() {
      return "Buy which item?";
    },
    get$_verb: function() {
      return "Buy";
    },
    get$_helpKeys: function() {
      var t1 = P.String;
      return P.LinkedHashMap_LinkedHashMap$_literal(["A-Z", "Select item", "Shift", "Inspect item", "Esc", "Cancel"], t1, t1);
    },
    get$_item_screen$_items: function() {
      return this._shop;
    },
    get$_destination: function() {
      return this._item_screen$_gameScreen.game.hero.save._inventory;
    },
    get$_canSelectAny: function() {
      return true;
    },
    get$_showPrices: function() {
      return true;
    },
    canSelect$1: function(item) {
      var t1, t2;
      t1 = item.get$price();
      t2 = this._item_screen$_gameScreen.game.hero.save.gold;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 <= t2;
    },
    _initialCount$1: function(item) {
      return 1;
    },
    _maxCount$1: function(item) {
      var t1, t2, t3;
      t1 = item._count;
      t2 = this._item_screen$_gameScreen.game.hero.save.gold;
      t3 = item.get$price();
      if (typeof t2 !== "number")
        return t2.$tdiv();
      t3 = C.JSInt_methods.$tdiv(t2, t3);
      return Math.min(H.checkNum(t1), t3);
    },
    _itemPrice$1: function(item) {
      return item.get$price();
    },
    _afterTransfer$2: function(item, count) {
      var price, t1, t2, t3;
      price = item.get$price() * count;
      t1 = this._item_screen$_gameScreen.game;
      t1.log.add$5(0, C.LogType_message, "You buy " + item.clone$1(0, count).toString$0(0) + " for " + price + " gold.", null, null, null);
      t1 = t1.hero;
      t2 = t1.save;
      t3 = t2.gold;
      if (typeof t3 !== "number")
        return t3.$sub();
      t2.gold = t3 - price;
      t1.pickUp$1(item);
    }
  };
  F._CountScreen.prototype = {
    get$_item_screen$_items: function() {
      return this._parent.get$_item_screen$_items();
    },
    get$_headerText: function() {
      var t1, itemText, t2, price, priceString;
      t1 = this._item_screen$_item;
      itemText = t1.clone$1(0, this._item_screen$_count).get$nounText();
      t2 = this._parent;
      price = t2._itemPrice$1(t1);
      if (price != null) {
        t1 = this._item_screen$_count;
        if (typeof t1 !== "number")
          return H.iae(t1);
        priceString = Y.formatMoney(price * t1);
        return t2.get$_verb() + " " + itemText + " for " + priceString + " gold?";
      } else
        return t2.get$_verb() + " " + itemText + "?";
    },
    get$_helpKeys: function() {
      var t1 = P.String;
      return P.LinkedHashMap_LinkedHashMap$_literal(["OK", this._parent.get$_verb(), "\u2195", "Change quantity", "Esc", "Cancel"], t1, t1);
    },
    get$_canSelectAny: function() {
      return true;
    },
    canSelect$1: function(item) {
      return item === this._item_screen$_item;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      if (keyCode === 16)
        return false;
      return this.super$ItemScreen$keyDown(keyCode, alt, shift);
    },
    keyUp$3$alt$shift: function(keyCode, alt, shift) {
      return false;
    },
    handleInput$1: function(input) {
      var t1, t2;
      switch (H.interceptedTypeCheck(input, "$isInput")) {
        case C.Input_ok:
          this._ui.pop$1(this._item_screen$_count);
          return true;
        case C.Input_cancel:
          this._ui.pop$0();
          return true;
        case C.Input_n:
          t1 = this._item_screen$_count;
          t2 = this._parent._maxCount$1(this._item_screen$_item);
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 < t2) {
            t1 = this._item_screen$_count;
            if (typeof t1 !== "number")
              return t1.$add();
            this._item_screen$_count = t1 + 1;
            this.dirty$0();
          }
          return true;
        case C.Input_s:
          t1 = this._item_screen$_count;
          if (typeof t1 !== "number")
            return t1.$gt();
          if (t1 > 1) {
            this._item_screen$_count = t1 - 1;
            this.dirty$0();
          }
          return true;
        case C.Input_runN:
          this._item_screen$_count = this._parent._maxCount$1(this._item_screen$_item);
          this.dirty$0();
          return true;
        case C.Input_runS:
          this._item_screen$_count = 1;
          this.dirty$0();
          return true;
      }
      return false;
    },
    _itemPrice$1: function(item) {
      return this._parent._itemPrice$1(item);
    }
  };
  Y.ItemView.prototype = {
    get$showLetters: function() {
      return true;
    },
    get$capitalize: function() {
      return false;
    },
    get$showPrices: function() {
      return false;
    },
    get$inspectedItem: function() {
      return;
    },
    canSelect$1: function(item) {
      return false;
    },
    getPrice$1: function(item) {
      return item.get$price();
    },
    itemY$1: function(item) {
      var t1, y;
      for (t1 = this.get$items(), t1 = t1.get$iterator(t1), y = 0; t1.moveNext$0();) {
        if (t1.get$current() == item)
          return y;
        ++y;
      }
      return -1;
    },
    render$1: function(terminal) {
      var _box_1, letters, statRight, t1, price, t2, i, letter, _box_0, t3, x, t4, borderColor, letterColor, textColor, t5, t6;
      _box_1 = {};
      letters = this.get$capitalize() ? "ABCDEFGHIJKLMNOPQRSTUVWXYZ" : "abcdefghijklmnopqrstuvwxyz";
      statRight = terminal.size.x;
      _box_1.statRight = statRight;
      if (this.get$showPrices())
        for (t1 = this.get$items(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          price = this.getPrice$1(t1.get$current());
          if (price != null)
            _box_1.statRight = Math.min(_box_1.statRight, statRight - Y.formatMoney(price).length - 2);
        }
      for (t1 = J.get$iterator$ax(this.get$items().get$slots()), t2 = letters.length, i = 0, letter = 0; t1.moveNext$0();) {
        _box_0 = {};
        t3 = t1.get$current();
        x = this.get$showLetters() ? 2 : 0;
        if (t3 == null) {
          if (i > 0) {
            t3 = this.get$items().get$slotTypes();
            if (i >= t3.length)
              return H.ioore(t3, i);
            if (t3[i] === "hand") {
              t3 = this.get$items().get$slotTypes();
              t4 = i - 1;
              if (t4 >= t3.length)
                return H.ioore(t3, t4);
              t3 = t3[t4] === "hand" && J.elementAt$1$ax(this.get$items().get$slots(), t4) != null && J.elementAt$1$ax(this.get$items().get$slots(), t4).type.isTwoHanded;
            } else
              t3 = false;
          } else
            t3 = false;
          t4 = x + 2;
          if (t3)
            terminal.writeAt$4(t4, i, "\u2191 two-handed", C.Color_38_38_56);
          else {
            t3 = this.get$items().get$slotTypes();
            if (i >= t3.length)
              return H.ioore(t3, i);
            terminal.writeAt$4(t4, i, "(" + t3[i] + ")", C.Color_38_38_56);
          }
          ++letter;
          ++i;
          continue;
        }
        _box_0.enabled = true;
        if (this.get$canSelectAny())
          if (this.canSelect$1(t3)) {
            borderColor = C.Color_38_38_56;
            letterColor = C.Color_222_156_33;
            textColor = C.Color_226_223_240;
            t4 = true;
          } else {
            _box_0.enabled = false;
            borderColor = C.Color_0_0_0;
            letterColor = C.Color_0_0_0;
            textColor = C.Color_38_38_56;
            t4 = false;
          }
        else {
          borderColor = C.Color_38_38_56;
          letterColor = C.Color_38_38_56;
          textColor = C.Color_226_223_240;
          t4 = true;
        }
        if (t3 === this.get$inspectedItem())
          textColor = C.Color_222_156_33;
        if (this.get$showLetters()) {
          terminal.writeAt$4(0, i, " )", borderColor);
          if (letter >= t2)
            return H.ioore(letters, letter);
          terminal.writeAt$4(0, i, letters[letter], letterColor);
        }
        ++letter;
        if (t4)
          terminal.drawGlyph$3(x, i, t3.type.appearance);
        terminal.writeAt$4(x + 2, i, t3.get$nounText(), textColor);
        if (this.get$showPrices() && this.getPrice$1(t3) !== 0) {
          price = Y.formatMoney(this.getPrice$1(t3));
          t5 = statRight - price.length;
          terminal.writeAt$4(t5, i, price, t4 ? C.Color_222_156_33 : C.Color_38_38_56);
          t4 = t4 ? C.Color_142_82_55 : C.Color_38_38_56;
          terminal.writeAt$4(t5 - 1, i, "$", t4);
        }
        t4 = new Y.ItemView_render_drawStat(_box_1, _box_0, terminal, i);
        t5 = t3.type;
        t6 = t5.attack;
        if (t6 != null) {
          $.$get$Element_none();
          t4.call$4(170, C.JSDouble_methods.toString$0(C.JSInt_methods.toInt$0(t6.damage * 100) / 100), C.Color_179_74_4, C.Color_64_31_36);
        } else {
          t5 = t5.armor;
          if (t5 + t3.get$armorModifier() !== 0)
            t4.call$4(230, t5 + t3.get$armorModifier(), C.Color_22_117_38, C.Color_0_64_39);
        }
        ++i;
      }
    }
  };
  Y.ItemView_render_drawStat.prototype = {
    call$4: function(symbol, stat, light, dark) {
      var string, t1, t2, t3, t4, t5, t6;
      string = J.toString$0$(stat);
      t1 = this.terminal;
      t2 = this._box_1;
      t3 = t2.statRight;
      t4 = string.length;
      t5 = this.y;
      t6 = this._box_0;
      t1.drawGlyph$3(t3 - t4 - 1, t5, L.Glyph$fromCharCode(symbol, t6.enabled ? dark : C.Color_38_38_56, null));
      t2 = t2.statRight;
      t3 = t6.enabled ? light : C.Color_38_38_56;
      t1.writeAt$4(t2 - t4, t5, string, t3);
    }
  };
  Y.drawInspector_writeSection.prototype = {
    call$1: function(label) {
      var t1, t2, y;
      t1 = this._box_0;
      t2 = t1.y;
      if (t2 !== 2) {
        y = t2 + 1;
        t1.y = y;
        t2 = y;
      }
      this.terminal.writeAt$4(1, t2, label + ":", C.Color_222_156_33);
      ++t1.y;
    },
    $signature: 14
  };
  Y.drawInspector_writeLabel.prototype = {
    call$1: function(label) {
      this.terminal.writeAt$4(1, this._box_0.y, label + ":", C.Color_132_126_135);
    },
    $signature: 14
  };
  Y.drawInspector_writeScale.prototype = {
    call$3: function(x, y, scale) {
      var string, xColor, numberColor, t1;
      string = C.JSNumber_methods.toStringAsFixed$1(scale, 1);
      if (scale > 1) {
        xColor = C.Color_0_64_39;
        numberColor = C.Color_22_117_38;
      } else if (scale < 1) {
        xColor = C.Color_84_0_39;
        numberColor = C.Color_204_35_57;
      } else {
        xColor = C.Color_38_38_56;
        numberColor = C.Color_38_38_56;
      }
      t1 = this.terminal;
      t1.writeAt$4(x, y, "x", xColor);
      t1.writeAt$4(x + 1, y, string, numberColor);
    }
  };
  Y.drawInspector_writeBonus.prototype = {
    call$3: function(x, y, bonus) {
      var string, t1, t2, t3;
      string = C.JSInt_methods.toString$0(Math.abs(bonus));
      if (bonus > 0) {
        t1 = this.terminal;
        t2 = string.length;
        t1.writeAt$4(x + 2 - t2, y, "+", C.Color_0_64_39);
        t1.writeAt$4(x + 3 - t2, y, string, C.Color_22_117_38);
      } else {
        t1 = this.terminal;
        t2 = string.length;
        t3 = x + 2 - t2;
        t2 = x + 3 - t2;
        if (bonus < 0) {
          t1.writeAt$4(t3, y, "-", C.Color_84_0_39);
          t1.writeAt$4(t2, y, string, C.Color_204_35_57);
        } else {
          t1.writeAt$4(t3, y, "+", C.Color_38_38_56);
          t1.writeAt$4(t2, y, string, C.Color_38_38_56);
        }
      }
    }
  };
  Y.drawInspector_writeStat.prototype = {
    call$2: function(label, value) {
      var t1;
      this.writeLabel.call$1(label);
      t1 = this._box_0;
      this.terminal.writeAt$4(12, t1.y, C.JSInt_methods.toString$0(value), C.Color_226_223_240);
      ++t1.y;
    },
    $signature: 115
  };
  Y.drawInspector_writeText.prototype = {
    call$1: function(text) {
      var t1, t2, t3, t4, _i, line;
      for (t1 = this.terminal, t2 = O.Log_wordWrap(t1.size.x - 2, text), t3 = t2.length, t4 = this._box_0, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        line = t2[_i];
        t1.writeAt$4(1, t4.y, line, C.Color_132_126_135);
        ++t4.y;
      }
    },
    $signature: 14
  };
  F.LoadingDialog.prototype = {
    get$isTransparent: function() {
      return true;
    },
    handleInput$1: function(input) {
      if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
        this._ui.pop$1(false);
        return true;
      }
      return false;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      if (shift || alt)
        return false;
      switch (keyCode) {
        case 78:
          this._ui.pop$1(false);
          break;
        case 89:
          this._ui.pop$1(true);
          break;
      }
      return true;
    },
    update$0: function(_) {
      var t1, t2, t3;
      if (this._steps == null) {
        t1 = this._game.generate$0();
        this.set$_steps(new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]));
      }
      if ($.Stopwatch__frequency == null) {
        H.Primitives_initTicker();
        $.Stopwatch__frequency = $.Primitives_timerFrequency;
      }
      t1 = H.intTypeCheck($.Primitives_timerTicks.call$0());
      if (typeof t1 !== "number")
        return t1.$sub();
      t1 -= 0;
      while (true) {
        t2 = H.intTypeCheck($.Primitives_timerTicks.call$0());
        if (typeof t2 !== "number")
          return t2.$sub();
        t3 = $.Stopwatch__frequency;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(C.JSInt_methods.$tdiv((t2 - t1) * 1000, t3) < 16))
          break;
        if (this._steps.moveNext$0())
          this.dirty$0();
        else {
          this._ui.pop$1(this._game);
          return;
        }
      }
      this._frame = (this._frame + 1) % 10;
    },
    render$1: function(terminal) {
      var t1, t2, offset;
      t1 = terminal._display._glyphs.bounds.size;
      t2 = C.JSInt_methods._tdivFast$1(t1.x - 30, 2);
      t1 = C.JSInt_methods._tdivFast$1(t1.y - 7, 2);
      terminal.toString;
      terminal = new G.PortTerminal(new L.Vec(30, 7), t2, t1, terminal, C.Color_255_255_255, C.Color_0_0_0);
      R.Draw__box(terminal, 0, 0, 30, 7, C.Color_222_156_33, "\u2554", "\u2550", "\u2557", "\u2551", "\u255a", "\u2550", "\u255d");
      terminal.writeAt$4(2, 2, "Entering dungeon...", C.Color_132_126_135);
      offset = C.JSInt_methods._tdivFast$1(this._frame, 2);
      terminal.writeAt$4(2, 4, C.JSString_methods.substring$2(C.JSString_methods.$mul("/    ", 6), offset, offset + 26), C.Color_226_223_240);
    },
    set$_steps: function(_steps) {
      this._steps = H.assertSubtype(_steps, "$isIterator", [P.String], "$asIterator");
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  B.MainMenuScreen.prototype = {
    handleInput$1: function(input) {
      var t1, t2, t3, t4, save;
      switch (H.interceptedTypeCheck(input, "$isInput")) {
        case C.Input_n:
          this._main_menu_screen$_changeSelection$1(-1);
          return true;
        case C.Input_s:
          this._main_menu_screen$_changeSelection$1(1);
          return true;
        case C.Input_ok:
          t1 = this.selectedHero;
          t2 = this.storage;
          t3 = t2.heroes;
          t4 = t3.length;
          if (t1 < t4) {
            if (t1 < 0)
              return H.ioore(t3, t1);
            save = t3[t1];
            this._ui.push$1(R.GameScreen_GameScreen$town(t2, this.content, save));
          }
          return true;
      }
      return false;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      var t1, t2, t3, t4;
      if (shift || alt)
        return false;
      switch (keyCode) {
        case 68:
          t1 = this.selectedHero;
          t2 = this.storage.heroes;
          t3 = t2.length;
          if (t1 < t3) {
            if (t1 < 0)
              return H.ioore(t2, t1);
            t1 = t2[t1];
            this._ui.push$1(new N.ConfirmPopup("Are you sure you want to delete " + H.S(t1.name) + "?", "delete"));
          }
          return true;
        case 78:
          t1 = this._ui;
          t2 = $.$get$rng();
          t2.toString;
          H.assertSubtype(C.List_0, "$isList", [P.String], "$asList");
          t3 = C.List_0.length;
          t4 = t2.range$1(t3);
          if (t4 < 0 || t4 >= t3)
            return H.ioore(C.List_0, t4);
          t4 = new R.NewHeroScreen(this.content, this.storage, 0, C.List_0[t4]);
          $.$get$Races_all();
          t4._new_hero_screen$_race = t2.range$1(6);
          $.$get$Classes_all();
          t4._class = t2.range$1(3);
          t1.push$1(t4);
          return true;
      }
      return false;
    },
    activate$2: function($screen, result) {
      var t1, t2, t3;
      if ($screen instanceof N.ConfirmPopup && J.$eq$(result, "delete")) {
        t1 = this.storage;
        t2 = t1.heroes;
        C.JSArray_methods.removeAt$1(t2, this.selectedHero);
        t3 = this.selectedHero;
        if (t3 > 0 && t3 >= t2.length)
          this.selectedHero = t3 - 1;
        t1.save$0(0);
        this.dirty$0();
      }
    },
    render$1: function(terminal) {
      var t1, t2, y, y0, x, color, x0, i, hero, primary, secondary;
      t1 = terminal._display._glyphs.bounds.size;
      t2 = C.JSInt_methods._tdivFast$1(t1.x - 78, 2);
      t1 = t1.y;
      terminal.toString;
      terminal = new G.PortTerminal(new L.Vec(80, t1), t2, 0, terminal, C.Color_255_255_255, C.Color_0_0_0);
      terminal.writeAt$4(0, t1 - 1, "[L] Select a hero, [\u2195] Change selection, [N] Create a new hero, [D] Delete hero", C.Color_132_126_135);
      terminal = terminal.rect$4(0, 0, C.JSInt_methods._tdivFast$1(t1 - 40, 2), 80, 40);
      for (y = 0; y < 16; y = y0)
        for (y0 = y + 1, x = 0; x < C.List_23r[y].length; x = x0) {
          color = C.Map_cmivT.$index(0, J.$index$asx(C.List_co5[y], x));
          x0 = x + 1;
          terminal.writeAt$4(x0, y0, J.$index$asx(C.List_23r[y], x), color);
        }
      terminal.writeAt$4(10, 18, "Which hero shall you play?", C.Color_132_126_135);
      t1 = this.storage.heroes;
      if (t1.length === 0)
        terminal.writeAt$4(10, 20, "(No heroes. Please create a new one.)", C.Color_132_126_135);
      for (i = 0; i < t1.length; ++i) {
        hero = t1[i];
        if (i === this.selectedHero) {
          terminal.drawGlyph$3(9, 20 + i, new L.Glyph(9658, C.Color_222_156_33, C.Color_0_0_0));
          primary = C.Color_222_156_33;
          secondary = C.Color_222_156_33;
        } else {
          primary = C.Color_226_223_240;
          secondary = C.Color_38_38_56;
        }
        t2 = 20 + i;
        terminal.writeAt$4(10, t2, hero.name, primary);
        terminal.writeAt$4(30, t2, "Level " + G.experienceLevel(hero.experience), secondary);
        terminal.writeAt$4(40, t2, hero.race._race.name, secondary);
        terminal.writeAt$4(50, t2, hero.heroClass.name, secondary);
      }
    },
    _main_menu_screen$_changeSelection$1: function(offset) {
      this.selectedHero = C.JSInt_methods.$mod(this.selectedHero + offset, this.storage.heroes.length);
      this.dirty$0();
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  R.NewHeroScreen.prototype = {
    render$1: function(terminal) {
      var terminal0, t1, t2, help;
      terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
      terminal0 = new G.PortTerminal(new L.Vec(40, 10), 0, 0, terminal, C.Color_255_255_255, C.Color_0_0_0);
      R.Draw__box(terminal0, 0, 0, 40, 10, this._field === 0 ? C.Color_222_156_33 : C.Color_38_38_56, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      terminal0.writeAt$4(1, 0, "Name", this._field === 0 ? C.Color_222_156_33 : C.Color_132_126_135);
      terminal0.writeAt$4(1, 2, "Out of the mists of history, a hero", C.Color_132_126_135);
      terminal0.writeAt$4(1, 3, "appears named...", C.Color_132_126_135);
      R.Draw__box(terminal0, 2, 5, 23, 3, this._field === 0 ? C.Color_222_156_33 : C.Color_38_38_56, "\u250c", "\u2500", "\u2510", "\u2502", "\u2514", "\u2500", "\u2518");
      t1 = this._new_hero_screen$_name;
      if (t1.length !== 0) {
        terminal0.writeAt$4(3, 6, t1, C.Color_226_223_240);
        if (this._field === 0)
          terminal0.writeAt$5(3 + this._new_hero_screen$_name.length, 6, " ", C.Color_0_0_0, C.Color_222_156_33);
      } else {
        t1 = this._field;
        t2 = this._defaultName;
        if (t1 === 0)
          terminal0.writeAt$5(3, 6, t2, C.Color_0_0_0, C.Color_222_156_33);
        else
          terminal0.writeAt$4(3, 6, t2, C.Color_226_223_240);
      }
      this._renderRace$1(terminal);
      this._renderClass$1(terminal);
      this._renderMenu$1(terminal);
      help = H.setRuntimeTypeInfo(["[Tab] Next field"], [P.String]);
      switch (this._field) {
        case 0:
          C.JSArray_methods.add$1(help, "[A-Z Del] Edit name");
          break;
        case 1:
          C.JSArray_methods.add$1(help, "[\u2195] Select race");
          break;
        case 2:
          C.JSArray_methods.add$1(help, "[\u2195] Select class");
          break;
      }
      C.JSArray_methods.add$1(help, "[Enter] Create hero");
      C.JSArray_methods.add$1(help, "[Esc] Cancel");
      terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, C.JSArray_methods.join$1(help, ", "), C.Color_132_126_135);
    },
    _renderRace$1: function(terminal) {
      var t1, t2, race, y, _i, stat, width;
      terminal.toString;
      terminal = new G.PortTerminal(new L.Vec(40, 29), 0, 10, terminal, C.Color_255_255_255, C.Color_0_0_0);
      R.Draw__box(terminal, 0, 0, 40, 29, this._field === 1 ? C.Color_222_156_33 : C.Color_38_38_56, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      terminal.writeAt$4(1, 0, "Race", this._field === 1 ? C.Color_222_156_33 : C.Color_132_126_135);
      t1 = $.$get$Races_all();
      t2 = this._new_hero_screen$_race;
      if (t2 < 0 || t2 >= 6)
        return H.ioore(t1, t2);
      race = t1[t2];
      terminal.writeAt$4(1, 2, race.name, C.Color_226_223_240);
      for (t1 = O.Log_wordWrap(38, race.description), t2 = t1.length, y = 4, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        terminal.writeAt$4(1, y, t1[_i], C.Color_132_126_135);
        ++y;
      }
      for (y = 18, _i = 0; _i < 5; ++_i) {
        stat = C.List_zPV[_i];
        terminal.writeAt$4(2, y, stat.name, C.Color_38_38_56);
        t1 = race.stats.$index(0, stat);
        if (typeof t1 !== "number")
          return H.iae(t1);
        width = C.JSInt_methods._tdivFast$1(25 * t1, 45);
        terminal.writeAt$5(12, y, C.JSString_methods.$mul(" ", width), C.Color_226_223_240, C.Color_204_35_57);
        terminal.writeAt$5(12 + width, y, C.JSString_methods.$mul(" ", 25 - width), C.Color_226_223_240, C.Color_84_0_39);
        y += 2;
      }
    },
    _renderClass$1: function(terminal) {
      var t1, t2, heroClass, y, _i;
      terminal.toString;
      terminal = new G.PortTerminal(new L.Vec(40, 29), 40, 10, terminal, C.Color_255_255_255, C.Color_0_0_0);
      R.Draw__box(terminal, 0, 0, 40, 29, this._field === 2 ? C.Color_222_156_33 : C.Color_38_38_56, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      terminal.writeAt$4(1, 0, "Class", this._field === 2 ? C.Color_222_156_33 : C.Color_132_126_135);
      t1 = $.$get$Classes_all();
      t2 = this._class;
      if (t2 < 0 || t2 >= 3)
        return H.ioore(t1, t2);
      heroClass = t1[t2];
      terminal.writeAt$4(1, 2, heroClass.name, C.Color_226_223_240);
      for (t1 = O.Log_wordWrap(38, heroClass.description), t2 = t1.length, y = 4, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        terminal.writeAt$4(1, y, t1[_i], C.Color_132_126_135);
        ++y;
      }
    },
    _renderMenu$1: function(terminal) {
      var t1, items, t2, t3, selected, label, y, i, item, isSelected;
      terminal.toString;
      terminal = new G.PortTerminal(new L.Vec(40, 10), 40, 0, terminal, C.Color_255_255_255, C.Color_0_0_0);
      R.Draw__box(terminal, 0, 0, 40, 10, null, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      if (this._field === 0)
        return;
      t1 = P.String;
      items = H.setRuntimeTypeInfo([], [t1]);
      if (this._field === 1) {
        t2 = $.$get$Races_all();
        t3 = H.getTypeArgumentByIndex(t2, 0);
        C.JSArray_methods.addAll$1(items, new H.MappedListIterable(t2, H.functionTypeCheck(new R.NewHeroScreen__renderMenu_closure(), {func: 1, ret: t1, args: [t3]}), [t3, t1]));
        selected = this._new_hero_screen$_race;
        label = "race";
      } else {
        t2 = $.$get$Classes_all();
        t3 = H.getTypeArgumentByIndex(t2, 0);
        C.JSArray_methods.addAll$1(items, new H.MappedListIterable(t2, H.functionTypeCheck(new R.NewHeroScreen__renderMenu_closure0(), {func: 1, ret: t1, args: [t3]}), [t3, t1]));
        selected = this._class;
        label = "class";
      }
      terminal.writeAt$4(1, 0, "Choose a " + label + ":", C.Color_222_156_33);
      for (y = 2, i = 0; i < items.length; ++i) {
        item = items[i];
        isSelected = i === selected;
        terminal.writeAt$4(2, y, item, isSelected ? C.Color_222_156_33 : C.Color_226_223_240);
        if (isSelected)
          terminal.writeAt$4(1, y, "\u25ba", C.Color_222_156_33);
        ++y;
      }
    },
    handleInput$1: function(input) {
      var t1;
      H.interceptedTypeCheck(input, "$isInput");
      if (input === C.Input_cancel) {
        this._ui.pop$0();
        return true;
      }
      t1 = this._field;
      if (t1 === 1)
        switch (input) {
          case C.Input_n:
            this._changeRace$1(-1);
            return true;
          case C.Input_s:
            this._changeRace$1(1);
            return true;
        }
      else if (t1 === 2)
        switch (input) {
          case C.Input_n:
            this._changeClass$1(-1);
            return true;
          case C.Input_s:
            this._changeClass$1(1);
            return true;
        }
      return false;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      var t1, t2, t3, t4, t5, hero;
      switch (keyCode) {
        case 13:
          t1 = this.content;
          t2 = this._new_hero_screen$_name;
          t2 = t2.length !== 0 ? t2 : this._defaultName;
          t3 = $.$get$Races_all();
          t4 = this._new_hero_screen$_race;
          if (t4 < 0 || t4 >= 6)
            return H.ioore(t3, t4);
          t4 = t3[t4];
          t3 = $.$get$Classes_all();
          t5 = this._class;
          if (t5 < 0 || t5 >= 3)
            return H.ioore(t3, t5);
          hero = t1.createHero$3(t2, t4, t3[t5]);
          t5 = this.storage;
          C.JSArray_methods.add$1(t5.heroes, hero);
          t5.save$0(0);
          this._ui.goTo$1(R.GameScreen_GameScreen$town(t5, t1, hero));
          return true;
        case 9:
          if (shift)
            this._changeField$1(-1);
          else
            this._changeField$1(1);
          return true;
        case 8:
          if (this._field === 0) {
            t1 = this._new_hero_screen$_name;
            t2 = t1.length;
            if (t2 !== 0) {
              t1 = C.JSString_methods.substring$2(t1, 0, t2 - 1);
              this._new_hero_screen$_name = t1;
              if (t1.length === 0) {
                t1 = $.$get$rng();
                t1.toString;
                H.assertSubtype(C.List_0, "$isList", [P.String], "$asList");
                t2 = C.List_0.length;
                t1 = t1.range$1(t2);
                if (t1 < 0 || t1 >= t2)
                  return H.ioore(C.List_0, t1);
                this._defaultName = H.stringTypeCheck(C.List_0[t1]);
              }
              this.dirty$0();
            }
          }
          return true;
        case 32:
          if (this._field === 0)
            this._appendToName$1(" ");
          return true;
        default:
          if (this._field === 0 && !alt) {
            if (keyCode == null)
              break;
            if (keyCode >= 65 && keyCode <= 90) {
              this._appendToName$1(P.String_String$fromCharCodes(H.setRuntimeTypeInfo([!shift ? 32 + keyCode : keyCode], [P.int]), 0, null));
              return true;
            } else if (keyCode >= 48 && keyCode <= 57) {
              this._appendToName$1(P.String_String$fromCharCodes(H.setRuntimeTypeInfo([keyCode], [P.int]), 0, null));
              return true;
            }
          }
          break;
      }
      return false;
    },
    _changeField$1: function(offset) {
      this._field = C.JSInt_methods.$mod(this._field + offset + 3, 3);
      this.dirty$0();
    },
    _appendToName$1: function(text) {
      var t1 = this._new_hero_screen$_name += text;
      if (t1.length > 20)
        this._new_hero_screen$_name = C.JSString_methods.substring$2(t1, 0, 20);
      this.dirty$0();
    },
    _changeRace$1: function(offset) {
      var t1, race;
      t1 = this._new_hero_screen$_race;
      $.$get$Races_all();
      race = C.JSInt_methods.clamp$2(t1 + offset, 0, 5);
      if (race !== this._new_hero_screen$_race) {
        this._new_hero_screen$_race = H.intTypeCheck(race);
        this.dirty$0();
      }
    },
    _changeClass$1: function(offset) {
      var t1, heroClass;
      t1 = this._class;
      $.$get$Classes_all();
      heroClass = C.JSInt_methods.clamp$2(t1 + offset, 0, 2);
      if (heroClass !== this._class) {
        this._class = H.intTypeCheck(heroClass);
        this.dirty$0();
      }
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  R.NewHeroScreen__renderMenu_closure.prototype = {
    call$1: function(race) {
      return H.interceptedTypeCheck(race, "$isRace").name;
    },
    $signature: 116
  };
  R.NewHeroScreen__renderMenu_closure0.prototype = {
    call$1: function(c) {
      return H.interceptedTypeCheck(c, "$isHeroClass").name;
    },
    $signature: 117
  };
  B.ItemPanel.prototype = {
    get$inventoryTop: function() {
      this._item_panel$_game.hero.save._equipment;
      return 11;
    },
    get$onGroundTop: function() {
      this._item_panel$_game.hero.save._equipment;
      return 37;
    },
    renderPanel$1: function(terminal) {
      var t1, hero, t2, onGround, restTop;
      t1 = this._item_panel$_game;
      hero = t1.hero;
      t2 = hero.save;
      this._drawItems$4(terminal, 0, 9, t2._equipment);
      this._drawItems$4(terminal, this.get$inventoryTop(), 24, t2._inventory);
      if (this.bounds.size.y > 50) {
        onGround = t1._stage.itemsAt$1(hero._pos);
        this._drawItems$4(terminal, this.get$onGroundTop(), 5, onGround);
      }
      restTop = this.bounds.size.y > 50 ? this.get$onGroundTop() + 7 : this.get$onGroundTop();
      t1 = terminal.size;
      R.Draw__box(terminal, 0, restTop, t1.x, t1.y - restTop, null, "\u250c", "\u2500", "\u2510", "\u2502", "\u2514", "\u2500", "\u2518");
    },
    _drawItems$4: function(terminal, y, height, items) {
      var t1 = terminal.size.x;
      R.Draw__box(terminal, 0, y, t1, height + 2, null, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      terminal.writeAt$4(2, y, " " + items.get$location(items).name + " ", C.Color_132_126_135);
      new B._ItemPanelItemView(items).render$1(terminal.rect$4(0, 1, y + 1, t1 - 2, height));
    }
  };
  B._ItemPanelItemView.prototype = {
    get$showLetters: function() {
      return false;
    },
    get$canSelectAny: function() {
      return false;
    },
    get$items: function() {
      return this.items;
    }
  };
  A.LogPanel.prototype = {
    renderPanel$1: function(terminal) {
      var t1, t2, y, i, message, color, t3;
      t1 = terminal.size;
      t2 = t1.y;
      R.Draw__box(terminal, 0, 0, t1.x, t2, null, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      terminal.writeAt$4(2, 0, " Messages ", C.Color_132_126_135);
      y = t2 - 2;
      t1 = this._log.messages;
      i = t1.length - 1;
      while (true) {
        if (!(i >= 0 && y > 0))
          break;
        t2 = t1.length;
        if (i < 0 || i >= t2)
          return H.ioore(t1, i);
        message = t1[i];
        switch (message.type) {
          case C.LogType_message:
            color = C.Color_226_223_240;
            break;
          case C.LogType_error:
            color = C.Color_204_35_57;
            break;
          case C.LogType_quest:
            color = C.Color_86_30_138;
            break;
          case C.LogType_gain:
            color = C.Color_222_156_33;
            break;
          case C.LogType_help:
            color = C.Color_22_117_38;
            break;
          case C.LogType_cheat:
            color = C.Color_9_95_112;
            break;
          default:
            color = null;
        }
        if (i !== t2 - 1)
          color = color.blend$2(C.Color_0_0_0, 0.5);
        t2 = message.text;
        terminal.writeAt$4(1, y, t2, color);
        t3 = message.count;
        if (t3 > 1)
          terminal.writeAt$4(t2.length + 1, y, " (x" + t3 + ")", C.Color_38_38_56);
        --y;
        --i;
      }
    }
  };
  Y.Panel.prototype = {
    render$1: function(terminal) {
      var t1, t2;
      t1 = this.bounds;
      if (t1 == null)
        return;
      t2 = t1.pos;
      t1 = t1.size;
      terminal.toString;
      this.renderPanel$1(new G.PortTerminal(new L.Vec(t1.x, t1.y), t2.x, t2.y, terminal, C.Color_255_255_255, C.Color_0_0_0));
    }
  };
  U.SidebarPanel.prototype = {
    renderPanel$1: function(terminal) {
      var t1, t2, t3, hero, t4, t5, t6, levelString, t7, t8, t9, heroGold, visibleMonsters, i, y, monster, glyph, $name;
      t1 = terminal.size;
      t2 = t1.x;
      t1 = t1.y;
      R.Draw__box(terminal, 0, 0, t2, t1, null, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      t3 = this._sidebar_panel$_gameScreen;
      hero = t3.game.hero;
      t4 = hero.save;
      t5 = t4.name;
      terminal.writeAt$4(2, 0, " " + H.S(t5) + " ", C.Color_132_126_135);
      terminal.writeAt$4(1, 2, t4.race._race.name + " " + t4.heroClass.name, C.Color_226_223_240);
      this._drawStats$3(hero, terminal, 4);
      this._drawStat$7(terminal, 7, "Health", hero._health, C.Color_204_35_57, t4.fortitude.get$maxHealth(), C.Color_84_0_39);
      terminal.writeAt$4(1, 8, "Level", C.Color_132_126_135);
      t6 = hero._level;
      levelString = J.toString$0$(t6._modify$1(t6._value));
      terminal.writeAt$4(t2 - levelString.length - 1, 8, levelString, C.Color_129_231_235);
      t7 = t6._modify$1(t6._value);
      if (typeof t7 !== "number")
        return t7.$lt();
      if (t7 < 50) {
        t7 = t4.experience;
        t8 = G.experienceLevelCost(t6._modify$1(t6._value));
        if (typeof t7 !== "number")
          return t7.$sub();
        if (typeof t8 !== "number")
          return H.iae(t8);
        t9 = t6._modify$1(t6._value);
        if (typeof t9 !== "number")
          return t9.$add();
        t9 = G.experienceLevelCost(t9 + 1);
        t6 = G.experienceLevelCost(t6._modify$1(t6._value));
        if (typeof t9 !== "number")
          return t9.$sub();
        if (typeof t6 !== "number")
          return H.iae(t6);
        R.Draw_thinMeter(terminal, 10, 8, t2 - 14, C.JSInt_methods.$tdiv(100 * (t7 - t8), t9 - t6), 100, C.Color_129_231_235, C.Color_9_95_112);
      }
      terminal.writeAt$4(1, 9, "Gold", C.Color_132_126_135);
      heroGold = Y.formatMoney(t4.gold);
      terminal.writeAt$4(t2 - 1 - heroGold.length, 9, heroGold, C.Color_222_156_33);
      this._drawArmor$3(hero, terminal, 10);
      this._drawDefense$3(hero, terminal, 11);
      this._drawWeapons$3(hero, terminal, 12);
      terminal.writeAt$4(1, 15, "Food", C.Color_132_126_135);
      t6 = t2 - 11;
      R.Draw_thinMeter(terminal, 10, 15, t6, hero._stomach, 400, C.Color_142_82_55, C.Color_64_31_36);
      terminal.writeAt$4(1, 16, "Focus", C.Color_132_126_135);
      t7 = hero._focus;
      t4 = t4.intellect;
      R.Draw_thinMeter(terminal, 10, 16, t6, t7, C.JSNumber_methods.ceil$0(Math.pow(t4._modify$1(t4._value), 1.3) * 2), C.Color_21_87_194, C.Color_26_46_150);
      terminal.writeAt$4(1, 18, "@", t3.get$heroColor());
      terminal.writeAt$4(3, 18, t5, C.Color_132_126_135);
      this._drawHealthBar$3(terminal, 19, hero);
      visibleMonsters = t3._stagePanel.visibleMonsters;
      C.JSArray_methods.sort$1(visibleMonsters, new U.SidebarPanel_renderPanel_closure(hero));
      t2 -= 4;
      t1 -= 2;
      i = 0;
      while (true) {
        if (!(i < 10 && i < visibleMonsters.length))
          break;
        y = 20 + i * 2;
        if (y >= t1)
          break;
        if (i >= visibleMonsters.length)
          return H.ioore(visibleMonsters, i);
        monster = visibleMonsters[i];
        glyph = monster._breed.appearance;
        if (t3.get$currentTargetActor() === monster)
          glyph = new L.Glyph(glyph.char, glyph.back, glyph.fore);
        $name = O.Log__categorize(monster._breed._breed$_name, false, true);
        if ($name.length > t2)
          $name = J.substring$2$s($name, 0, t2);
        terminal.drawGlyph$3(1, y, glyph);
        terminal.writeAt$4(3, y, $name, t3.get$currentTargetActor() === monster ? C.Color_222_156_33 : C.Color_132_126_135);
        this._drawHealthBar$3(terminal, y + 1, monster);
        ++i;
      }
    },
    _drawStats$3: function(hero, terminal, y) {
      var t1, t2;
      t1 = {};
      t1.x = 1;
      t1 = new U.SidebarPanel__drawStats_drawStat(t1, terminal, y);
      t2 = hero.save;
      t1.call$1(t2.strength);
      t1.call$1(t2.agility);
      t1.call$1(t2.fortitude);
      t1.call$1(t2.intellect);
      t1.call$1(t2.will);
    },
    _drawWeapons$3: function(hero, terminal, y) {
      var t1, hits, i, t2, hitString;
      t1 = hero.createMeleeHits$1(null);
      hits = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      terminal.writeAt$4(1, y, hits.length === 2 ? "Weapons" : "Weapon", C.Color_132_126_135);
      for (t1 = terminal.size.x, i = 0; i < hits.length; ++i) {
        t2 = hits[i];
        hitString = C.JSDouble_methods.toString$0(C.JSNumber_methods.toInt$0((t2._attack.damage * t2._damageScale + t2._damageBonus) * 100) / 100);
        terminal.writeAt$4(t1 - hitString.length - 1, y + i, hitString, C.Color_179_74_4);
      }
    },
    _drawDefense$3: function(hero, terminal, y) {
      var t1, total;
      for (t1 = hero.get$defenses(), t1 = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]), total = 0; t1.moveNext$0();)
        total += t1.get$current().amount;
      this._drawStat$5(terminal, y, "Dodge", "" + total + "%", C.Color_9_95_112);
    },
    _drawArmor$3: function(hero, terminal, y) {
      var t1, x, _i, element, result, resistance;
      for (t1 = $.$get$Elements_all(), x = 10, _i = 0; _i < 12; ++_i) {
        element = t1[_i];
        result = hero.onGetResistance$1(element);
        resistance = hero.resistances.$index(0, element);
        if ((resistance._turnsRemaining > 0 ? result + resistance._intensity : result) > 0) {
          terminal.writeAt$4(x, y, $.$get$SidebarPanel__resistLetters().$index(0, element), B.elementColor(element));
          ++x;
        }
      }
      this._drawStat$5(terminal, y, "Armor", " " + C.JSNumber_methods.toInt$0(100 - U.getArmorMultiplier(hero.save.get$armor()) * 100) + "%", C.Color_22_117_38);
    },
    _drawStat$7: function(terminal, y, label, value, valueColor, max, maxColor) {
      var x, maxString, valueString;
      terminal.writeAt$4(1, y, label, C.Color_132_126_135);
      x = terminal.size.x - 1;
      if (max != null) {
        maxString = C.JSInt_methods.toString$0(max);
        x -= maxString.length;
        terminal.writeAt$4(x, y, maxString, maxColor);
        x -= 3;
        terminal.writeAt$4(x, y, " / ", maxColor);
      }
      valueString = J.toString$0$(value);
      terminal.writeAt$4(x - valueString.length, y, valueString, valueColor);
    },
    _drawStat$5: function(terminal, y, label, value, valueColor) {
      return this._drawStat$7(terminal, y, label, value, valueColor, null, null);
    },
    _drawHealthBar$3: function(terminal, y, actor) {
      var _box_0, drawCondition, t1, t2, _i, element;
      _box_0 = {};
      _box_0.x = 3;
      drawCondition = new U.SidebarPanel__drawHealthBar_drawCondition(_box_0, terminal, y);
      t1 = actor instanceof B.Monster;
      if (t1 && actor._monster$_state instanceof M.AfraidState)
        drawCondition.call$2("!", C.Color_189_144_108);
      t2 = actor.poison;
      if (t2._turnsRemaining > 0)
        switch (t2._intensity) {
          case 1:
            drawCondition.call$2("P", C.Color_0_64_39);
            break;
          case 2:
            drawCondition.call$2("P", C.Color_22_117_38);
            break;
          default:
            drawCondition.call$2("P", C.Color_129_217_117);
            break;
        }
      if (actor.cold._turnsRemaining > 0)
        drawCondition.call$2("C", C.Color_64_163_229);
      switch (actor.haste._intensity) {
        case 1:
          drawCondition.call$2("S", C.Color_142_82_55);
          break;
        case 2:
          drawCondition.call$2("S", C.Color_222_156_33);
          break;
        case 3:
          drawCondition.call$2("S", C.Color_255_238_168);
          break;
      }
      if (actor.blindness._turnsRemaining > 0)
        drawCondition.call$2("B", C.Color_38_38_56);
      if (actor.dazzle._turnsRemaining > 0)
        drawCondition.call$2("D", C.Color_189_106_235);
      for (t2 = $.$get$Elements_all(), _i = 0; _i < 12; ++_i) {
        element = t2[_i];
        if (actor.resistances.$index(0, element)._turnsRemaining > 0)
          drawCondition.call$3($.$get$SidebarPanel__resistLetters().$index(0, element), C.Color_0_0_0, B.elementColor(element));
      }
      if ($.Debug_showMonsterAlertness && t1)
        terminal.writeAt$4(2, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(C.JSNumber_methods.toInt$0(actor._alertness * 100)), 3), C.Color_226_223_240);
      R.Draw_meter(terminal, 10, y, terminal.size.x - 11, actor._health, actor.get$maxHealth(), C.Color_204_35_57, C.Color_84_0_39);
    }
  };
  U.SidebarPanel_renderPanel_closure.prototype = {
    call$2: function(a, b) {
      var t1;
      H.interceptedTypeCheck(a, "$isMonster");
      H.interceptedTypeCheck(b, "$isMonster");
      t1 = this.hero;
      return C.JSInt_methods.compareTo$1(a._pos.$sub(0, t1._pos).get$lengthSquared(), b._pos.$sub(0, t1._pos).get$lengthSquared());
    },
    $signature: 118
  };
  U.SidebarPanel__drawStats_drawStat.prototype = {
    call$1: function(stat) {
      var t1, t2, t3;
      t1 = this.terminal;
      t2 = this._box_0;
      t3 = this.y;
      t1.writeAt$4(t2.x, t3, C.JSString_methods.substring$2(stat.get$_stat().name, 0, 3), C.Color_132_126_135);
      t1.writeAt$4(t2.x, t3 + 1, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(stat._modify$1(stat._value)), 3), C.Color_226_223_240);
      t2.x = t2.x + C.JSInt_methods._tdivFast$1(t1.size.x - 4, 4);
    },
    $signature: 119
  };
  U.SidebarPanel__drawHealthBar_drawCondition.prototype = {
    call$3: function(char, fore, $back) {
      var t1, t2;
      t1 = this._box_0;
      t2 = t1.x;
      if (t2 > 8)
        return;
      this.terminal.writeAt$5(t2, this.y, char, fore, $back);
      ++t1.x;
    },
    call$2: function(char, fore) {
      return this.call$3(char, fore, null);
    },
    $signature: 120
  };
  T.StagePanel.prototype = {
    drawStageGlyph$4: function(terminal, x, y, glyph) {
      var t1 = this.bounds.pos;
      this._drawStageGlyph$4(terminal, x + t1.x, y + t1.y, glyph);
    },
    _drawStageGlyph$4: function(terminal, x, y, glyph) {
      var t1, t2;
      t1 = this._cameraBounds.pos;
      t2 = this._renderOffset;
      terminal.drawGlyph$3(x - t1.x + t2.x, y - t1.y + t2.y, glyph);
    },
    update$1: function(_, events) {
      var t1, t2, _i, t3;
      H.assertSubtype(events, "$isIterable", [D.Event0], "$asIterable");
      ++this._stage_panel$_frame;
      for (t1 = events.length, t2 = this._effects, _i = 0; _i < events.length; events.length === t1 || (0, H.throwConcurrentModificationError)(events), ++_i)
        K.addEffects(t2, events[_i]);
      t1 = t2.length;
      t3 = H.functionTypeCheck(new T.StagePanel_update_closure(this), {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(t2, 0)]});
      C.JSArray_methods._removeWhere$2(t2, t3, true);
      return this._hasAnimatedTile || t1 !== 0 || t2.length !== 0 || this._stage_panel$_gameScreen.game.hero.dazzle._turnsRemaining > 0;
    },
    renderPanel$1: function(terminal) {
      var t1, t2, game, t3, t4, t5, cameraRange, camera, x, y, hero, t6, t7, t8, t9, pos, t10, t11, t12, tileGlyph, char, fore, $back, t13, it, itemGlyph, isThing, max, color, actorGlyph, chance, light, volume, _i;
      t1 = terminal.size;
      t2 = this._stage_panel$_gameScreen;
      game = t2.game;
      t3 = game._stage.tiles.bounds.size;
      t4 = t1.x;
      t5 = t1.y;
      cameraRange = new X.Rect(new L.Vec(0, 0), new L.Vec(Math.max(0, t3.x - t4), Math.max(0, t3.y - t5)));
      camera = game.hero._pos.$sub(0, t1.$tdiv(0, 2));
      x = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(camera.x, cameraRange.get$left(cameraRange), cameraRange.get$right(cameraRange)));
      y = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(camera.y, cameraRange.get$top(cameraRange), cameraRange.get$bottom(cameraRange)));
      t1 = game._stage.tiles.bounds.size;
      t3 = t1.x;
      t1 = t1.y;
      this._cameraBounds = new X.Rect(new L.Vec(x, y), new L.Vec(Math.min(t4, t3), Math.min(t5, t1)));
      this._renderOffset = new L.Vec(C.JSNumber_methods._tdivFast$1(Math.max(0, t4 - t3), 2), C.JSNumber_methods._tdivFast$1(Math.max(0, t5 - t1), 2));
      t1 = this.visibleMonsters;
      C.JSArray_methods.set$length(t1, 0);
      this._hasAnimatedTile = false;
      hero = game.hero;
      for (t3 = this._cameraBounds, t3.toString, t3 = X.RectIterator$(t3), t4 = [R.Item], t5 = [[P.List, L.Color]], t6 = [P.int], t7 = [L.Color]; t3.moveNext$0();) {
        t8 = t3._x;
        t9 = t3._y;
        pos = new L.Vec(t8, t9);
        t10 = game._stage;
        t11 = t10.tiles;
        t12 = t11._elements;
        t11 = t9 * t11.bounds.size.x + t8;
        if (t11 < 0 || t11 >= t12.length)
          return H.ioore(t12, t11);
        t11 = t12[t11];
        t10 = t10._actorsByTile;
        t12 = t10._elements;
        t10 = t9 * t10.bounds.size.x + t8;
        if (t10 < 0 || t10 >= t12.length)
          return H.ioore(t12, t10);
        t10 = t12[t10];
        if (!t11._isExplored)
          t12 = (!$.Debug_showMonsterAlertness || t10 == null) && !$.Debug_showHeroVolume;
        else
          t12 = false;
        if (t12)
          continue;
        tileGlyph = this._tileGlyph$2(pos, t11);
        char = tileGlyph.char;
        fore = tileGlyph.fore;
        $back = tileGlyph.back;
        t12 = game._stage._itemsByTile.$index(0, pos);
        if (t12 == null)
          t12 = new O.Inventory(C.ItemLocation_46y, H.setRuntimeTypeInfo([], t4), null);
        t12 = t12._items;
        t13 = [H.getTypeArgumentByIndex(t12, 0)];
        if (new J.ArrayIterator(t12, t12.length, 0, t13).moveNext$0()) {
          it = new J.ArrayIterator(t12, t12.length, 0, t13);
          if (!it.moveNext$0())
            H.throwExpression(H.IterableElementError_noElement());
          itemGlyph = it.__interceptors$_current.type.appearance;
          char = itemGlyph.char;
          fore = itemGlyph.fore;
          isThing = true;
        } else
          isThing = false;
        if (!(!t11._isOccluded && t11.illumination - t11._fallOff > 0))
          if (!pos.$eq(0, game.hero._pos))
            t12 = $.Debug_showAllMonsters && t10 != null;
          else
            t12 = true;
        else
          t12 = true;
        if (t12) {
          t12 = t11.substance;
          if (t12 !== 0) {
            t13 = t11.element;
            if (t13 == $.$get$Elements_fire()) {
              t12 = $.$get$rng();
              t12.toString;
              H.assertSubtype(C.List_9650_94, "$isList", t6, "$asList");
              max = C.List_9650_94.length;
              t13 = t12._random.nextInt$1(max - 0);
              if (t13 < 0 || t13 >= max)
                return H.ioore(C.List_9650_94, t13);
              char = C.List_9650_94[t13];
              H.assertSubtype(C.List_MaX, "$isList", t5, "$asList");
              max = C.List_MaX.length;
              t12 = t12._random.nextInt$1(max - 0);
              if (t12 < 0 || t12 >= max)
                return H.ioore(C.List_MaX, t12);
              color = C.List_MaX[t12];
              t12 = J.getInterceptor$asx(color);
              fore = t12.$index(color, 0);
              $back = t12.$index(color, 1);
              this._hasAnimatedTile = true;
            } else if (t13 == $.$get$Elements_poison())
              $back = $back.blend$2(C.Color_131_158_13, 0.1 + t12 / 255 * 0.9);
          }
          t12 = game._stage._actorsByTile;
          t13 = t12._elements;
          t12 = t9 * t12.bounds.size.x + t8;
          if (t12 < 0 || t12 >= t13.length)
            return H.ioore(t13, t12);
          t12 = t13[t12];
          if (t12 != null) {
            actorGlyph = t12.get$appearance(t12);
            if (actorGlyph instanceof L.Glyph) {
              char = actorGlyph.char;
              fore = actorGlyph.fore;
            } else {
              fore = t2.get$heroColor();
              char = 64;
            }
            if (t2.get$currentTargetActor() === t12) {
              $back = fore;
              fore = C.Color_19_17_28;
            }
            if (!!t12.$isMonster)
              C.JSArray_methods.add$1(t1, t12);
            isThing = true;
          }
        }
        t12 = hero.dazzle._turnsRemaining;
        if (t12 > 0) {
          chance = Math.min(90, t12 * 8);
          t12 = $.$get$rng();
          if (t12._random.nextInt$1(100) < chance) {
            char = t12._random.nextInt$1(100) < chance ? char : 42;
            t12.toString;
            H.assertSubtype(C.List_QOW, "$isList", t7, "$asList");
            max = C.List_QOW.length;
            t12 = t12._random.nextInt$1(max - 0);
            if (t12 < 0 || t12 >= max)
              return H.ioore(C.List_QOW, t12);
            fore = C.List_QOW[t12];
          }
        }
        if (!t11._isOccluded && t11.illumination - t11._fallOff > 0) {
          light = (t11.illumination - t11._fallOff) / 128;
          light = C.JSDouble_methods.clamp$2(light * light, 0, 1.1);
          fore = isThing ? C.Color_4_3_10.blend$2(fore, light * 0.3 + 0.7) : C.Color_4_3_10.blend$2(fore, light * 0.7 + 0.3);
          $back = J.$eq$($back, C.Color_19_17_28) ? C.Color_4_3_10.blend$2($back, light * 1.1 + 0.2) : C.Color_4_3_10.blend$2($back, light * 0.8 + 0.2);
        } else {
          fore = C.Color_0_0_14.blend$2(fore, isThing ? 0.7 : 0.2);
          $back = J.$eq$($back, C.Color_19_17_28) ? C.Color_0_0_0 : C.Color_0_0_14.blend$2($back, 0.1);
        }
        if ($.Debug_showHeroVolume) {
          volume = (16 - game._stage._sound._heroAuditoryDistance$1(pos)) / 16;
          volume *= volume;
          if (volume > 0)
            $back = $back.blend$2(C.Color_22_117_38, volume);
        }
        if ($.Debug_showMonsterAlertness && t10 instanceof B.Monster)
          $back = C.Color_0_64_255.blend$2(C.Color_220_0_0, t10._alertness);
        t10 = this._cameraBounds.pos;
        t11 = this._renderOffset;
        terminal.drawGlyph$3(t8 - t10.x + t11.x, t9 - t10.y + t11.y, new L.Glyph(char, fore, $back));
      }
      for (t1 = this._effects, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].render$2(game, new T.StagePanel_renderPanel_closure(this, terminal));
    },
    _tileGlyph$2: function(pos, tile) {
      var t1, t2, phase, frame;
      t1 = tile.type.appearance;
      if (t1 instanceof L.Glyph)
        return t1;
      H.subtypeCast(t1, "$isList", [L.Glyph], "$asList");
      t2 = t1.length;
      phase = K.hashPoint(pos.x, pos.y, null);
      frame = C.JSInt_methods.$mod(C.JSInt_methods._tdivFast$1(this._stage_panel$_frame, 8) + phase, t2 * 2 - 2);
      t2 = t1.length;
      if (frame >= t2)
        frame = t2 - (frame - t2) - 1;
      this._hasAnimatedTile = true;
      if (frame < 0 || frame >= t2)
        return H.ioore(t1, frame);
      return t1[frame];
    }
  };
  T.StagePanel_update_closure.prototype = {
    call$1: function(effect) {
      return !H.interceptedTypeCheck(effect, "$isEffect").update$1(0, this.$this._stage_panel$_gameScreen.game);
    },
    $signature: 121
  };
  T.StagePanel_renderPanel_closure.prototype = {
    call$3: function(x, y, glyph) {
      this.$this._drawStageGlyph$4(this.terminal, x, y, glyph);
    },
    $signature: 35
  };
  E.Popup.prototype = {
    get$isTransparent: function() {
      return true;
    },
    get$width: function(_) {
      return;
    },
    get$height: function(_) {
      return;
    },
    get$message: function(_) {
      return;
    },
    render$1: function(terminal) {
      var messageLines, t1, widestLine, lineCount, popupWidth, popupHeight, t2, $top, left, widest, x, y, _i;
      R.Draw_helpKeys(terminal, this.get$helpKeys(), null);
      messageLines = this.get$message(this);
      t1 = messageLines != null;
      if (t1) {
        widestLine = C.JSArray_methods.fold$1$2(messageLines, 0, new E.Popup_render_closure(), P.int);
        lineCount = messageLines.length;
      } else {
        widestLine = 0;
        lineCount = 0;
      }
      popupWidth = this.get$width(this);
      if (popupWidth == null) {
        if (typeof widestLine !== "number")
          return widestLine.$add();
        popupWidth = widestLine + 2;
      }
      popupHeight = this.get$height(this);
      if (popupHeight == null)
        popupHeight = lineCount + 2;
      t2 = terminal._display._glyphs.bounds.size;
      $top = C.JSInt_methods._tdivFast$1(t2.y - popupHeight, 3);
      left = C.JSInt_methods._tdivFast$1(t2.x - popupWidth, 2);
      R.Draw__box(terminal, left - 1, $top - 1, popupWidth + 2, popupHeight + 2, C.Color_222_156_33, "\u2554", "\u2550", "\u2557", "\u2551", "\u255a", "\u2550", "\u255d");
      terminal.toString;
      terminal = new G.PortTerminal(new L.Vec(popupWidth, popupHeight), left, $top, terminal, C.Color_255_255_255, C.Color_0_0_0);
      terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
      if (t1) {
        widest = C.JSArray_methods.fold$1$2(messageLines, 0, new E.Popup_render_closure0(), P.int);
        if (typeof widest !== "number")
          return H.iae(widest);
        x = C.JSInt_methods._tdivFast$1(popupWidth - widest, 2);
        for (t1 = messageLines.length, y = 1, _i = 0; _i < messageLines.length; messageLines.length === t1 || (0, H.throwConcurrentModificationError)(messageLines), ++_i) {
          terminal.writeAt$4(x, y, messageLines[_i], C.Color_132_126_135);
          ++y;
        }
      }
      this.renderPopup$1(terminal);
    },
    renderPopup$1: function(terminal) {
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  E.Popup_render_closure.prototype = {
    call$2: function(width, line) {
      var t1;
      H.intTypeCheck(width);
      t1 = H.stringTypeCheck(line).length;
      return Math.max(H.checkNum(width), t1);
    },
    $signature: 36
  };
  E.Popup_render_closure0.prototype = {
    call$2: function(width, line) {
      var t1;
      H.intTypeCheck(width);
      t1 = H.stringTypeCheck(line).length;
      return Math.max(H.checkNum(width), t1);
    },
    $signature: 36
  };
  G.SelectDepthPopup.prototype = {
    get$width: function(_) {
      return 42;
    },
    get$height: function(_) {
      return 26;
    },
    get$message: function(_) {
      return C.List_wEV;
    },
    get$helpKeys: function() {
      return C.Map_PviDZ;
    },
    handleInput$1: function(input) {
      switch (H.interceptedTypeCheck(input, "$isInput")) {
        case C.Input_w:
          this._changeDepth$1(this._depth - 1);
          return true;
        case C.Input_e:
          this._changeDepth$1(this._depth + 1);
          return true;
        case C.Input_n:
          this._changeDepth$1(this._depth - 10);
          return true;
        case C.Input_s:
          this._changeDepth$1(this._depth + 10);
          return true;
        case C.Input_ok:
          this._ui.pop$1(this._depth);
          return true;
        case C.Input_cancel:
          this._ui.pop$0();
          return true;
      }
      return false;
    },
    renderPopup$1: function(terminal) {
      var t1, depth, t2, x, y, color, t3;
      for (t1 = this.save, depth = 1; depth <= 100; ++depth) {
        t2 = depth - 1;
        x = C.JSInt_methods.$mod(t2, 10);
        y = C.JSInt_methods._tdivFast$1(t2, 10) * 2;
        t2 = t1.maxDepth;
        if (depth > t2 + 1)
          color = C.Color_38_38_56;
        else if (depth === this._depth) {
          t2 = x * 4;
          t3 = y + 5;
          terminal.drawGlyph$3(t2, t3, new L.Glyph(9658, C.Color_222_156_33, C.Color_0_0_0));
          terminal.drawGlyph$3(t2 + 4, t3, new L.Glyph(9668, C.Color_222_156_33, C.Color_0_0_0));
          color = C.Color_222_156_33;
        } else
          color = C.Color_226_223_240;
        terminal.writeAt$4(x * 4 + 1, y + 5, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(depth), 3), color);
      }
    },
    _changeDepth$1: function(depth) {
      var t1;
      if (depth < 1)
        return;
      if (depth > 100)
        return;
      t1 = this.save.maxDepth;
      if (depth > t1 + 1)
        return;
      this._depth = depth;
      this.dirty$0();
    }
  };
  Z.SelectSkillDialog.prototype = {
    get$isTransparent: function() {
      return true;
    },
    SelectSkillDialog$1: function(_gameScreen) {
      var t1, t2, t3, t4;
      for (t1 = this._select_skill_dialog$_gameScreen.game.hero.save.skills.get$acquired(), t2 = J.get$iterator$ax(t1._iterable), t1 = new H.WhereIterator(t2, t1._f, [H.getTypeArgumentByIndex(t1, 0)]), t3 = this._select_skill_dialog$_skills; t1.moveNext$0();) {
        t4 = t2.get$current();
        if (!!J.getInterceptor$(t4).$isUsableSkill)
          C.JSArray_methods.add$1(t3, t4);
      }
    },
    handleInput$1: function(input) {
      if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
        this._ui.pop$0();
        return true;
      }
      return false;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      if (shift || alt)
        return false;
      if (typeof keyCode !== "number")
        return keyCode.$ge();
      if (keyCode >= 65 && keyCode <= 90) {
        this.selectCommand$1(keyCode - 65);
        return true;
      }
      return false;
    },
    selectCommand$1: function(index) {
      var t1, t2;
      t1 = this._select_skill_dialog$_skills;
      t2 = t1.length;
      if (index >= t2)
        return;
      if (index < 0)
        return H.ioore(t1, index);
      if (t1[index].unusableReason$1(this._select_skill_dialog$_gameScreen.game) != null)
        return;
      t2 = this._ui;
      if (index >= t1.length)
        return H.ioore(t1, index);
      t2.pop$1(t1[index]);
    },
    render$1: function(terminal) {
      var t1, t2, t3, t4, y, skill, reason, borderColor, letterColor, textColor;
      t1 = P.String;
      R.Draw_helpKeys(terminal, P.LinkedHashMap_LinkedHashMap$_literal(["A-Z", "Select skill", "Esc", "Exit"], t1, t1), null);
      t1 = this._select_skill_dialog$_gameScreen;
      t2 = t1.itemPanel;
      t3 = t2.bounds;
      if (t3 != null) {
        t3 = t3.get$left(t3);
        t4 = t2.bounds;
        t4 = t4.get$top(t4);
        t2 = t2.bounds.size;
        terminal.toString;
        terminal = new G.PortTerminal(new L.Vec(t2.x, t2.y), t3, t4, terminal, C.Color_255_255_255, C.Color_0_0_0);
      } else {
        t2 = t1._stagePanel.bounds;
        t2 = t2.get$left(t2);
        t3 = t1._stagePanel.bounds;
        t3 = t3.get$top(t3);
        t4 = t1._stagePanel.bounds.size;
        terminal.toString;
        terminal = new G.PortTerminal(new L.Vec(t4.x, t4.y), t2, t3, terminal, C.Color_255_255_255, C.Color_0_0_0);
      }
      t2 = this._select_skill_dialog$_skills;
      t3 = terminal.size;
      t4 = t3.x;
      R.Draw__box(terminal, 0, 0, t4, Math.max(t2.length + 2, 3), C.Color_222_156_33, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      terminal.writeAt$4(2, 0, " Use which skill? ", C.Color_222_156_33);
      terminal = terminal.rect$4(0, 1, 1, t4 - 2, t3.y - 2);
      if (t2.length === 0) {
        terminal.writeAt$4(0, 0, "(You don't have any skills yet)", C.Color_38_38_56);
        return;
      }
      for (t1 = t1.game, t3 = terminal.size.x, y = 0; y < t2.length; ++y) {
        skill = t2[y];
        reason = skill.unusableReason$1(t1);
        t4 = reason == null;
        if (t4) {
          borderColor = C.Color_226_223_240;
          letterColor = C.Color_222_156_33;
          textColor = C.Color_222_156_33;
        } else {
          borderColor = C.Color_38_38_56;
          letterColor = C.Color_19_17_28;
          textColor = C.Color_38_38_56;
        }
        if (!t4)
          terminal.writeAt$4(t3 - reason.length - 2, y, "(" + reason + ")", textColor);
        terminal.writeAt$4(0, y, "( )   ", borderColor);
        if (y >= 26)
          return H.ioore("abcdefghijklmnopqrstuvwxyz", y);
        terminal.writeAt$4(1, y, "abcdefghijklmnopqrstuvwxyz"[y], letterColor);
        terminal.writeAt$4(4, y, skill.get$useName(), textColor);
      }
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  R.SkillDialog.prototype = {
    $asScreen: function() {
      return [Y.Input];
    }
  };
  R.SkillTypeDialog.prototype = {
    SkillTypeDialog$1: function(_hero, $T) {
      var t1, t2, t3, _i, skill;
      for (t1 = this._skill_dialog$_hero.skills.get$discovered(), t2 = t1.length, t3 = this._skill_dialog$_skills, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        skill = t1[_i];
        if (H.checkSubtypeOfRuntimeType(skill, $T))
          C.JSArray_methods.add$1(t3, skill);
      }
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      if (shift || alt)
        return false;
      if (keyCode === 9) {
        this._ui.goTo$1(this._nextScreen);
        return true;
      }
      return false;
    },
    handleInput$1: function(input) {
      switch (H.interceptedTypeCheck(input, "$isInput")) {
        case C.Input_n:
          this._changeSelection$1(-1);
          return true;
        case C.Input_s:
          this._changeSelection$1(1);
          return true;
        case C.Input_cancel:
          this._ui.pop$0();
          return true;
      }
      return false;
    },
    render$1: function(terminal) {
      var helpText;
      terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
      this._renderSkillList$1(terminal);
      this._renderSkill$1(terminal);
      helpText = "[Esc] Exit, [Tab] View " + this._nextScreen.get$_skill_dialog$_name();
      terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, helpText, C.Color_132_126_135);
    },
    _renderSkillList$1: function(terminal) {
      var t1, t2, t3, i, _i, skill, y, nameColor, detailColor, t4;
      t1 = terminal._display._glyphs.bounds.size.y - 1;
      terminal.toString;
      terminal = new G.PortTerminal(new L.Vec(40, t1), 0, 0, terminal, C.Color_255_255_255, C.Color_0_0_0);
      R.Draw__box(terminal, 0, 0, 40, t1, null, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      terminal.writeAt$4(1, 0, this.get$_skill_dialog$_name(), C.Color_132_126_135);
      this._renderSkillListHeader$1(terminal);
      terminal.writeAt$4(2, 2, this.get$_rowSeparator(), C.Color_38_38_56);
      t1 = this._skill_dialog$_skills;
      t2 = t1.length;
      if (t2 === 0) {
        terminal.writeAt$4(2, 3, "(None known.)", C.Color_38_38_56);
        return;
      }
      for (t3 = this._skill_dialog$_hero, i = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        skill = t1[_i];
        y = i * 2 + 3;
        terminal.writeAt$4(2, y + 1, this.get$_rowSeparator(), C.Color_19_17_28);
        if (i === this._selectedSkill) {
          nameColor = C.Color_222_156_33;
          detailColor = C.Color_132_126_135;
        } else {
          t4 = t3.skills._levels;
          if (!(t4.containsKey$1(0, skill) && J.$gt$n(t4.$index(0, skill), 0))) {
            nameColor = C.Color_38_38_56;
            detailColor = C.Color_38_38_56;
          } else {
            nameColor = C.Color_226_223_240;
            detailColor = C.Color_132_126_135;
          }
        }
        terminal.writeAt$4(2, y, skill.get$name(skill), nameColor);
        this._renderSkillInList$4(terminal, y, detailColor, skill);
        ++i;
      }
      terminal.drawGlyph$3(1, this._selectedSkill * 2 + 3, L.Glyph$fromCharCode(9658, C.Color_222_156_33, null));
    },
    _renderSkill$1: function(terminal) {
      var t1, t2, t3, skill;
      t1 = terminal._display._glyphs.bounds.size;
      t2 = t1.x - 40;
      t1 = t1.y - 1;
      terminal.toString;
      terminal = new G.PortTerminal(new L.Vec(t2, t1), 40, 0, terminal, C.Color_255_255_255, C.Color_0_0_0);
      R.Draw__box(terminal, 0, 0, t2, t1, null, "\u2552", "\u2550", "\u2555", "\u2502", "\u2514", "\u2500", "\u2518");
      t1 = this._skill_dialog$_skills;
      t2 = t1.length;
      if (t2 === 0)
        return;
      t3 = this._selectedSkill;
      if (t3 < 0 || t3 >= t2)
        return H.ioore(t1, t3);
      skill = t1[t3];
      terminal.writeAt$4(1, 0, skill.get$name(skill), C.Color_222_156_33);
      this._writeText$4(terminal, 1, 2, skill.get$description());
      this._renderSkillDetails$2(terminal, skill);
    },
    _writeText$4: function(terminal, x, y, text) {
      var t1, t2, _i, y0;
      for (t1 = O.Log_wordWrap(terminal.size.x - 1 - x, text), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i, y = y0) {
        y0 = y + 1;
        terminal.writeAt$4(x, y, t1[_i], C.Color_132_126_135);
      }
    },
    _changeSelection$1: function(offset) {
      var t1 = this._skill_dialog$_skills.length;
      if (t1 === 0)
        return;
      this._selectedSkill = H.intTypeCheck(C.JSInt_methods.clamp$2(this._selectedSkill + offset, 0, t1 - 1));
      this.dirty$0();
    }
  };
  R.DisciplineDialog.prototype = {
    get$_skill_dialog$_name: function() {
      return "Disciplines";
    },
    get$_rowSeparator: function() {
      return "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500 \u2500\u2500\u2500\u2500";
    },
    _renderSkillListHeader$1: function(terminal) {
      terminal.writeAt$4(31, 1, "Lev Next", C.Color_132_126_135);
    },
    _renderSkillInList$4: function(terminal, y, color, skill) {
      var t1, percent;
      H.interceptedTypeCheck(skill, "$isDiscipline");
      t1 = this._skill_dialog$_hero;
      terminal.writeAt$4(31, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t1.skills.level$1(skill)), 3), color);
      percent = skill.percentUntilNext$1(t1);
      terminal.writeAt$4(35, y, percent == null ? "  --" : C.JSString_methods.padLeft$1(H.S(percent) + "%", 4), color);
    },
    _renderSkillDetails$2: function(terminal, skill) {
      var t1, level, t2, percent, points, current, next;
      H.interceptedTypeCheck(skill, "$isDiscipline");
      t1 = this._skill_dialog$_hero;
      level = t1.skills.level$1(skill);
      terminal.writeAt$4(1, 8, "At current level " + level + ":", C.Color_226_223_240);
      if (level > 0)
        this._writeText$4(terminal, 3, 10, skill.levelDescription$1(level));
      else
        terminal.writeAt$4(3, 10, "(You haven't trained this yet.)", C.Color_38_38_56);
      if (level < skill.get$maxLevel()) {
        t2 = level + 1;
        terminal.writeAt$4(1, 16, "At next level " + t2 + ":", C.Color_226_223_240);
        this._writeText$4(terminal, 3, 18, skill.levelDescription$1(t2));
      }
      terminal.writeAt$4(1, 30, "Level:", C.Color_38_38_56);
      terminal.writeAt$4(9, 30, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(level), 4), C.Color_132_126_135);
      R.Draw_meter(terminal, 14, 30, 25, level, skill.get$maxLevel(), C.Color_204_35_57, C.Color_84_0_39);
      terminal.writeAt$4(1, 32, "Next:", C.Color_38_38_56);
      percent = skill.percentUntilNext$1(t1);
      if (percent != null) {
        points = t1.skills.points$1(0, skill);
        t1 = t1.heroClass;
        current = skill.trainingNeeded$2(t1, level);
        next = skill.trainingNeeded$2(t1, level + 1);
        terminal.writeAt$4(9, 32, C.JSString_methods.padLeft$1(H.S(percent) + "%", 4), C.Color_132_126_135);
        if (typeof current !== "number")
          return H.iae(current);
        if (typeof next !== "number")
          return next.$sub();
        R.Draw_meter(terminal, 14, 32, 25, points - current, next - current, C.Color_204_35_57, C.Color_84_0_39);
      } else
        terminal.writeAt$4(14, 32, "(At max level.)", C.Color_38_38_56);
    },
    $asSkillTypeDialog: function() {
      return [M.Discipline];
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  R.SpellDialog.prototype = {
    get$_skill_dialog$_name: function() {
      return "Spells";
    },
    get$_rowSeparator: function() {
      return "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500";
    },
    _renderSkillListHeader$1: function(terminal) {
      terminal.writeAt$4(35, 1, "Comp", C.Color_132_126_135);
    },
    _renderSkillInList$4: function(terminal, y, color, skill) {
      terminal.writeAt$4(35, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(H.interceptedTypeCheck(skill, "$isSpell").complexity$1(this._skill_dialog$_hero.heroClass)), 4), color);
    },
    _renderSkillDetails$2: function(terminal, skill) {
      var t1, t2, t3;
      H.interceptedTypeCheck(skill, "$isSpell");
      terminal.writeAt$4(1, 30, "Complexity:", C.Color_38_38_56);
      t1 = this._skill_dialog$_hero;
      if (t1.skills.isAcquired$1(skill))
        terminal.writeAt$4(13, 30, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(skill.complexity$1(t1.heroClass)), 3), C.Color_132_126_135);
      else {
        t2 = t1.heroClass;
        terminal.writeAt$4(13, 30, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(skill.complexity$1(t2)), 3), C.Color_204_35_57);
        t2 = skill.complexity$1(t2);
        t3 = t1.intellect;
        terminal.writeAt$4(17, 30, "Need " + (t2 - t3._modify$1(t3._value)) + " more intellect", C.Color_38_38_56);
      }
      terminal.writeAt$4(1, 32, "Focus cost:", C.Color_38_38_56);
      terminal.writeAt$4(13, 32, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(skill.focusCost$1(t1)), 3), C.Color_132_126_135);
      if (skill.get$damage() != null) {
        terminal.writeAt$4(1, 34, "Damage:", C.Color_38_38_56);
        terminal.writeAt$4(13, 34, C.JSString_methods.padLeft$1(J.toString$0$(skill.get$damage()), 3), C.Color_132_126_135);
      }
      if (skill.get$range() != null) {
        terminal.writeAt$4(1, 36, "Range:", C.Color_38_38_56);
        terminal.writeAt$4(13, 36, C.JSString_methods.padLeft$1(J.toString$0$(skill.get$range()), 3), C.Color_132_126_135);
      }
    },
    $asSkillTypeDialog: function() {
      return [M.Spell];
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  S.Storage.prototype = {
    _load$0: function() {
      var hero, $name, race, heroClass, name0, inventoryItems, inventory, equipment, item, homeItems, $home, crucibleItems, crucible, shops, experience, levels, points, skills, name1, skill, skillSet, lore, gold, maxDepth, heroSave, error, trace, storage, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, _i, t12, maxDepth0, heroSave0, exception;
      if (window.location.search === "?clear") {
        this.save$0(0);
        return;
      }
      storage = window.localStorage.getItem("heroes");
      if (storage == null)
        return;
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(J.$index$asx(C.JsonCodec_null_null.decode$1(0, storage), "heroes"), "$isIterable")), t2 = this.heroes, t3 = R.Item, t4 = [t3], t3 = [t3], t5 = [P.String, null], t6 = M.Skill, t7 = P.int, t8 = O.Shop, t9 = O.Inventory; t1.moveNext$0();) {
        hero = t1.get$current();
        try {
          $name = H.stringTypeCast(J.$index$asx(hero, "name"));
          race = this._loadRace$1(H.subtypeCast(J.$index$asx(hero, "race"), "$isMap", t5, "$asMap"));
          heroClass = null;
          if (J.$index$asx(hero, "class") == null)
            heroClass = $.$get$Classes_all()[0];
          else {
            name0 = H.stringTypeCast(J.$index$asx(hero, "class"));
            heroClass = C.JSArray_methods.firstWhere$1($.$get$Classes_all(), new S.Storage__load_closure(name0));
          }
          inventoryItems = this._loadItems$1(H.listTypeCheck(J.$index$asx(hero, "inventory")));
          t10 = inventoryItems;
          t11 = H.setRuntimeTypeInfo([], t4);
          if (t10 != null)
            C.JSArray_methods.addAll$1(t11, t10);
          inventory = new O.Inventory(C.ItemLocation_wMy, t11, 24);
          t10 = new Array(9);
          t10.fixed$length = Array;
          equipment = new E.Equipment(C.List_RDW, H.setRuntimeTypeInfo(t10, t3));
          for (t10 = this._loadItems$1(H.listTypeCheck(J.$index$asx(hero, "equipment"))), t11 = t10.length, _i = 0; _i < t10.length; t10.length === t11 || (0, H.throwConcurrentModificationError)(t10), ++_i) {
            item = t10[_i];
            equipment.equip$1(item);
          }
          homeItems = this._loadItems$1(H.listTypeCheck(J.$index$asx(hero, "home")));
          t10 = homeItems;
          t11 = H.setRuntimeTypeInfo([], t4);
          if (t10 != null)
            C.JSArray_methods.addAll$1(t11, t10);
          $home = new O.Inventory(C.ItemLocation_ukJ, t11, 26);
          crucibleItems = this._loadItems$1(H.listTypeCheck(J.$index$asx(hero, "crucible")));
          t10 = crucibleItems;
          t11 = H.setRuntimeTypeInfo([], t4);
          if (t10 != null)
            C.JSArray_methods.addAll$1(t11, t10);
          crucible = new O.Inventory(C.ItemLocation_vOz, t11, 8);
          shops = P.LinkedHashMap_LinkedHashMap$_empty(t8, t9);
          if (J.containsKey$1$x(hero, "shops"))
            $.$get$Shops_all().forEach$1(0, new S.Storage__load_closure0(this, hero, shops));
          inventory.countChanged$0();
          $home.countChanged$0();
          crucible.countChanged$0();
          experience = H.intTypeCast(J.$index$asx(hero, "experience"));
          levels = P.LinkedHashMap_LinkedHashMap$_empty(t6, t7);
          points = P.LinkedHashMap_LinkedHashMap$_empty(t6, t7);
          skills = H.subtypeCast(J.$index$asx(hero, "skills"), "$isMap", t5, "$asMap");
          if (skills != null)
            for (t10 = J.get$iterator$ax(J.get$keys$x(skills)); t10.moveNext$0();) {
              name1 = t10.get$current();
              t11 = H.stringTypeCheck(name1);
              t12 = $.$get$Skills__byName();
              if (!t12.containsKey$1(0, t11))
                H.throwExpression(P.ArgumentError$("Unknown skill '" + H.S(t11) + "'."));
              skill = t12.$index(0, t11);
              t11 = J.$index$asx(skills, name1);
              if (typeof t11 === "number" && Math.floor(t11) === t11) {
                J.$indexSet$ax(levels, skill, H.intTypeCast(J.$index$asx(skills, name1)));
                J.$indexSet$ax(points, skill, 0);
              } else {
                J.$indexSet$ax(levels, skill, H.intTypeCast(J.$index$asx(J.$index$asx(skills, name1), "level")));
                J.$indexSet$ax(points, skill, H.intTypeCast(J.$index$asx(J.$index$asx(skills, name1), "points")));
              }
            }
          skillSet = new M.SkillSet(levels, points);
          lore = this._loadLore$1(H.subtypeCast(J.$index$asx(hero, "lore"), "$isMap", t5, "$asMap"));
          gold = H.intTypeCast(J.$index$asx(hero, "gold"));
          maxDepth0 = H.intTypeCast(J.$index$asx(hero, "maxDepth"));
          maxDepth = maxDepth0 == null ? 0 : maxDepth0;
          t10 = heroClass;
          t11 = new Array(9);
          t11.fixed$length = Array;
          H.setRuntimeTypeInfo(t11, t3);
          heroSave0 = new K.HeroSave($name, race, t10, inventory, equipment, $home, crucible, shops, experience, skillSet, gold, maxDepth, lore, new D.Strength(), new D.Agility(), new D.Fortitude(), new D.Intellect(), new D.Will());
          heroSave0._bindStats$0();
          heroSave = heroSave0;
          C.JSArray_methods.add$1(t2, heroSave);
        } catch (exception) {
          error = H.unwrapException(exception);
          trace = H.getTraceFromException(exception);
          H.printString("Could not load hero. Data:");
          H.printString(C.JsonCodec_null_null.encode$1(hero));
          H.printString("Error:\n" + H.S(error) + "\n" + H.S(trace));
        }
      }
    },
    _loadRace$1: function(data) {
      var t1, $name, race, statData, stats, t2, _i, stat, seed;
      H.assertSubtype(data, "$isMap", [P.String, null], "$asMap");
      if (data == null)
        return $.$get$Races_all()[4].rollStats$0();
      t1 = J.getInterceptor$asx(data);
      $name = H.stringTypeCast(t1.$index(data, "name"));
      race = C.JSArray_methods.firstWhere$1($.$get$Races_all(), new S.Storage__loadRace_closure($name));
      statData = t1.$index(data, "stats");
      stats = P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, P.int);
      for (t2 = J.getInterceptor$asx(statData), _i = 0; _i < 5; ++_i) {
        stat = C.List_zPV[_i];
        stats.$indexSet(0, stat, H.intTypeCast(t2.$index(statData, stat.name)));
      }
      seed = H.intTypeCast(t1.$index(data, "seed"));
      return N.RaceStats$(race, stats, seed == null ? 1234 : seed);
    },
    _loadItems$1: function(data) {
      var items, t1, t2, item;
      items = H.setRuntimeTypeInfo([], [R.Item]);
      for (t1 = J.get$iterator$ax(data), t2 = [P.String, null]; t1.moveNext$0();) {
        item = this._loadItem$1(H.subtypeCast(t1.get$current(), "$isMap", t2, "$asMap"));
        if (item != null)
          C.JSArray_methods.add$1(items, item);
      }
      return items;
    },
    _loadItem$1: function(data) {
      var t1, t2, count, prefix, suffix;
      H.assertSubtype(data, "$isMap", [P.String, null], "$asMap");
      t1 = J.getInterceptor$asx(data);
      t2 = H.stringTypeCast(t1.$index(data, "type"));
      t2 = $.$get$Items_types().tryFind$1(t2);
      if (t2 == null) {
        P.print("Couldn't find item type \"" + H.S(t1.$index(data, "type")) + '", discarding item.');
        return;
      }
      count = t1.containsKey$1(data, "count") ? H.intTypeCast(t1.$index(data, "count")) : 1;
      if (t1.containsKey$1(data, "prefix"))
        prefix = !!J.getInterceptor$(t1.$index(data, "prefix")).$isMap ? Z.Affixes_find(H.stringTypeCast(J.$index$asx(t1.$index(data, "prefix"), "name"))) : Z.Affixes_find(H.stringTypeCast(t1.$index(data, "prefix")));
      else
        prefix = null;
      if (t1.containsKey$1(data, "suffix"))
        suffix = !!J.getInterceptor$(t1.$index(data, "suffix")).$isMap ? Z.Affixes_find(H.stringTypeCast(J.$index$asx(t1.$index(data, "suffix"), "name"))) : Z.Affixes_find(H.stringTypeCast(t1.$index(data, "suffix")));
      else
        suffix = null;
      return new R.Item(t2, prefix, suffix, count);
    },
    _loadLore$1: function(data) {
      var t1, t2, t3, seenBreeds, slain, foundItems, foundAffixes, usedItems, seenMap, slainMap, foundItemMap, foundAffixMap, usedItemMap;
      t1 = [P.String, null];
      H.assertSubtype(data, "$isMap", t1, "$asMap");
      t2 = B.Breed;
      t3 = P.int;
      seenBreeds = P.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
      slain = P.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
      t2 = L.ItemType;
      foundItems = P.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
      foundAffixes = P.LinkedHashMap_LinkedHashMap$_empty(L.Affix, t3);
      usedItems = P.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
      if (data != null) {
        t2 = J.getInterceptor$asx(data);
        seenMap = H.subtypeCast(t2.$index(data, "seen"), "$isMap", t1, "$asMap");
        if (seenMap != null)
          J.forEach$1$ax(seenMap, new S.Storage__loadLore_closure(this, seenBreeds));
        slainMap = H.subtypeCast(t2.$index(data, "slain"), "$isMap", t1, "$asMap");
        if (slainMap != null)
          J.forEach$1$ax(slainMap, new S.Storage__loadLore_closure0(this, slain));
        foundItemMap = H.subtypeCast(t2.$index(data, "foundItems"), "$isMap", t1, "$asMap");
        if (foundItemMap != null)
          J.forEach$1$ax(foundItemMap, new S.Storage__loadLore_closure1(this, foundItems));
        foundAffixMap = H.subtypeCast(t2.$index(data, "foundAffixes"), "$isMap", t1, "$asMap");
        if (foundAffixMap != null)
          J.forEach$1$ax(foundAffixMap, new S.Storage__loadLore_closure2(this, foundAffixes));
        usedItemMap = H.subtypeCast(t2.$index(data, "usedItems"), "$isMap", t1, "$asMap");
        if (usedItemMap != null)
          J.forEach$1$ax(usedItemMap, new S.Storage__loadLore_closure3(this, usedItems));
      }
      return V.Lore$from(seenBreeds, slain, foundItems, foundAffixes, usedItems);
    },
    save$0: function(_) {
      var heroData, t1, t2, t3, t4, t5, t6, _i, hero, raceStats, t7, t8, _i0, stat, race, inventory, equipment, $home, crucible, shops, skills, t9, skill, t10, t11, seen, slain, lore, data;
      heroData = [];
      for (t1 = this.heroes, t2 = t1.length, t3 = P.String, t4 = P.Object, t5 = [P.Map,,,], t6 = P.int, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        hero = t1[_i];
        raceStats = P.LinkedHashMap__makeEmpty();
        for (t7 = hero.race, t8 = t7._max, _i0 = 0; _i0 < 5; ++_i0) {
          stat = C.List_zPV[_i0];
          raceStats.$indexSet(0, stat.name, t8.$index(0, stat));
        }
        race = P.LinkedHashMap_LinkedHashMap$_literal(["name", t7._race.name, "seed", t7.seed, "stats", raceStats], t3, t4);
        inventory = this._saveItems$1(hero._inventory);
        equipment = this._saveItems$1(hero._equipment);
        $home = this._saveItems$1(hero._home);
        crucible = this._saveItems$1(hero._crucible);
        shops = P.LinkedHashMap__makeEmpty();
        hero.shops.forEach$1(0, new S.Storage_save_closure(this, shops));
        skills = P.LinkedHashMap__makeEmpty();
        t7 = hero.skills._levels;
        t7 = t7.get$keys(t7);
        t7 = P.List_List$from(t7, true, H.getRuntimeTypeArgument(t7, "Iterable", 0));
        t8 = H.getTypeArgumentByIndex(t7, 0);
        t9 = t7.length - 1;
        if (t9 - 0 <= 32)
          H.Sort__insertionSort(t7, 0, t9, J._interceptors_JSArray__compareAny$closure(), t8);
        else
          H.Sort__dualPivotQuicksort(t7, 0, t9, J._interceptors_JSArray__compareAny$closure(), t8);
        t8 = t7.length;
        _i0 = 0;
        for (; _i0 < t7.length; t7.length === t8 || (0, H.throwConcurrentModificationError)(t7), ++_i0) {
          skill = t7[_i0];
          t9 = J.get$name$x(skill);
          t10 = hero.skills;
          H.interceptedTypeCheck(skill, "$isSkill");
          t10 = t10._levels.$index(0, skill);
          if (t10 == null)
            t10 = 0;
          t11 = hero.skills._points.$index(0, skill);
          skills.$indexSet(0, t9, P.LinkedHashMap_LinkedHashMap$_literal(["level", t10, "points", t11 == null ? 0 : t11], t3, t6));
        }
        seen = P.LinkedHashMap__makeEmpty();
        slain = P.LinkedHashMap__makeEmpty();
        lore = P.LinkedHashMap_LinkedHashMap$_literal(["seen", seen, "slain", slain], t3, t5);
        for (t7 = $.$get$Monsters_breeds().get$all(), t7 = new H.MappedIterator(J.get$iterator$ax(t7._iterable), t7._f, [H.getTypeArgumentByIndex(t7, 0), H.getTypeArgumentByIndex(t7, 1)]); t7.moveNext$0();) {
          t8 = t7._current;
          t9 = hero._lore._seenBreeds.$index(0, t8);
          if (t9 == null)
            t9 = 0;
          if (t9 !== 0)
            seen.$indexSet(0, O.Log__categorize(t8._breed$_name, false, true), t9);
          t9 = hero._lore._slainBreeds.$index(0, t8);
          if (t9 == null)
            t9 = 0;
          if (t9 !== 0)
            slain.$indexSet(0, O.Log__categorize(t8._breed$_name, false, true), t9);
        }
        heroData.push(P.LinkedHashMap_LinkedHashMap$_literal(["name", hero.name, "race", race, "class", hero.heroClass.name, "inventory", inventory, "equipment", equipment, "home", $home, "crucible", crucible, "shops", shops, "experience", hero.experience, "skills", skills, "lore", lore, "gold", hero.gold, "maxDepth", hero.maxDepth], t3, t4));
      }
      data = P.LinkedHashMap_LinkedHashMap$_literal(["heroes", heroData], t3, [P.List,,]);
      window.localStorage.setItem("heroes", C.JsonCodec_null_null.encode$1(data));
      P.print("Saved.");
    },
    _saveItems$1: function(items) {
      var list, t1, t2, t3, itemData, t4;
      H.assertSubtype(items, "$isIterable", [R.Item], "$asIterable");
      list = [];
      for (t1 = items.get$iterator(items), t2 = P.String; t1.moveNext$0();) {
        t3 = t1.get$current();
        itemData = P.LinkedHashMap_LinkedHashMap$_literal(["type", O.Log__categorize(t3.type.quantifiableName, false, true), "count", t3._count], t2, null);
        t4 = t3.prefix;
        if (t4 != null)
          itemData.$indexSet(0, "prefix", t4.name);
        t3 = t3.suffix;
        if (t3 != null)
          itemData.$indexSet(0, "suffix", t3.name);
        list.push(itemData);
      }
      return list;
    }
  };
  S.Storage__load_closure.prototype = {
    call$1: function(c) {
      H.interceptedTypeCheck(c, "$isHeroClass");
      return c.name === this.name;
    },
    $signature: 124
  };
  S.Storage__load_closure0.prototype = {
    call$2: function($name, shop) {
      var shopData, t1, t2, t3;
      H.stringTypeCheck($name);
      H.interceptedTypeCheck(shop, "$isShop");
      shopData = J.$index$asx(J.$index$asx(this.hero, "shops"), $name);
      t1 = this.shops;
      if (shopData != null) {
        t2 = shop;
        t3 = this.$this._loadItems$1(H.listTypeCheck(shopData));
        t2.toString;
        H.assertSubtype(t3, "$isIterable", [R.Item], "$asIterable");
        t1.$indexSet(0, shop, O.Inventory$(new O.ItemLocation(t2.name, "All sold out!"), 26, t3));
      } else {
        P.print("No data for " + H.S($name) + ", so regenerating.");
        t1.$indexSet(0, shop, shop.create$0());
      }
    },
    $signature: 125
  };
  S.Storage__loadRace_closure.prototype = {
    call$1: function(race) {
      return H.interceptedTypeCheck(race, "$isRace").name === this.name;
    },
    $signature: 126
  };
  S.Storage__loadLore_closure.prototype = {
    call$2: function(breedName, count) {
      var t1;
      H.stringTypeCheck(breedName);
      t1 = $.$get$Monsters_breeds().tryFind$1(breedName);
      if (t1 != null)
        this.seenBreeds.$indexSet(0, t1, H.intTypeCast(count));
    },
    $signature: 5
  };
  S.Storage__loadLore_closure0.prototype = {
    call$2: function(breedName, count) {
      var t1;
      H.stringTypeCheck(breedName);
      t1 = $.$get$Monsters_breeds().tryFind$1(breedName);
      if (t1 != null)
        this.slain.$indexSet(0, t1, H.intTypeCast(count));
    },
    $signature: 5
  };
  S.Storage__loadLore_closure1.prototype = {
    call$2: function(itemName, count) {
      var t1;
      H.stringTypeCheck(itemName);
      t1 = $.$get$Items_types().tryFind$1(itemName);
      if (t1 != null)
        this.foundItems.$indexSet(0, t1, H.intTypeCast(count));
    },
    $signature: 5
  };
  S.Storage__loadLore_closure2.prototype = {
    call$2: function(affixName, count) {
      var affix = Z.Affixes_find(H.stringTypeCheck(affixName));
      if (affix != null)
        this.foundAffixes.$indexSet(0, affix, H.intTypeCast(count));
    },
    $signature: 5
  };
  S.Storage__loadLore_closure3.prototype = {
    call$2: function(itemName, count) {
      var t1;
      H.stringTypeCheck(itemName);
      t1 = $.$get$Items_types().tryFind$1(itemName);
      if (t1 != null)
        this.usedItems.$indexSet(0, t1, H.intTypeCast(count));
    },
    $signature: 5
  };
  S.Storage_save_closure.prototype = {
    call$2: function(shop, inventory) {
      H.interceptedTypeCheck(shop, "$isShop");
      H.interceptedTypeCheck(inventory, "$isInventory");
      this.shops.$indexSet(0, shop.name, this.$this._saveItems$1(inventory));
    },
    $signature: 30
  };
  X.TargetDialog.prototype = {
    get$isTransparent: function() {
      return true;
    },
    TargetDialog$3: function(_gameScreen, _range, _onSelect) {
      var t1, t2, hero, t3, t4, t5, t6, _i, actor, t7, t8, t9;
      t1 = this._target_dialog$_gameScreen;
      t2 = t1.game;
      hero = t2.hero;
      for (t3 = t2._stage._actors, t4 = t3.length, t5 = this._monsters, t6 = this._target_dialog$_range, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
        actor = t3[_i];
        if (!(actor instanceof B.Monster))
          continue;
        t7 = actor.game._stage;
        t8 = actor._pos;
        t7 = t7.tiles;
        t9 = t7._elements;
        t7 = t8.y * t7.bounds.size.x + t8.x;
        if (t7 < 0 || t7 >= t9.length)
          return H.ioore(t9, t7);
        t7 = t9[t7];
        if (!(!t7._isOccluded && t7.illumination - t7._fallOff > 0))
          continue;
        if (t8.$sub(0, hero._pos).$gt(0, t6))
          continue;
        C.JSArray_methods.add$1(t5, actor);
      }
      if (t5.length === 0) {
        this._targetingFloor = true;
        t1.targetFloor$1(t2.hero._pos);
      } else
        this._targetNearest$1(t2.hero._pos);
    },
    _targetNearest$1: function(pos) {
      var t1, t2, nearest, _i, monster;
      t1 = this._monsters;
      t2 = t1.length;
      if (t2 === 0)
        return false;
      for (nearest = null, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        monster = t1[_i];
        if (nearest == null || pos.$sub(0, monster._pos).$lt(0, pos.$sub(0, nearest._pos)))
          nearest = monster;
      }
      this._target_dialog$_gameScreen.targetActor$1(nearest);
      return true;
    },
    handleInput$1: function(input) {
      var t1;
      switch (H.interceptedTypeCheck(input, "$isInput")) {
        case C.Input_ok:
          t1 = this._target_dialog$_gameScreen;
          if (t1.get$currentTarget(t1) != null) {
            this._ui.pop$0();
            this._target_dialog$_onSelect.call$1(t1.get$currentTarget(t1));
          }
          break;
        case C.Input_cancel:
          this._ui.pop$0();
          break;
        case C.Input_nw:
          this._changeTarget$1(C.Direction_m1_m1);
          break;
        case C.Input_n:
          this._changeTarget$1(C.Direction_0_m1);
          break;
        case C.Input_ne:
          this._changeTarget$1(C.Direction_1_m1);
          break;
        case C.Input_w:
          this._changeTarget$1(C.Direction_m1_0);
          break;
        case C.Input_e:
          this._changeTarget$1(C.Direction_1_0);
          break;
        case C.Input_sw:
          this._changeTarget$1(C.Direction_m1_1);
          break;
        case C.Input_s:
          this._changeTarget$1(C.Direction_0_1);
          break;
        case C.Input_se:
          this._changeTarget$1(C.Direction_1_1);
          break;
      }
      return true;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      var t1, t2;
      if (keyCode === 9 && this._monsters.length !== 0) {
        t1 = this._targetingFloor;
        this._targetingFloor = !t1;
        t2 = this._target_dialog$_gameScreen;
        if (t1) {
          t1 = t2.get$currentTarget(t2);
          this._targetNearest$1(t1 == null ? t2.game.hero._pos : t1);
        } else
          t2.targetFloor$1(t2.get$currentTarget(t2));
        return true;
      }
      return false;
    },
    update$0: function(_) {
      var t1 = (this._target_dialog$_animateOffset + 1) % 25;
      this._target_dialog$_animateOffset = t1;
      if (C.JSInt_methods.$mod(t1, 5) === 0)
        this.dirty$0();
    },
    render$1: function(terminal) {
      var t1, t2, stage, t3, t4, t5, t6, t7, pos, t8, t9, t10, appearance, charCode, target, i, reachedTarget, reticleColor, helpKeys;
      t1 = this._target_dialog$_gameScreen;
      t2 = t1.game;
      stage = t2._stage;
      for (t3 = t1._stagePanel._cameraBounds, t3.toString, t3 = X.RectIterator$(t3), t4 = this._target_dialog$_range, t5 = [L.Glyph]; t3.moveNext$0();) {
        t6 = t3._x;
        t7 = t3._y;
        pos = new L.Vec(t6, t7);
        t8 = stage.tiles;
        t9 = t8._elements;
        t8 = t7 * t8.bounds.size.x + t6;
        if (t8 < 0 || t8 >= t9.length)
          return H.ioore(t9, t8);
        t8 = t9[t8];
        if (t8._isExplored) {
          if (t8._isOccluded)
            continue;
          t9 = t8.type;
          t9.toString;
          t10 = $.$get$Motility_walk();
          t9 = t9.motility._bitMask;
          if ((t9 & t10._bitMask) === 0) {
            t8.toString;
            t9 = (t9 & $.$get$Motility_fly()._bitMask) === 0;
          } else
            t9 = false;
          if (t9)
            continue;
          t9 = stage._actorsByTile;
          t10 = t9._elements;
          t9 = t7 * t9.bounds.size.x + t6;
          if (t9 < 0 || t9 >= t10.length)
            return H.ioore(t10, t9);
          if (t10[t9] != null)
            continue;
          if (stage._itemsByTile.containsKey$1(0, pos))
            continue;
        } else if (this._isKnownOccluded$1(pos))
          continue;
        if (pos.$sub(0, t2.hero._pos).$gt(0, t4))
          continue;
        if (t8._isExplored) {
          appearance = t8.type.appearance;
          if (appearance instanceof L.Glyph)
            charCode = appearance.char;
          else {
            H.subtypeCast(appearance, "$isList", t5, "$asList");
            if (0 >= appearance.length)
              return H.ioore(appearance, 0);
            charCode = appearance[0].char;
          }
        } else
          charCode = 183;
        t8 = t1._stagePanel;
        t9 = t8.bounds.pos;
        t10 = t8._cameraBounds.pos;
        t8 = t8._renderOffset;
        terminal.drawGlyph$3(t6 + t9.x - t10.x + t8.x, t7 + t9.y - t10.y + t8.y, new L.Glyph(charCode, C.Color_222_156_33, C.Color_0_0_0));
      }
      target = t1.get$currentTarget(t1);
      if (target == null)
        return;
      i = C.JSInt_methods._tdivFast$1(this._target_dialog$_animateOffset, 5);
      t2 = G._LineIterator$(t2.hero._pos, target);
      while (true) {
        t2.moveNext$0();
        if (!true) {
          reachedTarget = false;
          break;
        }
        pos = t2._line$_current;
        if (J.$eq$(pos, target)) {
          reachedTarget = true;
          break;
        }
        t3 = stage.tiles;
        t4 = t3._elements;
        t5 = pos.y;
        t6 = pos.x;
        t3 = t5 * t3.bounds.size.x + t6;
        if (t3 < 0 || t3 >= t4.length)
          return H.ioore(t4, t3);
        t3 = t4[t3];
        if (t3._isExplored) {
          t4 = stage._actorsByTile;
          t7 = t4._elements;
          t4 = t5 * t4.bounds.size.x + t6;
          if (t4 < 0 || t4 >= t7.length)
            return H.ioore(t7, t4);
          if (t7[t4] != null) {
            reachedTarget = false;
            break;
          }
          t3.toString;
          t4 = $.$get$Motility_fly();
          if ((t3.type.motility._bitMask & t4._bitMask) === 0) {
            reachedTarget = false;
            break;
          }
        }
        t3 = i === 0 ? C.Color_222_156_33 : C.Color_38_38_56;
        t4 = t1._stagePanel;
        t7 = t4.bounds.pos;
        t8 = t4._cameraBounds.pos;
        t4 = t4._renderOffset;
        terminal.drawGlyph$3(t6 + t7.x - t8.x + t4.x, t5 + t7.y - t8.y + t4.y, new L.Glyph(8226, t3, C.Color_0_0_0));
        i = C.JSInt_methods.$mod(i + 5 - 1, 5);
      }
      reticleColor = reachedTarget ? C.Color_222_156_33 : C.Color_38_38_56;
      t2 = target.x;
      t3 = target.y;
      t4 = L.Glyph$("-", reticleColor, null);
      t1._stagePanel.drawStageGlyph$4(terminal, t2 - 1, t3, t4);
      t4 = L.Glyph$("-", reticleColor, null);
      t1._stagePanel.drawStageGlyph$4(terminal, t2 + 1, t3, t4);
      t4 = L.Glyph$("|", reticleColor, null);
      t1._stagePanel.drawStageGlyph$4(terminal, t2, t3 - 1, t4);
      t4 = L.Glyph$("|", reticleColor, null);
      t1._stagePanel.drawStageGlyph$4(terminal, t2, t3 + 1, t4);
      if (!reachedTarget) {
        t4 = L.Glyph$("X", reticleColor, null);
        t1._stagePanel.drawStageGlyph$4(terminal, t2, t3, t4);
      }
      t1 = P.String;
      helpKeys = P.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      if (this._monsters.length === 0)
        helpKeys.$indexSet(0, "\u2195\u2194", "Choose tile");
      else if (this._targetingFloor) {
        helpKeys.$indexSet(0, "\u2195\u2194", "Choose tile");
        helpKeys.$indexSet(0, "Tab", "Target monsters");
      } else {
        helpKeys.$indexSet(0, "\u2195\u2194", "Choose monster");
        helpKeys.$indexSet(0, "Tab", "Target floor");
      }
      helpKeys.$indexSet(0, "Esc", "Cancel");
      R.Draw_helpKeys(terminal, helpKeys, "Choose a target");
    },
    _changeTarget$1: function(dir) {
      if (this._targetingFloor)
        this._changeFloorTarget$1(dir);
      else
        this._changeMonsterTarget$1(dir);
    },
    _changeFloorTarget$1: function(dir) {
      var t1, pos, t2, t3;
      t1 = this._target_dialog$_gameScreen;
      pos = t1.get$currentTarget(t1).$add(0, dir);
      t2 = t1.game;
      if (pos.$sub(0, t2.hero._pos).$gt(0, this._target_dialog$_range))
        return;
      t2 = t2._stage.tiles.$index(0, pos);
      if (t2._isExplored) {
        t2.toString;
        t3 = $.$get$Motility_fly();
        t2 = (t2.type.motility._bitMask & t3._bitMask) === 0 || t2._isOccluded;
      } else
        t2 = false;
      if (t2)
        return;
      t1.targetFloor$1(pos);
    },
    _changeMonsterTarget$1: function(dir) {
      var t1, t2, ahead, behind, perp, t3, t4, t5, t6, _i, monster, relative, nearest, farthest;
      t1 = B.Monster;
      t2 = [t1];
      ahead = H.setRuntimeTypeInfo([], t2);
      behind = H.setRuntimeTypeInfo([], t2);
      perp = dir.get$rotateLeft90();
      for (t2 = this._monsters, t3 = t2.length, t4 = this._target_dialog$_gameScreen, t5 = perp.x, t6 = perp.y, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        monster = t2[_i];
        relative = monster._pos.$sub(0, t4.get$currentTarget(t4));
        if (t5 * relative.y - t6 * relative.x > 0)
          C.JSArray_methods.add$1(ahead, monster);
        else
          C.JSArray_methods.add$1(behind, monster);
      }
      nearest = X._findLowest(ahead, new X.TargetDialog__changeMonsterTarget_closure(this), t1);
      if (nearest != null) {
        t4.targetActor$1(nearest);
        return;
      }
      farthest = X._findHighest(behind, new X.TargetDialog__changeMonsterTarget_closure0(this), t1);
      if (farthest != null)
        t4.targetActor$1(farthest);
    },
    _isKnownOccluded$1: function(target) {
      var t1, stage, pos, t2, t3;
      t1 = this._target_dialog$_gameScreen.game;
      stage = t1._stage;
      for (t1 = G._LineIterator$(t1.hero._pos, target); t1.moveNext$0(), true;) {
        pos = t1._line$_current;
        if (J.$eq$(pos, target))
          return false;
        t2 = stage.tiles;
        t3 = t2.bounds;
        if (!t3.contains$1(0, pos))
          return true;
        t2 = t2._elements;
        t3 = pos.y * t3.size.x + pos.x;
        if (t3 < 0 || t3 >= t2.length)
          return H.ioore(t2, t3);
        t3 = t2[t3];
        if (t3._isExplored) {
          t3.toString;
          t2 = $.$get$Motility_fly();
          t2 = (t3.type.motility._bitMask & t2._bitMask) === 0;
        } else
          t2 = false;
        if (t2)
          return true;
      }
      throw H.wrapException("unreachable");
    },
    $asScreen: function() {
      return [Y.Input];
    }
  };
  X.TargetDialog__changeMonsterTarget_closure.prototype = {
    call$1: function(monster) {
      var t1 = this.$this._target_dialog$_gameScreen;
      return monster.get$pos().$sub(0, t1.get$currentTarget(t1)).get$lengthSquared();
    },
    $signature: 37
  };
  X.TargetDialog__changeMonsterTarget_closure0.prototype = {
    call$1: function(monster) {
      var t1 = this.$this._target_dialog$_gameScreen;
      return monster.get$pos().$sub(0, t1.get$currentTarget(t1)).get$lengthSquared();
    },
    $signature: 37
  };
  D.Display.prototype = {
    get$width: function(_) {
      return this._glyphs.bounds.size.x;
    },
    get$height: function(_) {
      return this._glyphs.bounds.size.y;
    },
    setGlyph$3: function(x, y, glyph) {
      var t1, t2;
      if (x < 0)
        return;
      t1 = this._glyphs;
      t2 = t1.bounds.size;
      if (x >= t2.x)
        return;
      if (y < 0)
        return;
      if (y >= t2.y)
        return;
      t2 = this._changedGlyphs;
      if (!J.$eq$(t1.$get$2(x, y), glyph))
        t2.$set$3(x, y, glyph);
      else
        t2.$set$3(x, y, null);
    },
    render$1: function(renderGlyph) {
      var t1, t2, t3, t4, t5, t6, t7, t8, y, t9, t10, x, t11, glyph;
      H.functionTypeCheck(renderGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
      for (t1 = this._glyphs, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t4 = H.getTypeArgumentByIndex(t1, 0), t1 = t1._elements, t5 = this._changedGlyphs, t6 = H.getTypeArgumentByIndex(t5, 0), t7 = t5._elements, t5 = t5.bounds.size.x, t8 = t7.length, y = 0; y < t3; ++y)
        for (t9 = y * t2, t10 = y * t5, x = 0; x < t2; ++x) {
          t11 = t10 + x;
          if (t11 < 0 || t11 >= t8)
            return H.ioore(t7, t11);
          glyph = t7[t11];
          if (glyph == null)
            continue;
          renderGlyph.call$3(x, y, glyph);
          C.JSArray_methods.$indexSet(t1, t9 + x, H.assertSubtypeOfRuntimeType(glyph, t4));
          C.JSArray_methods.$indexSet(t7, t11, H.assertSubtypeOfRuntimeType(null, t6));
        }
    }
  };
  L.Color.prototype = {
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this.r) ^ C.JSInt_methods.get$hashCode(this.g) ^ C.JSInt_methods.get$hashCode(this.b);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof L.Color)
        return this.r === other.r && this.g === other.g && this.b === other.b;
      return false;
    },
    blend$2: function(other, fractionOther) {
      var fractionThis = 1 - fractionOther;
      return new L.Color(C.JSNumber_methods.toInt$0(this.r * fractionThis + other.r * fractionOther), C.JSNumber_methods.toInt$0(this.g * fractionThis + other.g * fractionOther), C.JSNumber_methods.toInt$0(this.b * fractionThis + other.b * fractionOther));
    }
  };
  L.Glyph.prototype = {
    get$hashCode: function(_) {
      var t1, t2;
      t1 = this.fore;
      t2 = this.back;
      return J.get$hashCode$(this.char) ^ t1.get$hashCode(t1) ^ t2.get$hashCode(t2);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof L.Glyph)
        return this.char == other.char && this.fore.$eq(0, other.fore) && this.back.$eq(0, other.back);
      return false;
    }
  };
  S.KeyBindings.prototype = {
    bind$4$alt$shift: function(input, keyCode, alt, shift) {
      H.assertSubtypeOfRuntimeType(input, H.getTypeArgumentByIndex(this, 0));
      this._bindings.$indexSet(0, new S._KeyBinding(keyCode, shift === true, alt === true), input);
    },
    bind$2: function(input, keyCode) {
      return this.bind$4$alt$shift(input, keyCode, null, null);
    },
    bind$3$shift: function(input, keyCode, shift) {
      return this.bind$4$alt$shift(input, keyCode, null, shift);
    },
    bind$3$alt: function(input, keyCode, alt) {
      return this.bind$4$alt$shift(input, keyCode, alt, null);
    }
  };
  S._KeyBinding.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof S._KeyBinding)
        return this.charCode == other.charCode && this.shift === other.shift && this.alt === other.alt;
      return false;
    },
    get$hashCode: function(_) {
      return (J.get$hashCode$(this.charCode) ^ C.JSBool_methods.get$hashCode(this.shift) ^ C.JSBool_methods.get$hashCode(this.alt)) >>> 0;
    },
    toString$0: function(_) {
      var result = "key(" + H.S(this.charCode);
      if (this.shift)
        result += " shift";
      return (this.alt ? result + " alt" : result) + ")";
    }
  };
  G.PortTerminal.prototype = {
    get$width: function(_) {
      return this.size.x;
    },
    get$height: function(_) {
      return this.size.y;
    },
    drawGlyph$3: function(x, y, glyph) {
      var t1;
      if (x < 0)
        return;
      t1 = this.size;
      if (x >= t1.x)
        return;
      if (y < 0)
        return;
      if (y >= t1.y)
        return;
      t1 = this._port_terminal$_y;
      if (typeof t1 !== "number")
        return t1.$add();
      this._root.drawGlyph$3(this._port_terminal$_x + x, t1 + y, glyph);
    },
    rect$4: function(_, x, y, width, height) {
      var t1 = this._port_terminal$_y;
      if (typeof t1 !== "number")
        return t1.$add();
      return new G.PortTerminal(new L.Vec(width, height), this._port_terminal$_x + x, t1 + y, this._root, C.Color_255_255_255, C.Color_0_0_0);
    }
  };
  S.RetroTerminal.prototype = {
    get$width: function(_) {
      return this._display._glyphs.bounds.size.x;
    },
    get$height: function(_) {
      return this._display._glyphs.bounds.size.y;
    },
    RetroTerminal$_$6: function(_display, _charWidth, _charHeight, canvas, _font, _scale) {
      var t1 = W.Event;
      W._EventStreamSubscription$(this._font, "load", H.functionTypeCheck(new S.RetroTerminal$__closure(this), {func: 1, ret: -1, args: [t1]}), false, t1);
    },
    drawGlyph$3: function(x, y, glyph) {
      this._display.setGlyph$3(x, y, glyph);
    },
    render$0: function() {
      if (!this._imageLoaded)
        return;
      this._display.render$1(new S.RetroTerminal_render_closure(this));
    },
    _getColorFont$1: function(color) {
      var t1, cached, t2, t3, tint, context;
      t1 = this._fontColorCache;
      cached = t1.$index(0, color);
      if (cached != null)
        return cached;
      t2 = this._font;
      t3 = t2.width;
      tint = W.CanvasElement_CanvasElement(t2.height, t3);
      context = tint.getContext("2d");
      context.drawImage(t2, 0, 0);
      context.globalCompositeOperation = "source-atop";
      context.fillStyle = "rgb(" + color.r + ", " + color.g + ", " + color.b + ")";
      context.fillRect(0, 0, t2.width, t2.height);
      t1.$indexSet(0, color, tint);
      return tint;
    }
  };
  S.RetroTerminal$__closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      t1._imageLoaded = true;
      t1.render$0();
    },
    $signature: 20
  };
  S.RetroTerminal_render_closure.prototype = {
    call$3: function(x, y, glyph) {
      var char, char0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, color;
      char = glyph.char;
      char0 = C.Map_6xa1A.$index(0, char);
      char = char0 == null ? char : char0;
      if (typeof char !== "number")
        return char.$mod();
      t1 = C.JSInt_methods.$mod(char, 32);
      t2 = this.$this;
      t3 = t2._charWidth;
      t4 = C.JSInt_methods._tdivFast$1(char, 32);
      t5 = t2._charHeight;
      t6 = t2._context;
      t7 = glyph.back;
      t6.fillStyle = "rgb(" + t7.r + ", " + t7.g + ", " + t7.b + ")";
      t7 = t2._scale;
      t8 = x * t3 * t7;
      t9 = y * t5 * t7;
      t10 = t3 * t7;
      t7 = t5 * t7;
      t6.fillRect(t8, t9, t10, t7);
      if (char === 0 || char === 32)
        return;
      color = t2._getColorFont$1(glyph.fore);
      t6.imageSmoothingEnabled = false;
      t6.drawImage(color, t1 * t3, t4 * t5, t3, t5, t8, t9, t10, t7);
    },
    $signature: 35
  };
  K.Terminal.prototype = {
    fill$5: function(_, x, y, width, height, color) {
      var glyph, t1, t2, py, px;
      glyph = L.Glyph$fromCharCode(32, this.foreColor, this.backColor);
      for (t1 = y + height, t2 = x + width, py = y; py < t1; ++py)
        for (px = x; px < t2; ++px)
          this.drawGlyph$3(px, py, glyph);
    },
    fill$4: function($receiver, x, y, width, height) {
      return this.fill$5($receiver, x, y, width, height, null);
    },
    writeAt$5: function(x, y, text, fore, $back) {
      var t1, i, t2, t3;
      if (fore == null)
        fore = this.foreColor;
      if ($back == null)
        $back = this.backColor;
      for (t1 = text.length, i = 0; i < t1; ++i) {
        t2 = x + i;
        if (t2 >= this.get$width(this))
          break;
        t3 = C.JSString_methods._codeUnitAt$1(text, i);
        this.drawGlyph$3(t2, y, new L.Glyph(t3, fore, $back));
      }
    },
    writeAt$4: function(x, y, text, fore) {
      return this.writeAt$5(x, y, text, fore, null);
    },
    writeAt$3: function(x, y, text) {
      return this.writeAt$5(x, y, text, null, null);
    }
  };
  K.RenderableTerminal.prototype = {};
  B.UserInterface.prototype = {
    set$handlingInput: function(value) {
      var t1, t2, t3, t4;
      if (this._keyDownSubscription != null)
        return;
      t1 = document;
      t2 = t1.body;
      t2.toString;
      t3 = W.KeyboardEvent;
      t4 = {func: 1, ret: -1, args: [t3]};
      this.set$_keyDownSubscription(W._EventStreamSubscription$(t2, "keydown", H.functionTypeCheck(this.get$_keyDown(), t4), false, t3));
      t1 = t1.body;
      t1.toString;
      this.set$_keyUpSubscription(W._EventStreamSubscription$(t1, "keyup", H.functionTypeCheck(this.get$_keyUp(), t4), false, t3));
    },
    set$running: function(value) {
      if (this._running)
        return;
      this._running = true;
      C.Window_methods.requestAnimationFrame$1(window, this.get$_user_interface$_tick());
    },
    setTerminal$1: function(terminal) {
      var t1, t2, resized, t3, _i;
      t1 = this._terminal;
      if (t1 != null) {
        t1 = t1._display._glyphs.bounds.size;
        t2 = terminal._display._glyphs.bounds.size;
        t1 = t1.x !== t2.x || t1.y !== t2.y;
        resized = t1;
      } else
        resized = true;
      this._terminal = terminal;
      this._dirty = true;
      if (resized)
        for (t1 = this._screens, t2 = t1.length, t3 = terminal._display._glyphs.bounds.size, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].resize$1(0, t3);
    },
    push$1: function($screen) {
      H.assertSubtype($screen, "$isScreen", this.$ti, "$asScreen");
      $screen._user_interface$_bind$1(this);
      C.JSArray_methods.add$1(this._screens, $screen);
      this._render$0();
    },
    pop$1: function(result) {
      var t1, $screen, t2, t3;
      t1 = this._screens;
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      $screen = t1.pop();
      $screen.set$_ui(null);
      t2 = t1.length;
      t3 = t2 - 1;
      if (t3 < 0)
        return H.ioore(t1, t3);
      t1[t3].activate$2($screen, result);
      this._render$0();
    },
    pop$0: function() {
      return this.pop$1(null);
    },
    goTo$1: function($screen) {
      var t1;
      H.assertSubtype($screen, "$isScreen", this.$ti, "$asScreen");
      t1 = this._screens;
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop().set$_ui(null);
      $screen._user_interface$_bind$1(this);
      C.JSArray_methods.add$1(t1, $screen);
      this._render$0();
    },
    refresh$0: function() {
      var t1, i;
      for (t1 = this._screens, i = 0; i < t1.length; ++i)
        t1[i].update$0(0);
      if (this._dirty)
        this._render$0();
    },
    _keyDown$1: function($event) {
      var keyCode, t1, t2, input, $screen;
      H.interceptedTypeCheck($event, "$isKeyboardEvent");
      keyCode = $event.keyCode;
      if (keyCode === 59)
        keyCode = 186;
      t1 = $event.shiftKey;
      t2 = $event.altKey;
      input = this.keyPress._bindings.$index(0, new S._KeyBinding(keyCode, t1 === true, t2 === true));
      $screen = C.JSArray_methods.get$last(this._screens);
      if (input != null) {
        $event.preventDefault();
        if ($screen.handleInput$1(input))
          return;
      }
      t1 = $event.shiftKey;
      if ($screen.keyDown$3$alt$shift(keyCode, $event.altKey, t1))
        $event.preventDefault();
    },
    _keyUp$1: function($event) {
      var keyCode, $screen, t1;
      H.interceptedTypeCheck($event, "$isKeyboardEvent");
      keyCode = $event.keyCode;
      if (keyCode === 59)
        keyCode = 186;
      $screen = C.JSArray_methods.get$last(this._screens);
      t1 = $event.shiftKey;
      if ($screen.keyUp$3$alt$shift(keyCode, $event.altKey, t1))
        $event.preventDefault();
    },
    _user_interface$_tick$1: function(time) {
      H.numTypeCheck(time);
      this.refresh$0();
      if (this._running)
        C.Window_methods.requestAnimationFrame$1(window, this.get$_user_interface$_tick());
    },
    _render$0: function() {
      var t1, i;
      t1 = this._terminal;
      if (t1 == null)
        return;
      t1.fill$4(0, 0, 0, t1.get$width(t1), t1.get$height(t1));
      for (t1 = this._screens, i = t1.length - 1; i >= 0; --i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        if (!t1[i].get$isTransparent())
          break;
      }
      if (i < 0)
        i = 0;
      for (; i < t1.length; ++i)
        t1[i].render$1(this._terminal);
      this._dirty = false;
      this._terminal.render$0();
    },
    set$_keyDownSubscription: function(_keyDownSubscription) {
      this._keyDownSubscription = H.assertSubtype(_keyDownSubscription, "$isStreamSubscription", [W.KeyboardEvent], "$asStreamSubscription");
    },
    set$_keyUpSubscription: function(_keyUpSubscription) {
      this._keyUpSubscription = H.assertSubtype(_keyUpSubscription, "$isStreamSubscription", [W.KeyboardEvent], "$asStreamSubscription");
    }
  };
  B.Screen.prototype = {
    get$isTransparent: function() {
      return false;
    },
    _user_interface$_bind$1: function(ui) {
      H.assertSubtype(ui, "$isUserInterface", [H.getRuntimeTypeArgument(this, "Screen", 0)], "$asUserInterface");
      this.set$_ui(ui);
      this.resize$1(0, ui._terminal._display._glyphs.bounds.size);
    },
    dirty$0: function() {
      var t1 = this._ui;
      if (t1 == null)
        return;
      t1._dirty = true;
    },
    handleInput$1: function(input) {
      H.assertSubtypeOfRuntimeType(input, H.getRuntimeTypeArgument(this, "Screen", 0));
      return false;
    },
    keyDown$3$alt$shift: function(keyCode, alt, shift) {
      return false;
    },
    keyUp$3$alt$shift: function(keyCode, alt, shift) {
      return false;
    },
    activate$2: function(popped, result) {
      H.assertSubtype(popped, "$isScreen", [H.getRuntimeTypeArgument(this, "Screen", 0)], "$asScreen");
    },
    update$0: function(_) {
    },
    render$1: function(terminal) {
    },
    resize$1: function(_, size) {
    },
    set$_ui: function(_ui) {
      this._ui = H.assertSubtype(_ui, "$isUserInterface", [H.getRuntimeTypeArgument(this, "Screen", 0)], "$asUserInterface");
    }
  };
  M.Array2D.prototype = {
    get$width: function(_) {
      return this.bounds.size.x;
    },
    get$height: function(_) {
      return this.bounds.size.y;
    },
    $index: function(_, pos) {
      var t1, t2;
      H.interceptedTypeCheck(pos, "$isVec");
      t1 = this._elements;
      t2 = pos.y * this.bounds.size.x + pos.x;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    $indexSet: function(_, pos, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      C.JSArray_methods.$indexSet(this._elements, pos.y * this.bounds.size.x + pos.x, value);
    },
    $get$2: function(x, y) {
      var t1, t2;
      t1 = this._elements;
      t2 = y * this.bounds.size.x + x;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    $set$3: function(x, y, value) {
      C.JSArray_methods.$indexSet(this._elements, y * this.bounds.size.x + x, H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0)));
    },
    generate$1: function(generator) {
      var t1, t2, t3, t4, t5, t6;
      t1 = H.getTypeArgumentByIndex(this, 0);
      if (H.functionTypeTest(generator, {func: 1, ret: t1}))
        for (t2 = this.bounds, t3 = X.RectIterator$(t2), t4 = this._elements, t2 = t2.size.x; t3.moveNext$0();) {
          t5 = t3._x;
          C.JSArray_methods.$indexSet(t4, t3._y * t2 + t5, H.assertSubtypeOfRuntimeType(generator.call$0(), t1));
        }
      else if (H.functionTypeTest(generator, {func: 1, ret: t1, args: [L.Vec]}))
        for (t2 = this.bounds, t3 = X.RectIterator$(t2), t4 = this._elements, t2 = t2.size.x; t3.moveNext$0();) {
          t5 = t3._x;
          t6 = t3._y;
          C.JSArray_methods.$indexSet(t4, t6 * t2 + t5, H.assertSubtypeOfRuntimeType(generator.call$1(new L.Vec(t5, t6)), t1));
        }
      else if (H.functionTypeTest(generator, {func: 1, ret: t1, args: [P.int, P.int]}))
        for (t2 = this.bounds, t3 = X.RectIterator$(t2), t4 = this._elements, t2 = t2.size.x; t3.moveNext$0();) {
          t5 = t3._x;
          t6 = t3._y;
          C.JSArray_methods.$indexSet(t4, t6 * t2 + t5, H.assertSubtypeOfRuntimeType(generator.call$2(t5, t6), t1));
        }
      else
        throw H.wrapException(P.ArgumentError$("Generator must take zero arguments, one Vec, or two ints."));
    },
    get$iterator: function(_) {
      var t1 = this._elements;
      return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
    }
  };
  Q.Circle.prototype = {
    get$iterator: function(_) {
      return Q._CircleIterator__CircleIterator(this, false);
    },
    $asIterable: function() {
      return [L.Vec];
    }
  };
  Q._CircleIterator.prototype = {
    get$current: function() {
      var t1 = this._boundsIterator;
      return new L.Vec(t1._x, t1._y).$add(0, this._circle.center);
    },
    moveNext$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, $length;
      for (t1 = this._edge, t2 = this._circle.radius, t3 = this._boundsIterator, t4 = t2 > 0, t5 = t2 - 1; true;) {
        if (!t3.moveNext$0())
          return false;
        t6 = t3._x;
        t7 = t3._y;
        $length = t6 * t6 + t7 * t7;
        if ($length > Q._radiusSquared(t2))
          continue;
        if (t1 && t4 && $length < Q._radiusSquared(t5))
          continue;
        break;
      }
      return true;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [L.Vec];
    }
  };
  Z.Direction.prototype = {
    get$rotateLeft45: function() {
      switch (this) {
        case C.Direction_0_0:
          return C.Direction_0_0;
        case C.Direction_0_m1:
          return C.Direction_m1_m1;
        case C.Direction_1_m1:
          return C.Direction_0_m1;
        case C.Direction_1_0:
          return C.Direction_1_m1;
        case C.Direction_1_1:
          return C.Direction_1_0;
        case C.Direction_0_1:
          return C.Direction_1_1;
        case C.Direction_m1_1:
          return C.Direction_0_1;
        case C.Direction_m1_0:
          return C.Direction_m1_1;
        case C.Direction_m1_m1:
          return C.Direction_m1_0;
      }
      throw H.wrapException("unreachable");
    },
    get$rotateRight45: function() {
      switch (this) {
        case C.Direction_0_0:
          return C.Direction_0_0;
        case C.Direction_0_m1:
          return C.Direction_1_m1;
        case C.Direction_1_m1:
          return C.Direction_1_0;
        case C.Direction_1_0:
          return C.Direction_1_1;
        case C.Direction_1_1:
          return C.Direction_0_1;
        case C.Direction_0_1:
          return C.Direction_m1_1;
        case C.Direction_m1_1:
          return C.Direction_m1_0;
        case C.Direction_m1_0:
          return C.Direction_m1_m1;
        case C.Direction_m1_m1:
          return C.Direction_0_m1;
      }
      throw H.wrapException("unreachable");
    },
    get$rotateLeft90: function() {
      switch (this) {
        case C.Direction_0_0:
          return C.Direction_0_0;
        case C.Direction_0_m1:
          return C.Direction_m1_0;
        case C.Direction_1_m1:
          return C.Direction_m1_m1;
        case C.Direction_1_0:
          return C.Direction_0_m1;
        case C.Direction_1_1:
          return C.Direction_1_m1;
        case C.Direction_0_1:
          return C.Direction_1_0;
        case C.Direction_m1_1:
          return C.Direction_1_1;
        case C.Direction_m1_0:
          return C.Direction_0_1;
        case C.Direction_m1_m1:
          return C.Direction_m1_1;
      }
      throw H.wrapException("unreachable");
    },
    get$rotateRight90: function() {
      switch (this) {
        case C.Direction_0_0:
          return C.Direction_0_0;
        case C.Direction_0_m1:
          return C.Direction_1_0;
        case C.Direction_1_m1:
          return C.Direction_1_1;
        case C.Direction_1_0:
          return C.Direction_0_1;
        case C.Direction_1_1:
          return C.Direction_m1_1;
        case C.Direction_0_1:
          return C.Direction_m1_0;
        case C.Direction_m1_1:
          return C.Direction_m1_m1;
        case C.Direction_m1_0:
          return C.Direction_0_m1;
        case C.Direction_m1_m1:
          return C.Direction_1_m1;
      }
      throw H.wrapException("unreachable");
    },
    get$rotate180: function() {
      switch (this) {
        case C.Direction_0_0:
          return C.Direction_0_0;
        case C.Direction_0_m1:
          return C.Direction_0_1;
        case C.Direction_1_m1:
          return C.Direction_m1_1;
        case C.Direction_1_0:
          return C.Direction_m1_0;
        case C.Direction_1_1:
          return C.Direction_m1_m1;
        case C.Direction_0_1:
          return C.Direction_0_m1;
        case C.Direction_m1_1:
          return C.Direction_1_m1;
        case C.Direction_m1_0:
          return C.Direction_1_0;
        case C.Direction_m1_m1:
          return C.Direction_1_1;
      }
      throw H.wrapException("unreachable");
    },
    toString$0: function(_) {
      switch (this) {
        case C.Direction_0_0:
          return "none";
        case C.Direction_0_m1:
          return "n";
        case C.Direction_1_m1:
          return "ne";
        case C.Direction_1_0:
          return "e";
        case C.Direction_1_1:
          return "se";
        case C.Direction_0_1:
          return "s";
        case C.Direction_m1_1:
          return "sw";
        case C.Direction_m1_0:
          return "w";
        case C.Direction_m1_m1:
          return "nw";
      }
      throw H.wrapException("unreachable");
    },
    $isVec: 1
  };
  G._LineIterator.prototype = {
    get$current: function() {
      return this._line$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._line$_current.$add(0, this._primaryStep);
      this._line$_current = t1;
      t2 = this._error;
      t3 = this._secondary;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = t2 + t3;
      this._error = t3;
      t2 = this._primary;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t3 * 2 >= t2) {
        this._line$_current = t1.$add(0, this._secondaryStep);
        t1 = this._error;
        t2 = this._primary;
        if (typeof t2 !== "number")
          return H.iae(t2);
        this._error = t1 - t2;
      }
      return true;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [L.Vec];
    }
  };
  X.Rect.prototype = {
    get$width: function(_) {
      return this.size.x;
    },
    get$height: function(_) {
      return this.size.y;
    },
    get$left: function(_) {
      var t1 = this.pos.x;
      return Math.min(t1, t1 + this.size.x);
    },
    get$top: function(_) {
      var t1 = this.pos.y;
      return Math.min(t1, t1 + this.size.y);
    },
    get$right: function(_) {
      var t1 = this.pos.x;
      return Math.max(t1, t1 + this.size.x);
    },
    get$bottom: function(_) {
      var t1 = this.pos.y;
      return Math.max(t1, t1 + this.size.y);
    },
    get$center: function() {
      return new L.Vec(C.JSInt_methods._tdivFast$1(this.get$left(this) + this.get$right(this), 2), C.JSInt_methods._tdivFast$1(this.get$top(this) + this.get$bottom(this), 2));
    },
    toString$0: function(_) {
      return "(" + this.pos.toString$0(0) + ")-(" + this.size.toString$0(0) + ")";
    },
    inflate$1: function(distance) {
      var t1, t2, t3;
      t1 = this.pos;
      t2 = this.size;
      t3 = distance * 2;
      return new X.Rect(new L.Vec(t1.x - distance, t1.y - distance), new L.Vec(t2.x + t3, t2.y + t3));
    },
    contains$1: function(_, object) {
      var t1, t2, t3, t4;
      if (!J.getInterceptor$(object).$isVec)
        return false;
      t1 = object.x;
      t2 = this.pos;
      t3 = t2.x;
      if (t1 < t3)
        return false;
      t4 = this.size;
      if (t1 >= t3 + t4.x)
        return false;
      t1 = object.y;
      t2 = t2.y;
      if (t1 < t2)
        return false;
      if (t1 >= t2 + t4.y)
        return false;
      return true;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = new X.RectIterator(this);
      t2 = this.pos;
      t1._x = t2.x - 1;
      t1._y = t2.y;
      return t1;
    },
    trace$0: function() {
      var t1, t2, t3, result, x, t4, t5, y;
      t1 = this.size;
      t2 = t1.x;
      t3 = t2 > 1;
      if (t3 && t1.y > 1) {
        result = H.setRuntimeTypeInfo([], [L.Vec]);
        for (x = this.get$left(this), t3 = this.pos, t4 = t3.x, t2 = t4 + t2, t5 = Math.max(t4, t2), t3 = t3.y, t1 = t3 + t1.y; x < t5; ++x) {
          C.JSArray_methods.add$1(result, new L.Vec(x, Math.min(t3, t1)));
          C.JSArray_methods.add$1(result, new L.Vec(x, Math.max(t3, t1) - 1));
        }
        for (y = this.get$top(this) + 1, t1 = Math.max(t3, t1); y < t1 - 1; ++y) {
          C.JSArray_methods.add$1(result, new L.Vec(Math.min(t4, t2), y));
          C.JSArray_methods.add$1(result, new L.Vec(t5 - 1, y));
        }
        return result;
      } else if (t3 && t1.y === 1)
        return new X.Rect(new L.Vec(this.get$left(this), this.get$top(this)), new L.Vec(t2, 1));
      else {
        t1 = t1.y;
        if (t1 >= 1 && t2 === 1)
          return new X.Rect(new L.Vec(this.get$left(this), this.get$top(this)), new L.Vec(1, t1));
      }
      return C.List_empty;
    },
    $asIterable: function() {
      return [L.Vec];
    },
    get$pos: function() {
      return this.pos;
    }
  };
  X.RectIterator.prototype = {
    get$current: function() {
      return new L.Vec(this._x, this._y);
    },
    moveNext$0: function() {
      var t1 = this._rect;
      if (++this._x >= t1.get$right(t1)) {
        this._x = t1.pos.x;
        ++this._y;
      }
      return this._y < t1.get$bottom(t1);
    },
    $isIterator: 1,
    $asIterator: function() {
      return [L.Vec];
    }
  };
  N.Rng.prototype = {
    range$2: function(minOrMax, max) {
      if (max == null) {
        max = minOrMax;
        minOrMax = 0;
      }
      return this._random.nextInt$1(max - minOrMax) + minOrMax;
    },
    range$1: function(minOrMax) {
      return this.range$2(minOrMax, null);
    },
    inclusive$2: function(minOrMax, max) {
      var t1;
      if (max == null) {
        max = minOrMax;
        minOrMax = 0;
      }
      if (typeof max !== "number")
        return max.$add();
      t1 = this._random;
      if (typeof minOrMax !== "number")
        return H.iae(minOrMax);
      return t1.nextInt$1(max + 1 - minOrMax) + minOrMax;
    },
    inclusive$1: function(minOrMax) {
      return this.inclusive$2(minOrMax, null);
    },
    float$2: function(_, minOrMax, max) {
      var t1 = this._random;
      if (max == null)
        return t1.nextDouble$0() * minOrMax;
      else
        return t1.nextDouble$0() * (max - minOrMax) + minOrMax;
    },
    float$1: function($receiver, minOrMax) {
      return this.float$2($receiver, minOrMax, null);
    },
    round$1: function(_, value) {
      var result = C.JSNumber_methods.floor$0(value);
      return this.float$1(0, 1) < value - result ? result + 1 : result;
    },
    take$1$1: function(_, items, $T) {
      var index, result;
      H.assertSubtype(items, "$isList", [$T], "$asList");
      index = $.$get$rng().range$1(items.length);
      if (index < 0 || index >= items.length)
        return H.ioore(items, index);
      result = items[index];
      C.JSArray_methods.$indexSet(items, index, C.JSArray_methods.get$last(items));
      C.JSArray_methods.removeLast$0(items);
      return result;
    },
    triangleInt$2: function(center, range) {
      var x;
      if (range < 0)
        throw H.wrapException(P.ArgumentError$('The argument "range" must be zero or greater.'));
      x = this.inclusive$1(range);
      if (x <= this.inclusive$1(range))
        return center + x;
      else
        return center - range - 1 + x;
    },
    taper$2: function(start, chanceOfIncrement) {
      while (true) {
        if (!(this._random.nextInt$1(chanceOfIncrement - 0) === 0))
          break;
        ++start;
      }
      return start;
    }
  };
  L.VecBase.prototype = {
    get$kingLength: function() {
      return Math.max(Math.abs(this.x), Math.abs(this.y));
    },
    get$lengthSquared: function() {
      var t1, t2;
      t1 = this.x;
      t2 = this.y;
      return t1 * t1 + t2 * t2;
    },
    get$length: function(_) {
      return Math.sqrt(this.get$lengthSquared());
    },
    get$nearestDirection: function() {
      var t1, slope;
      t1 = this.x;
      if (t1 === 0) {
        t1 = this.y;
        if (t1 < 0)
          return C.Direction_0_m1;
        else if (t1 === 0)
          return C.Direction_0_0;
        else
          return C.Direction_0_1;
      }
      slope = this.y / t1;
      if (t1 < 0)
        if (slope >= 2)
          return C.Direction_0_m1;
        else if (slope >= 0.5)
          return C.Direction_m1_m1;
        else if (slope >= -0.5)
          return C.Direction_m1_0;
        else if (slope >= -2)
          return C.Direction_m1_1;
        else
          return C.Direction_0_1;
      else if (slope >= 2)
        return C.Direction_0_1;
      else if (slope >= 0.5)
        return C.Direction_1_1;
      else if (slope >= -0.5)
        return C.Direction_1_0;
      else if (slope >= -2)
        return C.Direction_1_m1;
      else
        return C.Direction_0_m1;
    },
    get$neighbors: function() {
      var result, _i;
      result = H.setRuntimeTypeInfo([], [L.Vec]);
      for (_i = 0; _i < 8; ++_i)
        C.JSArray_methods.add$1(result, this.$add(0, C.List_slV[_i]));
      return result;
    },
    get$cardinalNeighbors: function() {
      var result, _i;
      result = H.setRuntimeTypeInfo([], [L.Vec]);
      for (_i = 0; _i < 4; ++_i)
        C.JSArray_methods.add$1(result, this.$add(0, C.List_aAW[_i]));
      return result;
    },
    $mul: function(_, other) {
      return new L.Vec(this.x * other, this.y * other);
    },
    $tdiv: function(_, other) {
      return new L.Vec(C.JSInt_methods.$tdiv(this.x, other), C.JSInt_methods.$tdiv(this.y, other));
    },
    $add: function(_, other) {
      if (other instanceof L.VecBase)
        return new L.Vec(this.x + other.x, this.y + other.y);
      else if (typeof other === "number" && Math.floor(other) === other)
        return new L.Vec(this.x + other, this.y + other);
      throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
    },
    $sub: function(_, other) {
      if (other instanceof L.VecBase)
        return new L.Vec(this.x - other.x, this.y - other.y);
      throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
    },
    $gt: function(_, other) {
      if (other instanceof L.VecBase)
        return this.get$lengthSquared() > other.get$lengthSquared();
      else if (typeof other === "number")
        return this.get$lengthSquared() > other * other;
      throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
    },
    $ge: function(_, other) {
      if (typeof other === "number")
        return this.get$lengthSquared() >= other * other;
      throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
    },
    $lt: function(_, other) {
      if (other instanceof L.VecBase)
        return this.get$lengthSquared() < other.get$lengthSquared();
      else if (typeof other === "number")
        return this.get$lengthSquared() < other * other;
      throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
    },
    $le: function(_, other) {
      var t1 = this.get$lengthSquared();
      return t1 <= other * other;
    },
    toString$0: function(_) {
      return "" + this.x + ", " + this.y;
    }
  };
  L.Vec.prototype = {
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode((this.x ^ this.y) >>> 0);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other instanceof L.VecBase)
        return this.x === other.x && this.y === other.y;
      return false;
    }
  };
  F.TerminalFont.prototype = {
    get$name: function(receiver) {
      return this.name;
    }
  };
  F.main_closure.prototype = {
    call$1: function(_) {
      F._resizeTerminal();
    },
    $signature: 20
  };
  F._addFont_closure.prototype = {
    call$1: function(_) {
      F._fullscreen();
    },
    $signature: 20
  };
  F._addFont_closure0.prototype = {
    call$1: function(_) {
      var t1, i, t2, t3;
      H.interceptedTypeCheck(_, "$isMouseEvent");
      for (t1 = this.name, i = 0; t2 = $.$get$_fonts(), i < t2.length; ++i) {
        t2 = t2[i];
        if (t2.name === t1) {
          $._font = t2;
          document.querySelector("#game").appendChild($._font.canvas);
        } else {
          t2 = t2.canvas;
          t3 = t2.parentNode;
          if (t3 != null)
            t3.removeChild(t2);
        }
      }
      F._resizeTerminal();
      window.localStorage.setItem("font", t1);
    },
    $signature: 131
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _.super$Interceptor$noSuchMethod = _.noSuchMethod$1;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = P.Object.prototype;
    _.super$Object$toString = _.toString$0;
    _ = W.Element0.prototype;
    _.super$Element$createFragment = _.createFragment$3$treeSanitizer$validator;
    _ = W._SimpleNodeValidator.prototype;
    _.super$_SimpleNodeValidator$allowsAttribute = _.allowsAttribute$3;
    _ = P.JsObject.prototype;
    _.super$JsObject$$index = _.$index;
    _.super$JsObject$$indexSet = _.$indexSet;
    _ = O.BoltAction.prototype;
    _.super$BoltAction$onHitActor = _.onHitActor$2;
    _ = S.MasteryDiscipline.prototype;
    _.super$MasteryDiscipline$levelDescription = _.levelDescription$1;
    _ = Q.PaintStyle.prototype;
    _.super$PaintStyle$paintTile = _.paintTile$2;
    _ = E.ConditionAction.prototype;
    _.super$ConditionAction$onPerform = _.onPerform$0;
    _ = S.Actor.prototype;
    _.super$Actor$changePosition = _.changePosition$2;
    _ = M.HeroInfoDialog.prototype;
    _.super$HeroInfoDialog$keyDown = _.keyDown$3$alt$shift;
    _.super$HeroInfoDialog$handleInput = _.handleInput$1;
    _.super$HeroInfoDialog$render = _.render$1;
    _ = F.ItemScreen.prototype;
    _.super$ItemScreen$keyDown = _.keyDown$3$alt$shift;
    _ = Y.ItemView.prototype;
    _.super$ItemView$render = _.render$1;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _static_0 = hunkHelpers._static_0,
      _static_1 = hunkHelpers._static_1,
      _static = hunkHelpers.installStaticTearOff,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_2_u = hunkHelpers._instance_2u;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 132);
    _instance_1_i(J.JSArray.prototype, "get$add", "add$1", 46);
    _static_0(H, "_js_helper_Primitives_dateNow$closure", "Primitives_dateNow", 133);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 18);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 18);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 18);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 6);
    _static_1(P, "collection_MapBase__id$closure", "MapBase__id", 1);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 1);
    _static(W, "html__Html5NodeValidator__standardAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__standardAttributeValidator"], 31, 0);
    _static(W, "html__Html5NodeValidator__uriAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__uriAttributeValidator"], 31, 0);
    _static_1(P, "js___convertToJS$closure", "_convertToJS", 1);
    _static_1(P, "js___convertToDart$closure", "_convertToDart", 136);
    _static_1(T, "furnishing_builder___mirrorCharBoth$closure", "_mirrorCharBoth", 3);
    _static_1(T, "furnishing_builder___mirrorCharHorizontal$closure", "_mirrorCharHorizontal", 3);
    _static_1(T, "furnishing_builder___mirrorCharVertical$closure", "_mirrorCharVertical", 3);
    _instance(R._ItemBuilder.prototype, "get$depth", 0, 1, function() {
      return {to: null};
    }, ["call$2$to", "call$1"], ["depth$2$to", "depth$1"], 27, 0);
    _instance(R._AffixBuilder.prototype, "get$depth", 0, 1, function() {
      return {to: null};
    }, ["call$2$to", "call$1"], ["depth$2$to", "depth$1"], 27, 0);
    _static_1(Q, "skills_Skills_find$closure", "Skills_find", 137);
    _static_1(Z, "tiles___closeDoor$closure", "_closeDoor", 12);
    _static_1(Z, "tiles___openDoor$closure", "_openDoor", 12);
    _static_1(Z, "tiles___closeBarredDoor$closure", "_closeBarredDoor", 12);
    _static_1(Z, "tiles___openBarredDoor$closure", "_openBarredDoor", 12);
    _instance_1_i(Y.ResourceSet.prototype, "get$find", "find$1", function() {
      return H.computeSignature(function(T) {
        return {func: 1, ret: T, args: [P.String]};
      }, this.$receiver, "ResourceSet");
    });
    _instance_1_u(G.Hero.prototype, "get$refreshSkill", "refreshSkill$1", 86);
    var _;
    _instance_2_u(_ = L.Affix.prototype, "get$resist", "resist$2", 91);
    _instance_2_u(_, "get$setStatBonus", "setStatBonus$2", 138);
    _instance(O.Inventory.prototype, "get$tryAdd", 0, 1, null, ["call$2$wasUnequipped", "call$1"], ["tryAdd$2$wasUnequipped", "tryAdd$1"], 94, 0);
    _instance_1_u(R.GameScreen.prototype, "get$_fireTowards", "_fireTowards$1", 105);
    _instance_1_u(_ = B.UserInterface.prototype, "get$_keyDown", "_keyDown$1", 38);
    _instance_1_u(_, "get$_keyUp", "_keyUp$1", 38);
    _instance_1_u(_, "get$_user_interface$_tick", "_user_interface$_tick$1", 130);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P._ListBase_Object_ListMixin, P.Iterable, H.ListIterator, P.Iterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.Symbol, P.MapView, H.ConstantMap, H.JSInvocationMirror, H.ReflectionInfo, H.Closure, H.TypeErrorDecoder, P.Error, H.ExceptionAndStackTrace, H._StackTrace, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H.StringMatch, P._TimerImpl, P._IterationMarker, P._SyncStarIterator, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.StreamTransformerBase, P.AsyncError, P._Zone, P._SetBase, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.IterableMixin, P.ListMixin, P._UnmodifiableMapMixin, P.Queue, P._ListQueueIterator, P.Codec, P._JsonStringifier, P.bool, P.DateTime, P.num, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.Function, P.List, P.Map, P.MapEntry, P.Null, P.StackTrace, P.Stopwatch, P.String, P.StringBuffer, P.Symbol0, W.CssStyleDeclarationBase, W._Html5NodeValidator, W.ImmutableListMixin, W.NodeValidatorBuilder, W._SimpleNodeValidator, W._SvgNodeValidator, W.FixedSizeListIterator, W.NodeValidator, W._SameOriginUriPolicy, W._ValidatingTreeSanitizer, P.JsObject, P._JSRandom, P._Random, T.GameContent, V.Action, T.DetectType, G.ElementActionMixin, N.Flow, R.Missive, Y.Decor, S.Cell, T.Symmetry, R._BaseBuilder, R._AffixBuilder, X._ItemDrop, X._TagDrop, X._PercentDrop, X._AllOfDrop, X._OneOfDrop, X._RepeatDrop, F.FloorDrop, R._BaseBuilder0, B._BreedSpawn, B._TagSpawn, B._RepeatSpawn, B._AllOfSpawn, O.Move, M.Skill, X.Region, X.Architect, X._Path, X.Architecture, Y.Pathfinder, F.ArchitecturalStyle, S.Decorator, S.DensityMap, Z.Junction, Z.TakeFrom, Z.JunctionSet, Q.Painter, Q.PaintStyle, D.Reachability, D._FillStep, G._RiverPoint, R.RoomTile, D.Town, Z._TileBuilder, E._MonsterLog, V.ActionResult, V.GeneratorActionMixin, R.DestroyActionMixin, S.Actor, U.Attack, U.HitType, U.Hit, U.Defense, E.Condition, G.Element, Y.Energy, D.Game, D.GameResult, D.Event0, D.EventType, O.Log, O.Noun, O.Pronoun, O.LogType, O.Message, Y.ResourceSet, Y._Resource, Y._Tag, Y._QueryKey, Y._ResourceQuery, X.Behavior, T.HeroClass, K.HeroSave, V.Lore, N.Race, N.RaceStats, M.UsableSkill, M.TargetSkill, M.SkillSet, D.Property, D.Stat, L.Affix, O.ItemLocation, O.ItemCollection, O.AddItemResult, R.Item, L.Drop, L.ItemUse, L.Toss, L.ItemType, O.Shop, B.BreedRef, B.Breed, B.SpawnLocation, B.Spawn, B.BreedFlags, M.MonsterState, B.BucketQueue, B.Fov, B._Shadow, F.Lighting, Y.Path, Z.Sound, L.Stage, Q.Motility, Q.TilePortal, Q.TileType, Q.Tile, B.Screen, K.Effect, K.ElementEffect, K.FrameEffect, K.ItemEffect, K.DamageEffect, K.ParticleEffect, K.TeleportEffect, K.HealEffect, K.DetectEffect, K.MapEffect, K.TreasureEffect, K.HowlEffect, K.BlinkEffect, F._AnimatedValue, Q._Sort, Z._Sort0, Y.Input, Y.ItemView, D._ItemCommand, Y.Panel, S.Storage, D.Display, L.Color, L.Glyph, S.KeyBindings, S._KeyBinding, K.Terminal, B.UserInterface, Q._CircleIterator, L.VecBase, G._LineIterator, X.RectIterator, N.Rng, F.TerminalFont]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeTypedData, W.EventTarget, W.Blob, W.CanvasRenderingContext2D, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.DomError, W.DomException, W.DomRectReadOnly, W.Event, W._HtmlCollection_Interceptor_ListMixin, W.ImageData, W.Location, W.NavigatorUserMediaError, W._NodeList_Interceptor_ListMixin, W.OverconstrainedError, W._Storage_Interceptor_MapMixin, W.__NamedNodeMap_Interceptor_ListMixin, P.KeyRange]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inheritMany(P.ListBase, [H.UnmodifiableListBase, W._ChildrenElementList, W._ChildNodeListLazy, P.FilteredElementList]);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.TakeIterable, H.TakeWhileIterable, H.SkipIterable, H._ConstantMapKeyIterable, P.IterableBase]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.LinkedHashMapKeyIterable]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, H.ReversedListIterable, P.ListQueue, P._JsonMapKeyIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeIterator, H.TakeWhileIterator, H.SkipIterator]);
    _inherit(H.EfficientLengthTakeIterable, H.TakeIterable);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P.MapView);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inheritMany(H.ConstantMap, [H.ConstantStringMap, H.GeneralConstantMap]);
    _inheritMany(H.Closure, [H.Primitives_initTicker_closure, H.Primitives_functionNoSuchMethod_closure, H.unwrapException_saveStackTrace, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.JsLinkedHashMap_addAll_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P.MapMixin_entries_closure, P._JsonStringifier_writeMap_closure, P.NoSuchMethodError_toString_closure, W.Element_Element$html_closure, W.Storage_keys_closure, W._EventStreamSubscription_closure, W.NodeValidatorBuilder_allowsElement_closure, W.NodeValidatorBuilder_allowsAttribute_closure, W._SimpleNodeValidator_closure, W._SimpleNodeValidator_closure0, W._TemplatingNodeValidator_closure, W._ValidatingTreeSanitizer_sanitizeTree_walk, P.FilteredElementList__iterable_closure, P.FilteredElementList__iterable_closure0, P.FilteredElementList_removeRange_closure, P._convertToJS_closure, P._convertToJS_closure0, P._wrapToDart_closure, P._wrapToDart_closure0, P._wrapToDart_closure1, T.GameContent_createHero_closure, T.GameContent__tryToIgniteTile_neighbor, T.GameContent__spreadPoison_neighbor, R.BarrierAction_onPerform_tryDirection, R.BarrierAction_onPerform_tryDirection_tryOffset, T.DetectAction__findTiles_addTile, T.DetectAction__findTiles_addTile_closure, T.DetectAction__findTiles_closure, T.DetectAction__findTiles_closure0, T.DetectAction__findTiles_closure1, G.WindAction_onPerform_closure, N.FlowAction_onPerform_closure, G.RayActionBase_onPerform_closure, T.furnishing_closure, A.Elements_closure2, A.Elements_closure7, A.Elements_closure8, A.Elements_closure5, A.Elements_closure6, A.Elements_closure, A.Elements_closure0, A.Elements_closure1, A.Elements_closure3, A.Elements_closure4, R._ItemBuilder_food_closure, R._ItemBuilder_detection_closure, R._ItemBuilder_resistSalve_closure, R._ItemBuilder_mapping_closure, R._ItemBuilder_haste_closure, R._ItemBuilder_teleport_closure, R._ItemBuilder_heal_closure, R._ItemBuilder_ball_closure, R._ItemBuilder_ball_closure0, R._ItemBuilder_flow_closure, R._ItemBuilder_flow_closure0, R._ItemBuilder_lightSource_closure, X._OneOfDrop_closure, R.shop_closure, L.SpawnMove_onGetAction_checkNeighbor, X.Archery__hasBow_closure, S.MasteryDiscipline__hasWeapon_closure, G.Swordfighting_getDefense_closure, Q.Skills_closure, F.ArchitecturalStyle__initialize_addStyle, F.ArchitecturalStyle__initialize_closure, F.ArchitecturalStyle__initialize_closure0, F.ArchitecturalStyle__initialize_closure1, F.ArchitecturalStyle__initialize_closure2, F.ArchitecturalStyle__initialize_closure3, F.ArchitecturalStyle__initialize_pit, F.ArchitecturalStyle__initialize_pit_closure, F.ArchitecturalStyle__initialize_keep, F.ArchitecturalStyle__initialize_keep_closure, S.Decorator_decorate_closure, S.Decorator__spawnMonsters_closure, S.Decorator__spawnMonster_spawn, S.Decorator__spawnMonster_closure, S.Decorator__spawnMonster_closure0, Z.Keep_spawnMonsters_closure, Z.Keep__regionContains_diagonal, Z.Keep__tryAttachRoom_closure, R.Room__calculateEdges_isFloor, Z.Tiles_closure, Z.Tiles_closure0, Z.Tiles_closure1, V.GeneratorActionMixin_wait_closure, R.DestroyActionMixin_destroyFloorItems_closure, R.DestroyActionMixin_destroyHeldItems_closure, R.DestroyActionMixin_destroyHeldItems_closure0, S.Actor_closure, S.Actor_finishTurn_closure, G.Element_closure, G.Element_closure0, D.Game_generate_closure, K.hashPoint_hashInt, Y.ResourceSet_all_closure, Y.ResourceSet_hasTag_closure, Y.ResourceSet_getTags_closure, Y.ResourceSet_tryChoose_closure, Y.ResourceSet_tryChoose_closure0, Y.ResourceSet_tryChooseMatching_closure, Y.ResourceSet_tryChooseMatching_closure0, Y.ResourceSet_tryChooseMatching__closure, X.RunBehavior_canPerform_closure, X.RunBehavior__runInPassage_closure, X.RunBehavior__shouldKeepRunning_actorAt, G.Hero_createRangedHit_closure, G.Hero_refreshProperties_closure, G.Hero_refreshProperties_closure0, V.Lore_allSlain_closure, V.Lore_seeBreed_closure, V.Lore_slay_closure, V.Lore_findItem_closure, V.Lore_findItem_findAffix, V.Lore_findItem_findAffix_closure, V.Lore_useItem_closure, N.RaceStats_lerp, M.SkillSet_acquired_closure, D.StatBase_refresh_closure, E.Equipment_weapons_closure, E.Equipment_length_closure, E.Equipment_canEquip_closure, E.Equipment_iterator_closure, O.Inventory_clone_closure, B.Monster_onGiveDamage_closure, B.Monster_onTakeDamage_closure, B.Monster_onTakeDamage_closure0, M.MonsterState__meander_closure, M.AwakeState_getAction_closure, M.AwakeState__escapeSubstance_closure, M.AwakeState__findRangedPath_isValidRangedPosition, M.AfraidState_getAction_closure, M.AfraidState_getAction_closure0, N.Flow__directionsTo_walkBack, N.Flow__processNext_processNeighbor, F.Lighting__lightWalls_checkNeighbor, F.Lighting__process_checkNeighbor, L.Stage_closure, L.Stage_placeDrops_closure, L.Stage_placeDrops__closure, L.Stage_addItem_closure, L.Stage_forEachItem_closure, T.DirectionDialog_render_draw, R.Draw_helpKeys_closure, R.Draw_helpKeys_closure0, F.ExitPopup_closure, R.GameScreen_activate_closure, R.GameScreen_activate_closure0, R.GameScreen__openTargetDialog_closure, M.HeroEquipmentDialog_render_writeLine, M.HeroEquipmentDialog_render_writeScale, M.HeroEquipmentDialog_render_writeBonus, M.HeroEquipmentDialog_render_closure, Q.HeroItemLoreDialog_render_writeLine, Q.HeroItemLoreDialog__listItems_compareSort, Q.HeroItemLoreDialog__listItems_compareDepth, Q.HeroItemLoreDialog__listItems_comparePrice, Q.HeroItemLoreDialog__listItems_closure, Z.HeroMonsterLoreDialog_render_writeLine, Z.HeroMonsterLoreDialog__describeBreed_closure, Z.HeroMonsterLoreDialog__describeBreed_closure0, Z.HeroMonsterLoreDialog__listBreeds_closure, Z.HeroMonsterLoreDialog__listBreeds_compareGlyph, Z.HeroMonsterLoreDialog__listBreeds_compareGlyph_isUpper, Z.HeroMonsterLoreDialog__listBreeds_compareDepth, Z.HeroMonsterLoreDialog__listBreeds_closure0, Z.HeroResistancesDialog_render_writeLine, Z.HeroResistancesDialog_render_closure, D._TossItemCommand_selectItem_closure, Y.ItemView_render_drawStat, Y.drawInspector_writeSection, Y.drawInspector_writeLabel, Y.drawInspector_writeScale, Y.drawInspector_writeBonus, Y.drawInspector_writeStat, Y.drawInspector_writeText, R.NewHeroScreen__renderMenu_closure, R.NewHeroScreen__renderMenu_closure0, U.SidebarPanel_renderPanel_closure, U.SidebarPanel__drawStats_drawStat, U.SidebarPanel__drawHealthBar_drawCondition, T.StagePanel_update_closure, T.StagePanel_renderPanel_closure, E.Popup_render_closure, E.Popup_render_closure0, S.Storage__load_closure, S.Storage__load_closure0, S.Storage__loadRace_closure, S.Storage__loadLore_closure, S.Storage__loadLore_closure0, S.Storage__loadLore_closure1, S.Storage__loadLore_closure2, S.Storage__loadLore_closure3, S.Storage_save_closure, X.TargetDialog__changeMonsterTarget_closure, X.TargetDialog__changeMonsterTarget_closure0, S.RetroTerminal$__closure, S.RetroTerminal_render_closure, F.main_closure, F._addFont_closure, F._addFont_closure0]);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, H.RuntimeError, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, P._JsonMap, W._AttributeMap]);
    _inherit(H.NativeTypedArray, H.NativeTypedData);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inheritMany(P.IterableBase, [P._SyncStarIterable, U.VecSet, E._Equipment_IterableBase_ItemCollection, M.Array2D, Q.Circle, X.Rect]);
    _inherit(P._RootZone, P._Zone);
    _inherit(P._LinkedHashSet, P._SetBase);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P.JsonCodec, P.Codec);
    _inheritMany(P.Converter, [P.JsonEncoder, P.JsonDecoder]);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inheritMany(W.EventTarget, [W.Node, W.WorkerGlobalScope, W.Window]);
    _inheritMany(W.Node, [W.Element0, W.CharacterData, W._Attr]);
    _inheritMany(W.Element0, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.BaseElement, W.BodyElement, W.ButtonElement, W.CanvasElement, W.EmbedElement, W.FieldSetElement, W.FormElement, W.IFrameElement, W.ImageElement, W.InputElement, W.MapElement, W.MetaElement, W.ObjectElement, W.OutputElement, W.ParamElement, W.SelectElement, W.SlotElement, W.TableElement, W.TableRowElement, W.TableSectionElement, W.TemplateElement, W.TextAreaElement]);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inherit(W.File, W.Blob);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.Event, [W.UIEvent, W.SpeechSynthesisEvent]);
    _inheritMany(W.UIEvent, [W.KeyboardEvent, W.MouseEvent]);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.SharedWorkerGlobalScope, W.WorkerGlobalScope);
    _inherit(W.Storage0, W._Storage_Interceptor_MapMixin);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._ElementAttributeMap, W._AttributeMap);
    _inherit(W._EventStream, P.Stream);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(W._TemplatingNodeValidator, W._SimpleNodeValidator);
    _inheritMany(P.JsObject, [P.JsFunction, P._JsArray_JsObject_ListMixin]);
    _inherit(P.JsArray, P._JsArray_JsObject_ListMixin);
    _inherit(P.ScriptElement, P.SvgElement);
    _inheritMany(V.Action, [R._BarrierAction_Action_ElementActionMixin, F.LosAction, E.ConditionAction, T.DetectAction, X.EatAction, G._BurnActorAction_Action_DestroyActionMixin, G._BurnFloorAction_Action_DestroyActionMixin, G._BurningFloorAction_Action_DestroyActionMixin, G._FreezeFloorAction_Action_DestroyActionMixin, G._PoisonFloorAction_Action_DestroyActionMixin, G._PoisonedFloorAction_Action_DestroyActionMixin, G.WindAction, G.LightFloorAction, N._FlowAction_Action_ElementActionMixin, N.FlowSelfAction, N.FlowFromAction, O.HealAction, U.HowlAction, G.RayActionBase, F.IlluminateSelfAction, Q.MappingAction, R.MissiveAction, Q.PolymorphAction, Q.AmputateAction, G.RingSelfAction, G.RingFromAction, L.SpawnAction, S.TeleportAction, Q._OpenTileAction, S.MasteryAction, V.FocusAction, S.AttackAction, R.ItemAction, R.PickUpAction, B.WalkAction, B.OpenDoorAction, B.CloseDoorAction, B.RestAction]);
    _inherit(R.BarrierAction, R._BarrierAction_Action_ElementActionMixin);
    _inheritMany(F.LosAction, [O.BoltAction, B.TossLosAction]);
    _inheritMany(E.ConditionAction, [E.HasteAction, E._FreezeActorAction_ConditionAction_DestroyActionMixin, E.PoisonAction, E.BlindAction, E.DazzleAction, E.ResistAction]);
    _inherit(E.FreezeActorAction, E._FreezeActorAction_ConditionAction_DestroyActionMixin);
    _inherit(G.BurnActorAction, G._BurnActorAction_Action_DestroyActionMixin);
    _inherit(G.BurnFloorAction, G._BurnFloorAction_Action_DestroyActionMixin);
    _inherit(G.BurningFloorAction, G._BurningFloorAction_Action_DestroyActionMixin);
    _inherit(G.FreezeFloorAction, G._FreezeFloorAction_Action_DestroyActionMixin);
    _inherit(G.PoisonFloorAction, G._PoisonFloorAction_Action_DestroyActionMixin);
    _inherit(G.PoisonedFloorAction, G._PoisonedFloorAction_Action_DestroyActionMixin);
    _inherit(N.FlowAction, N._FlowAction_Action_ElementActionMixin);
    _inheritMany(G.RayActionBase, [F.IlluminateAction, G._RayAction_RayActionBase_ElementActionMixin]);
    _inheritMany(N.Flow, [Q.MappingFlow, N.MotilityFlow, Z._SoundFlow]);
    _inherit(G.RayAction, G._RayAction_RayActionBase_ElementActionMixin);
    _inheritMany(Q._OpenTileAction, [Q.OpenBarrelAction, Q.OpenChestAction]);
    _inherit(S.Furnishing, Y.Decor);
    _inheritMany(R._BaseBuilder, [R._CategoryBuilder, R._ItemBuilder]);
    _inheritMany(R._BaseBuilder0, [R._FamilyBuilder, R._BreedBuilder]);
    _inheritMany(O.Move, [Q.AmputateMove, O.RangedMove, Y.ConeMove, X.HasteMove, O.HealMove, U.HowlMove, R.MissiveMove, L.SpawnMove, S.TeleportMove]);
    _inherit(O.BoltMove, O.RangedMove);
    _inheritMany(M.Skill, [M.Discipline, M._Spell_Skill_UsableSkill]);
    _inheritMany(M.Discipline, [X._Archery_Discipline_TargetSkill, S.MasteryDiscipline, M.BattleHardening, Y.DualWield, A.SlayDiscipline]);
    _inherit(X.Archery, X._Archery_Discipline_TargetSkill);
    _inherit(X.ArrowAction, O.BoltAction);
    _inheritMany(S.MasteryDiscipline, [D.AxeMastery, A.ClubMastery, Z.SpearMastery, G.Swordfighting, O._WhipMastery_MasteryDiscipline_TargetSkill]);
    _inheritMany(S.MasteryAction, [D._SweepAction_MasteryAction_GeneratorActionMixin, A.BashAction, Z._SpearAction_MasteryAction_GeneratorActionMixin]);
    _inherit(D.SweepAction, D._SweepAction_MasteryAction_GeneratorActionMixin);
    _inherit(Z.SpearAction, Z._SpearAction_MasteryAction_GeneratorActionMixin);
    _inherit(O.WhipMastery, O._WhipMastery_MasteryDiscipline_TargetSkill);
    _inherit(M.Spell, M._Spell_Skill_UsableSkill);
    _inheritMany(M.Spell, [K.Flee, K.Escape, K.Disappear, D.SenseItems, L._Icicle_Spell_TargetSkill, L._BrilliantBeam_Spell_TargetSkill, L.Windstorm, L._FireBarrier_Spell_TargetSkill, L.TidalWave]);
    _inherit(L.Icicle, L._Icicle_Spell_TargetSkill);
    _inherit(L.BrilliantBeam, L._BrilliantBeam_Spell_TargetSkill);
    _inherit(L.FireBarrier, L._FireBarrier_Spell_TargetSkill);
    _inheritMany(Y.Pathfinder, [X._LengthPathfinder, K.MonsterPathfinder, Z._SoundPathfinder]);
    _inheritMany(X.Architecture, [D.Catacomb, Q.Cavern, Q.Dungeon, Z.Keep, F.Lake, A.Pit, G.River]);
    _inherit(Q._DoorPaintStyle, Q.PaintStyle);
    _inheritMany(R.ItemAction, [R.DropAction, R.EquipAction, R.UnequipAction, R.UseAction, B.TossAction]);
    _inheritMany(E.Condition, [E.HasteCondition, E.ColdCondition, E.PoisonCondition, E.BlindnessCondition, E.ResistCondition]);
    _inheritMany(X.Behavior, [X.ActionBehavior, X.RestBehavior, X.RunBehavior]);
    _inheritMany(S.Actor, [G.Hero, B.Monster]);
    _inherit(D.StatBase, D.Property);
    _inheritMany(D.StatBase, [D.Strength, D.Agility, D.Fortitude, D.Intellect, D.Will]);
    _inherit(E.Equipment, E._Equipment_IterableBase_ItemCollection);
    _inherit(O._Inventory_IterableMixin_ItemCollection, P.IterableMixin);
    _inherit(O.Inventory, O._Inventory_IterableMixin_ItemCollection);
    _inheritMany(M.MonsterState, [M.AsleepState, M.AwakeState, M.AfraidState]);
    _inheritMany(B.Screen, [E.Popup, T.DirectionDialog, E.GameOverScreen, R.GameScreen, M.HeroInfoDialog, D.ItemDialog, F.ItemScreen, F.LoadingDialog, B.MainMenuScreen, R.NewHeroScreen, Z.SelectSkillDialog, R.SkillDialog, X.TargetDialog]);
    _inheritMany(E.Popup, [N.ConfirmPopup, F.ExitPopup, T.ForfeitPopup, G.SelectDepthPopup]);
    _inheritMany(T.DirectionDialog, [T.SkillDirectionDialog, T.CloseDialog, T.OpenDialog]);
    _inheritMany(M.HeroInfoDialog, [M.HeroEquipmentDialog, Q.HeroItemLoreDialog, Z.HeroMonsterLoreDialog, Z.HeroResistancesDialog]);
    _inheritMany(Y.ItemView, [D._ItemDialogItemView, F._TownItemView, B._ItemPanelItemView]);
    _inheritMany(D._ItemCommand, [D._DropItemCommand, D._UseItemCommand, D._EquipItemCommand, D._TossItemCommand, D._PickUpItemCommand, D._PutItemCommand, D._SellItemCommand]);
    _inheritMany(F.ItemScreen, [F._HomeViewScreen, F._HomeGetScreen, F._ShopViewScreen, F._ShopBuyScreen, F._CountScreen]);
    _inheritMany(Y.Panel, [B.ItemPanel, A.LogPanel, U.SidebarPanel, T.StagePanel]);
    _inherit(R.SkillTypeDialog, R.SkillDialog);
    _inheritMany(R.SkillTypeDialog, [R.DisciplineDialog, R.SpellDialog]);
    _inheritMany(K.Terminal, [G.PortTerminal, K.RenderableTerminal]);
    _inherit(S.RetroTerminal, K.RenderableTerminal);
    _inheritMany(L.VecBase, [Z.Direction, L.Vec]);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleDeclarationBase);
    _mixin(W._HtmlCollection_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._Storage_Interceptor_MapMixin, P.MapMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._JsArray_JsObject_ListMixin, P.ListMixin);
    _mixin(R._BarrierAction_Action_ElementActionMixin, G.ElementActionMixin);
    _mixin(E._FreezeActorAction_ConditionAction_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(G._BurnActorAction_Action_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(G._BurnFloorAction_Action_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(G._BurningFloorAction_Action_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(G._FreezeFloorAction_Action_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(G._PoisonFloorAction_Action_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(G._PoisonedFloorAction_Action_DestroyActionMixin, R.DestroyActionMixin);
    _mixin(N._FlowAction_Action_ElementActionMixin, G.ElementActionMixin);
    _mixin(G._RayAction_RayActionBase_ElementActionMixin, G.ElementActionMixin);
    _mixin(X._Archery_Discipline_TargetSkill, M.TargetSkill);
    _mixin(D._SweepAction_MasteryAction_GeneratorActionMixin, V.GeneratorActionMixin);
    _mixin(Z._SpearAction_MasteryAction_GeneratorActionMixin, V.GeneratorActionMixin);
    _mixin(O._WhipMastery_MasteryDiscipline_TargetSkill, M.TargetSkill);
    _mixin(L._BrilliantBeam_Spell_TargetSkill, M.TargetSkill);
    _mixin(L._FireBarrier_Spell_TargetSkill, M.TargetSkill);
    _mixin(L._Icicle_Spell_TargetSkill, M.TargetSkill);
    _mixin(M._Spell_Skill_UsableSkill, M.UsableSkill);
    _mixin(E._Equipment_IterableBase_ItemCollection, O.ItemCollection);
    _mixin(O._Inventory_IterableMixin_ItemCollection, O.ItemCollection);
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.BodyElement_methods = W.BodyElement.prototype;
    C.ButtonElement_methods = W.ButtonElement.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSBool_methods = J.JSBool.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NodeList_methods = W.NodeList.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.TableElement_methods = W.TableElement.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.Window_methods = W.Window.prototype;
    C.ActionResult_null_false_true = new V.ActionResult(null, false, true);
    C.ActionResult_null_true_false = new V.ActionResult(null, true, false);
    C.ActionResult_null_true_true = new V.ActionResult(null, true, true);
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C__JSRandom = new P._JSRandom();
    C.C__RootZone = new P._RootZone();
    C.Color_0_0_0 = new L.Color(0, 0, 0);
    C.Color_0_0_14 = new L.Color(0, 0, 14);
    C.Color_0_64_255 = new L.Color(0, 64, 255);
    C.Color_0_64_39 = new L.Color(0, 64, 39);
    C.Color_122_44_24 = new L.Color(122, 44, 24);
    C.Color_129_217_117 = new L.Color(129, 217, 117);
    C.Color_129_231_235 = new L.Color(129, 231, 235);
    C.Color_131_158_13 = new L.Color(131, 158, 13);
    C.Color_132_126_135 = new L.Color(132, 126, 135);
    C.Color_142_82_55 = new L.Color(142, 82, 55);
    C.Color_179_74_4 = new L.Color(179, 74, 4);
    C.Color_189_106_235 = new L.Color(189, 106, 235);
    C.Color_189_144_108 = new L.Color(189, 144, 108);
    C.Color_19_17_28 = new L.Color(19, 17, 28);
    C.Color_204_35_57 = new L.Color(204, 35, 57);
    C.Color_21_87_194 = new L.Color(21, 87, 194);
    C.Color_220_0_0 = new L.Color(220, 0, 0);
    C.Color_222_156_33 = new L.Color(222, 156, 33);
    C.Color_226_223_240 = new L.Color(226, 223, 240);
    C.Color_22_117_38 = new L.Color(22, 117, 38);
    C.Color_255_122_105 = new L.Color(255, 122, 105);
    C.Color_255_238_168 = new L.Color(255, 238, 168);
    C.Color_255_255_255 = new L.Color(255, 255, 255);
    C.Color_26_46_150 = new L.Color(26, 46, 150);
    C.Color_38_38_56 = new L.Color(38, 38, 56);
    C.Color_4_3_10 = new L.Color(4, 3, 10);
    C.Color_56_16_125 = new L.Color(56, 16, 125);
    C.Color_63_64_114 = new L.Color(63, 64, 114);
    C.Color_64_163_229 = new L.Color(64, 163, 229);
    C.Color_64_31_36 = new L.Color(64, 31, 36);
    C.Color_84_0_39 = new L.Color(84, 0, 39);
    C.Color_86_30_138 = new L.Color(86, 30, 138);
    C.Color_99_87_7 = new L.Color(99, 87, 7);
    C.Color_9_95_112 = new L.Color(9, 95, 112);
    C.DetectType_0 = new T.DetectType(0, "DetectType.exit");
    C.DetectType_1 = new T.DetectType(1, "DetectType.item");
    C.Direction_0_0 = new Z.Direction(0, 0);
    C.Direction_0_1 = new Z.Direction(0, 1);
    C.Direction_0_m1 = new Z.Direction(0, -1);
    C.Direction_1_0 = new Z.Direction(1, 0);
    C.Direction_1_1 = new Z.Direction(1, 1);
    C.Direction_1_m1 = new Z.Direction(1, -1);
    C.Direction_m1_0 = new Z.Direction(-1, 0);
    C.Direction_m1_1 = new Z.Direction(-1, 1);
    C.Direction_m1_m1 = new Z.Direction(-1, -1);
    C.EventType_awaken = new D.EventType("awaken");
    C.EventType_bolt = new D.EventType("bolt");
    C.EventType_cone = new D.EventType("cone");
    C.EventType_detect = new D.EventType("detect");
    C.EventType_die = new D.EventType("die");
    C.EventType_frighten = new D.EventType("frighten");
    C.EventType_gold = new D.EventType("gold");
    C.EventType_heal = new D.EventType("heal");
    C.EventType_hit = new D.EventType("hit");
    C.EventType_howl = new D.EventType("howl");
    C.EventType_knockBack = new D.EventType("knockBack");
    C.EventType_map = new D.EventType("map");
    C.EventType_openBarrel = new D.EventType("openBarrel");
    C.EventType_pause = new D.EventType("pause");
    C.EventType_polymorph = new D.EventType("polymorph");
    C.EventType_slash = new D.EventType("slash");
    C.EventType_spawn = new D.EventType("spawn");
    C.EventType_stab = new D.EventType("stab");
    C.EventType_teleport = new D.EventType("teleport");
    C.EventType_toss = new D.EventType("toss");
    C.EventType_wind = new D.EventType("wind");
    C.Glyph_kVM = new L.Glyph(32, C.Color_255_255_255, C.Color_0_0_0);
    C.HitType_0 = new U.HitType(0, "HitType.melee");
    C.HitType_1 = new U.HitType(1, "HitType.ranged");
    C.HitType_2 = new U.HitType(2, "HitType.toss");
    C.Input_cancel = new Y.Input("cancel");
    C.Input_close = new Y.Input("close");
    C.Input_drop = new Y.Input("drop");
    C.Input_e = new Y.Input("e");
    C.Input_editSkills = new Y.Input("editSkills");
    C.Input_equip = new Y.Input("equip");
    C.Input_fire = new Y.Input("fire");
    C.Input_fireE = new Y.Input("fireE");
    C.Input_fireN = new Y.Input("fireN");
    C.Input_fireNE = new Y.Input("fireNE");
    C.Input_fireNW = new Y.Input("fireNW");
    C.Input_fireS = new Y.Input("fireS");
    C.Input_fireSE = new Y.Input("fireSE");
    C.Input_fireSW = new Y.Input("fireSW");
    C.Input_fireW = new Y.Input("fireW");
    C.Input_forfeit = new Y.Input("forfeit");
    C.Input_heroInfo = new Y.Input("heroInfo");
    C.Input_n = new Y.Input("n");
    C.Input_ne = new Y.Input("ne");
    C.Input_nw = new Y.Input("nw");
    C.Input_ok = new Y.Input("ok");
    C.Input_open = new Y.Input("open");
    C.Input_pickUp = new Y.Input("pickUp");
    C.Input_quit = new Y.Input("quit");
    C.Input_rest = new Y.Input("rest");
    C.Input_runE = new Y.Input("runE");
    C.Input_runN = new Y.Input("runN");
    C.Input_runNE = new Y.Input("runNE");
    C.Input_runNW = new Y.Input("runNW");
    C.Input_runS = new Y.Input("runS");
    C.Input_runSE = new Y.Input("runSE");
    C.Input_runSW = new Y.Input("runSW");
    C.Input_runW = new Y.Input("runW");
    C.Input_s = new Y.Input("s");
    C.Input_se = new Y.Input("se");
    C.Input_selectSkill = new Y.Input("selectSkill");
    C.Input_sw = new Y.Input("sw");
    C.Input_swap = new Y.Input("swap");
    C.Input_toss = new Y.Input("toss");
    C.Input_use = new Y.Input("use");
    C.Input_w = new Y.Input("w");
    C.Input_wizard = new Y.Input("wizard");
    C.ItemLocation_46y = new O.ItemLocation("On Ground", "There is nothing on the ground.");
    C.ItemLocation_A8D = new O.ItemLocation("Equipment", "<not used>");
    C.ItemLocation_ukJ = new O.ItemLocation("Home", "There is nothing in your home.");
    C.ItemLocation_vOz = new O.ItemLocation("Crucible", "The crucible is waiting.");
    C.ItemLocation_wMy = new O.ItemLocation("Inventory", "Your backpack is empty.");
    C.JS_CONST_0 = function(hooks) {
      if (typeof dartExperimentalFixupGetTag != "function") return hooks;
      hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
    };
    C.JS_CONST_4hp = function(hooks) {
      var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
      if (userAgent.indexOf("Firefox") == -1) return hooks;
      var getTag = hooks.getTag;
      var quickMap = {
        "BeforeUnloadEvent": "Event",
        "DataTransfer": "Clipboard",
        "GeoGeolocation": "Geolocation",
        "Location": "!Location",
        "WorkerMessageEvent": "MessageEvent",
        "XMLDocument": "!Document"};
      function getTagFirefox(o) {
        var tag = getTag(o);
        return quickMap[tag] || tag;
      }
      hooks.getTag = getTagFirefox;
    };
    C.JS_CONST_Fs4 = function(hooks) { return hooks; }
    ;
    C.JS_CONST_QJm = function(getTagFallback) {
      return function(hooks) {
        if (typeof navigator != "object") return hooks;
        var ua = navigator.userAgent;
        if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
        if (ua.indexOf("Chrome") >= 0) {
          function confirm(p) {
            return typeof window == "object" && window[p] && window[p].name == p;
          }
          if (confirm("Window") && confirm("HTMLElement")) return hooks;
        }
        hooks.getTag = getTagFallback;
      };
    };
    C.JS_CONST_bDt = function() {
      var toStringFunction = Object.prototype.toString;
      function getTag(o) {
        var s = toStringFunction.call(o);
        return s.substring(8, s.length - 1);
      }
      function getUnknownTag(object, tag) {
        if (/^HTML[A-Z].*Element$/.test(tag)) {
          var name = toStringFunction.call(object);
          if (name == "[object Object]") return null;
          return "HTMLElement";
        }
      }
      function getUnknownTagGenericBrowser(object, tag) {
        if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
        return getUnknownTag(object, tag);
      }
      function prototypeForTag(tag) {
        if (typeof window == "undefined") return null;
        if (typeof window[tag] == "undefined") return null;
        var constructor = window[tag];
        if (typeof constructor != "function") return null;
        return constructor.prototype;
      }
      function discriminator(tag) { return null; }
      var isBrowser = typeof navigator == "object";
      return {
        getTag: getTag,
        getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
        prototypeForTag: prototypeForTag,
        discriminator: discriminator };
    };
    C.JS_CONST_gkc = function(hooks) {
      var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
      if (userAgent.indexOf("Trident/") == -1) return hooks;
      var getTag = hooks.getTag;
      var quickMap = {
        "BeforeUnloadEvent": "Event",
        "DataTransfer": "Clipboard",
        "HTMLDDElement": "HTMLElement",
        "HTMLDTElement": "HTMLElement",
        "HTMLPhraseElement": "HTMLElement",
        "Position": "Geoposition"
      };
      function getTagIE(o) {
        var tag = getTag(o);
        var newTag = quickMap[tag];
        if (newTag) return newTag;
        if (tag == "Object") {
          if (window.DataView && (o instanceof window.DataView)) return "DataView";
        }
        return tag;
      }
      function prototypeForTagIE(tag) {
        var constructor = window[tag];
        if (constructor == null) return null;
        return constructor.prototype;
      }
      hooks.getTag = getTagIE;
      hooks.prototypeForTag = prototypeForTagIE;
    };
    C.JS_CONST_rr7 = function(hooks) {
      var getTag = hooks.getTag;
      var prototypeForTag = hooks.prototypeForTag;
      function getTagFixed(o) {
        var tag = getTag(o);
        if (tag == "Document") {
          if (!!o.xmlVersion) return "!Document";
          return "!HTMLDocument";
        }
        return tag;
      }
      function prototypeForTagFixed(tag) {
        if (tag == "Document") return null;
        return prototypeForTag(tag);
      }
      hooks.getTag = getTagFixed;
      hooks.prototypeForTag = prototypeForTagFixed;
    };
    C.JS_CONST_u2C = function getTagFallback(o) {
      var s = Object.prototype.toString.call(o);
      return s.substring(8, s.length - 1);
    };
    C.JsonCodec_null_null = new P.JsonCodec(null, null);
    C.JsonDecoder_null = new P.JsonDecoder(null);
    C.JsonEncoder_null_null = new P.JsonEncoder(null, null);
    C.Region_n = new X.Region("n");
    C.Region_ne = new X.Region("ne");
    C.Region_e = new X.Region("e");
    C.Region_se = new X.Region("se");
    C.Region_s = new X.Region("s");
    C.Region_sw = new X.Region("sw");
    C.Region_w = new X.Region("w");
    C.Region_nw = new X.Region("nw");
    C.List_00 = H.setRuntimeTypeInfo(makeConstList([C.Region_n, C.Region_ne, C.Region_e, C.Region_se, C.Region_s, C.Region_sw, C.Region_w, C.Region_nw]), [X.Region]);
    C.List_0 = H.setRuntimeTypeInfo(makeConstList(["Merek", "Carac", "Ulric", "Tybalt", "Borin", "Sadon", "Terrowin", "Rowan", "Forthwind", "Althalos", "Fendrel", "Brom", "Hadrian", "Crewe", "Bolbec", "Fenwick", "Mowbray", "Drake", "Bryce", "Leofrick", "Letholdus", "Lief", "Barda", "Rulf", "Robin", "Gavin", "Terrin", "Jarin", "Cedric", "Gavin", "Josef", "Janshai", "Doran", "Asher", "Quinn", "Xalvador", "Favian", "Destrian", "Dain", "Millicent", "Alys", "Ayleth", "Anastas", "Alianor", "Cedany", "Ellyn", "Helewys", "Malkyn", "Peronell", "Thea", "Gloriana", "Arabella", "Hildegard", "Brunhild", "Adelaide", "Beatrix", "Emeline", "Mirabelle", "Helena", "Guinevere", "Isolde", "Maerwynn", "Catrain", "Gussalen", "Enndolynn", "Krea", "Dimia", "Aleida"]), [P.String]);
    C.List_23r = H.setRuntimeTypeInfo(makeConstList(["______ ______                     _____                          _____", "\\ .  / \\  . /                     \\ . |                          \\  .|", " | .|   |. |                       | .|                           |. |", " |. |___| .|   _____  _____ _____  |. | ___     ______  ____  ___ | .|  ____", " |:::___:::|   \\::::\\ \\:::| \\:::|  |::|/:::\\   /::::::\\ \\:::|/:::\\|::| /::/", " |xx|   |xx|  ___ \\xx| |xx|  |xx|  |xx|  \\xx\\ |xx|__)xx| |xx|  \\x||xx|/x/", " |xx|   |xx| /xxx\\|xx| |xx|  |xx|  |xx|   |xx||xx|\\xxxx| |xx|     |xxxxxx\\", " |XX|   |XX||XX(__|XX| |XX\\__|XX|  |XX|__/XXX||XX|_____  |XX|     |XX| \\XX\\_", " |XX|   |XX| \\XXXX/\\XX\\ \\XXX/|XXX\\/XXX/\\XXXX/  \\XXXXXX/ /XXXX\\   /XXXX\\ \\XXX\\", " |XX|   |XX|_________________________________________________________________", " |XX|   |XX||XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\", "_|XX|   |XX|_", "\\XXX|   |XXX/", " \\XX|   |XX/", "  \\X|   |X/", "   \\|   |/"]), [P.String]);
    C.List_2Zi = H.setRuntimeTypeInfo(makeConstList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
    C.List_5uo = H.setRuntimeTypeInfo(makeConstList([C.ItemLocation_46y]), [O.ItemLocation]);
    C.List_6QF = H.setRuntimeTypeInfo(makeConstList(["Are you sure you want to forfeit the level?", "You will lose all items and experience gained in the dungeon."]), [P.String]);
    C.List_9650_94 = H.setRuntimeTypeInfo(makeConstList([9650, 94]), [P.int]);
    C.List_E7y = H.setRuntimeTypeInfo(makeConstList([0, 2, 5, 10, 18, 26, 38]), [P.int]);
    C.List_Jeh = H.setRuntimeTypeInfo(makeConstList(["Return to main menu?"]), [P.String]);
    C._Sort_MQk = new Q._Sort("ordered by type", "Sort by type");
    C._Sort_Qu1 = new Q._Sort("ordered by depth", "Sort by depth");
    C._Sort_0CF = new Q._Sort("ordered by name", "Sort by name");
    C._Sort_0 = new Q._Sort("ordered by price", "Sort by price");
    C.List_KO9 = H.setRuntimeTypeInfo(makeConstList([C._Sort_MQk, C._Sort_Qu1, C._Sort_0CF, C._Sort_0]), [Q._Sort]);
    C.List_EOY = H.setRuntimeTypeInfo(makeConstList([C.Color_222_156_33, C.Color_122_44_24]), [L.Color]);
    C.List_hZb = H.setRuntimeTypeInfo(makeConstList([C.Color_255_238_168, C.Color_179_74_4]), [L.Color]);
    C.List_EOY0 = H.setRuntimeTypeInfo(makeConstList([C.Color_142_82_55, C.Color_204_35_57]), [L.Color]);
    C.List_EOY1 = H.setRuntimeTypeInfo(makeConstList([C.Color_204_35_57, C.Color_64_31_36]), [L.Color]);
    C.List_MaX = H.setRuntimeTypeInfo(makeConstList([C.List_EOY, C.List_hZb, C.List_EOY0, C.List_EOY1]), [[P.List, L.Color]]);
    C.List_QOW = H.setRuntimeTypeInfo(makeConstList([C.Color_38_38_56, C.Color_63_64_114, C.Color_132_126_135, C.Color_226_223_240, C.Color_189_144_108, C.Color_142_82_55, C.Color_122_44_24, C.Color_64_31_36, C.Color_255_238_168, C.Color_222_156_33, C.Color_179_74_4, C.Color_129_217_117, C.Color_99_87_7, C.Color_131_158_13, C.Color_22_117_38, C.Color_0_64_39, C.Color_255_122_105, C.Color_204_35_57, C.Color_84_0_39, C.Color_189_106_235, C.Color_86_30_138, C.Color_56_16_125, C.Color_129_231_235, C.Color_64_163_229, C.Color_21_87_194, C.Color_26_46_150]), [L.Color]);
    C.List_RDW = H.setRuntimeTypeInfo(makeConstList(["hand", "hand", "ring", "necklace", "body", "cloak", "helm", "gloves", "boots"]), [P.String]);
    C._Sort_JQf = new Z._Sort0("ordered by appearance", "Sort by appearance");
    C._Sort_Qu10 = new Z._Sort0("ordered by depth", "Sort by depth");
    C._Sort_0CF0 = new Z._Sort0("ordered by name", "Sort by name");
    C._Sort_gc6 = new Z._Sort0("uniques", "Show only uniques");
    C.List_WtG = H.setRuntimeTypeInfo(makeConstList([C._Sort_JQf, C._Sort_Qu10, C._Sort_0CF0, C._Sort_gc6]), [Z._Sort0]);
    C.List_aAW = H.setRuntimeTypeInfo(makeConstList([C.Direction_0_m1, C.Direction_1_0, C.Direction_0_1, C.Direction_m1_0]), [Z.Direction]);
    C.List_cdS = H.setRuntimeTypeInfo(makeConstList([C.ItemLocation_wMy, C.ItemLocation_46y, C.ItemLocation_A8D]), [O.ItemLocation]);
    C.List_co5 = H.setRuntimeTypeInfo(makeConstList(["LLLLLL LLLLLL                     LLLLL                          LLLLL", "ERRRRE ERRRRE                     ERRRE                          ERRRE", " ERRE   ERRE                       ERRE                           ERRE", " ERRELLLERRE   LLLLL  LLLLL LLLLL  ERRE LLL     LLLLLL  LLLL  LLL ERRE  LLLL", " ERRREEERRRE   ERRRRL ERRRE ERRRE  ERREERRRL   LRRRRRRL ERRRLLRRRLERRE LRRE", " ERRE   ERRE  LLL ERRE ERRE  ERRE  ERRE  ERRL ERRELLERRE ERRE  EREERRELRE", " EOOE   EOOE LOOOEEOOE EOOE  EOOE  EOOE   EOOEEOOEEOOOOE EOOE     EOOOOOOL", " EGGE   EGGEEGGELLEGGE EGGLLLEGGE  EGGELLLGGGEEGGELLLLL  EGGE     EGGE EGGLL", " EYYE   EYYE EYYYYEEYYE EYYYEEYYYLLYYYEEYYYYE  EYYYYYYE LYYYYL   LYYYYL EYYYL", " EYYE   EYYELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", " EYYE   EYYEEYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYL", "LEYYE   EYYEL", "EYYYE   EYYYE", " EYYE   EYYE", "  EYE   EYE", "   EE   EE"]), [P.String]);
    C.List_ego = H.setRuntimeTypeInfo(makeConstList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), [P.String]);
    C.List_empty1 = H.setRuntimeTypeInfo(makeConstList([]), [R.Item]);
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), [L.Vec]);
    C.List_empty2 = makeConstList([]);
    C.List_iDg = H.setRuntimeTypeInfo(makeConstList([C.ItemLocation_wMy, C.ItemLocation_A8D]), [O.ItemLocation]);
    C.List_izR = H.setRuntimeTypeInfo(makeConstList([C.Direction_1_m1, C.Direction_1_1, C.Direction_m1_1, C.Direction_m1_m1]), [Z.Direction]);
    C.List_mC8 = H.setRuntimeTypeInfo(makeConstList([15, 20, 24, 30, 40, 50, 60, 80, 100, 120, 150, 180, 240]), [P.int]);
    C.List_slV = H.setRuntimeTypeInfo(makeConstList([C.Direction_0_m1, C.Direction_1_m1, C.Direction_1_0, C.Direction_1_1, C.Direction_0_1, C.Direction_m1_1, C.Direction_m1_0, C.Direction_m1_m1]), [Z.Direction]);
    C.List_wEV = H.setRuntimeTypeInfo(makeConstList(["Stairs descend into darkness.", "How far down shall you venture?"]), [P.String]);
    C.List_wSV = H.setRuntimeTypeInfo(makeConstList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
    C.List_ww8 = H.setRuntimeTypeInfo(makeConstList(["hand", "ring", "necklace", "body", "cloak", "helm", "gloves", "boots"]), [P.String]);
    C.List_yrN = H.setRuntimeTypeInfo(makeConstList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
    C.Stat_Strength = new D.Stat("Strength");
    C.Stat_Agility = new D.Stat("Agility");
    C.Stat_Fortitude = new D.Stat("Fortitude");
    C.Stat_Intellect = new D.Stat("Intellect");
    C.Stat_Will = new D.Stat("Will");
    C.List_zPV = H.setRuntimeTypeInfo(makeConstList([C.Stat_Strength, C.Stat_Agility, C.Stat_Fortitude, C.Stat_Intellect, C.Stat_Will]), [D.Stat]);
    C.LogType_cheat = new O.LogType("cheat");
    C.LogType_error = new O.LogType("error");
    C.LogType_gain = new O.LogType("gain");
    C.LogType_help = new O.LogType("help");
    C.LogType_message = new O.LogType("message");
    C.LogType_quest = new O.LogType("quest");
    C.Map_6xa1A = new H.GeneralConstantMap([9786, 1, 9787, 2, 9829, 3, 9830, 4, 9827, 5, 9824, 6, 8226, 7, 9688, 8, 9675, 9, 9689, 10, 9794, 11, 9792, 12, 9834, 13, 9835, 14, 9788, 15, 9658, 16, 9668, 17, 8597, 18, 8252, 19, 182, 20, 167, 21, 9644, 22, 8616, 23, 8593, 24, 8595, 25, 8594, 26, 8592, 27, 8735, 28, 8596, 29, 9650, 30, 9660, 31, 8962, 127, 199, 128, 252, 129, 233, 130, 226, 131, 228, 132, 224, 133, 229, 134, 231, 135, 234, 136, 235, 137, 232, 138, 239, 139, 238, 140, 236, 141, 196, 142, 197, 143, 201, 144, 230, 145, 198, 146, 244, 147, 246, 148, 242, 149, 251, 150, 249, 151, 255, 152, 214, 153, 220, 154, 162, 155, 163, 156, 165, 157, 8359, 158, 402, 159, 225, 160, 237, 161, 243, 162, 250, 163, 241, 164, 209, 165, 170, 166, 186, 167, 191, 168, 8976, 169, 172, 170, 189, 171, 188, 172, 161, 173, 171, 174, 187, 175, 9617, 176, 9618, 177, 9619, 178, 9474, 179, 9508, 180, 9569, 181, 9570, 182, 9558, 183, 9557, 184, 9571, 185, 9553, 186, 9559, 187, 9565, 188, 9564, 189, 9563, 190, 9488, 191, 9492, 192, 9524, 193, 9516, 194, 9500, 195, 9472, 196, 9532, 197, 9566, 198, 9567, 199, 9562, 200, 9556, 201, 9577, 202, 9574, 203, 9568, 204, 9552, 205, 9580, 206, 9575, 207, 9576, 208, 9572, 209, 9573, 210, 9561, 211, 9560, 212, 9554, 213, 9555, 214, 9579, 215, 9578, 216, 9496, 217, 9484, 218, 9608, 219, 9604, 220, 9612, 221, 9616, 222, 9600, 223, 945, 224, 223, 225, 915, 226, 960, 227, 931, 228, 963, 229, 181, 230, 964, 231, 934, 232, 920, 233, 937, 234, 948, 235, 8734, 236, 966, 237, 949, 238, 8745, 239, 8801, 240, 177, 241, 8805, 242, 8804, 243, 8992, 244, 8993, 245, 247, 246, 8776, 247, 176, 248, 8729, 249, 183, 250, 8730, 251, 8319, 252, 178, 253, 9632, 254], [P.int, P.int]);
    C.List_Y_N_Esc = H.setRuntimeTypeInfo(makeConstList(["Y", "N", "Esc"]), [P.String]);
    C.Map_DlRey = new H.ConstantStringMap(3, {Y: "Yes", N: "No", Esc: "No"}, C.List_Y_N_Esc, [P.String, P.String]);
    C.List_PvD = H.setRuntimeTypeInfo(makeConstList(["OK", "\u2195\u2194", "Esc"]), [P.String]);
    C.Map_PviDZ = new H.ConstantStringMap(3, {OK: "Enter dungeon", "\u2195\u2194": "Change depth", Esc: "Cancel"}, C.List_PvD, [P.String, P.String]);
    C.List_cmY = H.setRuntimeTypeInfo(makeConstList(["L", "E", "R", "O", "G", "Y"]), [P.String]);
    C.Map_cmivT = new H.ConstantStringMap(6, {L: C.Color_132_126_135, E: C.Color_63_64_114, R: C.Color_204_35_57, O: C.Color_122_44_24, G: C.Color_179_74_4, Y: C.Color_222_156_33}, C.List_cmY, [P.String, L.Color]);
    C.List_empty3 = H.setRuntimeTypeInfo(makeConstList([]), [P.Symbol0]);
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty3, [P.Symbol0, null]);
    C.Map_gofLp = new H.GeneralConstantMap([C.Direction_0_0, "\u2022", C.Direction_0_m1, "|", C.Direction_1_m1, "/", C.Direction_1_0, "-", C.Direction_1_1, "\\", C.Direction_0_1, "|", C.Direction_m1_1, "/", C.Direction_m1_0, "-", C.Direction_m1_m1, "\\"], [Z.Direction, P.String]);
    C.Missive_0 = new R.Missive(0, "Missive.clumsy");
    C.Missive_1 = new R.Missive(1, "Missive.insult");
    C.Missive_2 = new R.Missive(2, "Missive.screech");
    C.Pronoun_he_him_his = new O.Pronoun("he", "him", "his");
    C.Pronoun_it_it_its = new O.Pronoun("it", "it", "its");
    C.Pronoun_she_her_her = new O.Pronoun("she", "her", "her");
    C.Pronoun_they_them_their = new O.Pronoun("they", "them", "their");
    C.Pronoun_you_you_your = new O.Pronoun("you", "you", "your");
    C.Region_everywhere = new X.Region("everywhere");
    C.SpawnLocation_0 = new B.SpawnLocation(0, "SpawnLocation.anywhere");
    C.SpawnLocation_1 = new B.SpawnLocation(1, "SpawnLocation.open");
    C.SpawnLocation_2 = new B.SpawnLocation(2, "SpawnLocation.wall");
    C.SpawnLocation_3 = new B.SpawnLocation(3, "SpawnLocation.corner");
    C.Symbol_call = new H.Symbol("call");
    C.Symmetry_0 = new T.Symmetry(0, "Symmetry.none");
    C.Symmetry_1 = new T.Symmetry(1, "Symmetry.mirrorHorizontal");
    C.Symmetry_2 = new T.Symmetry(2, "Symmetry.mirrorVertical");
    C.Symmetry_3 = new T.Symmetry(3, "Symmetry.mirrorBoth");
    C.Symmetry_4 = new T.Symmetry(4, "Symmetry.rotate90");
    C.Symmetry_5 = new T.Symmetry(5, "Symmetry.rotate180");
    C.TakeFrom_0 = new Z.TakeFrom(0, "TakeFrom.newest");
    C.TakeFrom_1 = new Z.TakeFrom(1, "TakeFrom.oldest");
    C.TakeFrom_2 = new Z.TakeFrom(2, "TakeFrom.random");
    C.TilePortal_T3V4 = new Q.TilePortal("shop 1");
    C.TilePortal_T3V3 = new Q.TilePortal("shop 2");
    C.TilePortal_T3V2 = new Q.TilePortal("shop 3");
    C.TilePortal_T3V1 = new Q.TilePortal("shop 4");
    C.TilePortal_T3V0 = new Q.TilePortal("shop 5");
    C.TilePortal_T3V = new Q.TilePortal("shop 6");
    C.TilePortal_T3V5 = new Q.TilePortal("shop 7");
    C.TilePortal_T3V6 = new Q.TilePortal("shop 8");
    C.TilePortal_T3V7 = new Q.TilePortal("shop 9");
    C.TilePortal_dungeon = new Q.TilePortal("dungeon");
    C.TilePortal_exit = new Q.TilePortal("exit");
    C.TilePortal_home = new Q.TilePortal("home");
    C.Vec_0_0 = new L.Vec(0, 0);
    C.Vec_0_1 = new L.Vec(0, 1);
    C.Vec_0_m1 = new L.Vec(0, -1);
    C.Vec_1_0 = new L.Vec(1, 0);
    C.Vec_m1_0 = new L.Vec(-1, 0);
    C._IterationMarker_null_2 = new P._IterationMarker(null, 2);
  })();
  (function staticFields() {
    $.Primitives_timerFrequency = null;
    $.Primitives_timerTicks = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $.Stopwatch__frequency = null;
    $.Element__parseDocument = null;
    $.Element__parseRange = null;
    $.Element__defaultValidator = null;
    $.Element__defaultSanitizer = null;
    $.Device__isOpera = null;
    $.Device__isWebKit = null;
    $._categoryFrequency = null;
    $._furnishingFrequency = null;
    $._themes = null;
    $._categoryCells = null;
    $._sortIndex = 0;
    $._category = null;
    $._item = null;
    $._affixTag = null;
    $._affix = null;
    $._builder = null;
    $._family = null;
    $.Architect_debugOwners = null;
    $.Keep_debugJunctions = null;
    $.Debug_showAllMonsters = false;
    $.Debug_showMonsterAlertness = false;
    $.Debug_showHeroVolume = false;
    $.Debug_densityMap = null;
    $.Debug__gameScreen = null;
    $.Skill__nextSortOrder = 0;
    $._ui = null;
    $._font = null;
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "_toStringVisiting", "$get$_toStringVisiting", function() {
      return [];
    });
    _lazy($, "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
      return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], P.String);
    });
    _lazy($, "_Html5NodeValidator__attributeValidators", "$get$_Html5NodeValidator__attributeValidators", function() {
      return P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.Function);
    });
    _lazy($, "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartObject");
    });
    _lazy($, "_dartProxyCtor", "$get$_dartProxyCtor", function() {
      return function DartObject(o) {
        this.o = o;
      };
    });
    _lazy($, "_messages", "$get$_messages", function() {
      var t1 = [P.String];
      return P.LinkedHashMap_LinkedHashMap$_literal([C.Missive_0, H.setRuntimeTypeInfo(["{1} forget[s] what {1 he} was doing.", "{1} lurch[es] around.", "{1} stumble[s] awkwardly.", "{1} trip[s] over {1 his} own feet!"], t1), C.Missive_1, H.setRuntimeTypeInfo(["{1} insult[s] {2 his} mother!", "{1} jeer[s] at {2}!", "{1} mock[s] {2} mercilessly!", "{1} make[s] faces at {2}!", "{1} laugh[s] at {2}!", "{1} sneer[s] at {2}!"], t1), C.Missive_2, H.setRuntimeTypeInfo(["{1} screeches at {2}!", "{1} taunts {2}!", "{1} cackles at {2}!"], t1)], R.Missive, [P.List, P.String]);
    });
    _lazy($, "Classes_adventurer", "$get$Classes_adventurer", function() {
      return V._class("Adventurer", "TODO", X.parseDrop("item", null, null), 0.5, 0.2);
    });
    _lazy($, "Classes_warrior", "$get$Classes_warrior", function() {
      return V._class("Warrior", "TODO", X.parseDrop("weapon", null, null), 1, 0);
    });
    _lazy($, "Classes_mage", "$get$Classes_mage", function() {
      return V._class("Mage", "TODO", X.parseDrop('Spellbook "Elemental Primer"', null, null), 0.2, 1);
    });
    _lazy($, "Classes_all", "$get$Classes_all", function() {
      return H.setRuntimeTypeInfo([$.$get$Classes_adventurer(), $.$get$Classes_warrior(), $.$get$Classes_mage()], [T.HeroClass]);
    });
    _lazy($, "Decor_all", "$get$Decor_all", function() {
      return Y.ResourceSet$(Y.Decor);
    });
    _lazy($, "_applyCells", "$get$_applyCells", function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
      t1 = $.$get$Tiles_wallTorch();
      t2 = S.Cell$(t1, null, $.$get$Tiles_wall(), null);
      t3 = $.$get$Motility_walk();
      t1 = S.Cell$(t1, t3, null, null);
      t4 = S.Cell$($.$get$Tiles_statue(), t3, null, null);
      t5 = $.$get$Tiles_water();
      t6 = S.Cell$(t5, t3, null, null);
      t7 = S.Cell$($.$get$Tiles_closedBarrel(), t3, null, null);
      t8 = S.Cell$($.$get$Tiles_closedChest(), t3, null, null);
      t9 = S.Cell$($.$get$Tiles_tallGrass(), null, $.$get$Tiles_grass(), null);
      t10 = $.$get$Tiles_bridge();
      return P.LinkedHashMap_LinkedHashMap$_literal(["I", t2, "l", t1, "P", t4, "\u2248", t6, "%", t7, "&", t8, "*", t9, "=", S.Cell$(t10, null, t5, null), "\u2261", S.Cell$(t10, t3, null, null), "\u2022", S.Cell$($.$get$Tiles_steppingStone(), null, t5, null)], P.String, S.Cell);
    });
    _lazy($, "_requireCells", "$get$_requireCells", function() {
      var t1 = [Q.TileType];
      return P.LinkedHashMap_LinkedHashMap$_literal(["?", S.Cell$(null, null, null, null), ".", S.Cell$(null, $.$get$Motility_walk(), null, null), "#", S.Cell$(null, null, null, H.setRuntimeTypeInfo([$.$get$Tiles_wall(), $.$get$Tiles_rock()], t1)), "\u250c", S.Cell$(null, null, $.$get$Tiles_tableTopLeft(), null), "\u2500", S.Cell$(null, null, $.$get$Tiles_tableTop(), null), "\u2510", S.Cell$(null, null, $.$get$Tiles_tableTopRight(), null), "-", S.Cell$(null, null, $.$get$Tiles_tableCenter(), null), "\u2502", S.Cell$(null, null, $.$get$Tiles_tableSide(), null), "\u2558", S.Cell$(null, null, $.$get$Tiles_tableBottomLeft(), null), "\u2550", S.Cell$(null, null, $.$get$Tiles_tableBottom(), null), "\u255b", S.Cell$(null, null, $.$get$Tiles_tableBottomRight(), null), "\u255e", S.Cell$(null, null, $.$get$Tiles_tableLegLeft(), null), "\u2564", S.Cell$(null, null, $.$get$Tiles_tableLeg(), null), "\u2561", S.Cell$(null, null, $.$get$Tiles_tableLegRight(), null), "\u03c0", S.Cell$(null, null, $.$get$Tiles_chair(), null), "\u2248", S.Cell$(null, null, $.$get$Tiles_water(), null), "'", S.Cell$(null, null, null, H.setRuntimeTypeInfo([$.$get$Tiles_grass(), $.$get$Tiles_tallGrass()], t1))], P.String, S.Cell);
    });
    _lazy($, "_mirrorHorizontal", "$get$_mirrorHorizontal", function() {
      return H.setRuntimeTypeInfo(["\u250c\u2510", "\u255b\u2558", "\u255e\u2561"], [P.String]);
    });
    _lazy($, "_mirrorVertical", "$get$_mirrorVertical", function() {
      return H.setRuntimeTypeInfo(["\u250c\u2558", "\u2510\u255b", "\u2500\u2550"], [P.String]);
    });
    _lazy($, "_rotate", "$get$_rotate", function() {
      return H.setRuntimeTypeInfo(["\u250c\u2510\u255b\u2558", "\u2500\u2502\u2550\u2502"], [P.String]);
    });
    _lazy($, "Elements_air", "$get$Elements_air", function() {
      return G.Element$("air", "Ai", 1.2, new A.Elements_closure2(), null, null, null);
    });
    _lazy($, "Elements_earth", "$get$Elements_earth", function() {
      return G.Element$("earth", "Ea", 1.1, null, null, null, null);
    });
    _lazy($, "Elements_fire", "$get$Elements_fire", function() {
      return G.Element$("fire", "Fi", 1.2, new A.Elements_closure7(), "burns up", true, new A.Elements_closure8());
    });
    _lazy($, "Elements_water", "$get$Elements_water", function() {
      return G.Element$("water", "Wa", 1.3, null, null, null, null);
    });
    _lazy($, "Elements_acid", "$get$Elements_acid", function() {
      return G.Element$("acid", "Ac", 1.4, null, null, null, null);
    });
    _lazy($, "Elements_cold", "$get$Elements_cold", function() {
      return G.Element$("cold", "Co", 1.2, new A.Elements_closure5(), "shatters", null, new A.Elements_closure6());
    });
    _lazy($, "Elements_lightning", "$get$Elements_lightning", function() {
      return G.Element$("lightning", "Ln", 1.1, null, null, null, null);
    });
    _lazy($, "Elements_poison", "$get$Elements_poison", function() {
      return G.Element$("poison", "Po", 2, new A.Elements_closure(), null, null, new A.Elements_closure0());
    });
    _lazy($, "Elements_dark", "$get$Elements_dark", function() {
      return G.Element$("dark", "Dk", 1.5, new A.Elements_closure1(), null, null, null);
    });
    _lazy($, "Elements_light", "$get$Elements_light", function() {
      return G.Element$("light", "Li", 1.5, new A.Elements_closure3(), null, null, new A.Elements_closure4());
    });
    _lazy($, "Elements_spirit", "$get$Elements_spirit", function() {
      return G.Element$("spirit", "Sp", 3, null, null, null, null);
    });
    _lazy($, "Elements_all", "$get$Elements_all", function() {
      return H.setRuntimeTypeInfo([$.$get$Element_none(), $.$get$Elements_air(), $.$get$Elements_earth(), $.$get$Elements_fire(), $.$get$Elements_water(), $.$get$Elements_acid(), $.$get$Elements_cold(), $.$get$Elements_lightning(), $.$get$Elements_poison(), $.$get$Elements_dark(), $.$get$Elements_light(), $.$get$Elements_spirit()], [G.Element]);
    });
    _lazy($, "Affixes_prefixes", "$get$Affixes_prefixes", function() {
      return Y.ResourceSet$(L.Affix);
    });
    _lazy($, "Affixes_suffixes", "$get$Affixes_suffixes", function() {
      return Y.ResourceSet$(L.Affix);
    });
    _lazy($, "_floorDrops", "$get$_floorDrops", function() {
      return Y.ResourceSet$(F.FloorDrop);
    });
    _lazy($, "Items_types", "$get$Items_types", function() {
      return Y.ResourceSet$(L.ItemType);
    });
    _lazy($, "Shops_all", "$get$Shops_all", function() {
      return P.LinkedHashMap_LinkedHashMap$_empty(P.String, O.Shop);
    });
    _lazy($, "collapseNewlines", "$get$collapseNewlines", function() {
      return P.RegExp_RegExp("\\n\\s*", true, false);
    });
    _lazy($, "Monsters_breeds", "$get$Monsters_breeds", function() {
      return Y.ResourceSet$(B.Breed);
    });
    _lazy($, "Races_dwarf", "$get$Races_dwarf", function() {
      return B.Races__race("Dwarf", 25, "It takes a certain kind of person to be willing to spend their life deep in the bowels of the Earth, toiling away in darkness. Dwarves aren't just willing, but delight in it. Solid, impenetrable and, well, not very bright... perhaps it's no surprise that dwarves love mines since they have so much in common.", 45, 15, 35, 30);
    });
    _lazy($, "Races_elf", "$get$Races_elf", function() {
      return B.Races__race("Elf", 40, "There are few things elves are not good at, as any elf will be quick to inform you. Clever, quick on their feet, and surprisingly strong for how they look. Which is radiantly beautiful, naturally.", 25, 35, 35, 25);
    });
    _lazy($, "Races_fae", "$get$Races_fae", function() {
      return B.Races__race("Fae", 45, "What can be said about the fae folk that is known to be true? Dimunitive and easily harmed, they survive by cloaking themselves in fables, tricks, and subterfuge. Quick to anger, and quick to forgive, the fae live each moment as if it may be their last, bright-burning flames all too aware of how easily they may be snuffed out.", 15, 30, 20, 20);
    });
    _lazy($, "Races_gnome", "$get$Races_gnome", function() {
      return B.Races__race("Gnome", 20, "Gnomes are gentle, quiet folk, difficult to arouse to anger (unless you interrupt one while reading). Most live a life of the mind, seeking knowledge more than adventure. But this insatiable desire for the former, on many occasions, leads them into the jaws of the latter.", 30, 45, 20, 35);
    });
    _lazy($, "Races_human", "$get$Races_human", function() {
      return B.Races__race("Human", 30, "Humans excel at nothing, but nor are they particularly weak in any area. Most other races considers humans sort of like mice: pesky creatures who seem do little but breed, which they do with great devotion.", 30, 30, 30, 30);
    });
    _lazy($, "Races_troll", "$get$Races_troll", function() {
      return B.Races__race("Troll", 40, "Troll strong like rock. Troll smart like rock. Troll eat rock.", 35, 10, 45, 20);
    });
    _lazy($, "Races_all", "$get$Races_all", function() {
      return H.setRuntimeTypeInfo([$.$get$Races_dwarf(), $.$get$Races_elf(), $.$get$Races_fae(), $.$get$Races_gnome(), $.$get$Races_human(), $.$get$Races_troll()], [N.Race]);
    });
    _lazy($, "Skills_all", "$get$Skills_all", function() {
      var t1, t2, t3, skills, t4, t5, t6, t7, t8, t9, t10;
      t1 = $.Skill__nextSortOrder;
      t2 = t1 + 1;
      $.Skill__nextSortOrder = t2;
      $.Skill__nextSortOrder = t2 + 1;
      t3 = [M.Skill];
      skills = H.setRuntimeTypeInfo([new M.BattleHardening(t1), new Y.DualWield(t2)], t3);
      t2 = $.Skill__nextSortOrder;
      t1 = t2 + 1;
      $.Skill__nextSortOrder = t1;
      t4 = t1 + 1;
      $.Skill__nextSortOrder = t4;
      t5 = t4 + 1;
      $.Skill__nextSortOrder = t5;
      t6 = t5 + 1;
      $.Skill__nextSortOrder = t6;
      t7 = t6 + 1;
      $.Skill__nextSortOrder = t7;
      $.Skill__nextSortOrder = t7 + 1;
      C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([new X.Archery(t2), new D.AxeMastery(t1), new A.ClubMastery(t4), new Z.SpearMastery(t5), new G.Swordfighting(t6), new O.WhipMastery(t7)], t3));
      C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([A.SlayDiscipline$("Animals", "animal"), A.SlayDiscipline$("Bugs", "bug"), A.SlayDiscipline$("Dragons", "dragon"), A.SlayDiscipline$("Fae Folk", "fae"), A.SlayDiscipline$("Goblins", "goblin"), A.SlayDiscipline$("Humans", "human"), A.SlayDiscipline$("Jellies", "jelly"), A.SlayDiscipline$("Kobolds", "kobold"), A.SlayDiscipline$("Plants", "plant"), A.SlayDiscipline$("Saurians", "saurian"), A.SlayDiscipline$("Undead", "undead")], t3));
      t7 = $.Skill__nextSortOrder;
      t6 = t7 + 1;
      $.Skill__nextSortOrder = t6;
      t5 = t6 + 1;
      $.Skill__nextSortOrder = t5;
      t4 = t5 + 1;
      $.Skill__nextSortOrder = t4;
      t1 = t4 + 1;
      $.Skill__nextSortOrder = t1;
      t2 = t1 + 1;
      $.Skill__nextSortOrder = t2;
      t8 = t2 + 1;
      $.Skill__nextSortOrder = t8;
      t9 = t8 + 1;
      $.Skill__nextSortOrder = t9;
      t10 = t9 + 1;
      $.Skill__nextSortOrder = t10;
      $.Skill__nextSortOrder = t10 + 1;
      C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([new D.SenseItems(t7), new K.Flee(t6), new K.Escape(t5), new K.Disappear(t4), new L.Icicle(t1), new L.BrilliantBeam(t2), new L.Windstorm(t8), new L.FireBarrier(t9), new L.TidalWave(t10)], t3));
      return skills;
    });
    _lazy($, "Skills__byName", "$get$Skills__byName", function() {
      var t1, map;
      t1 = $.$get$Skills_all();
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, M.Skill);
      P.MapBase__fillMapWithMappedIterable(map, t1, new Q.Skills_closure(), null);
      return map;
    });
    _lazy($, "ArchitecturalStyle__styles", "$get$ArchitecturalStyle__styles", function() {
      return Y.ResourceSet$(F.ArchitecturalStyle);
    });
    _lazy($, "PaintStyle__all", "$get$PaintStyle__all", function() {
      var t1 = Q.TileType;
      return P.LinkedHashMap_LinkedHashMap$_literal(["rock", Q.PaintStyle$(P.LinkedHashMap_LinkedHashMap$_empty(t1, t1)), "stone", new Q._DoorPaintStyle(P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Tiles_solid(), $.$get$Tiles_wall()], t1, t1)), "stone-jail", Q.PaintStyle$(P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Tiles_doorway(), $.$get$Tiles_closedBarredDoor()], t1, t1))], P.String, Q.PaintStyle);
    });
    _lazy($, "PaintStyle__defaultTypes", "$get$PaintStyle__defaultTypes", function() {
      var t1, t2, t3;
      t1 = $.$get$Tiles_open();
      t2 = $.$get$Tiles_floor();
      t3 = Q.TileType;
      return P.LinkedHashMap_LinkedHashMap$_literal([t1, t2, $.$get$Tiles_solid(), $.$get$Tiles_rock(), $.$get$Tiles_passage(), t2, $.$get$Tiles_doorway(), t2, $.$get$Tiles_solidWet(), $.$get$Tiles_water(), $.$get$Tiles_passageWet(), $.$get$Tiles_bridge()], t3, t3);
    });
    _lazy($, "RoomTile_unused", "$get$RoomTile_unused", function() {
      return R.RoomTile$junction(C.Direction_0_0);
    });
    _lazy($, "RoomTile_floor", "$get$RoomTile_floor", function() {
      return R.RoomTile$tile($.$get$Tiles_open());
    });
    _lazy($, "RoomTile_wall", "$get$RoomTile_wall", function() {
      return R.RoomTile$tile($.$get$Tiles_solid());
    });
    _lazy($, "Tiles_unformed", "$get$Tiles_unformed", function() {
      return Z._TileBuilder__TileBuilder("unformed", "?", C.Color_63_64_114, null).open$0(0);
    });
    _lazy($, "Tiles_unformedWet", "$get$Tiles_unformedWet", function() {
      return Z._TileBuilder__TileBuilder("unformed wet", "\u2248", C.Color_63_64_114, null).open$0(0);
    });
    _lazy($, "Tiles_open", "$get$Tiles_open", function() {
      return Z._TileBuilder__TileBuilder("open", "\xb7", C.Color_132_126_135, null).open$0(0);
    });
    _lazy($, "Tiles_solid", "$get$Tiles_solid", function() {
      return Z._TileBuilder__TileBuilder("solid", "#", C.Color_132_126_135, null).solid$0();
    });
    _lazy($, "Tiles_passage", "$get$Tiles_passage", function() {
      return Z._TileBuilder__TileBuilder("passage", "-", C.Color_132_126_135, null).open$0(0);
    });
    _lazy($, "Tiles_doorway", "$get$Tiles_doorway", function() {
      return Z._TileBuilder__TileBuilder("doorway", "\u25cb", C.Color_132_126_135, null).open$0(0);
    });
    _lazy($, "Tiles_solidWet", "$get$Tiles_solidWet", function() {
      return Z._TileBuilder__TileBuilder("solid wet", "\u2248", C.Color_64_163_229, null).solid$0();
    });
    _lazy($, "Tiles_passageWet", "$get$Tiles_passageWet", function() {
      return Z._TileBuilder__TileBuilder("wet passage", "-", C.Color_64_163_229, null).open$0(0);
    });
    _lazy($, "Tiles_floor", "$get$Tiles_floor", function() {
      return Z._TileBuilder__TileBuilder("floor", "\xb7", C.Color_63_64_114, null).open$0(0);
    });
    _lazy($, "Tiles_burntFloor", "$get$Tiles_burntFloor", function() {
      return Z._TileBuilder__TileBuilder("burnt floor", "\u03c6", C.Color_38_38_56, null).open$0(0);
    });
    _lazy($, "Tiles_burntFloor2", "$get$Tiles_burntFloor2", function() {
      return Z._TileBuilder__TileBuilder("burnt floor", "\u03b5", C.Color_38_38_56, null).open$0(0);
    });
    _lazy($, "Tiles_rock", "$get$Tiles_rock", function() {
      return Z._TileBuilder__TileBuilder("rock", "\u2593", C.Color_132_126_135, C.Color_63_64_114).solid$0();
    });
    _lazy($, "Tiles_wall", "$get$Tiles_wall", function() {
      return Z._TileBuilder__TileBuilder("wall", "\u2592", C.Color_132_126_135, C.Color_63_64_114).solid$0();
    });
    _lazy($, "Tiles_openDoor", "$get$Tiles_openDoor", function() {
      return Z._TileBuilder__TileBuilder("open door", "\u25cb", C.Color_142_82_55, C.Color_64_31_36).onClose$1(Z.tiles___closeDoor$closure()).open$0(0);
    });
    _lazy($, "Tiles_closedDoor", "$get$Tiles_closedDoor", function() {
      return Z._TileBuilder__TileBuilder("closed door", "\u25d9", C.Color_142_82_55, C.Color_64_31_36).onOpen$1(Z.tiles___openDoor$closure())._tiles$_motility$1($.$get$Motility_door());
    });
    _lazy($, "Tiles_openBarredDoor", "$get$Tiles_openBarredDoor", function() {
      return Z._TileBuilder__TileBuilder("open barred door", "\u2642", C.Color_132_126_135, C.Color_63_64_114).onClose$1(Z.tiles___closeBarredDoor$closure()).open$0(0);
    });
    _lazy($, "Tiles_closedBarredDoor", "$get$Tiles_closedBarredDoor", function() {
      return Z._TileBuilder__TileBuilder("closed barred door", "\u266a", C.Color_132_126_135, C.Color_63_64_114).onOpen$1(Z.tiles___openBarredDoor$closure())._tiles$_motility$1($.$get$Motility_fly().$or(0, $.$get$Motility_door()));
    });
    _lazy($, "Tiles_stairs", "$get$Tiles_stairs", function() {
      return Z._TileBuilder__TileBuilder("stairs", "\u2261", C.Color_132_126_135, C.Color_63_64_114).to$1(C.TilePortal_exit).open$0(0);
    });
    _lazy($, "Tiles_bridge", "$get$Tiles_bridge", function() {
      return Z._TileBuilder__TileBuilder("bridge", "\u2261", C.Color_142_82_55, C.Color_64_31_36).open$0(0);
    });
    _lazy($, "Tiles_glowingMoss", "$get$Tiles_glowingMoss", function() {
      return Z._TileBuilder__TileBuilder("moss", "\u2591", C.Color_9_95_112, null).emanate$1(128).open$0(0);
    });
    _lazy($, "Tiles_water", "$get$Tiles_water", function() {
      return Z._TileBuilder__TileBuilder("water", "\u2248", C.Color_21_87_194, C.Color_26_46_150).animate$4(0, 10, 0.5, C.Color_26_46_150, C.Color_19_17_28)._tiles$_motility$1($.$get$Motility_fly().$or(0, $.$get$Motility_swim()));
    });
    _lazy($, "Tiles_steppingStone", "$get$Tiles_steppingStone", function() {
      return Z._TileBuilder__TileBuilder("stepping stone", "\u2022", C.Color_132_126_135, C.Color_26_46_150).open$0(0);
    });
    _lazy($, "Tiles_dirt", "$get$Tiles_dirt", function() {
      return Z._TileBuilder__TileBuilder("dirt", "\xb7", C.Color_64_31_36, null).open$0(0);
    });
    _lazy($, "Tiles_dirt2", "$get$Tiles_dirt2", function() {
      return Z._TileBuilder__TileBuilder("dirt2", "\u03c6", C.Color_64_31_36, null).open$0(0);
    });
    _lazy($, "Tiles_grass", "$get$Tiles_grass", function() {
      return Z._TileBuilder__TileBuilder("grass", "\u2591", C.Color_22_117_38, null).open$0(0);
    });
    _lazy($, "Tiles_tallGrass", "$get$Tiles_tallGrass", function() {
      return Z._TileBuilder__TileBuilder("tall grass", "\u221a", C.Color_22_117_38, null).open$0(0);
    });
    _lazy($, "Tiles_tree", "$get$Tiles_tree", function() {
      return Z._TileBuilder__TileBuilder("tree", "\u25b2", C.Color_22_117_38, C.Color_0_64_39).solid$0();
    });
    _lazy($, "Tiles_treeAlt1", "$get$Tiles_treeAlt1", function() {
      return Z._TileBuilder__TileBuilder("tree", "\u2660", C.Color_22_117_38, C.Color_0_64_39).solid$0();
    });
    _lazy($, "Tiles_treeAlt2", "$get$Tiles_treeAlt2", function() {
      return Z._TileBuilder__TileBuilder("tree", "\u2663", C.Color_22_117_38, C.Color_0_64_39).solid$0();
    });
    _lazy($, "Tiles_tableTopLeft", "$get$Tiles_tableTopLeft", function() {
      return Z._TileBuilder__TileBuilder("table", "\u250c", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableTop", "$get$Tiles_tableTop", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2500", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableTopRight", "$get$Tiles_tableTopRight", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2510", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableSide", "$get$Tiles_tableSide", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2502", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableCenter", "$get$Tiles_tableCenter", function() {
      return Z._TileBuilder__TileBuilder("table", " ", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableBottomLeft", "$get$Tiles_tableBottomLeft", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2558", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableBottom", "$get$Tiles_tableBottom", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2550", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableBottomRight", "$get$Tiles_tableBottomRight", function() {
      return Z._TileBuilder__TileBuilder("table", "\u255b", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableLegLeft", "$get$Tiles_tableLegLeft", function() {
      return Z._TileBuilder__TileBuilder("table", "\u255e", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableLeg", "$get$Tiles_tableLeg", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2564", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_tableLegRight", "$get$Tiles_tableLegRight", function() {
      return Z._TileBuilder__TileBuilder("table", "\u2561", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_candle", "$get$Tiles_candle", function() {
      return Z._TileBuilder__TileBuilder("candle", "\u2265", C.Color_189_144_108, null).emanate$1(128).obstacle$0();
    });
    _lazy($, "Tiles_wallTorch", "$get$Tiles_wallTorch", function() {
      return Z._TileBuilder__TileBuilder("wall torch", "\u2264", C.Color_222_156_33, C.Color_63_64_114).emanate$1(192).solid$0();
    });
    _lazy($, "Tiles_braziers", "$get$Tiles_braziers", function() {
      return Z.Tiles_multi("brazier", "\u2264", C.Color_142_82_55, null, 5, new Z.Tiles_closure());
    });
    _lazy($, "Tiles_openChest", "$get$Tiles_openChest", function() {
      return Z._TileBuilder__TileBuilder("open chest", "\u2320", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_closedChest", "$get$Tiles_closedChest", function() {
      return Z._TileBuilder__TileBuilder("closed chest", "\u2321", C.Color_142_82_55, null).onOpen$1(new Z.Tiles_closure0()).obstacle$0();
    });
    _lazy($, "Tiles_closedBarrel", "$get$Tiles_closedBarrel", function() {
      return Z._TileBuilder__TileBuilder("closed barrel", "\xb0", C.Color_142_82_55, null).onOpen$1(new Z.Tiles_closure1()).obstacle$0();
    });
    _lazy($, "Tiles_openBarrel", "$get$Tiles_openBarrel", function() {
      return Z._TileBuilder__TileBuilder("open barrel", "\u2219", C.Color_142_82_55, null).obstacle$0();
    });
    _lazy($, "Tiles_statue", "$get$Tiles_statue", function() {
      return Z._TileBuilder__TileBuilder("statue", "P", C.Color_226_223_240, C.Color_63_64_114).obstacle$0();
    });
    _lazy($, "Tiles_chair", "$get$Tiles_chair", function() {
      return Z._TileBuilder__TileBuilder("chair", "\u03c0", C.Color_142_82_55, null).open$0(0);
    });
    _lazy($, "Tiles_brownJellyStain", "$get$Tiles_brownJellyStain", function() {
      return Z._TileBuilder__TileBuilder("brown jelly stain", "\xb7", C.Color_142_82_55, null).open$0(0);
    });
    _lazy($, "Tiles_grayJellyStain", "$get$Tiles_grayJellyStain", function() {
      return Z._TileBuilder__TileBuilder("gray jelly stain", "\xb7", C.Color_38_38_56, null).open$0(0);
    });
    _lazy($, "Tiles_greenJellyStain", "$get$Tiles_greenJellyStain", function() {
      return Z._TileBuilder__TileBuilder("green jelly stain", "\xb7", C.Color_131_158_13, null).open$0(0);
    });
    _lazy($, "Tiles_redJellyStain", "$get$Tiles_redJellyStain", function() {
      return Z._TileBuilder__TileBuilder("red jelly stain", "\xb7", C.Color_204_35_57, null).open$0(0);
    });
    _lazy($, "Tiles_violetJellyStain", "$get$Tiles_violetJellyStain", function() {
      return Z._TileBuilder__TileBuilder("violet jelly stain", "\xb7", C.Color_86_30_138, null).open$0(0);
    });
    _lazy($, "Tiles_whiteJellyStain", "$get$Tiles_whiteJellyStain", function() {
      return Z._TileBuilder__TileBuilder("white jelly stain", "\xb7", C.Color_226_223_240, null).open$0(0);
    });
    _lazy($, "Tiles_spiderweb", "$get$Tiles_spiderweb", function() {
      return Z._TileBuilder__TileBuilder("spiderweb", "\xf7", C.Color_63_64_114, null).open$0(0);
    });
    _lazy($, "Tiles_dungeonEntrance", "$get$Tiles_dungeonEntrance", function() {
      return Z._TileBuilder__TileBuilder("dungeon entrance", "\u2261", C.Color_132_126_135, C.Color_63_64_114).to$1(C.TilePortal_dungeon).open$0(0);
    });
    _lazy($, "Tiles_home", "$get$Tiles_home", function() {
      return Z._TileBuilder__TileBuilder("home entrance", "\u25cb", C.Color_189_144_108, null).to$1(C.TilePortal_home).open$0(0);
    });
    _lazy($, "Tiles_shop1", "$get$Tiles_shop1", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_179_74_4, null).to$1(C.TilePortal_T3V4).open$0(0);
    });
    _lazy($, "Tiles_shop2", "$get$Tiles_shop2", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_222_156_33, null).to$1(C.TilePortal_T3V3).open$0(0);
    });
    _lazy($, "Tiles_shop3", "$get$Tiles_shop3", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_131_158_13, null).to$1(C.TilePortal_T3V2).open$0(0);
    });
    _lazy($, "Tiles_shop4", "$get$Tiles_shop4", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_22_117_38, null).to$1(C.TilePortal_T3V1).open$0(0);
    });
    _lazy($, "Tiles_shop5", "$get$Tiles_shop5", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_9_95_112, null).to$1(C.TilePortal_T3V0).open$0(0);
    });
    _lazy($, "Tiles_shop6", "$get$Tiles_shop6", function() {
      return Z._TileBuilder__TileBuilder("shop entrance", "\u25cb", C.Color_129_231_235, null).to$1(C.TilePortal_T3V).open$0(0);
    });
    _lazy($, "Tiles__ignition", "$get$Tiles__ignition", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Tiles_openDoor(), 30, $.$get$Tiles_closedDoor(), 30, $.$get$Tiles_bridge(), 50, $.$get$Tiles_glowingMoss(), 10, $.$get$Tiles_grass(), 3, $.$get$Tiles_tallGrass(), 3, $.$get$Tiles_tree(), 40, $.$get$Tiles_treeAlt1(), 40, $.$get$Tiles_treeAlt2(), 40, $.$get$Tiles_tableTopLeft(), 20, $.$get$Tiles_tableTop(), 20, $.$get$Tiles_tableTopRight(), 20, $.$get$Tiles_tableSide(), 20, $.$get$Tiles_tableCenter(), 20, $.$get$Tiles_tableBottomLeft(), 20, $.$get$Tiles_tableBottom(), 20, $.$get$Tiles_tableBottomRight(), 20, $.$get$Tiles_tableLegLeft(), 20, $.$get$Tiles_tableLeg(), 20, $.$get$Tiles_tableLegRight(), 20, $.$get$Tiles_openChest(), 40, $.$get$Tiles_closedChest(), 80, $.$get$Tiles_openBarrel(), 15, $.$get$Tiles_closedBarrel(), 40, $.$get$Tiles_candle(), 1, $.$get$Tiles_chair(), 10, $.$get$Tiles_spiderweb(), 1], Q.TileType, P.int);
    });
    _lazy($, "Tiles__fuel", "$get$Tiles__fuel", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Tiles_openDoor(), 70, $.$get$Tiles_closedDoor(), 70, $.$get$Tiles_bridge(), 50, $.$get$Tiles_glowingMoss(), 20, $.$get$Tiles_grass(), 30, $.$get$Tiles_tallGrass(), 50, $.$get$Tiles_tree(), 100, $.$get$Tiles_treeAlt1(), 100, $.$get$Tiles_treeAlt2(), 100, $.$get$Tiles_tableTopLeft(), 60, $.$get$Tiles_tableTop(), 60, $.$get$Tiles_tableTopRight(), 60, $.$get$Tiles_tableSide(), 60, $.$get$Tiles_tableCenter(), 60, $.$get$Tiles_tableBottomLeft(), 60, $.$get$Tiles_tableBottom(), 60, $.$get$Tiles_tableBottomRight(), 60, $.$get$Tiles_tableLegLeft(), 60, $.$get$Tiles_tableLeg(), 60, $.$get$Tiles_tableLegRight(), 60, $.$get$Tiles_openChest(), 70, $.$get$Tiles_closedChest(), 80, $.$get$Tiles_openBarrel(), 30, $.$get$Tiles_closedBarrel(), 40, $.$get$Tiles_candle(), 60, $.$get$Tiles_chair(), 40, $.$get$Tiles_spiderweb(), 20], Q.TileType, P.int);
    });
    _lazy($, "Tiles__burnTypes", "$get$Tiles__burnTypes", function() {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = $.$get$Tiles_bridge();
      t2 = Q.TileType;
      t3 = [t2];
      t4 = H.setRuntimeTypeInfo([$.$get$Tiles_water()], t3);
      t5 = $.$get$Tiles_grass();
      t6 = $.$get$Tiles_dirt();
      t7 = $.$get$Tiles_dirt2();
      return P.LinkedHashMap_LinkedHashMap$_literal([t1, t4, t5, H.setRuntimeTypeInfo([t6, t7], t3), $.$get$Tiles_tallGrass(), H.setRuntimeTypeInfo([t6, t7], t3), $.$get$Tiles_tree(), H.setRuntimeTypeInfo([t6, t7], t3), $.$get$Tiles_treeAlt1(), H.setRuntimeTypeInfo([t6, t7], t3), $.$get$Tiles_treeAlt2(), H.setRuntimeTypeInfo([t6, t7], t3), $.$get$Tiles_candle(), H.setRuntimeTypeInfo([$.$get$Tiles_tableCenter()], t3), $.$get$Tiles_spiderweb(), H.setRuntimeTypeInfo([$.$get$Tiles_floor()], t3)], t2, [P.List, Q.TileType]);
    });
    _lazy($, "Debug__monsters", "$get$Debug__monsters", function() {
      return P.LinkedHashMap_LinkedHashMap$_empty(B.Monster, E._MonsterLog);
    });
    _lazy($, "Element_none", "$get$Element_none", function() {
      return G.Element$("none", "No", 1, null, null, null, null);
    });
    _lazy($, "BreedRef__unresolved", "$get$BreedRef__unresolved", function() {
      return H.setRuntimeTypeInfo([], [B.BreedRef]);
    });
    _lazy($, "Fov__octantCoordinates", "$get$Fov__octantCoordinates", function() {
      var t1 = [L.Vec];
      return H.setRuntimeTypeInfo([H.setRuntimeTypeInfo([C.Vec_0_m1, C.Vec_1_0], t1), H.setRuntimeTypeInfo([C.Vec_1_0, C.Vec_0_m1], t1), H.setRuntimeTypeInfo([C.Vec_1_0, C.Vec_0_1], t1), H.setRuntimeTypeInfo([C.Vec_0_1, C.Vec_1_0], t1), H.setRuntimeTypeInfo([C.Vec_0_1, C.Vec_m1_0], t1), H.setRuntimeTypeInfo([C.Vec_m1_0, C.Vec_0_1], t1), H.setRuntimeTypeInfo([C.Vec_m1_0, C.Vec_0_m1], t1), H.setRuntimeTypeInfo([C.Vec_0_m1, C.Vec_m1_0], t1)], [[P.List, L.Vec]]);
    });
    _lazy($, "Motility_none", "$get$Motility_none", function() {
      return Q.Motility$_(0);
    });
    _lazy($, "Motility_door", "$get$Motility_door", function() {
      return Q.Motility$_(1);
    });
    _lazy($, "Motility_fly", "$get$Motility_fly", function() {
      return Q.Motility$_(2);
    });
    _lazy($, "Motility_swim", "$get$Motility_swim", function() {
      return Q.Motility$_(4);
    });
    _lazy($, "Motility_walk", "$get$Motility_walk", function() {
      return Q.Motility$_(8);
    });
    _lazy($, "Motility_doorAndFly", "$get$Motility_doorAndFly", function() {
      return $.$get$Motility_door().$or(0, $.$get$Motility_fly());
    });
    _lazy($, "Motility_doorAndWalk", "$get$Motility_doorAndWalk", function() {
      return $.$get$Motility_door().$or(0, $.$get$Motility_walk());
    });
    _lazy($, "Motility_flyAndWalk", "$get$Motility_flyAndWalk", function() {
      return $.$get$Motility_fly().$or(0, $.$get$Motility_walk());
    });
    _lazy($, "Motility_all", "$get$Motility_all", function() {
      return $.$get$Motility_door().$or(0, $.$get$Motility_fly()).$or(0, $.$get$Motility_swim()).$or(0, $.$get$Motility_walk());
    });
    _lazy($, "_directionLines", "$get$_directionLines", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal([C.Direction_0_m1, "|", C.Direction_1_m1, "/", C.Direction_1_0, "-", C.Direction_1_1, "\\", C.Direction_0_1, "|", C.Direction_m1_1, "/", C.Direction_m1_0, "-", C.Direction_m1_m1, "\\"], Z.Direction, P.String);
    });
    _lazy($, "_elementSequences", "$get$_elementSequences", function() {
      var t1, t2;
      t1 = [L.Color];
      t2 = [[P.List, L.Glyph]];
      return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Element_none(), H.setRuntimeTypeInfo([K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_189_144_108], t1)), K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_189_144_108], t1)), K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_142_82_55], t1))], t2), $.$get$Elements_air(), H.setRuntimeTypeInfo([K._glyphs("Oo", H.setRuntimeTypeInfo([C.Color_226_223_240, C.Color_129_231_235], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_129_231_235], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_64_163_229], t1))], t2), $.$get$Elements_earth(), H.setRuntimeTypeInfo([K._glyphs("*%", H.setRuntimeTypeInfo([C.Color_189_144_108, C.Color_222_156_33], t1)), K._glyphs("*%", H.setRuntimeTypeInfo([C.Color_142_82_55, C.Color_64_31_36], t1)), K._glyphs("\u2022*", H.setRuntimeTypeInfo([C.Color_142_82_55], t1)), K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_64_31_36], t1))], t2), $.$get$Elements_fire(), H.setRuntimeTypeInfo([K._glyphs("\u25b2^", H.setRuntimeTypeInfo([C.Color_222_156_33, C.Color_255_238_168], t1)), K._glyphs("*^", H.setRuntimeTypeInfo([C.Color_179_74_4], t1)), K._glyphs("^", H.setRuntimeTypeInfo([C.Color_204_35_57], t1)), K._glyphs("^", H.setRuntimeTypeInfo([C.Color_64_31_36, C.Color_204_35_57], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_64_31_36, C.Color_204_35_57], t1))], t2), $.$get$Elements_water(), H.setRuntimeTypeInfo([K._glyphs("Oo", H.setRuntimeTypeInfo([C.Color_129_231_235, C.Color_64_163_229], t1)), K._glyphs("o\u2022^", H.setRuntimeTypeInfo([C.Color_64_163_229, C.Color_21_87_194], t1)), K._glyphs("\u2022^", H.setRuntimeTypeInfo([C.Color_21_87_194, C.Color_26_46_150], t1)), K._glyphs("^~", H.setRuntimeTypeInfo([C.Color_21_87_194, C.Color_26_46_150], t1)), K._glyphs("~", H.setRuntimeTypeInfo([C.Color_26_46_150], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_26_46_150, C.Color_56_16_125], t1))], t2), $.$get$Elements_acid(), H.setRuntimeTypeInfo([K._glyphs("Oo", H.setRuntimeTypeInfo([C.Color_255_238_168, C.Color_222_156_33], t1)), K._glyphs("o\u2022~", H.setRuntimeTypeInfo([C.Color_131_158_13, C.Color_222_156_33], t1)), K._glyphs(":,", H.setRuntimeTypeInfo([C.Color_131_158_13, C.Color_99_87_7], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_131_158_13], t1))], t2), $.$get$Elements_cold(), H.setRuntimeTypeInfo([K._glyphs("*", H.setRuntimeTypeInfo([C.Color_226_223_240], t1)), K._glyphs("+x", H.setRuntimeTypeInfo([C.Color_129_231_235, C.Color_226_223_240], t1)), K._glyphs("+x", H.setRuntimeTypeInfo([C.Color_64_163_229, C.Color_132_126_135], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_63_64_114, C.Color_26_46_150], t1))], t2), $.$get$Elements_lightning(), H.setRuntimeTypeInfo([K._glyphs("*", H.setRuntimeTypeInfo([C.Color_189_106_235], t1)), K._glyphs("-|\\/", H.setRuntimeTypeInfo([C.Color_86_30_138, C.Color_226_223_240], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_19_17_28, C.Color_19_17_28, C.Color_19_17_28, C.Color_189_106_235], t1))], t2), $.$get$Elements_poison(), H.setRuntimeTypeInfo([K._glyphs("Oo", H.setRuntimeTypeInfo([C.Color_129_217_117, C.Color_131_158_13], t1)), K._glyphs("o\u2022", H.setRuntimeTypeInfo([C.Color_22_117_38, C.Color_22_117_38, C.Color_99_87_7], t1)), K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_0_64_39, C.Color_99_87_7], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_0_64_39], t1))], t2), $.$get$Elements_dark(), H.setRuntimeTypeInfo([K._glyphs("*%", H.setRuntimeTypeInfo([C.Color_19_17_28, C.Color_19_17_28, C.Color_38_38_56], t1)), K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_19_17_28, C.Color_19_17_28, C.Color_132_126_135], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_19_17_28], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_19_17_28], t1))], t2), $.$get$Elements_light(), H.setRuntimeTypeInfo([K._glyphs("*", H.setRuntimeTypeInfo([C.Color_226_223_240], t1)), K._glyphs("x+", H.setRuntimeTypeInfo([C.Color_226_223_240, C.Color_255_238_168], t1)), K._glyphs(":;\"'`,", H.setRuntimeTypeInfo([C.Color_255_238_168, C.Color_222_156_33], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_132_126_135, C.Color_255_238_168], t1))], t2), $.$get$Elements_spirit(), H.setRuntimeTypeInfo([K._glyphs("Oo*+", H.setRuntimeTypeInfo([C.Color_189_106_235, C.Color_132_126_135], t1)), K._glyphs("o+", H.setRuntimeTypeInfo([C.Color_86_30_138, C.Color_22_117_38], t1)), K._glyphs("\u2022.", H.setRuntimeTypeInfo([C.Color_56_16_125, C.Color_0_64_39, C.Color_0_64_39], t1))], t2)], G.Element, [P.List, [P.List, L.Glyph]]);
    });
    _lazy($, "TeleportEffect__colors", "$get$TeleportEffect__colors", function() {
      return H.setRuntimeTypeInfo([C.Color_129_231_235, C.Color_64_163_229, C.Color_189_106_235, C.Color_226_223_240], [L.Color]);
    });
    _lazy($, "DetectEffect__colors", "$get$DetectEffect__colors", function() {
      return H.setRuntimeTypeInfo([C.Color_226_223_240, C.Color_255_238_168, C.Color_222_156_33, C.Color_99_87_7, C.Color_122_44_24], [L.Color]);
    });
    _lazy($, "HowlEffect_bang", "$get$HowlEffect_bang", function() {
      return L.Glyph$("!", C.Color_9_95_112, null);
    });
    _lazy($, "HowlEffect_slash", "$get$HowlEffect_slash", function() {
      return L.Glyph$("/", C.Color_129_231_235, null);
    });
    _lazy($, "HowlEffect_backslash", "$get$HowlEffect_backslash", function() {
      return L.Glyph$("\\", C.Color_129_231_235, null);
    });
    _lazy($, "HowlEffect_dash", "$get$HowlEffect_dash", function() {
      return L.Glyph$("-", C.Color_9_95_112, null);
    });
    _lazy($, "HowlEffect_less", "$get$HowlEffect_less", function() {
      return L.Glyph$("<", C.Color_9_95_112, null);
    });
    _lazy($, "HowlEffect_greater", "$get$HowlEffect_greater", function() {
      return L.Glyph$(">", C.Color_9_95_112, null);
    });
    _lazy($, "HeroInfoDialog__screens", "$get$HeroInfoDialog__screens", function() {
      return H.setRuntimeTypeInfo([], [M.HeroInfoDialog]);
    });
    _lazy($, "SidebarPanel__resistLetters", "$get$SidebarPanel__resistLetters", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Elements_air(), "A", $.$get$Elements_earth(), "E", $.$get$Elements_fire(), "F", $.$get$Elements_water(), "W", $.$get$Elements_acid(), "A", $.$get$Elements_cold(), "C", $.$get$Elements_lightning(), "L", $.$get$Elements_poison(), "P", $.$get$Elements_dark(), "D", $.$get$Elements_light(), "L", $.$get$Elements_spirit(), "S"], G.Element, P.String);
    });
    _lazy($, "rng", "$get$rng", function() {
      return N.Rng$(H.Primitives_dateNow());
    });
    _lazy($, "_fonts", "$get$_fonts", function() {
      return H.setRuntimeTypeInfo([], [F.TerminalFont]);
    });
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: P.bool, args: [L.Vec]}, {func: 1, args: [,]}, {func: 1, ret: P.Null}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: P.int}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: -1}, {func: 1, ret: P.bool, args: [R.Item]}, {func: 1, ret: P.bool, args: [Z.Direction]}, {func: 1, ret: P.int, args: [L.ItemType, L.ItemType]}, {func: 1, ret: P.Null, args: [R.Item]}, {func: 1, ret: P.Null, args: [L.Vec]}, {func: 1, ret: V.Action, args: [L.Vec]}, {func: 1, ret: P.Null, args: [P.int, L.Color]}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: P.Null, args: [P.int]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.int, args: [B.Breed, B.Breed]}, {func: 1, ret: P.Null, args: [W.Event]}, {func: 1, ret: P.int, args: [P.int, P.int]}, {func: 1, ret: P.bool, args: [W.Node]}, {func: 1, ret: P.bool, args: [W.NodeValidator]}, {func: 1, ret: -1, args: [L.Vec]}, {func: 1, ret: -1, args: [E.Condition]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: -1, args: [P.int], named: {to: P.int}}, {func: 1, ret: P.bool, args: [O.Move]}, {func: 1, ret: P.Null, args: [P.String, P.String]}, {func: 1, ret: P.Null, args: [O.Shop, O.Inventory]}, {func: 1, ret: P.bool, args: [W.Element0, P.String, P.String, W._Html5NodeValidator]}, {func: 1, ret: P.Null, args: [R.Item, P.int]}, {func: 1, ret: [P.List, L.Vec]}, {func: 1, ret: P.Null, args: [B.Monster]}, {func: 1, ret: P.Null, args: [P.int, P.int, L.Glyph]}, {func: 1, ret: P.int, args: [P.int, P.String]}, {func: 1, ret: P.num, args: [,]}, {func: 1, ret: -1, args: [W.KeyboardEvent]}, {func: 1, ret: P.Null, args: [P.String], named: {end: P.int, start: P.int}}, {func: 1, ret: [P.JsArray,,], args: [,]}, {func: 1, ret: E.PoisonAction, args: [P.int]}, {func: 1, ret: G.PoisonFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: E.BlindAction, args: [P.int]}, {func: 1, ret: E.DazzleAction, args: [P.int]}, {func: 1, ret: G.LightFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, ret: X.EatAction}, {func: 1, ret: T.DetectAction}, {func: 1, ret: E.ResistAction}, {func: 1, ret: Q.MappingAction}, {func: 1, ret: E.HasteAction}, {func: 1, ret: S.TeleportAction}, {func: 1, ret: O.HealAction}, {func: 1, ret: G.RingSelfAction}, {func: 1, ret: G.RingFromAction, args: [L.Vec]}, {func: 1, ret: N.FlowSelfAction}, {func: 1, ret: N.FlowFromAction, args: [L.Vec]}, {func: 1, ret: F.IlluminateSelfAction}, {func: 1, ret: P.Null, args: [L.Drop, P.double]}, {func: 1, ret: P.Null, args: [P.String, P.double]}, {func: 1, args: [, P.String]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, ret: P.String, args: [,]}, {func: 1, ret: P.Null, args: [P.String], named: {canFill: P.bool, create: {func: 1, ret: X.Architecture}, decor: P.String, decorDensity: P.double, end: P.int, endFrequency: P.double, itemDensity: P.double, monsterDensity: P.double, monsters: P.String, start: P.int, startFrequency: P.double}}, {func: 1, ret: Q.Dungeon}, {func: 1, ret: D.Catacomb}, {func: 1, ret: Q.Cavern}, {func: 1, ret: F.Lake}, {func: 1, ret: G.River}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: A.Pit}, {func: 1, ret: Z.Keep}, {func: 1, ret: P.Null, args: [X.Architecture, [P.List, L.Vec]]}, {func: 1, ret: P.Null, args: [B.Breed, L.Vec]}, {func: 1, ret: P.double, args: [P.int,,]}, {func: 1, ret: Q.TileType, args: [Z._TileBuilder, P.int]}, {func: 1, ret: Q.OpenChestAction, args: [L.Vec]}, {func: 1, ret: Q.OpenBarrelAction, args: [L.Vec]}, {func: 1, ret: V.ActionResult, args: [P.int]}, {func: 1, ret: -1, args: [W.Node, W.Node]}, {func: 1, ret: W.Element0, args: [W.Node]}, {func: 1, ret: P.JsFunction, args: [,]}, {func: 1, ret: P.Null, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.int, args: [P.int]}, {func: 1, ret: -1, args: [M.Skill]}, {func: 1, ret: P.Null, args: [P.double]}, {func: 1, ret: P.Null, args: [L.Affix]}, {func: 1, ret: P.double, args: [P.int, P.int]}, {func: 1, ret: P.bool, args: [M.Skill]}, {func: 1, ret: -1, args: [G.Element, P.int]}, {func: 1, ret: P.JsObject, args: [,]}, {func: 1, ret: P.int, args: [P.int, R.Item]}, {func: 1, ret: O.AddItemResult, args: [R.Item], named: {wasUnequipped: P.bool}}, {func: 1, ret: R.Item, args: [R.Item]}, {func: 1, ret: P.Null, args: [P.String, P.int]}, {func: 1, ret: -1, args: [P.int, P.int]}, {func: 1, ret: P.Null, args: [Z.Direction, P.bool]}, {func: 1, ret: P.Null, args: [L.Vec, P.int]}, {func: 1, ret: Q.Tile}, {func: 1, ret: O.Inventory}, {func: 1, ret: P.Null, args: [L.Vec, O.Inventory]}, {func: 1, ret: P.bool, args: [P.bool, P.int]}, {func: 1, ret: P.bool, args: [S.Actor]}, {func: 1, ret: -1, args: [Z.Direction]}, {func: 1, ret: P.bool, args: [P.double, P.double]}, {func: 1, ret: P.Null, args: [Z.Direction]}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, args: [P.String]}, {func: 1, ret: P.Null, args: [R.Item, L.Vec]}, {func: 1, ret: P.bool, args: [B.Breed]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, ret: P.bool, args: [P.int]}, {func: 1, ret: [P.List, L.Vec], args: [P.int]}, {func: 1, ret: P.Null, args: [P.String, P.Object]}, {func: 1, ret: P.String, args: [N.Race]}, {func: 1, ret: P.String, args: [T.HeroClass]}, {func: 1, ret: P.int, args: [B.Monster, B.Monster]}, {func: 1, ret: P.Null, args: [D.StatBase]}, {func: 1, ret: P.Null, args: [P.String, L.Color], opt: [L.Color]}, {func: 1, ret: P.bool, args: [K.Effect]}, {func: 1, args: [W.Event]}, {func: 1, ret: P.bool, args: [P.double]}, {func: 1, ret: P.bool, args: [T.HeroClass]}, {func: 1, ret: P.Null, args: [P.String, O.Shop]}, {func: 1, ret: P.bool, args: [N.Race]}, {func: 1, ret: G.WindAction, args: [P.int]}, {func: 1, ret: G.BurnActorAction, args: [P.int]}, {func: 1, ret: G.BurnFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: -1, args: [P.num]}, {func: 1, ret: P.Null, args: [W.MouseEvent]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: P.num}, {func: 1, ret: E.FreezeActorAction, args: [P.int]}, {func: 1, ret: G.FreezeFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, ret: M.Skill, args: [P.String]}, {func: 1, ret: -1, args: [D.Stat, P.int]}], interceptorsByTag: null, leafTags: null};
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({CanvasGradient: J.Interceptor, CanvasPattern: J.Interceptor, DOMImplementation: J.Interceptor, MediaError: J.Interceptor, Navigator: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, PositionError: J.Interceptor, Range: J.Interceptor, SQLError: J.Interceptor, DataView: H.NativeTypedData, ArrayBufferView: H.NativeTypedData, Float32Array: H.NativeTypedArrayOfDouble, Float64Array: H.NativeTypedArrayOfDouble, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, HTMLAudioElement: W.HtmlElement, HTMLBRElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLDivElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLLIElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLLinkElement: W.HtmlElement, HTMLMediaElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLMeterElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOListElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLOptionElement: W.HtmlElement, HTMLParagraphElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLProgressElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLScriptElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSourceElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLStyleElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTableColElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLTrackElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLVideoElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, HTMLAnchorElement: W.AnchorElement, HTMLAreaElement: W.AreaElement, HTMLBaseElement: W.BaseElement, Blob: W.Blob, HTMLBodyElement: W.BodyElement, HTMLButtonElement: W.ButtonElement, HTMLCanvasElement: W.CanvasElement, CanvasRenderingContext2D: W.CanvasRenderingContext2D, CDATASection: W.CharacterData, CharacterData: W.CharacterData, Comment: W.CharacterData, ProcessingInstruction: W.CharacterData, Text: W.CharacterData, CSSStyleDeclaration: W.CssStyleDeclaration, MSStyleCSSProperties: W.CssStyleDeclaration, CSS2Properties: W.CssStyleDeclaration, DOMError: W.DomError, DOMException: W.DomException, DOMRectReadOnly: W.DomRectReadOnly, Element: W.Element0, HTMLEmbedElement: W.EmbedElement, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MessageEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, EventTarget: W.EventTarget, HTMLFieldSetElement: W.FieldSetElement, File: W.File, HTMLFormElement: W.FormElement, HTMLCollection: W.HtmlCollection, HTMLFormControlsCollection: W.HtmlCollection, HTMLOptionsCollection: W.HtmlCollection, HTMLIFrameElement: W.IFrameElement, ImageData: W.ImageData, HTMLImageElement: W.ImageElement, HTMLInputElement: W.InputElement, KeyboardEvent: W.KeyboardEvent, Location: W.Location, HTMLMapElement: W.MapElement, HTMLMetaElement: W.MetaElement, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, PointerEvent: W.MouseEvent, WheelEvent: W.MouseEvent, NavigatorUserMediaError: W.NavigatorUserMediaError, Document: W.Node, DocumentFragment: W.Node, HTMLDocument: W.Node, ShadowRoot: W.Node, XMLDocument: W.Node, DocumentType: W.Node, Node: W.Node, NodeList: W.NodeList, RadioNodeList: W.NodeList, HTMLObjectElement: W.ObjectElement, HTMLOutputElement: W.OutputElement, OverconstrainedError: W.OverconstrainedError, HTMLParamElement: W.ParamElement, HTMLSelectElement: W.SelectElement, SharedWorkerGlobalScope: W.SharedWorkerGlobalScope, HTMLSlotElement: W.SlotElement, SpeechSynthesisEvent: W.SpeechSynthesisEvent, Storage: W.Storage0, HTMLTableElement: W.TableElement, HTMLTableRowElement: W.TableRowElement, HTMLTableSectionElement: W.TableSectionElement, HTMLTemplateElement: W.TemplateElement, HTMLTextAreaElement: W.TextAreaElement, CompositionEvent: W.UIEvent, FocusEvent: W.UIEvent, TextEvent: W.UIEvent, TouchEvent: W.UIEvent, UIEvent: W.UIEvent, Window: W.Window, DOMWindow: W.Window, DedicatedWorkerGlobalScope: W.WorkerGlobalScope, ServiceWorkerGlobalScope: W.WorkerGlobalScope, WorkerGlobalScope: W.WorkerGlobalScope, Attr: W._Attr, ClientRect: W._DomRect, DOMRect: W._DomRect, NamedNodeMap: W._NamedNodeMap, MozNamedAttrMap: W._NamedNodeMap, IDBKeyRange: P.KeyRange, SVGScriptElement: P.ScriptElement, SVGAElement: P.SvgElement, SVGAnimateElement: P.SvgElement, SVGAnimateMotionElement: P.SvgElement, SVGAnimateTransformElement: P.SvgElement, SVGAnimationElement: P.SvgElement, SVGCircleElement: P.SvgElement, SVGClipPathElement: P.SvgElement, SVGDefsElement: P.SvgElement, SVGDescElement: P.SvgElement, SVGDiscardElement: P.SvgElement, SVGEllipseElement: P.SvgElement, SVGFEBlendElement: P.SvgElement, SVGFEColorMatrixElement: P.SvgElement, SVGFEComponentTransferElement: P.SvgElement, SVGFECompositeElement: P.SvgElement, SVGFEConvolveMatrixElement: P.SvgElement, SVGFEDiffuseLightingElement: P.SvgElement, SVGFEDisplacementMapElement: P.SvgElement, SVGFEDistantLightElement: P.SvgElement, SVGFEFloodElement: P.SvgElement, SVGFEFuncAElement: P.SvgElement, SVGFEFuncBElement: P.SvgElement, SVGFEFuncGElement: P.SvgElement, SVGFEFuncRElement: P.SvgElement, SVGFEGaussianBlurElement: P.SvgElement, SVGFEImageElement: P.SvgElement, SVGFEMergeElement: P.SvgElement, SVGFEMergeNodeElement: P.SvgElement, SVGFEMorphologyElement: P.SvgElement, SVGFEOffsetElement: P.SvgElement, SVGFEPointLightElement: P.SvgElement, SVGFESpecularLightingElement: P.SvgElement, SVGFESpotLightElement: P.SvgElement, SVGFETileElement: P.SvgElement, SVGFETurbulenceElement: P.SvgElement, SVGFilterElement: P.SvgElement, SVGForeignObjectElement: P.SvgElement, SVGGElement: P.SvgElement, SVGGeometryElement: P.SvgElement, SVGGraphicsElement: P.SvgElement, SVGImageElement: P.SvgElement, SVGLineElement: P.SvgElement, SVGLinearGradientElement: P.SvgElement, SVGMarkerElement: P.SvgElement, SVGMaskElement: P.SvgElement, SVGMetadataElement: P.SvgElement, SVGPathElement: P.SvgElement, SVGPatternElement: P.SvgElement, SVGPolygonElement: P.SvgElement, SVGPolylineElement: P.SvgElement, SVGRadialGradientElement: P.SvgElement, SVGRectElement: P.SvgElement, SVGSetElement: P.SvgElement, SVGStopElement: P.SvgElement, SVGStyleElement: P.SvgElement, SVGSVGElement: P.SvgElement, SVGSwitchElement: P.SvgElement, SVGSymbolElement: P.SvgElement, SVGTSpanElement: P.SvgElement, SVGTextContentElement: P.SvgElement, SVGTextElement: P.SvgElement, SVGTextPathElement: P.SvgElement, SVGTextPositioningElement: P.SvgElement, SVGTitleElement: P.SvgElement, SVGUseElement: P.SvgElement, SVGViewElement: P.SvgElement, SVGGradientElement: P.SvgElement, SVGComponentTransferFunctionElement: P.SvgElement, SVGFEDropShadowElement: P.SvgElement, SVGMPathElement: P.SvgElement, SVGElement: P.SvgElement});
    hunkHelpers.setOrUpdateLeafTags({CanvasGradient: true, CanvasPattern: true, DOMImplementation: true, MediaError: true, Navigator: true, NavigatorConcurrentHardware: true, PositionError: true, Range: true, SQLError: true, DataView: true, ArrayBufferView: false, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLDivElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLParagraphElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, HTMLAnchorElement: true, HTMLAreaElement: true, HTMLBaseElement: true, Blob: false, HTMLBodyElement: true, HTMLButtonElement: true, HTMLCanvasElement: true, CanvasRenderingContext2D: true, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, DOMError: true, DOMException: true, DOMRectReadOnly: false, Element: false, HTMLEmbedElement: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, EventTarget: false, HTMLFieldSetElement: true, File: true, HTMLFormElement: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, HTMLIFrameElement: true, ImageData: true, HTMLImageElement: true, HTMLInputElement: true, KeyboardEvent: true, Location: true, HTMLMapElement: true, HTMLMetaElement: true, MouseEvent: true, DragEvent: true, PointerEvent: true, WheelEvent: true, NavigatorUserMediaError: true, Document: true, DocumentFragment: true, HTMLDocument: true, ShadowRoot: true, XMLDocument: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, HTMLObjectElement: true, HTMLOutputElement: true, OverconstrainedError: true, HTMLParamElement: true, HTMLSelectElement: true, SharedWorkerGlobalScope: true, HTMLSlotElement: true, SpeechSynthesisEvent: true, Storage: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTextAreaElement: true, CompositionEvent: true, FocusEvent: true, TextEvent: true, TouchEvent: true, UIEvent: false, Window: true, DOMWindow: true, DedicatedWorkerGlobalScope: true, ServiceWorkerGlobalScope: true, WorkerGlobalScope: false, Attr: true, ClientRect: true, DOMRect: true, NamedNodeMap: true, MozNamedAttrMap: true, IDBKeyRange: true, SVGScriptElement: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGElement: false});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(F.main, []);
    else
      F.main([]);
  });
})();

//# sourceMappingURL=main.dart.js.map
